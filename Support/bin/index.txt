a:4:{i:0;s:12:"Superglobals";i:1;s:5:"
â€” ";i:2;s:0:"";i:3;s:188:"Several predefined variables in PHP are "superglobals", which means they are available in all scopes throughout a script. There is no need to do to access them within functions or methods.";}
a:4:{i:0;s:8:"$GLOBALS";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:162:"An associative containing references to all variables which are currently defined in the global scope of the script. The variable names are the keys of the array.";}
a:4:{i:0;s:8:"$_SERVER";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:376:"is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these; servers may omit some, or provide others not listed here. That said, a large number of these variables are accounted for in the, so you should be able to expect those.";}
a:4:{i:0;s:5:"$_GET";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:86:"An associative array of variables passed to the current script via the URL parameters.";}
a:4:{i:0;s:6:"$_POST";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:88:"An associative array of variables passed to the current script via the HTTP POST method.";}
a:4:{i:0;s:7:"$_FILES";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:80:"An associative of items uploaded to the current script via the HTTP POST method.";}
a:4:{i:0;s:9:"$_REQUEST";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:62:"An associative that by default contains the contents of, and .";}
a:4:{i:0;s:9:"$_SESSION";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:146:"An associative array containing session variables available to the current script. See the documentation for more information on how this is used.";}
a:4:{i:0;s:5:"$_ENV";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:84:"An associative of variables passed to the current script via the environment method.";}
a:4:{i:0;s:8:"$_COOKIE";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:0:"";i:3;s:74:"An associative of variables passed to the current script via HTTP Cookies.";}
a:4:{i:0;s:13:"$php_errormsg";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:131:"Warning If a user defined error handler ( set_error_handler()) is set $php_errormsg is only set if the error handler returns FALSE.";i:3;s:232:"is a variable containing the text of the last error message generated by PHP. This variable will only be available within the scope in which the error occurred, and only if the configuration option is turned on (it defaults to off).";}
a:4:{i:0;s:19:"$HTTP_RAW_POST_DATA";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"contains the raw POST data. See";}
a:4:{i:0;s:21:"$http_response_header";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:0:"";i:3;s:122:"The is similar to the function. When using the, will be populated with the HTTP response headers. will be created in the .";}
a:4:{i:0;s:5:"$argc";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:85:"Contains the number of arguments passed to the current script when running from the .";}
a:4:{i:0;s:5:"$argv";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:77:"Contains an of all the arguments passed to the script when running from the .";}
a:4:{i:0;s:22:"Exception::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:108:"public Exception::__construct() ([ string $message = "" [, int $code = 0 [, Exception $previous = NULL ]]] )";i:3;s:25:"Constructs the Exception.";}
a:4:{i:0;s:21:"Exception::getMessage";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:50:"final public string Exception::getMessage ( void )";i:3;s:30:"Returns the Exception message.";}
a:4:{i:0;s:22:"Exception::getPrevious";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:54:"final public Exception Exception::getPrevious ( void )";i:3;s:53:"Returns previous Exception (the third parameter of ).";}
a:4:{i:0;s:18:"Exception::getCode";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:46:"final public mixed Exception::getCode ( void )";i:3;s:27:"Returns the Exception code.";}
a:4:{i:0;s:18:"Exception::getFile";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:47:"final public string Exception::getFile ( void )";i:3;s:51:"Get the name of the file the exception was created.";}
a:4:{i:0;s:18:"Exception::getLine";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"final public int Exception::getLine ( void )";i:3;s:48:"Get line number where the exception was created.";}
a:4:{i:0;s:19:"Exception::getTrace";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:47:"final public array Exception::getTrace ( void )";i:3;s:34:"Returns the Exception stack trace.";}
a:4:{i:0;s:27:"Exception::getTraceAsString";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:56:"final public string Exception::getTraceAsString ( void )";i:3;s:46:"Returns the Exception stack trace as a string.";}
a:4:{i:0;s:21:"Exception::__toString";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public string Exception::__toString ( void )";i:3;s:44:"Returns the representation of the exception.";}
a:4:{i:0;s:18:"Exception::__clone";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:46:"final private void Exception::__clone ( void )";i:3;s:59:"Tries to clone the Exception, which results in Fatal error.";}
a:4:{i:0;s:27:"ErrorException::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:194:"public ErrorException::__construct() ([ string $message = "" [, int $code = 0 [, int $severity = 1 [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )";i:3;s:25:"Constructs the Exception.";}
a:4:{i:0;s:27:"ErrorException::getSeverity";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:53:"final public int ErrorException::getSeverity ( void )";i:3;s:38:"Returns the severity of the exception.";}
a:4:{i:0;s:17:"Iterator::current";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:48:"abstract public mixed Iterator::current ( void )";i:3;s:28:"Returns the current element.";}
a:4:{i:0;s:13:"Iterator::key";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:45:"abstract public scalar Iterator::key ( void )";i:3;s:39:"Returns the key of the current element.";}
a:4:{i:0;s:14:"Iterator::next";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:44:"abstract public void Iterator::next ( void )";i:3;s:47:"Moves the current position to the next element.";}
a:4:{i:0;s:16:"Iterator::rewind";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:46:"abstract public void Iterator::rewind ( void )";i:3;s:50:"Rewinds back to the first element of the Iterator.";}
a:4:{i:0;s:15:"Iterator::valid";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:48:"abstract public boolean Iterator::valid ( void )";i:3;s:74:"This method is called after and to check if the current position is valid.";}
a:4:{i:0;s:30:"IteratorAggregate::getIterator";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:67:"abstract public Traversable IteratorAggregate::getIterator ( void )";i:3;s:29:"Returns an external iterator.";}
a:4:{i:0;s:25:"ArrayAccess::offsetExists";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:67:"abstract public boolean ArrayAccess::offsetExists ( mixed $offset )";i:3;s:32:"Whether or not an offset exists.";}
a:4:{i:0;s:22:"ArrayAccess::offsetGet";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:62:"abstract public mixed ArrayAccess::offsetGet ( mixed $offset )";i:3;s:38:"Returns the value at specified offset.";}
a:4:{i:0;s:22:"ArrayAccess::offsetSet";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:75:"abstract public void ArrayAccess::offsetSet ( mixed $offset, mixed $value )";i:3;s:40:"Assigns a value to the specified offset.";}
a:4:{i:0;s:24:"ArrayAccess::offsetUnset";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:63:"abstract public void ArrayAccess::offsetUnset ( mixed $offset )";i:3;s:17:"Unsets an offset.";}
a:4:{i:0;s:23:"Serializable::serialize";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:55:"abstract public string Serializable::serialize ( void )";i:3;s:54:"Should return the string representation of the object.";}
a:4:{i:0;s:25:"Serializable::unserialize";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:69:"abstract public void Serializable::unserialize ( string $serialized )";i:3;s:44:"Called during unserialization of the object.";}
a:4:{i:0;s:20:"Closure::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:29:"Closure::__construct ( void )";i:3;s:135:"This method exists only to disallow instantiation of the class. Objects of this class are created in the fashion described on the page.";}
a:4:{i:0;s:13:"Closure::bind";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:105:"public static Closure Closure::bind ( Closure $closure, object $newthis [, mixed $newscope = 'static' ] )";i:3;s:95:"This method is a static version of . See the documentation of that method for more information.";}
a:4:{i:0;s:15:"Closure::bindTo";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:82:"public Closure Closure::bindTo ( object $newthis [, mixed $newscope = 'static' ] )";i:3;s:141:"Create and return a new with the same body and bound variables as this one, but possibly with a different bound object and a new class scope.";}
a:4:{i:0;s:18:"Generator::current";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:40:"public mixed Generator::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:14:"Generator::key";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:36:"public mixed Generator::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"Generator::next";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:36:"public void Generator::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"Generator::rewind";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:38:"public void Generator::rewind ( void )";i:3;s:61:"If iteration has already begun, this will throw an exception.";}
a:4:{i:0;s:15:"Generator::send";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:45:"public mixed Generator::send ( mixed $value )";i:3;s:116:"Sends the given value to the generator as the result of the yield expression and resumes execution of the generator.";}
a:4:{i:0;s:16:"Generator::throw";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:53:"public void Generator::throw ( Exception $exception )";i:3;s:0:"";}
a:4:{i:0;s:16:"Generator::valid";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:37:"public bool Generator::valid ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"Generator::__wakeup";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:40:"public void Generator::__wakeup ( void )";i:3;s:54:"Throws an exception as generators can't be serialized.";}
a:4:{i:0;s:22:"Socket context options";i:1;s:5:" â€” ";i:2;s:0:"";i:3;s:89:"Socket context options are available for all wrappers that work over sockets, like, and .";}
a:4:{i:0;s:20:"HTTP context options";i:1;s:5:" â€” ";i:2;s:0:"";i:3;s:35:"Context options for and transports.";}
a:4:{i:0;s:19:"FTP context options";i:1;s:5:" â€” ";i:2;s:0:"";i:3;s:35:"Context options for and transports.";}
a:4:{i:0;s:19:"SSL context options";i:1;s:5:" â€” ";i:2;s:0:"";i:3;s:35:"Context options for and transports.";}
a:4:{i:0;s:20:"CURL context options";i:1;s:5:" â€” ";i:2;s:0:"";i:3;s:94:"CURL context options are available when the extension was compiled using the configure option.";}
a:4:{i:0;s:20:"Phar context options";i:1;s:5:" â€” ";i:2;s:0:"";i:3;s:28:"Context options for wrapper.";}
a:4:{i:0;s:18:"Context parameters";i:1;s:5:" â€” ";i:2;s:0:"";i:3;s:41:"These can be set on a using the function.";}
a:4:{i:0;s:7:"file://";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:428:"is the default wrapper used with PHP and represents the local filesystem. When a relative path is specified (a path which does not begin with /, \, \\, or a Windows drive letter) the path provided will be applied against the current working directory. In many cases this is the directory in which the script resides unless it has been changed. Using the CLI sapi, this defaults to the directory from which the script was called.";}
a:4:{i:0;s:7:"http://";i:1;s:9:" --
 â€” ";i:2;s:0:"";i:3;s:265:"Allows read-only access to files/resources via HTTP 1.0, using the HTTP GET method. A header is sent with the request to handle name-based virtual hosts. If you have configured a string using your file or the stream context, it will also be included in the request.";}
a:4:{i:0;s:6:"ftp://";i:1;s:9:" --
 â€” ";i:2;s:0:"";i:3;s:146:"Allows read access to existing files and creation of new files via FTP. If the server does not support passive mode ftp, the connection will fail.";}
a:4:{i:0;s:6:"php://";i:1;s:5:" â€”
";i:2;s:649:"php://stdin, php://stdout and php://stderr php://stdin, php://stdout and php://stderr allow direct access to the corresponding input or output stream of the PHP process. The stream references a duplicate file descriptor, so if you open php://stdin and later close it, you close only your copy of the descriptor-the actual stream referenced by STDIN is unaffected. Note that PHP exhibited buggy behavior in this regard until PHP 5.2.1. It is recommended that you simply use the constants STDIN, STDOUT and STDERR instead of manually opening streams using these wrappers. php://stdin is read-only, whereas php://stdout and php://stderr are write-only.";i:3;s:303:"PHP provides a number of miscellaneous I/O streams that allow access to PHP's own input and output streams, the standard input, output and error file descriptors, in-memory and disk-backed temporary file streams, and filters that can manipulate other file resources as they are read from and written to.";}
a:4:{i:0;s:7:"zlib://";i:1;s:13:" --
 --  â€” ";i:2;s:0:"";i:3;s:53:"PHP 4.0.4 - PHP 4.2.3 (systems with fopencookie only)";}
a:4:{i:0;s:7:"data://";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:51:"The () stream wrapper is available since PHP 5.2.0.";}
a:4:{i:0;s:7:"glob://";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:48:"The stream wrapper is available since PHP 5.3.0.";}
a:4:{i:0;s:7:"phar://";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:78:"The stream wrapper is available since PHP 5.3.0. See for detailed description.";}
a:4:{i:0;s:7:"ssh2://";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:23:"PHP 4.3.0 and up (PECL)";}
a:4:{i:0;s:6:"rar://";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:304:"The wrapper takes the url encoded path to the RAR archive (relative or absolute), an optional asterik (), an optional number sign () and an optional url encoded entry name, as stored in the archive. Specifying an entry name requires the number sign; a leading forward slash in the entry name is optional.";}
a:4:{i:0;s:6:"ogg://";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:399:"Files opened for reading via the wrapper are treated as compressed audio encoded using the codec. Similarly, files opened for writing or appending via the wrapper are writen as compressed audio data., when used on an file opened for reading will return various details about the stream including the tag, any included, the number of, the sampling, and the encoding rate range described by:, ,, and .";}
a:4:{i:0;s:9:"expect://";i:1;s:5:"
â€” ";i:2;s:0:"";i:3;s:93:"Streams opened via the wrapper provide access to process'es stdio, stdout and stderr via PTY.";}
a:4:{i:0;s:7:"apc_add";i:1;s:20:"(PECL apc >= 3.0.13)";i:2;s:61:"bool apc_add ( string $key [, mixed $var [, int $ttl = 0 ]] )";i:3;s:69:"Caches a variable in the data store, only if it's not already stored.";}
a:4:{i:0;s:12:"apc_bin_dump";i:1;s:19:"(PECL apc >= 3.1.4)";i:2;s:60:"string apc_bin_dump ([ array $files [, array $user_vars ]] )";i:3;s:170:"Returns a binary dump of the given files and user variables from the APC cache. A for files or user_vars signals a dump of every entry, whereas array() will dump nothing.";}
a:4:{i:0;s:16:"apc_bin_dumpfile";i:1;s:19:"(PECL apc >= 3.1.4)";i:2;s:115:"int apc_bin_dumpfile ( array $files, array $user_vars, string $filename [, int $flags = 0 [, resource $context ]] )";i:3;s:97:"Outputs a binary dump of the given files and user variables from the APC cache to the named file.";}
a:4:{i:0;s:12:"apc_bin_load";i:1;s:19:"(PECL apc >= 3.1.4)";i:2;s:54:"bool apc_bin_load ( string $data [, int $flags = 0 ] )";i:3;s:57:"Loads the given binary dump into the APC file/user cache.";}
a:4:{i:0;s:16:"apc_bin_loadfile";i:1;s:19:"(PECL apc >= 3.1.4)";i:2;s:80:"bool apc_bin_loadfile ( string $filename [, resource $context [, int $flags ]] )";i:3;s:61:"Loads a binary dump from a file into the APC file/user cache.";}
a:4:{i:0;s:14:"apc_cache_info";i:1;s:19:"(PECL apc >= 2.0.0)";i:2;s:72:"array apc_cache_info ([ string $cache_type [, bool $limited = false ]] )";i:3;s:65:"Retrieves cached information and meta-data from APC's data store.";}
a:4:{i:0;s:7:"apc_cas";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:48:"bool apc_cas ( string $key, int $old, int $new )";i:3;s:126:"updates an already existing integer value if the parameter matches the currently stored value with the value of the parameter.";}
a:4:{i:0;s:15:"apc_clear_cache";i:1;s:19:"(PECL apc >= 2.0.0)";i:2;s:46:"bool apc_clear_cache ([ string $cache_type ] )";i:3;s:29:"Clears the user/system cache.";}
a:4:{i:0;s:16:"apc_compile_file";i:1;s:20:"(PECL apc >= 3.0.13)";i:2;s:68:"mixed apc_compile_file ( string $filename [, bool $atomic = true ] )";i:3;s:59:"Stores a file in the bytecode cache, bypassing all filters.";}
a:4:{i:0;s:7:"apc_dec";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:65:"int apc_dec ( string $key [, int $step = 1 [, bool &$success ]] )";i:3;s:33:"Decreases a stored integer value.";}
a:4:{i:0;s:20:"apc_define_constants";i:1;s:19:"(PECL apc >= 3.0.0)";i:2;s:92:"bool apc_define_constants ( string $key, array $constants [, bool $case_sensitive = true ] )";i:3;s:252:"is notoriously slow. Since the main benefit of APC is to increase the performance of scripts/applications, this mechanism is provided to streamline the process of mass constant definition. However, this function does not perform as well as anticipated.";}
a:4:{i:0;s:15:"apc_delete_file";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:37:"mixed apc_delete_file ( mixed $keys )";i:3;s:46:"Deletes the given files from the opcode cache.";}
a:4:{i:0;s:10:"apc_delete";i:1;s:19:"(PECL apc >= 3.0.0)";i:2;s:32:"mixed apc_delete ( string $key )";i:3;s:41:"Removes a stored variable from the cache.";}
a:4:{i:0;s:10:"apc_exists";i:1;s:19:"(PECL apc >= 3.1.4)";i:2;s:32:"mixed apc_exists ( mixed $keys )";i:3;s:37:"Checks if one or more APC keys exist.";}
a:4:{i:0;s:9:"apc_fetch";i:1;s:19:"(PECL apc >= 3.0.0)";i:2;s:50:"mixed apc_fetch ( mixed $key [, bool &$success ] )";i:3;s:40:"Fetchs a stored variable from the cache.";}
a:4:{i:0;s:7:"apc_inc";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:65:"int apc_inc ( string $key [, int $step = 1 [, bool &$success ]] )";i:3;s:26:"Increases a stored number.";}
a:4:{i:0;s:18:"apc_load_constants";i:1;s:19:"(PECL apc >= 3.0.0)";i:2;s:72:"bool apc_load_constants ( string $key [, bool $case_sensitive = true ] )";i:3;s:40:"Loads a set of constants from the cache.";}
a:4:{i:0;s:12:"apc_sma_info";i:1;s:19:"(PECL apc >= 2.0.0)";i:2;s:47:"array apc_sma_info ([ bool $limited = false ] )";i:3;s:53:"Retrieves APC's Shared Memory Allocation information.";}
a:4:{i:0;s:9:"apc_store";i:1;s:19:"(PECL apc >= 3.0.0)";i:2;s:60:"bool apc_store ( string $key, mixed $var [, int $ttl = 0 ] )";i:3;s:35:"Cache a variable in the data store.";}
a:4:{i:0;s:24:"APCIterator::__construct";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:131:"public APCIterator::__construct ( string $cache [, mixed $search = null [, int $format [, int $chunk_size = 100 [, int $list ]]]] )";i:3;s:15:"Constructs an .";}
a:4:{i:0;s:20:"APCIterator::current";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:42:"public mixed APCIterator::current ( void )";i:3;s:37:"Gets the current item from the stack.";}
a:4:{i:0;s:26:"APCIterator::getTotalCount";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:46:"public int APCIterator::getTotalCount ( void )";i:3;s:20:"Get the total count.";}
a:4:{i:0;s:25:"APCIterator::getTotalHits";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:45:"public int APCIterator::getTotalHits ( void )";i:3;s:36:"Gets the total number of cache hits.";}
a:4:{i:0;s:25:"APCIterator::getTotalSize";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:45:"public int APCIterator::getTotalSize ( void )";i:3;s:26:"Gets the total cache size.";}
a:4:{i:0;s:16:"APCIterator::key";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:39:"public string APCIterator::key ( void )";i:3;s:30:"Gets the current iterator key.";}
a:4:{i:0;s:17:"APCIterator::next";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:38:"public void APCIterator::next ( void )";i:3;s:47:"Moves the iterator pointer to the next element.";}
a:4:{i:0;s:19:"APCIterator::rewind";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:40:"public void APCIterator::rewind ( void )";i:3;s:47:"Rewinds back the iterator to the first element.";}
a:4:{i:0;s:18:"APCIterator::valid";i:1;s:19:"(PECL apc >= 3.1.1)";i:2;s:39:"public void APCIterator::valid ( void )";i:3;s:49:"Checks if the current iterator position is valid.";}
a:4:{i:0;s:14:"apd_breakpoint";i:1;s:17:"(PECL apd >= 0.2)";i:2;s:40:"bool apd_breakpoint ( int $debug_level )";i:3;s:189:"This can be used to stop the running of your script, and await responses on the connected socket. To step the program, just send enter (a blank line), or enter a php command to be executed.";}
a:4:{i:0;s:13:"apd_callstack";i:1;s:18:"(PECL apd 0.2-0.4)";i:2;s:28:"array apd_callstack ( void )";i:3;s:42:"Returns the current call stack as an array";}
a:4:{i:0;s:9:"apd_clunk";i:1;s:18:"(PECL apd 0.2-0.4)";i:2;s:57:"void apd_clunk ( string $warning [, string $delimiter ] )";i:3;s:54:"Behaves like perl's . Throw a warning and a callstack.";}
a:4:{i:0;s:12:"apd_continue";i:1;s:17:"(PECL apd >= 0.2)";i:2;s:38:"bool apd_continue ( int $debug_level )";i:3;s:55:"Usually sent via the socket to restart the interpreter.";}
a:4:{i:0;s:9:"apd_croak";i:1;s:18:"(PECL apd 0.2-0.4)";i:2;s:57:"void apd_croak ( string $warning [, string $delimiter ] )";i:3;s:64:"Behaves like perl's . Throw an error, a callstack and then exit.";}
a:4:{i:0;s:23:"apd_dump_function_table";i:1;s:9:"(Unknown)";i:2;s:37:"void apd_dump_function_table ( void )";i:3;s:35:"Outputs the current function table.";}
a:4:{i:0;s:29:"apd_dump_persistent_resources";i:1;s:18:"(PECL apd 0.2-0.4)";i:2;s:44:"array apd_dump_persistent_resources ( void )";i:3;s:44:"Return all persistent resources as an array.";}
a:4:{i:0;s:26:"apd_dump_regular_resources";i:1;s:18:"(PECL apd 0.2-0.4)";i:2;s:41:"array apd_dump_regular_resources ( void )";i:3;s:49:"Return all current regular resources as an array.";}
a:4:{i:0;s:8:"apd_echo";i:1;s:17:"(PECL apd >= 0.2)";i:2;s:32:"bool apd_echo ( string $output )";i:3;s:76:"Usually sent via the socket to request information about the running script.";}
a:4:{i:0;s:22:"apd_get_active_symbols";i:1;s:14:"(PECL apd 0.2)";i:2;s:37:"array apd_get_active_symbols ( void )";i:3;s:87:"Returns the names of all the variables defined in the active scope, (not their values).";}
a:4:{i:0;s:19:"apd_set_pprof_trace";i:1;s:17:"(PECL apd >= 0.2)";i:2;s:87:"string apd_set_pprof_trace ([ string $dump_directory [, string $fragment = "pprof" ]] )";i:3;s:42:"Starts debugging to in the dump directory.";}
a:4:{i:0;s:28:"apd_set_session_trace_socket";i:1;s:17:"(PECL apd >= 0.2)";i:2;s:103:"bool apd_set_session_trace_socket ( string $tcp_server, int $socket_type, int $port, int $debug_level )";i:3;s:72:"Connects to the specified (eg. ) and sends debugging data to the socket.";}
a:4:{i:0;s:21:"apd_set_session_trace";i:1;s:18:"(PECL apd 0.2-0.4)";i:2;s:75:"void apd_set_session_trace ( int $debug_level [, string $dump_directory ] )";i:3;s:42:"Starts debugging to in the dump directory.";}
a:4:{i:0;s:15:"apd_set_session";i:1;s:18:"(PECL apd 0.2-0.4)";i:2;s:41:"void apd_set_session ( int $debug_level )";i:3;s:91:"This can be used to increase or decrease debugging in a different area of your application.";}
a:4:{i:0;s:17:"override_function";i:1;s:17:"(PECL apd >= 0.2)";i:2;s:94:"bool override_function ( string $function_name, string $function_args, string $function_code )";i:3;s:67:"Overrides built-in functions by replacing them in the symbol table.";}
a:4:{i:0;s:15:"rename_function";i:1;s:17:"(PECL apd >= 0.2)";i:2;s:64:"bool rename_function ( string $original_name, string $new_name )";i:3;s:115:"Renames a orig_name to new_name in the global function table. Useful for temporarily overriding built-in functions.";}
a:4:{i:0;s:18:"bcompiler_load_exe";i:1;s:23:"(PECL bcompiler >= 0.4)";i:2;s:44:"bool bcompiler_load_exe ( string $filename )";i:3;s:76:"Reads data from a bcompiler exe file and creates classes from the bytecodes.";}
a:4:{i:0;s:14:"bcompiler_load";i:1;s:23:"(PECL bcompiler >= 0.4)";i:2;s:40:"bool bcompiler_load ( string $filename )";i:3;s:75:"Reads data from a bzcompressed file and creates classes from the bytecodes.";}
a:4:{i:0;s:21:"bcompiler_parse_class";i:1;s:23:"(PECL bcompiler >= 0.4)";i:2;s:62:"bool bcompiler_parse_class ( string $class, string $callback )";i:3;s:65:"Reads the bytecodes of a class and calls back to a user function.";}
a:4:{i:0;s:14:"bcompiler_read";i:1;s:23:"(PECL bcompiler >= 0.4)";i:2;s:44:"bool bcompiler_read ( resource $filehandle )";i:3;s:74:"Reads data from a open file handle and creates classes from the bytecodes.";}
a:4:{i:0;s:21:"bcompiler_write_class";i:1;s:23:"(PECL bcompiler >= 0.4)";i:2;s:91:"bool bcompiler_write_class ( resource $filehandle, string $className [, string $extends ] )";i:3;s:92:"Reads the bytecodes from PHP for an existing class, and writes them to the open file handle.";}
a:4:{i:0;s:24:"bcompiler_write_constant";i:1;s:23:"(PECL bcompiler >= 0.5)";i:2;s:76:"bool bcompiler_write_constant ( resource $filehandle, string $constantName )";i:3;s:95:"Reads the bytecodes from PHP for an existing constant, and writes them to the open file handle.";}
a:4:{i:0;s:26:"bcompiler_write_exe_footer";i:1;s:23:"(PECL bcompiler >= 0.4)";i:2;s:71:"bool bcompiler_write_exe_footer ( resource $filehandle, int $startpos )";i:3;s:53:"An EXE (or self executable) file consists of 3 parts:";}
a:4:{i:0;s:20:"bcompiler_write_file";i:1;s:23:"(PECL bcompiler >= 0.6)";i:2;s:68:"bool bcompiler_write_file ( resource $filehandle, string $filename )";i:3;s:101:"This function complies specified source file into bytecodes, and writes them to the open file handle.";}
a:4:{i:0;s:22:"bcompiler_write_footer";i:1;s:23:"(PECL bcompiler >= 0.4)";i:2;s:52:"bool bcompiler_write_footer ( resource $filehandle )";i:3;s:61:"Writes the single character to indicate End of compiled data.";}
a:4:{i:0;s:24:"bcompiler_write_function";i:1;s:23:"(PECL bcompiler >= 0.5)";i:2;s:76:"bool bcompiler_write_function ( resource $filehandle, string $functionName )";i:3;s:226:"Reads the bytecodes from PHP for an existing function, and writes them to the open file handle. Order is not important, (eg. if function b uses function a, and you compile it like the example below, it will work perfectly OK).";}
a:4:{i:0;s:35:"bcompiler_write_functions_from_file";i:1;s:23:"(PECL bcompiler >= 0.5)";i:2;s:83:"bool bcompiler_write_functions_from_file ( resource $filehandle, string $fileName )";i:3;s:120:"Searches for all functions declared in the given file, and writes their correspondent bytecodes to the open file handle.";}
a:4:{i:0;s:22:"bcompiler_write_header";i:1;s:23:"(PECL bcompiler >= 0.3)";i:2;s:75:"bool bcompiler_write_header ( resource $filehandle [, string $write_ver ] )";i:3;s:43:"Writes the header part of a bcompiler file.";}
a:4:{i:0;s:33:"bcompiler_write_included_filename";i:1;s:23:"(PECL bcompiler >= 0.5)";i:2;s:81:"bool bcompiler_write_included_filename ( resource $filehandle, string $filename )";i:3;s:0:"";}
a:4:{i:0;s:13:"blenc_encrypt";i:1;s:17:"(PECL blenc >= 5)";i:2;s:91:"string blenc_encrypt ( string $plaintext, string $encodedfile [, string $encryption_key ] )";i:3;s:59:"Encrypt the plaintext content and write it into encodedfile";}
a:4:{i:0;s:15:"debug_backtrace";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:93:"array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )";i:3;s:26:"generates a PHP backtrace.";}
a:4:{i:0;s:21:"debug_print_backtrace";i:1;s:7:"(PHP 5)";i:2;s:69:"void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )";i:3;s:91:"prints a PHP backtrace. It prints the function calls, included/required files and ed stuff.";}
a:4:{i:0;s:14:"error_get_last";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:29:"array error_get_last ( void )";i:3;s:52:"Gets information about the last error that occurred.";}
a:4:{i:0;s:9:"error_log";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:111:"bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )";i:3;s:66:"Sends an error message to the web server's error log or to a file.";}
a:4:{i:0;s:15:"error_reporting";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"int error_reporting ([ int $level ] )";i:3;s:233:"The function sets the directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. If the optional is not set, will just return the current error reporting level.";}
a:4:{i:0;s:21:"restore_error_handler";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:35:"bool restore_error_handler ( void )";i:3;s:151:"Used after changing the error handler function using, to revert to the previous error handler (which could be the built-in or a user defined function).";}
a:4:{i:0;s:25:"restore_exception_handler";i:1;s:7:"(PHP 5)";i:2;s:39:"bool restore_exception_handler ( void )";i:3;s:159:"Used after changing the exception handler function using, to revert to the previous exception handler (which could be the built-in or a user defined function).";}
a:4:{i:0;s:17:"set_error_handler";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:92:"mixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )";i:3;s:53:"Sets a user function () to handle errors in a script.";}
a:4:{i:0;s:21:"set_exception_handler";i:1;s:7:"(PHP 5)";i:2;s:62:"callable set_exception_handler ( callable $exception_handler )";i:3;s:131:"Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the is called.";}
a:4:{i:0;s:13:"trigger_error";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:77:"bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )";i:3;s:185:"Used to trigger a user error condition, it can be used by in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler ( ).";}
a:4:{i:0;s:10:"user_error";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:16:"inclued_get_data";i:1;s:23:"(PECL inclued >= 0.1.0)";i:2;s:31:"array inclued_get_data ( void )";i:3;s:21:"Get the inclued data.";}
a:4:{i:0;s:18:"opcache_invalidate";i:1;s:43:"(PHP 5 >= 5.5.0, PECL ZendOpcache >=
7.0.0)";i:2;s:73:"boolean opcache_invalidate ( string $script [, boolean $force = FALSE ] )";i:3;s:193:"This function invalidates a particular script from the opcode cache. If is unset or, the script will only be invalidated if the modification time of the script is newer than the cached opcodes.";}
a:4:{i:0;s:13:"opcache_reset";i:1;s:43:"(PHP 5 >= 5.5.0, PECL ZendOpcache >=
7.0.0)";i:2;s:30:"boolean opcache_reset ( void )";i:3;s:130:"This function resets the entire opcode cache. After calling, all scripts will be reloaded and reparsed the next time they are hit.";}
a:4:{i:0;s:5:"flush";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:19:"void flush ( void )";i:3;s:176:"Flushes the write buffers of PHP and whatever backend PHP is using (CGI, a web server, etc). This attempts to push current output all the way to the browser with a few caveats.";}
a:4:{i:0;s:8:"ob_clean";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:22:"void ob_clean ( void )";i:3;s:57:"This function discards the contents of the output buffer.";}
a:4:{i:0;s:12:"ob_end_clean";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"bool ob_end_clean ( void )";i:3;s:231:"This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call before as the buffer contents are discarded when is called.";}
a:4:{i:0;s:12:"ob_end_flush";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"bool ob_end_flush ( void )";i:3;s:238:"This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer's contents you have to call before as the buffer contents are discarded after is called.";}
a:4:{i:0;s:8:"ob_flush";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:22:"void ob_flush ( void )";i:3;s:198:"This function will send the contents of the output buffer (if any). If you want to further process the buffer's contents you have to call before as the buffer contents are discarded after is called.";}
a:4:{i:0;s:12:"ob_get_clean";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:28:"string ob_get_clean ( void )";i:3;s:66:"Gets the current buffer contents and delete current output buffer.";}
a:4:{i:0;s:15:"ob_get_contents";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"string ob_get_contents ( void )";i:3;s:59:"Gets the contents of the output buffer without clearing it.";}
a:4:{i:0;s:12:"ob_get_flush";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:28:"string ob_get_flush ( void )";i:3;s:80:"flushes the output buffer, return it as a string and turns off output buffering.";}
a:4:{i:0;s:13:"ob_get_length";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:26:"int ob_get_length ( void )";i:3;s:65:"This will return the length of the contents in the output buffer.";}
a:4:{i:0;s:12:"ob_get_level";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:25:"int ob_get_level ( void )";i:3;s:60:"Returns the nesting level of the output buffering mechanism.";}
a:4:{i:0;s:13:"ob_get_status";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:52:"array ob_get_status ([ bool $full_status = FALSE ] )";i:3;s:114:"returns status information on either the top level output buffer or all active output buffer levels if is set to .";}
a:4:{i:0;s:12:"ob_gzhandler";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:49:"string ob_gzhandler ( string $buffer, int $mode )";i:3;s:523:"is intended to be used as a callback function for to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before actually sends compressed data, it determines what type of content encoding the browser will accept ("gzip", "deflate" or none at all) and will return its output accordingly. All browsers are supported since it's up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn't support compressed pages this function returns .";}
a:4:{i:0;s:17:"ob_implicit_flush";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"void ob_implicit_flush ([ int $flag = true ] )";i:3;s:166:"will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to will no longer be needed.";}
a:4:{i:0;s:16:"ob_list_handlers";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:31:"array ob_list_handlers ( void )";i:3;s:33:"Lists all output handlers in use.";}
a:4:{i:0;s:8:"ob_start";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:93:"bool ob_start ([ callable $output_callback [, int $chunk_size = 0 [, bool $erase = true ]]] )";i:3;s:185:"This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.";}
a:4:{i:0;s:22:"output_add_rewrite_var";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:59:"bool output_add_rewrite_var ( string $name, string $value )";i:3;s:320:"This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with . Please note that absolute URLs (http://example.com/..) aren't rewritten.";}
a:4:{i:0;s:25:"output_reset_rewrite_vars";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:39:"bool output_reset_rewrite_vars ( void )";i:3;s:145:"This function resets the URL rewriter and removes all rewrite variables previously set by the function or the session mechanism (if was set on ).";}
a:4:{i:0;s:14:"assert_options";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"mixed assert_options ( int $what [, mixed $value ] )";i:3;s:69:"Set the various control options or just query their current settings.";}
a:4:{i:0;s:6:"assert";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"bool assert ( mixed $assertion [, string $description ] )";i:3;s:67:"will check the given and take appropriate action if its result is .";}
a:4:{i:0;s:21:"cli_get_process_title";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:37:"string cli_get_process_title ( void )";i:3;s:140:"Returns the current process title, as set by . Note that this may not exactly match what is shown in or, depending on your operating system.";}
a:4:{i:0;s:21:"cli_set_process_title";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:44:"bool cli_set_process_title ( string $title )";i:3;s:94:"Sets the process title visible in tools such as and . This function is available only in mode.";}
a:4:{i:0;s:2:"dl";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"bool dl ( string $library )";i:3;s:48:"Loads the PHP extension given by the parameter .";}
a:4:{i:0;s:16:"extension_loaded";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"bool extension_loaded ( string $name )";i:3;s:42:"Finds out whether the extension is loaded.";}
a:4:{i:0;s:17:"gc_collect_cycles";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:30:"int gc_collect_cycles ( void )";i:3;s:49:"Forces collection of any existing garbage cycles.";}
a:4:{i:0;s:10:"gc_disable";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:24:"void gc_disable ( void )";i:3;s:58:"Deactivates the circular reference collector, setting to .";}
a:4:{i:0;s:9:"gc_enable";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:23:"void gc_enable ( void )";i:3;s:56:"Activates the circular reference collector, setting to .";}
a:4:{i:0;s:10:"gc_enabled";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:24:"bool gc_enabled ( void )";i:3;s:51:"Returns status of the circular reference collector.";}
a:4:{i:0;s:11:"get_cfg_var";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"string get_cfg_var ( string $option )";i:3;s:39:"Gets the value of a PHP configuration .";}
a:4:{i:0;s:16:"get_current_user";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string get_current_user ( void )";i:3;s:56:"Returns the name of the owner of the current PHP script.";}
a:4:{i:0;s:21:"get_defined_constants";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:59:"array get_defined_constants ([ bool $categorize = false ] )";i:3;s:154:"Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the function.";}
a:4:{i:0;s:19:"get_extension_funcs";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"array get_extension_funcs ( string $module_name )";i:3;s:89:"This function returns the names of all the functions defined in the module indicated by .";}
a:4:{i:0;s:16:"get_include_path";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:32:"string get_include_path ( void )";i:3;s:44:"Gets the current configuration option value.";}
a:4:{i:0;s:18:"get_included_files";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"array get_included_files ( void )";i:3;s:65:"Gets the names of all files that have been included using, , or .";}
a:4:{i:0;s:21:"get_loaded_extensions";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"array get_loaded_extensions ([ bool $zend_extensions = false ] )";i:3;s:94:"This function returns the names of all the modules compiled and loaded in the PHP interpreter.";}
a:4:{i:0;s:20:"get_magic_quotes_gpc";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"bool get_magic_quotes_gpc ( void )";i:3;s:44:"Returns the current configuration setting of";}
a:4:{i:0;s:24:"get_magic_quotes_runtime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"bool get_magic_quotes_runtime ( void )";i:3;s:53:"Returns the current active configuration setting of .";}
a:4:{i:0;s:18:"get_required_files";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:6:"getenv";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"string getenv ( string $varname )";i:3;s:42:"Gets the value of an environment variable.";}
a:4:{i:0;s:10:"getlastmod";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:23:"int getlastmod ( void )";i:3;s:59:"Gets the time of the last modification of the current page.";}
a:4:{i:0;s:8:"getmygid";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:21:"int getmygid ( void )";i:3;s:40:"Gets the group ID of the current script.";}
a:4:{i:0;s:10:"getmyinode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:23:"int getmyinode ( void )";i:3;s:37:"Gets the inode of the current script.";}
a:4:{i:0;s:8:"getmypid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:21:"int getmypid ( void )";i:3;s:32:"Gets the current PHP process ID.";}
a:4:{i:0;s:8:"getmyuid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:21:"int getmyuid ( void )";i:3;s:39:"Gets the user ID of the current script.";}
a:4:{i:0;s:6:"getopt";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:53:"array getopt ( string $options [, array $longopts ] )";i:3;s:36:"Parses options passed to the script.";}
a:4:{i:0;s:9:"getrusage";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"array getrusage ([ int $who = 0 ] )";i:3;s:69:"This is an interface to . It gets data returned from the system call.";}
a:4:{i:0;s:9:"ini_alter";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"ini_get_all";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:67:"array ini_get_all ([ string $extension [, bool $details = true ]] )";i:3;s:49:"Returns all the registered configuration options.";}
a:4:{i:0;s:7:"ini_get";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"string ini_get ( string $varname )";i:3;s:57:"Returns the value of the configuration option on success.";}
a:4:{i:0;s:11:"ini_restore";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"void ini_restore ( string $varname )";i:3;s:60:"Restores a given configuration option to its original value.";}
a:4:{i:0;s:7:"ini_set";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"string ini_set ( string $varname, string $newvalue )";i:3;s:175:"Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.";}
a:4:{i:0;s:20:"magic_quotes_runtime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:4:"main";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:304:"There is no function named except in the PHP source. In PHP 4.3.0, a new type of error handling in the PHP source (php_error_docref) was introduced. One feature is to provide links to a manual page in PHP error messages when the PHP directives (on by default) and (on by default until PHP 4.3.2) are set.";}
a:4:{i:0;s:21:"memory_get_peak_usage";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:57:"int memory_get_peak_usage ([ bool $real_usage = false ] )";i:3;s:79:"Returns the peak of memory, in bytes, that's been allocated to your PHP script.";}
a:4:{i:0;s:16:"memory_get_usage";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:52:"int memory_get_usage ([ bool $real_usage = false ] )";i:3;s:92:"Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.";}
a:4:{i:0;s:19:"php_ini_loaded_file";i:1;s:16:"(PHP 5 >= 5.2.4)";i:2;s:35:"string php_ini_loaded_file ( void )";i:3;s:49:"Check if a file is loaded, and retrieve its path.";}
a:4:{i:0;s:21:"php_ini_scanned_files";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:37:"string php_ini_scanned_files ( void )";i:3;s:160:"returns a comma-separated list of configuration files parsed after . These files are found in a directory defined by the option which is set during compilation.";}
a:4:{i:0;s:13:"php_logo_guid";i:1;s:20:"(PHP 4, PHP 5 < 5.5)";i:2;s:29:"string php_logo_guid ( void )";i:3;s:129:"This function returns the ID which can be used to display the PHP logo using the built-in image. Logo is displayed only if is On.";}
a:4:{i:0;s:13:"php_sapi_name";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:29:"string php_sapi_name ( void )";i:3;s:280:"Returns a lowercase string that describes the type of interface (the Server API, SAPI) that PHP is using. For example, in CLI PHP this string will be "cli" whereas with Apache it may have several different values depending on the exact SAPI used. Possible values are listed below.";}
a:4:{i:0;s:9:"php_uname";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:42:"string php_uname ([ string $mode = "a" ] )";i:3;s:276:"returns a description of the operating system PHP is running on. This is the same string you see at the very top of the output. For the name of just the operating system, consider using the constant, but keep in mind this constant will contain the operating system PHP was on.";}
a:4:{i:0;s:10:"phpcredits";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"bool phpcredits ([ int $flag = CREDITS_ALL ] )";i:3;s:155:"This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.";}
a:4:{i:0;s:7:"phpinfo";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"bool phpinfo ([ int $what = INFO_ALL ] )";i:3;s:357:"Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.";}
a:4:{i:0;s:10:"phpversion";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"string phpversion ([ string $extension ] )";i:3;s:89:"Returns a string containing the version of the currently running PHP parser or extension.";}
a:4:{i:0;s:6:"putenv";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"bool putenv ( string $setting )";i:3;s:190:"Adds to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state.";}
a:4:{i:0;s:20:"restore_include_path";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:34:"void restore_include_path ( void )";i:3;s:77:"Restores the configuration option back to its original master value as set in";}
a:4:{i:0;s:16:"set_include_path";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:52:"string set_include_path ( string $new_include_path )";i:3;s:61:"Sets the configuration option for the duration of the script.";}
a:4:{i:0;s:24:"set_magic_quotes_runtime";i:1;s:22:"(PHP 4, PHP 5 < 5.4.0)";i:2;s:51:"bool set_magic_quotes_runtime ( bool $new_setting )";i:3;s:49:"Set the current active configuration setting of .";}
a:4:{i:0;s:14:"set_time_limit";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"void set_time_limit ( int $seconds )";i:3;s:184:"Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the value defined in the .";}
a:4:{i:0;s:16:"sys_get_temp_dir";i:1;s:16:"(PHP 5 >= 5.2.1)";i:2;s:32:"string sys_get_temp_dir ( void )";i:3;s:75:"Returns the path of the directory PHP stores temporary files in by default.";}
a:4:{i:0;s:15:"version_compare";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:82:"mixed version_compare ( string $version1, string $version2 [, string $operator ] )";i:3;s:144:"compares two "PHP-standardized" version number strings. This is useful if you would like to write programs working only on some versions of PHP.";}
a:4:{i:0;s:14:"zend_logo_guid";i:1;s:20:"(PHP 4, PHP 5 < 5.5)";i:2;s:30:"string zend_logo_guid ( void )";i:3;s:97:"This function returns the ID which can be used to display the Zend logo using the built-in image.";}
a:4:{i:0;s:14:"zend_thread_id";i:1;s:7:"(PHP 5)";i:2;s:27:"int zend_thread_id ( void )";i:3;s:65:"This function returns a unique identifier for the current thread.";}
a:4:{i:0;s:12:"zend_version";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"string zend_version ( void )";i:3;s:77:"Returns a string containing the version of the currently running Zend Engine.";}
a:4:{i:0;s:14:"Runkit_Sandbox";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:0:"";i:3;s:284:"Instantiating the class creates a new thread with its own scope and program stack. Using a set of options passed to the constructor, this environment may be restricted to a subset of what the primary interpreter can do and provide a safer environment for executing user supplied code.";}
a:4:{i:0;s:21:"Runkit_Sandbox_Parent";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:48:"void Runkit_Sandbox_Parent::__construct ( void )";i:3;s:155:"Instantiating the class from within a sandbox environment created from the class provides some (controlled) means for a sandbox child to access its parent.";}
a:4:{i:0;s:18:"runkit_class_adopt";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:65:"bool runkit_class_adopt ( string $classname, string $parentname )";i:3;s:0:"";}
a:4:{i:0;s:23:"runkit_class_emancipate";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:50:"bool runkit_class_emancipate ( string $classname )";i:3;s:0:"";}
a:4:{i:0;s:19:"runkit_constant_add";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:60:"bool runkit_constant_add ( string $constname, mixed $value )";i:3;s:0:"";}
a:4:{i:0;s:24:"runkit_constant_redefine";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:68:"bool runkit_constant_redefine ( string $constname, mixed $newvalue )";i:3;s:0:"";}
a:4:{i:0;s:22:"runkit_constant_remove";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:49:"bool runkit_constant_remove ( string $constname )";i:3;s:0:"";}
a:4:{i:0;s:19:"runkit_function_add";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:76:"bool runkit_function_add ( string $funcname, string $arglist, string $code )";i:3;s:0:"";}
a:4:{i:0;s:20:"runkit_function_copy";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:66:"bool runkit_function_copy ( string $funcname, string $targetname )";i:3;s:0:"";}
a:4:{i:0;s:24:"runkit_function_redefine";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:81:"bool runkit_function_redefine ( string $funcname, string $arglist, string $code )";i:3;s:0:"";}
a:4:{i:0;s:22:"runkit_function_remove";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:48:"bool runkit_function_remove ( string $funcname )";i:3;s:0:"";}
a:4:{i:0;s:22:"runkit_function_rename";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:65:"bool runkit_function_rename ( string $funcname, string $newname )";i:3;s:0:"";}
a:4:{i:0;s:13:"runkit_import";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:85:"bool runkit_import ( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ] )";i:3;s:269:"Similar to however any code residing outside of a function or class is simply ignored. Additionally, depending on the value of, any functions or classes which already exist in the currently running environment will be automatically overwritten by their new definitions.";}
a:4:{i:0;s:16:"runkit_lint_file";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:42:"bool runkit_lint_file ( string $filename )";i:3;s:153:"The function performs a syntax (lint) check on the specified filename testing for scripting errors. This is similar to using php -l from the commandline.";}
a:4:{i:0;s:11:"runkit_lint";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:33:"bool runkit_lint ( string $code )";i:3;s:197:"The function performs a syntax (lint) check on the specified php code testing for scripting errors. This is similar to using from the command line except accepts actual code rather than a filename.";}
a:4:{i:0;s:17:"runkit_method_add";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:128:"bool runkit_method_add ( string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"runkit_method_copy";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:96:"bool runkit_method_copy ( string $dClass, string $dMethod, string $sClass [, string $sMethod ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"runkit_method_redefine";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:133:"bool runkit_method_redefine ( string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )";i:3;s:0:"";}
a:4:{i:0;s:20:"runkit_method_remove";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:67:"bool runkit_method_remove ( string $classname, string $methodname )";i:3;s:0:"";}
a:4:{i:0;s:20:"runkit_method_rename";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:84:"bool runkit_method_rename ( string $classname, string $methodname, string $newname )";i:3;s:0:"";}
a:4:{i:0;s:24:"runkit_return_value_used";i:1;s:22:"(PECL runkit >= 0.8.0)";i:2;s:38:"bool runkit_return_value_used ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"runkit_sandbox_output_handler";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:76:"mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )";i:3;s:233:"Ordinarily, anything output (such as with or ) will be output as though it were printed from the parent's scope. Using however, output generated by the sandbox (including errors), can be captured by a function outside of the sandbox.";}
a:4:{i:0;s:19:"runkit_superglobals";i:1;s:22:"(PECL runkit >= 0.7.0)";i:2;s:34:"array runkit_superglobals ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"Weakref::acquire";i:1;s:23:"(PECL weakref >= 0.1.0)";i:2;s:37:"public bool Weakref::acquire ( void )";i:3;s:99:"Acquires a strong reference on that object, virtually turning the weak reference into a strong one.";}
a:4:{i:0;s:20:"Weakref::__construct";i:1;s:23:"(PECL weakref >= 0.1.0)";i:2;s:51:"public Weakref::__construct() ([ object $object ] )";i:3;s:32:"Constructs a new weak reference.";}
a:4:{i:0;s:12:"Weakref::get";i:1;s:23:"(PECL weakref >= 0.1.0)";i:2;s:35:"public object Weakref::get ( void )";i:3;s:52:"Returns the object pointed to by the weak reference.";}
a:4:{i:0;s:16:"Weakref::release";i:1;s:23:"(PECL weakref >= 0.1.0)";i:2;s:37:"public bool Weakref::release ( void )";i:3;s:108:"Releases a previously acquired reference. Potentially turning a strong reference back into a weak reference.";}
a:4:{i:0;s:14:"Weakref::valid";i:1;s:23:"(PECL weakref >= 0.1.0)";i:2;s:35:"public bool Weakref::valid ( void )";i:3;s:50:"Checks whether the object referenced still exists.";}
a:4:{i:0;s:20:"WeakMap::__construct";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:36:"public WeakMap::__construct ( void )";i:3;s:21:"Constructs a new map.";}
a:4:{i:0;s:14:"WeakMap::count";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:34:"public int WeakMap::count ( void )";i:3;s:45:"Counts the number of live entries in the map.";}
a:4:{i:0;s:16:"WeakMap::current";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:38:"public mixed WeakMap::current ( void )";i:3;s:55:"Returns the current value being iterated on in the map.";}
a:4:{i:0;s:12:"WeakMap::key";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:35:"public object WeakMap::key ( void )";i:3;s:80:"Returns the object serving as key in the map, at the current iterating position.";}
a:4:{i:0;s:13:"WeakMap::next";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:34:"public void WeakMap::next ( void )";i:3;s:33:"Advances to the next map element.";}
a:4:{i:0;s:21:"WeakMap::offsetExists";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:52:"public bool WeakMap::offsetExists ( object $object )";i:3;s:58:"Checks whether the passed object is referenced in the map.";}
a:4:{i:0;s:18:"WeakMap::offsetGet";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:50:"public mixed WeakMap::offsetGet ( object $object )";i:3;s:49:"Returns the value pointed to by a certain object.";}
a:4:{i:0;s:18:"WeakMap::offsetSet";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:63:"public void WeakMap::offsetSet ( object $object, mixed $value )";i:3;s:121:"Updates the map with a new key-value pair. If the key already existed in the map, the old value is replaced with the new.";}
a:4:{i:0;s:20:"WeakMap::offsetUnset";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:51:"public void WeakMap::offsetUnset ( object $object )";i:3;s:30:"Removes an entry from the map.";}
a:4:{i:0;s:15:"WeakMap::rewind";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:36:"public void WeakMap::rewind ( void )";i:3;s:49:"Rewinds the iterator to the beginning of the map.";}
a:4:{i:0;s:14:"WeakMap::valid";i:1;s:23:"(PECL weakref >= 0.2.0)";i:2;s:35:"public bool WeakMap::valid ( void )";i:3;s:61:"Returns whether the iterator is still on a valid map element.";}
a:4:{i:0;s:24:"wincache_fcache_fileinfo";i:1;s:24:"(PECL wincache >= 1.0.0)";i:2;s:63:"array wincache_fcache_fileinfo ([ bool $summaryonly = false ] )";i:3;s:61:"Retrieves information about file cache content and its usage.";}
a:4:{i:0;s:23:"wincache_fcache_meminfo";i:1;s:24:"(PECL wincache >= 1.0.0)";i:2;s:38:"array wincache_fcache_meminfo ( void )";i:3;s:55:"Retrieves information about memory usage by file cache.";}
a:4:{i:0;s:13:"wincache_lock";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:62:"bool wincache_lock ( string $key [, bool $isglobal = false ] )";i:3;s:292:"Obtains an exclusive lock on a given key. The execution of the current script will be blocked until the lock can be obtained. Once the lock is obtained, the other scripts that try to request the lock by using the same key will be blocked, until the current script releases the lock by using .";}
a:4:{i:0;s:24:"wincache_ocache_fileinfo";i:1;s:24:"(PECL wincache >= 1.0.0)";i:2;s:63:"array wincache_ocache_fileinfo ([ bool $summaryonly = false ] )";i:3;s:63:"Retrieves information about opcode cache content and its usage.";}
a:4:{i:0;s:23:"wincache_ocache_meminfo";i:1;s:24:"(PECL wincache >= 1.0.0)";i:2;s:38:"array wincache_ocache_meminfo ( void )";i:3;s:57:"Retrieves information about memory usage by opcode cache.";}
a:4:{i:0;s:27:"wincache_refresh_if_changed";i:1;s:24:"(PECL wincache >= 1.0.0)";i:2;s:52:"bool wincache_refresh_if_changed ([ array $files ] )";i:3;s:162:"Refreshes the cache entries for the files, whose names were passed in the input argument. If no argument is specified then refreshes all the entries in the cache.";}
a:4:{i:0;s:24:"wincache_rplist_fileinfo";i:1;s:24:"(PECL wincache >= 1.0.0)";i:2;s:63:"array wincache_rplist_fileinfo ([ bool $summaryonly = false ] )";i:3;s:110:"Retrieves information about cached mappings between relative file paths and corresponding absolute file paths.";}
a:4:{i:0;s:23:"wincache_rplist_meminfo";i:1;s:24:"(PECL wincache >= 1.0.0)";i:2;s:38:"array wincache_rplist_meminfo ( void )";i:3;s:68:"Retrieves information about memory usage by resolve file path cache.";}
a:4:{i:0;s:20:"wincache_scache_info";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:59:"array wincache_scache_info ([ bool $summaryonly = false ] )";i:3;s:64:"Retrieves information about session cache content and its usage.";}
a:4:{i:0;s:23:"wincache_scache_meminfo";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:38:"array wincache_scache_meminfo ( void )";i:3;s:58:"Retrieves information about memory usage by session cache.";}
a:4:{i:0;s:19:"wincache_ucache_add";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:72:"bool wincache_ucache_add ( string $key, mixed $value [, int $ttl = 0 ] )";i:3;s:205:"Adds a variable in user cache, only if this variable doesn't already exist in the cache. The added variable remains in the user cache unless its time to live expires or it is deleted by using or functions.";}
a:4:{i:0;s:19:"wincache_ucache_cas";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:72:"bool wincache_ucache_cas ( string $key, int $old_value, int $new_value )";i:3;s:88:"Compares the variable associated with the with and if it matches then assigns the to it.";}
a:4:{i:0;s:21:"wincache_ucache_clear";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:35:"bool wincache_ucache_clear ( void )";i:3;s:55:"Clears/deletes all the values stored in the user cache.";}
a:4:{i:0;s:19:"wincache_ucache_dec";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:81:"mixed wincache_ucache_dec ( string $key [, int $dec_by = 1 [, bool &$success ]] )";i:3;s:66:"Decrements the value associated with the by 1 or as specified by .";}
a:4:{i:0;s:22:"wincache_ucache_delete";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:42:"bool wincache_ucache_delete ( mixed $key )";i:3;s:51:"Deletes the elements in the user cache pointed by .";}
a:4:{i:0;s:22:"wincache_ucache_exists";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:43:"bool wincache_ucache_exists ( string $key )";i:3;s:62:"Checks if a variable with the exists in the user cache or not.";}
a:4:{i:0;s:19:"wincache_ucache_get";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:60:"mixed wincache_ucache_get ( mixed $key [, bool &$success ] )";i:3;s:41:"Gets a variable stored in the user cache.";}
a:4:{i:0;s:19:"wincache_ucache_inc";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:81:"mixed wincache_ucache_inc ( string $key [, int $inc_by = 1 [, bool &$success ]] )";i:3;s:66:"Increments the value associated with the by 1 or as specified by .";}
a:4:{i:0;s:20:"wincache_ucache_info";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:75:"array wincache_ucache_info ([ bool $summaryonly = false [, string $key ]] )";i:3;s:58:"Retrieves information about data stored in the user cache.";}
a:4:{i:0;s:23:"wincache_ucache_meminfo";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:38:"array wincache_ucache_meminfo ( void )";i:3;s:55:"Retrieves information about memory usage by user cache.";}
a:4:{i:0;s:19:"wincache_ucache_set";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:71:"bool wincache_ucache_set ( mixed $key, mixed $value [, int $ttl = 0 ] )";i:3;s:215:"Adds a variable in user cache. Overwrites a variable if it already exists in the cache. The added or updated variable remains in the user cache unless its time to live expires or it is deleted by using or functions.";}
a:4:{i:0;s:15:"wincache_unlock";i:1;s:24:"(PECL wincache >= 1.1.0)";i:2;s:36:"bool wincache_unlock ( string $key )";i:3;s:183:"Releases an exclusive lock that was obtained on a given key by using . If any other process was blocked waiting for the lock on this key, that process will be able to obtain the lock.";}
a:4:{i:0;s:14:"xhprof_disable";i:1;s:22:"(PECL xhprof >= 0.9.0)";i:2;s:29:"array xhprof_disable ( void )";i:3;s:57:"Stops the profiler, and returns xhprof data from the run.";}
a:4:{i:0;s:13:"xhprof_enable";i:1;s:22:"(PECL xhprof >= 0.9.0)";i:2;s:59:"void xhprof_enable ([ int $flags = 0 [, array $options ]] )";i:3;s:23:"Start xhprof profiling.";}
a:4:{i:0;s:21:"xhprof_sample_disable";i:1;s:22:"(PECL xhprof >= 0.9.0)";i:2;s:36:"array xhprof_sample_disable ( void )";i:3;s:42:"Stops the sample mode xhprof profiler, and";}
a:4:{i:0;s:20:"xhprof_sample_enable";i:1;s:22:"(PECL xhprof >= 0.9.0)";i:2;s:34:"void xhprof_sample_enable ( void )";i:3;s:262:"Starts profiling in sample mode, which is a lighter weight version of . The sampling interval is 0.1 seconds, and samples record the full function call stack. The main use case is when lower overhead is required when doing performance monitoring and diagnostics.";}
a:4:{i:0;s:23:"id3_get_frame_long_name";i:1;s:17:"(PECL id3 >= 0.2)";i:2;s:50:"string id3_get_frame_long_name ( string $frameId )";i:3;s:41:"returns the long name for an ID3v2 frame.";}
a:4:{i:0;s:24:"id3_get_frame_short_name";i:1;s:17:"(PECL id3 >= 0.2)";i:2;s:51:"string id3_get_frame_short_name ( string $frameId )";i:3;s:42:"returns the short name for an ID3v2 frame.";}
a:4:{i:0;s:16:"id3_get_genre_id";i:1;s:17:"(PECL id3 >= 0.1)";i:2;s:38:"int id3_get_genre_id ( string $genre )";i:3;s:27:"returns the id for a genre.";}
a:4:{i:0;s:18:"id3_get_genre_list";i:1;s:17:"(PECL id3 >= 0.1)";i:2;s:33:"array id3_get_genre_list ( void )";i:3;s:151:"returns an array containing all possible genres that may be stored in an ID3 tag. This list has been created by Eric Kemp and later extended by WinAmp.";}
a:4:{i:0;s:18:"id3_get_genre_name";i:1;s:17:"(PECL id3 >= 0.1)";i:2;s:43:"string id3_get_genre_name ( int $genre_id )";i:3;s:32:"returns the name for a genre id.";}
a:4:{i:0;s:11:"id3_get_tag";i:1;s:17:"(PECL id3 >= 0.1)";i:2;s:67:"array id3_get_tag ( string $filename [, int $version = ID3_BEST ] )";i:3;s:75:"is used to get all information stored in the id3 tag of the specified file.";}
a:4:{i:0;s:15:"id3_get_version";i:1;s:17:"(PECL id3 >= 0.1)";i:2;s:40:"int id3_get_version ( string $filename )";i:3;s:59:"retrieves the version(s) of the ID3 tag(s) in the MP3 file.";}
a:4:{i:0;s:14:"id3_remove_tag";i:1;s:17:"(PECL id3 >= 0.1)";i:2;s:69:"bool id3_remove_tag ( string $filename [, int $version = ID3_V1_0 ] )";i:3;s:55:"is used to remove the information stored of an ID3 tag.";}
a:4:{i:0;s:11:"id3_set_tag";i:1;s:17:"(PECL id3 >= 0.1)";i:2;s:78:"bool id3_set_tag ( string $filename, array $tag [, int $version = ID3_V1_0 ] )";i:3;s:113:"is used to change the information stored of an ID3 tag. If no tag has been present, it will be added to the file.";}
a:4:{i:0;s:30:"KTaglib_MPEG_File::__construct";i:1;s:7:"(0.0.1)";i:2;s:60:"public KTaglib_MPEG_File::__construct() ( string $filename )";i:3;s:22:"Opens a new MPEG file.";}
a:4:{i:0;s:37:"KTaglib_MPEG_File::getAudioProperties";i:1;s:7:"(0.0.1)";i:2;s:71:"public KTaglib_MPEG_File KTaglib_MPEG_File::getAudioProperties ( void )";i:3;s:80:"Returns an object that provides access to the audio properties of the mpeg file.";}
a:4:{i:0;s:30:"KTaglib_MPEG_File::getID3v1Tag";i:1;s:7:"(0.0.1)";i:2;s:83:"public KTaglib_ID3v1_Tag KTaglib_MPEG_File::getID3v1Tag ([ bool $create = false ] )";i:3;s:105:"Returns an object that represents an ID3v1 tag, which can be used to get information about the ID3v1 tag.";}
a:4:{i:0;s:30:"KTaglib_MPEG_File::getID3v2Tag";i:1;s:7:"(0.0.1)";i:2;s:83:"public KTaglib_ID3v2_Tag KTaglib_MPEG_File::getID3v2Tag ([ bool $create = false ] )";i:3;s:112:"Returns a ID3v2 object for the mpeg file. If no ID3v2 Tag is present, an KTaglib_TagNotFoundException is thrown.";}
a:4:{i:0;s:40:"KTaglib_MPEG_AudioProperties::getBitrate";i:1;s:7:"(0.0.1)";i:2;s:60:"public int KTaglib_MPEG_AudioProperties::getBitrate ( void )";i:3;s:36:"Returns the bitrate of the MPEG file";}
a:4:{i:0;s:41:"KTaglib_MPEG_AudioProperties::getChannels";i:1;s:7:"(0.0.1)";i:2;s:61:"public int KTaglib_MPEG_AudioProperties::getChannels ( void )";i:3;s:47:"Returns the amount of channels of the MPEG file";}
a:4:{i:0;s:38:"KTaglib_MPEG_AudioProperties::getLayer";i:1;s:7:"(0.0.1)";i:2;s:58:"public int KTaglib_MPEG_AudioProperties::getLayer ( void )";i:3;s:55:"Returns the layer of the MPEG file (usually 3 for MP3).";}
a:4:{i:0;s:39:"KTaglib_MPEG_AudioProperties::getLength";i:1;s:7:"(0.0.1)";i:2;s:59:"public int KTaglib_MPEG_AudioProperties::getLength ( void )";i:3;s:35:"Returns the length of the MPEG file";}
a:4:{i:0;s:47:"
KTaglib_MPEG_AudioProperties::getSampleBitrate";i:1;s:7:"(0.0.1)";i:2;s:66:"public int KTaglib_MPEG_AudioProperties::getSampleBitrate ( void )";i:3;s:43:"Returns the sample bitrate of the MPEG file";}
a:4:{i:0;s:40:"KTaglib_MPEG_AudioProperties::getVersion";i:1;s:7:"(0.0.1)";i:2;s:60:"public int KTaglib_MPEG_AudioProperties::getVersion ( void )";i:3;s:131:"Returns the version of the MPEG file header. The possible versions are defined in Tag_MPEG_Header (Version1, Version2, Version2.5).";}
a:4:{i:0;s:44:"
KTaglib_MPEG_AudioProperties::isCopyrighted";i:1;s:7:"(0.0.1)";i:2;s:64:"public bool KTaglib_MPEG_AudioProperties::isCopyrighted ( void )";i:3;s:44:"Returns true if the MPEG file is copyrighted";}
a:4:{i:0;s:40:"KTaglib_MPEG_AudioProperties::isOriginal";i:1;s:7:"(0.0.1)";i:2;s:61:"public bool KTaglib_MPEG_AudioProperties::isOriginal ( void )";i:3;s:55:"Returns true if the file is marked as the original file";}
a:4:{i:0;s:50:"
KTaglib_MPEG_AudioProperties::isProtectionEnabled";i:1;s:7:"(0.0.1)";i:2;s:70:"public bool KTaglib_MPEG_AudioProperties::isProtectionEnabled ( void )";i:3;s:74:"Returns true if protection mechanisms (like DRM) are enabled for this file";}
a:4:{i:0;s:21:"KTaglib_Tag::getAlbum";i:1;s:7:"(0.0.1)";i:2;s:44:"public string KTaglib_Tag::getAlbum ( void )";i:3;s:91:"Returns the album string of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:22:"KTaglib_Tag::getArtist";i:1;s:7:"(0.0.1)";i:2;s:45:"public string KTaglib_Tag::getArtist ( void )";i:3;s:92:"Returns the artist string of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:23:"KTaglib_Tag::getComment";i:1;s:7:"(0.0.1)";i:2;s:46:"public string KTaglib_Tag::getComment ( void )";i:3;s:86:"Returns the comment of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:21:"KTaglib_Tag::getGenre";i:1;s:7:"(0.0.1)";i:2;s:44:"public string KTaglib_Tag::getGenre ( void )";i:3;s:84:"Returns the genre of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:21:"KTaglib_Tag::getTitle";i:1;s:7:"(0.0.1)";i:2;s:44:"public string KTaglib_Tag::getTitle ( void )";i:3;s:91:"Returns the title string of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:21:"KTaglib_Tag::getTrack";i:1;s:7:"(0.0.1)";i:2;s:41:"public int KTaglib_Tag::getTrack ( void )";i:3;s:91:"Returns the track number of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:20:"KTaglib_Tag::getYear";i:1;s:7:"(0.0.1)";i:2;s:40:"public int KTaglib_Tag::getYear ( void )";i:3;s:83:"Returns the year of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:20:"KTaglib_Tag::isEmpty";i:1;s:7:"(0.0.1)";i:2;s:41:"public bool KTaglib_Tag::isEmpty ( void )";i:3;s:97:"Returns true if the tag exists, but is empty. This method is implemented in ID3v1 and ID3v2 tags.";}
a:4:{i:0;s:27:"KTaglib_ID3v2_Tag::addFrame";i:1;s:7:"(0.0.1)";i:2;s:70:"public bool KTaglib_ID3v2_Tag::addFrame ( KTaglib_ID3v2_Frame $frame )";i:3;s:140:"Adds a frame to the ID3v2 tag. The frame must be a valid KTaglib_ID3v2_Frame object. To save the tag, the save function needs to be invoked.";}
a:4:{i:0;s:31:"KTaglib_ID3v2_Tag::getFrameList";i:1;s:7:"(0.0.1)";i:2;s:53:"public array KTaglib_ID3v2_Tag::getFrameList ( void )";i:3;s:64:"Returns an array of ID3v2 frames, associated with the ID3v2 tag.";}
a:4:{i:0;s:28:"KTaglib_ID3v2_Frame::getSize";i:1;s:7:"(0.0.1)";i:2;s:48:"public int KTaglib_ID3v2_Frame::getSize ( void )";i:3;s:118:"Returns the size of the frame in bytes. Please refer to id3.org to see what ID3v2 frames are and how they are defined.";}
a:4:{i:0;s:31:"KTaglib_ID3v2_Frame::__toString";i:1;s:7:"(0.0.1)";i:2;s:54:"public string KTaglib_ID3v2_Frame::__toString ( void )";i:3;s:172:"Returns a string representation of the frame. This might be just the frame id, but might contain more information. Please see the ktaglib documentation for more information";}
a:4:{i:0;s:51:"
KTaglib_ID3v2_AttachedPictureFrame::getDescription";i:1;s:7:"(0.0.1)";i:2;s:73:"public string KTaglib_ID3v2_AttachedPictureFrame::getDescription ( void )";i:3;s:73:"Returns the attached description for a picture frame in an ID3v2.x frame.";}
a:4:{i:0;s:48:"
KTaglib_ID3v2_AttachedPictureFrame::getMimeType";i:1;s:7:"(0.2.0)";i:2;s:70:"public string KTaglib_ID3v2_AttachedPictureFrame::getMimeType ( void )";i:3;s:77:"Returns the mime type of the image represented by the attached picture frame.";}
a:4:{i:0;s:44:"
KTaglib_ID3v2_AttachedPictureFrame::getType";i:1;s:7:"(0.2.0)";i:2;s:63:"public int KTaglib_ID3v2_AttachedPictureFrame::getType ( void )";i:3;s:30:"Returns the type of the image.";}
a:4:{i:0;s:48:"
KTaglib_ID3v2_AttachedPictureFrame::savePicture";i:1;s:7:"(0.0.1)";i:2;s:80:"public bool KTaglib_ID3v2_AttachedPictureFrame::savePicture ( string $filename )";i:3;s:49:"Saves the attached picture to the given filename.";}
a:4:{i:0;s:48:"
KTaglib_ID3v2_AttachedPictureFrame::setMimeType";i:1;s:7:"(0.2.0)";i:2;s:78:"public string KTaglib_ID3v2_AttachedPictureFrame::getMimeType ( string $type )";i:3;s:90:"Sets the mime type of the image. This should in most cases be "image/png" or "image/jpeg".";}
a:4:{i:0;s:47:"
KTaglib_ID3v2_AttachedPictureFrame::setPicture";i:1;s:7:"(0.0.1)";i:2;s:79:"public void KTaglib_ID3v2_AttachedPictureFrame::setPicture ( string $filename )";i:3;s:188:"Sets the picture to the give image. The image is loaded from the given filename. Please note that the picture is not saved unless you call the save method of the corresponding file object.";}
a:4:{i:0;s:44:"
KTaglib_ID3v2_AttachedPictureFrame::setType";i:1;s:7:"(0.2.0)";i:2;s:69:"public void KTaglib_ID3v2_AttachedPictureFrame::setType ( int $type )";i:3;s:200:"Sets the type of the image. This can be e.g. FrontCover or FileIcon. Please refer to the KTaglib_ID3v2_AttachedPictureFrame class description for a list of available types and their constant mappings.";}
a:4:{i:0;s:20:"openal_buffer_create";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:38:"resource openal_buffer_create ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"openal_buffer_data";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:82:"bool openal_buffer_data ( resource $buffer, int $format, string $data, int $freq )";i:3;s:0:"";}
a:4:{i:0;s:21:"openal_buffer_destroy";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:47:"bool openal_buffer_destroy ( resource $buffer )";i:3;s:0:"";}
a:4:{i:0;s:17:"openal_buffer_get";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:57:"int openal_buffer_get ( resource $buffer, int $property )";i:3;s:0:"";}
a:4:{i:0;s:21:"openal_buffer_loadwav";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:64:"bool openal_buffer_loadwav ( resource $buffer, string $wavfile )";i:3;s:0:"";}
a:4:{i:0;s:21:"openal_context_create";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:51:"resource openal_context_create ( resource $device )";i:3;s:0:"";}
a:4:{i:0;s:22:"openal_context_current";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:49:"bool openal_context_current ( resource $context )";i:3;s:0:"";}
a:4:{i:0;s:22:"openal_context_destroy";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:49:"bool openal_context_destroy ( resource $context )";i:3;s:0:"";}
a:4:{i:0;s:22:"openal_context_process";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:49:"bool openal_context_process ( resource $context )";i:3;s:0:"";}
a:4:{i:0;s:22:"openal_context_suspend";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:49:"bool openal_context_suspend ( resource $context )";i:3;s:0:"";}
a:4:{i:0;s:19:"openal_device_close";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:45:"bool openal_device_close ( resource $device )";i:3;s:0:"";}
a:4:{i:0;s:18:"openal_device_open";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:54:"resource openal_device_open ([ string $device_desc ] )";i:3;s:0:"";}
a:4:{i:0;s:19:"openal_listener_get";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:43:"mixed openal_listener_get ( int $property )";i:3;s:0:"";}
a:4:{i:0;s:19:"openal_listener_set";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:58:"bool openal_listener_set ( int $property, mixed $setting )";i:3;s:0:"";}
a:4:{i:0;s:20:"openal_source_create";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:38:"resource openal_source_create ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"openal_source_destroy";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:47:"bool openal_source_destroy ( resource $source )";i:3;s:0:"";}
a:4:{i:0;s:17:"openal_source_get";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:59:"mixed openal_source_get ( resource $source, int $property )";i:3;s:0:"";}
a:4:{i:0;s:19:"openal_source_pause";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:45:"bool openal_source_pause ( resource $source )";i:3;s:0:"";}
a:4:{i:0;s:18:"openal_source_play";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:44:"bool openal_source_play ( resource $source )";i:3;s:0:"";}
a:4:{i:0;s:20:"openal_source_rewind";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:46:"bool openal_source_rewind ( resource $source )";i:3;s:0:"";}
a:4:{i:0;s:17:"openal_source_set";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:74:"bool openal_source_set ( resource $source, int $property, mixed $setting )";i:3;s:0:"";}
a:4:{i:0;s:18:"openal_source_stop";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:44:"bool openal_source_stop ( resource $source )";i:3;s:0:"";}
a:4:{i:0;s:13:"openal_stream";i:1;s:22:"(PECL openal >= 0.1.0)";i:2;s:67:"resource openal_stream ( resource $source, int $format, int $rate )";i:3;s:0:"";}
a:4:{i:0;s:22:"kadm5_chpass_principal";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:85:"bool kadm5_chpass_principal ( resource $handle, string $principal, string $password )";i:3;s:31:"sets the new password for the .";}
a:4:{i:0;s:22:"kadm5_create_principal";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:108:"bool kadm5_create_principal ( resource $handle, string $principal [, string $password [, array $options ]] )";i:3;s:26:"Creates a with the given .";}
a:4:{i:0;s:22:"kadm5_delete_principal";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:67:"bool kadm5_delete_principal ( resource $handle, string $principal )";i:3;s:39:"Removes the from the Kerberos database.";}
a:4:{i:0;s:13:"kadm5_destroy";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:39:"bool kadm5_destroy ( resource $handle )";i:3;s:77:"Closes the connection to the admin server and releases all related resources.";}
a:4:{i:0;s:11:"kadm5_flush";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:37:"bool kadm5_flush ( resource $handle )";i:3;s:101:"Flush all changes to the Kerberos database, leaving the connection to the Kerberos admin server open.";}
a:4:{i:0;s:18:"kadm5_get_policies";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:45:"array kadm5_get_policies ( resource $handle )";i:3;s:46:"Gets an array containing the policies's names.";}
a:4:{i:0;s:19:"kadm5_get_principal";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:65:"array kadm5_get_principal ( resource $handle, string $principal )";i:3;s:56:"Gets the principal's entries from the Kerberos database.";}
a:4:{i:0;s:20:"kadm5_get_principals";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:47:"array kadm5_get_principals ( resource $handle )";i:3;s:51:"returns an array containing the principals's names.";}
a:4:{i:0;s:24:"kadm5_init_with_password";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:110:"resource kadm5_init_with_password ( string $admin_server, string $realm, string $principal, string $password )";i:3;s:106:"Opens a connection with the KADM5 library using the and the given to obtain initial credentials from the .";}
a:4:{i:0;s:22:"kadm5_modify_principal";i:1;s:21:"(PECL kadm5 >= 0.2.3)";i:2;s:83:"bool kadm5_modify_principal ( resource $handle, string $principal, array $options )";i:3;s:35:"Modifies a according to the given .";}
a:4:{i:0;s:16:"radius_acct_open";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:34:"resource radius_acct_open ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"radius_add_server";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:125:"bool radius_add_server ( resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries )";i:3;s:255:"may be called multiple times, and it may be used together with . At most 10 servers may be specified. When multiple servers are given, they are tried in round-robin fashion until a valid response is received, or until each server's limit has been reached.";}
a:4:{i:0;s:16:"radius_auth_open";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:34:"resource radius_auth_open ( void )";i:3;s:0:"";}
a:4:{i:0;s:12:"radius_close";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:45:"bool radius_close ( resource $radius_handle )";i:3;s:98:"It is not needed to call this function because php frees all resources at the end of each request.";}
a:4:{i:0;s:13:"radius_config";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:60:"bool radius_config ( resource $radius_handle, string $file )";i:3;s:230:"Before issuing any Radius requests, the library must be made aware of the servers it can contact. The easiest way to configure the library is to call . causes the library to read a configuration file whose format is described in .";}
a:4:{i:0;s:21:"radius_create_request";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:65:"bool radius_create_request ( resource $radius_handle, int $type )";i:3;s:177:"A Radius request consists of a code specifying the kind of request, and zero or more attributes which provide additional information. To begin constructing a new request, call .";}
a:4:{i:0;s:15:"radius_cvt_addr";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:39:"string radius_cvt_addr ( string $data )";i:3;s:0:"";}
a:4:{i:0;s:14:"radius_cvt_int";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:35:"int radius_cvt_int ( string $data )";i:3;s:0:"";}
a:4:{i:0;s:17:"radius_cvt_string";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:41:"string radius_cvt_string ( string $data )";i:3;s:0:"";}
a:4:{i:0;s:24:"radius_demangle_mppe_key";i:1;s:22:"(PECL radius >= 1.2.0)";i:2;s:76:"string radius_demangle_mppe_key ( resource $radius_handle, string $mangled )";i:3;s:191:"When using MPPE with MS-CHAPv2, the send- and recv-keys are mangled (see ), however this function is useless, because I don't think that there is or will be a PPTP-MPPE implementation in PHP.";}
a:4:{i:0;s:15:"radius_demangle";i:1;s:22:"(PECL radius >= 1.2.0)";i:2;s:67:"string radius_demangle ( resource $radius_handle, string $mangled )";i:3;s:122:"Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for security reasons, and must be demangled before you can use them.";}
a:4:{i:0;s:15:"radius_get_attr";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:49:"mixed radius_get_attr ( resource $radius_handle )";i:3;s:250:"Like Radius requests, each response may contain zero or more attributes. After a response has been received successfully by, its attributes can be extracted one by one using . Each time is called, it gets the next attribute from the current response.";}
a:4:{i:0;s:27:"radius_get_tagged_attr_data";i:1;s:22:"(PECL radius >= 1.3.0)";i:2;s:51:"string radius_get_tagged_attr_data ( string $data )";i:3;s:86:"If a tagged attribute has been returned from, will return the data from the attribute.";}
a:4:{i:0;s:26:"radius_get_tagged_attr_tag";i:1;s:22:"(PECL radius >= 1.3.0)";i:2;s:51:"integer radius_get_tagged_attr_tag ( string $data )";i:3;s:85:"If a tagged attribute has been returned from, will return the tag from the attribute.";}
a:4:{i:0;s:22:"radius_get_vendor_attr";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:45:"array radius_get_vendor_attr ( string $data )";i:3;s:50:"If returns, may be called to determine the vendor.";}
a:4:{i:0;s:15:"radius_put_addr";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:108:"bool radius_put_addr ( resource $radius_handle, int $type, string $addr [, int $options = 0 [, int $tag ]] )";i:3;s:63:"Attaches an IP address attribute to the current RADIUS request.";}
a:4:{i:0;s:15:"radius_put_attr";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:109:"bool radius_put_attr ( resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag ]] )";i:3;s:58:"Attaches a binary attribute to the current RADIUS request.";}
a:4:{i:0;s:14:"radius_put_int";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:105:"bool radius_put_int ( resource $radius_handle, int $type, int $value [, int $options = 0 [, int $tag ]] )";i:3;s:60:"Attaches an integer attribute to the current RADIUS request.";}
a:4:{i:0;s:17:"radius_put_string";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:111:"bool radius_put_string ( resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag ]] )";i:3;s:151:"Attaches a string attribute to the current RADIUS request. In general, is a more useful function for attaching string attributes, as it is binary safe.";}
a:4:{i:0;s:22:"radius_put_vendor_addr";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:93:"bool radius_put_vendor_addr ( resource $radius_handle, int $vendor, int $type, string $addr )";i:3;s:79:"Attaches an IP address vendor specific attribute to the current RADIUS request.";}
a:4:{i:0;s:22:"radius_put_vendor_attr";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:129:"bool radius_put_vendor_attr ( resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag ]] )";i:3;s:74:"Attaches a vendor specific binary attribute to the current RADIUS request.";}
a:4:{i:0;s:21:"radius_put_vendor_int";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:125:"bool radius_put_vendor_int ( resource $radius_handle, int $vendor, int $type, int $value [, int $options = 0 [, int $tag ]] )";i:3;s:75:"Attaches a vendor specific integer attribute to the current RADIUS request.";}
a:4:{i:0;s:24:"radius_put_vendor_string";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:131:"bool radius_put_vendor_string ( resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag ]] )";i:3;s:167:"Attaches a vendor specific string attribute to the current RADIUS request. In general, is a more useful function for attaching string attributes, as it is binary safe.";}
a:4:{i:0;s:28:"radius_request_authenticator";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:63:"string radius_request_authenticator ( resource $radius_handle )";i:3;s:99:"The request authenticator is needed for demangling mangled data like passwords and encryption-keys.";}
a:4:{i:0;s:24:"radius_salt_encrypt_attr";i:1;s:22:"(PECL radius >= 1.3.0)";i:2;s:73:"string radius_salt_encrypt_attr ( resource $radius_handle, string $data )";i:3;s:64:"Applies the RADIUS salt-encryption algorithm to the given value.";}
a:4:{i:0;s:19:"radius_send_request";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:51:"int radius_send_request ( resource $radius_handle )";i:3;s:62:"After the Radius request has been constructed, it is sent by .";}
a:4:{i:0;s:20:"radius_server_secret";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:55:"string radius_server_secret ( resource $radius_handle )";i:3;s:99:"The shared secret is needed as salt for demangling mangled data like passwords and encryption-keys.";}
a:4:{i:0;s:15:"radius_strerror";i:1;s:22:"(PECL radius >= 1.1.0)";i:2;s:50:"string radius_strerror ( resource $radius_handle )";i:3;s:115:"If Radius-functions fail then they record an error message. This error message can be retrieved with this function.";}
a:4:{i:0;s:17:"cal_days_in_month";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:62:"int cal_days_in_month ( int $calendar, int $month, int $year )";i:3;s:74:"This function will return the number of days in the of for the specified .";}
a:4:{i:0;s:11:"cal_from_jd";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:44:"array cal_from_jd ( int $jd, int $calendar )";i:3;s:93:"converts the Julian day given in into a date of the specified . Supported values are, , and .";}
a:4:{i:0;s:8:"cal_info";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:40:"array cal_info ([ int $calendar = -1 ] )";i:3;s:38:"returns information on the specified .";}
a:4:{i:0;s:9:"cal_to_jd";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:64:"int cal_to_jd ( int $calendar, int $month, int $day, int $year )";i:3;s:86:"calculates the Julian day count for a date in the specified . Supported s are, , and .";}
a:4:{i:0;s:11:"easter_date";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"int easter_date ([ int $year ] )";i:3;s:81:"Returns the Unix timestamp corresponding to midnight on Easter of the given year.";}
a:4:{i:0;s:11:"easter_days";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"int easter_days ([ int $year [, int $method = CAL_EASTER_DEFAULT ]] )";i:3;s:135:"Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed.";}
a:4:{i:0;s:10:"FrenchToJD";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"int frenchtojd ( int $month, int $day, int $year )";i:3;s:74:"Converts a date from the French Republican Calendar to a Julian Day Count.";}
a:4:{i:0;s:13:"GregorianToJD";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"int gregoriantojd ( int $month, int $day, int $year )";i:3;s:57:"Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.";}
a:4:{i:0;s:11:"JDDayOfWeek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )";i:3;s:85:"Returns the day of the week. Can return a string or an integer depending on the mode.";}
a:4:{i:0;s:11:"JDMonthName";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"string jdmonthname ( int $julianday, int $mode )";i:3;s:161:"Returns a string containing a month name. tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned.";}
a:4:{i:0;s:10:"JDToFrench";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"string jdtofrench ( int $juliandaycount )";i:3;s:62:"Converts a Julian Day Count to the French Republican Calendar.";}
a:4:{i:0;s:13:"JDToGregorian";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"string jdtogregorian ( int $julianday )";i:3;s:102:"Converts Julian Day Count to a string containing the Gregorian date in the format of "month/day/year".";}
a:4:{i:0;s:10:"jdtojewish";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"string jdtojewish ( int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]] )";i:3;s:51:"Converts a Julian Day Count to the Jewish Calendar.";}
a:4:{i:0;s:10:"JDToJulian";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"string jdtojulian ( int $julianday )";i:3;s:108:"Converts Julian Day Count to a string containing the Julian Calendar Date in the format of "month/day/year".";}
a:4:{i:0;s:8:"jdtounix";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int jdtounix ( int $jday )";i:3;s:168:"This function will return a Unix timestamp corresponding to the Julian Day given in or if is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588";}
a:4:{i:0;s:10:"JewishToJD";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"int jewishtojd ( int $month, int $day, int $year )";i:3;s:319:"Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.";}
a:4:{i:0;s:10:"JulianToJD";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"int juliantojd ( int $month, int $day, int $year )";i:3;s:54:"Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.";}
a:4:{i:0;s:8:"unixtojd";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"int unixtojd ([ int $timestamp = time() ] )";i:3;s:97:"Return the Julian Day for a Unix (seconds since 1.1.1970), or for the current day if no is given.";}
a:4:{i:0;s:13:"DateTime::add";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:56:"public DateTime DateTime::add ( DateInterval $interval )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"DateTime::__construct";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:92:"public DateTime::__construct() ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"DateTime::createFromFormat";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:110:"public static DateTime DateTime::createFromFormat ( string $format, string $time [, DateTimeZone $timezone ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"DateTime::getLastErrors";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:52:"public static array DateTime::getLastErrors ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:16:"DateTime::modify";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:51:"public DateTime DateTime::modify ( string $modify )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"DateTime::__set_state";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:61:"public static DateTime DateTime::__set_state ( array $array )";i:3;s:12:"The handler.";}
a:4:{i:0;s:17:"DateTime::setDate";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:69:"public DateTime DateTime::setDate ( int $year, int $month, int $day )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"DateTime::setISODate";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:79:"public DateTime DateTime::setISODate ( int $year, int $week [, int $day = 1 ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"DateTime::setTime";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:81:"public DateTime DateTime::setTime ( int $hour, int $minute [, int $second = 0 ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"DateTime::setTimestamp";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:61:"public DateTime DateTime::setTimestamp ( int $unixtimestamp )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"DateTime::setTimezone";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:64:"public DateTime DateTime::setTimezone ( DateTimeZone $timezone )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:13:"DateTime::sub";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:56:"public DateTime DateTime::sub ( DateInterval $interval )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"DateTimeImmutable::add";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:74:"public DateTimeImmutable DateTimeImmutable::add ( DateInterval $interval )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:30:"DateTimeImmutable::__construct";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:101:"public DateTimeImmutable::__construct() ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:35:"DateTimeImmutable::createFromFormat";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:128:"public static DateTimeImmutable DateTimeImmutable::createFromFormat ( string $format, string $time [, DateTimeZone $timezone ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:32:"DateTimeImmutable::getLastErrors";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:61:"public static array DateTimeImmutable::getLastErrors ( void )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:25:"DateTimeImmutable::modify";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:69:"public DateTimeImmutable DateTimeImmutable::modify ( string $modify )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:30:"DateTimeImmutable::__set_state";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:79:"public static DateTimeImmutable DateTimeImmutable::__set_state ( array $array )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:26:"DateTimeImmutable::setDate";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:87:"public DateTimeImmutable DateTimeImmutable::setDate ( int $year, int $month, int $day )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:29:"DateTimeImmutable::setISODate";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:97:"public DateTimeImmutable DateTimeImmutable::setISODate ( int $year, int $week [, int $day = 1 ] )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:26:"DateTimeImmutable::setTime";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:99:"public DateTimeImmutable DateTimeImmutable::setTime ( int $hour, int $minute [, int $second = 0 ] )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:31:"DateTimeImmutable::setTimestamp";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:79:"public DateTimeImmutable DateTimeImmutable::setTimestamp ( int $unixtimestamp )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:30:"DateTimeImmutable::setTimezone";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:82:"public DateTimeImmutable DateTimeImmutable::setTimezone ( DateTimeZone $timezone )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:22:"DateTimeImmutable::sub";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:74:"public DateTimeImmutable DateTimeImmutable::sub ( DateInterval $interval )";i:3;s:21:"Like but works with .";}
a:4:{i:0;s:14:"DateTime::diff";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:95:"public DateInterval DateTime::diff ( DateTimeInterface $datetime2 [, bool $absolute = false ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:16:"DateTime::format";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:49:"public string DateTime::format ( string $format )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"DateTime::getOffset";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:39:"public int DateTime::getOffset ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"DateTime::getTimestamp";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:42:"public int DateTime::getTimestamp ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"DateTime::getTimezone";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:50:"public DateTimeZone DateTime::getTimezone ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"DateTime::__wakeup";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:34:"public DateTime::__wakeup ( void )";i:3;s:12:"The handler.";}
a:4:{i:0;s:25:"DateTimeZone::__construct";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:55:"public DateTimeZone::__construct() ( string $timezone )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"DateTimeZone::getLocation";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public array DateTimeZone::getLocation ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"DateTimeZone::getName";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:44:"public string DateTimeZone::getName ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"DateTimeZone::getOffset";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:57:"public int DateTimeZone::getOffset ( DateTime $datetime )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"DateTimeZone::getTransitions";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:92:"public array DateTimeZone::getTransitions ([ int $timestamp_begin [, int $timestamp_end ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:31:"DateTimeZone::listAbbreviations";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:60:"public static array DateTimeZone::listAbbreviations ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"DateTimeZone::listIdentifiers";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:113:"public static array DateTimeZone::listIdentifiers ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"DateInterval::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:60:"public DateInterval::__construct() ( string $interval_spec )";i:3;s:34:"Creates a new DateInterval object.";}
a:4:{i:0;s:34:"DateInterval::createFromDateString";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:78:"public static DateInterval DateInterval::createFromDateString ( string $time )";i:3;s:101:"Uses the normal date parsers and sets up a DateInterval from the relative parts of the parsed string.";}
a:4:{i:0;s:20:"DateInterval::format";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public string DateInterval::format ( string $format )";i:3;s:21:"Formats the interval.";}
a:4:{i:0;s:23:"DatePeriod::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:112:"public DatePeriod::__construct() ( DateTime $start, DateInterval $interval, int $recurrences [, int $options ] )";i:3;s:32:"Creates a new DatePeriod object.";}
a:4:{i:0;s:9:"checkdate";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"bool checkdate ( int $month, int $day, int $year )";i:3;s:122:"Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.";}
a:4:{i:0;s:8:"date_add";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:23:"date_create_from_format";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:33:"date_create_immutable_from_format";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:21:"date_create_immutable";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:11:"date_create";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:13:"date_date_set";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:25:"date_default_timezone_get";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"string date_default_timezone_get ( void )";i:3;s:70:"In order of preference, this function returns the default timezone by:";}
a:4:{i:0;s:25:"date_default_timezone_set";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:62:"bool date_default_timezone_set ( string $timezone_identifier )";i:3;s:58:"sets the default timezone used by all date/time functions.";}
a:4:{i:0;s:9:"date_diff";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:11:"date_format";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:20:"date_get_last_errors";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:37:"date_interval_create_from_date_string";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:20:"date_interval_format";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:16:"date_isodate_set";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:11:"date_modify";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:15:"date_offset_get";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:22:"date_parse_from_format";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:61:"array date_parse_from_format ( string $format, string $date )";i:3;s:62:"Returns associative array with detailed info about given date.";}
a:4:{i:0;s:10:"date_parse";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:33:"array date_parse ( string $date )";i:3;s:0:"";}
a:4:{i:0;s:8:"date_sub";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:13:"date_sun_info";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:68:"array date_sun_info ( int $time, float $latitude, float $longitude )";i:3;s:0:"";}
a:4:{i:0;s:12:"date_sunrise";i:1;s:7:"(PHP 5)";i:2;s:265:"mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0 ]]]]] )";i:3;s:72:"returns the sunrise time for a given day (specified as a ) and location.";}
a:4:{i:0;s:11:"date_sunset";i:1;s:7:"(PHP 5)";i:2;s:263:"mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0 ]]]]] )";i:3;s:71:"returns the sunset time for a given day (specified as a ) and location.";}
a:4:{i:0;s:13:"date_time_set";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:18:"date_timestamp_get";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:18:"date_timestamp_set";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:17:"date_timezone_get";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:17:"date_timezone_set";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:4:"date";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:59:"string date ( string $format [, int $timestamp = time() ] )";i:3;s:192:"Returns a string formatted according to the given format string using the given integer or the current time if no timestamp is given. In other words, is optional and defaults to the value of .";}
a:4:{i:0;s:7:"getdate";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"array getdate ([ int $timestamp = time() ] )";i:3;s:104:"Returns an associative containing the date information of the, or the current local time if no is given.";}
a:4:{i:0;s:12:"gettimeofday";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"mixed gettimeofday ([ bool $return_float = false ] )";i:3;s:123:"This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.";}
a:4:{i:0;s:6:"gmdate";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"string gmdate ( string $format [, int $timestamp = time() ] )";i:3;s:85:"Identical to the function except that the time returned is Greenwich Mean Time (GMT).";}
a:4:{i:0;s:8:"gmmktime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:208:"int gmmktime ([ int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1 ]]]]]]] )";i:3;s:135:"Identical to except the passed parameters represents a GMT date. internally uses so only times valid in derived local time can be used.";}
a:4:{i:0;s:10:"gmstrftime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"string gmstrftime ( string $format [, int $timestamp = time() ] )";i:3;s:239:"Behaves the same as except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00", while the second prints "Jan 01 1999 01:00:00".";}
a:4:{i:0;s:5:"idate";i:1;s:7:"(PHP 5)";i:2;s:57:"int idate ( string $format [, int $timestamp = time() ] )";i:3;s:198:"Returns a number formatted according to the given format string using the given integer or the current local time if no timestamp is given. In other words, is optional and defaults to the value of .";}
a:4:{i:0;s:9:"localtime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:79:"array localtime ([ int $timestamp = time() [, bool $is_associative = false ]] )";i:3;s:97:"The function returns an array identical to that of the structure returned by the C function call.";}
a:4:{i:0;s:9:"microtime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"mixed microtime ([ bool $get_as_float = false ] )";i:3;s:151:"returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.";}
a:4:{i:0;s:6:"mktime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:194:"int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1 ]]]]]]] )";i:3;s:207:"Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.";}
a:4:{i:0;s:8:"strftime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"string strftime ( string $format [, int $timestamp = time() ] )";i:3;s:156:"Format the time and/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with .";}
a:4:{i:0;s:8:"strptime";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:47:"array strptime ( string $date, string $format )";i:3;s:46:"returns an array with the parsed, or on error.";}
a:4:{i:0;s:9:"strtotime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"int strtotime ( string $time [, int $now = time() ] )";i:3;s:266:"The function expects to be given a string containing an English date format and will try to parse that format into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given in, or the current time if is not supplied.";}
a:4:{i:0;s:4:"time";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:17:"int time ( void )";i:3;s:110:"Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).";}
a:4:{i:0;s:27:"timezone_abbreviations_list";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:25:"timezone_identifiers_list";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:21:"timezone_location_get";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:23:"timezone_name_from_abbr";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:92:"string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )";i:3;s:0:"";}
a:4:{i:0;s:17:"timezone_name_get";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:19:"timezone_offset_get";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:13:"timezone_open";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:24:"timezone_transitions_get";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:20:"timezone_version_get";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:36:"string timezone_version_get ( void )";i:3;s:46:"Returns the current version of the timezonedb.";}
a:4:{i:0;s:13:"ncurses_addch";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"int ncurses_addch ( int $ch )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_addchnstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:43:"int ncurses_addchnstr ( string $s, int $n )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_addchstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:34:"int ncurses_addchstr ( string $s )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_addnstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:41:"int ncurses_addnstr ( string $s, int $n )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_addstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"int ncurses_addstr ( string $text )";i:3;s:0:"";}
a:4:{i:0;s:29:"ncurses_assume_default_colors";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:54:"int ncurses_assume_default_colors ( int $fg, int $bg )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_attroff";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_attroff ( int $attributes )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_attron";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:38:"int ncurses_attron ( int $attributes )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_attrset";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_attrset ( int $attributes )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_baudrate";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"int ncurses_baudrate ( void )";i:3;s:0:"";}
a:4:{i:0;s:12:"ncurses_beep";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:25:"int ncurses_beep ( void )";i:3;s:73:"sends an audible alert (bell) and if its not possible flashes the screen.";}
a:4:{i:0;s:12:"ncurses_bkgd";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:34:"int ncurses_bkgd ( int $attrchar )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_bkgdset";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:38:"void ncurses_bkgdset ( int $attrchar )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_border";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:131:"int ncurses_border ( int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner )";i:3;s:61:"Draws the specified lines and corners around the main window.";}
a:4:{i:0;s:20:"ncurses_bottom_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:44:"int ncurses_bottom_panel ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:24:"ncurses_can_change_color";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:38:"bool ncurses_can_change_color ( void )";i:3;s:178:"Checks whether the terminal has color capabilities and whether the programmer can change color definitions using . ncurses must be initialized using before calling this function.";}
a:4:{i:0;s:14:"ncurses_cbreak";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:28:"bool ncurses_cbreak ( void )";i:3;s:178:"Disables line buffering and character processing (interrupt and flow control characters are unaffected), making characters typed by the user immediately available to the program.";}
a:4:{i:0;s:13:"ncurses_clear";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:27:"bool ncurses_clear ( void )";i:3;s:52:"Clears the screen completely without setting blanks.";}
a:4:{i:0;s:16:"ncurses_clrtobot";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"bool ncurses_clrtobot ( void )";i:3;s:122:"Erases all lines from cursor to end of screen and creates blanks. Blanks created by have the current background rendition.";}
a:4:{i:0;s:16:"ncurses_clrtoeol";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"bool ncurses_clrtoeol ( void )";i:3;s:113:"Erases the current line from cursor position to the end. Blanks created by have the current background rendition.";}
a:4:{i:0;s:21:"ncurses_color_content";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:67:"int ncurses_color_content ( int $color, int &$r, int &$g, int &$b )";i:3;s:162:"Retrieves the red, green, and blue components for the given color definition. Terminal color capabilities must be initialized with prior to calling this function.";}
a:4:{i:0;s:17:"ncurses_color_set";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"int ncurses_color_set ( int $pair )";i:3;s:216:"Sets the active foreground and background colors. Any characters written after this function is invoked will have these colors. This function requires terminal colors to be supported and initialized using beforehand.";}
a:4:{i:0;s:16:"ncurses_curs_set";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:40:"int ncurses_curs_set ( int $visibility )";i:3;s:0:"";}
a:4:{i:0;s:21:"ncurses_def_prog_mode";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"bool ncurses_def_prog_mode ( void )";i:3;s:69:"Saves the current terminal modes for program (in curses) for use by .";}
a:4:{i:0;s:22:"ncurses_def_shell_mode";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:36:"bool ncurses_def_shell_mode ( void )";i:3;s:71:"Saves the current terminal modes for shell (not in curses) for use by .";}
a:4:{i:0;s:18:"ncurses_define_key";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:59:"int ncurses_define_key ( string $definition, int $keycode )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_del_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:42:"bool ncurses_del_panel ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:20:"ncurses_delay_output";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:46:"int ncurses_delay_output ( int $milliseconds )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_delch";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:27:"bool ncurses_delch ( void )";i:3;s:229:"Deletes the character under the cursor. All characters to the right of the cursor on the same line are moved to the left one position and the last character on the line is filled with a blank. The cursor position does not change.";}
a:4:{i:0;s:16:"ncurses_deleteln";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"bool ncurses_deleteln ( void )";i:3;s:173:"Deletes the current line under cursorposition. All lines below the current line are moved up one line. The bottom line of window is cleared. Cursor position does not change.";}
a:4:{i:0;s:14:"ncurses_delwin";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:40:"bool ncurses_delwin ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_doupdate";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"bool ncurses_doupdate ( void )";i:3;s:145:"Compares the virtual screen to the physical screen and updates the physical screen. This way is more effective than using multiple refresh calls.";}
a:4:{i:0;s:12:"ncurses_echo";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:26:"bool ncurses_echo ( void )";i:3;s:63:"Enables echo mode. All characters typed by user are echoed by .";}
a:4:{i:0;s:16:"ncurses_echochar";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_echochar ( int $character )";i:3;s:0:"";}
a:4:{i:0;s:11:"ncurses_end";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:24:"int ncurses_end ( void )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_erase";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:27:"bool ncurses_erase ( void )";i:3;s:38:"Fills the terminal screen with blanks.";}
a:4:{i:0;s:17:"ncurses_erasechar";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:33:"string ncurses_erasechar ( void )";i:3;s:36:"Returns the current erase character.";}
a:4:{i:0;s:14:"ncurses_filter";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:28:"void ncurses_filter ( void )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_flash";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:27:"bool ncurses_flash ( void )";i:3;s:75:"Flashes the screen, and if its not possible, sends an audible alert (bell).";}
a:4:{i:0;s:16:"ncurses_flushinp";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"bool ncurses_flushinp ( void )";i:3;s:88:"Throws away any typeahead that has been typed and has not yet been read by your program.";}
a:4:{i:0;s:13:"ncurses_getch";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:26:"int ncurses_getch ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_getmaxyx";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:60:"void ncurses_getmaxyx ( resource $window, int &$y, int &$x )";i:3;s:76:"Gets the horizontal and vertical size of the given into the given variables.";}
a:4:{i:0;s:16:"ncurses_getmouse";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:40:"bool ncurses_getmouse ( array &$mevent )";i:3;s:31:"reads mouse event out of queue.";}
a:4:{i:0;s:13:"ncurses_getyx";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:57:"void ncurses_getyx ( resource $window, int &$y, int &$x )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_halfdelay";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:36:"int ncurses_halfdelay ( int $tenth )";i:3;s:0:"";}
a:4:{i:0;s:18:"ncurses_has_colors";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:32:"bool ncurses_has_colors ( void )";i:3;s:181:"Checks whether the terminal has color capabilities. This function can be used to write terminal-independent programs. ncurses must be initialized using before calling this function.";}
a:4:{i:0;s:14:"ncurses_has_ic";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:28:"bool ncurses_has_ic ( void )";i:3;s:63:"Checks whether the terminal has insert and delete capabilities.";}
a:4:{i:0;s:14:"ncurses_has_il";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:28:"bool ncurses_has_il ( void )";i:3;s:69:"Checks whether the terminal has insert- and delete-line-capabilities.";}
a:4:{i:0;s:15:"ncurses_has_key";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:36:"int ncurses_has_key ( int $keycode )";i:3;s:0:"";}
a:4:{i:0;s:18:"ncurses_hide_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:42:"int ncurses_hide_panel ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_hline";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:43:"int ncurses_hline ( int $charattr, int $n )";i:3;s:0:"";}
a:4:{i:0;s:12:"ncurses_inch";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:28:"string ncurses_inch ( void )";i:3;s:48:"Returns the character from the current position.";}
a:4:{i:0;s:18:"ncurses_init_color";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:61:"int ncurses_init_color ( int $color, int $r, int $g, int $b )";i:3;s:167:"Defines or redefines the given color. When this function is called, all occurrences of the given color on the screen, if any, immediately change to the new definition.";}
a:4:{i:0;s:17:"ncurses_init_pair";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:53:"int ncurses_init_pair ( int $pair, int $fg, int $bg )";i:3;s:232:"Defines or redefines the given color pair to have the given foreground and background colors. If the color pair was previously initialized, the screen is refreshed and all occurrences of it are changed to reflect the new definition.";}
a:4:{i:0;s:12:"ncurses_init";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:26:"void ncurses_init ( void )";i:3;s:101:"Initializes the ncurses interface. This function must be used before any other ncurses function call.";}
a:4:{i:0;s:13:"ncurses_insch";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:36:"int ncurses_insch ( int $character )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_insdelln";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"int ncurses_insdelln ( int $count )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_insertln";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"int ncurses_insertln ( void )";i:3;s:72:"Inserts a new line above the current line. The bottom line will be lost.";}
a:4:{i:0;s:14:"ncurses_insstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"int ncurses_insstr ( string $text )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_instr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:37:"int ncurses_instr ( string &$buffer )";i:3;s:136:"Reads a string from the terminal screen and returns the number of characters read from the current character position until end of line.";}
a:4:{i:0;s:16:"ncurses_isendwin";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"bool ncurses_isendwin ( void )";i:3;s:36:"Checks if ncurses is in endwin mode.";}
a:4:{i:0;s:13:"ncurses_keyok";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:48:"int ncurses_keyok ( int $keycode, bool $enable )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_keypad";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:49:"int ncurses_keypad ( resource $window, bool $bf )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_killchar";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:32:"string ncurses_killchar ( void )";i:3;s:40:"Returns the current line kill character.";}
a:4:{i:0;s:16:"ncurses_longname";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:32:"string ncurses_longname ( void )";i:3;s:46:"Returns a verbose description of the terminal.";}
a:4:{i:0;s:12:"ncurses_meta";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:49:"int ncurses_meta ( resource $window, bool $8bit )";i:3;s:0:"";}
a:4:{i:0;s:19:"ncurses_mouse_trafo";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:61:"bool ncurses_mouse_trafo ( int &$y, int &$x, bool $toscreen )";i:3;s:0:"";}
a:4:{i:0;s:21:"ncurses_mouseinterval";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:47:"int ncurses_mouseinterval ( int $milliseconds )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_mousemask";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:53:"int ncurses_mousemask ( int $newmask, int &$oldmask )";i:3;s:78:"Sets mouse events to be reported. By default no mouse events will be reported.";}
a:4:{i:0;s:18:"ncurses_move_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:68:"int ncurses_move_panel ( resource $panel, int $startx, int $starty )";i:3;s:0:"";}
a:4:{i:0;s:12:"ncurses_move";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"int ncurses_move ( int $y, int $x )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_mvaddch";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:46:"int ncurses_mvaddch ( int $y, int $x, int $c )";i:3;s:0:"";}
a:4:{i:0;s:19:"ncurses_mvaddchnstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:61:"int ncurses_mvaddchnstr ( int $y, int $x, string $s, int $n )";i:3;s:0:"";}
a:4:{i:0;s:18:"ncurses_mvaddchstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:52:"int ncurses_mvaddchstr ( int $y, int $x, string $s )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_mvaddnstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:59:"int ncurses_mvaddnstr ( int $y, int $x, string $s, int $n )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_mvaddstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:50:"int ncurses_mvaddstr ( int $y, int $x, string $s )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_mvcur";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:68:"int ncurses_mvcur ( int $old_y, int $old_x, int $new_y, int $new_x )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_mvdelch";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:38:"int ncurses_mvdelch ( int $y, int $x )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_mvgetch";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:38:"int ncurses_mvgetch ( int $y, int $x )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_mvhline";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:61:"int ncurses_mvhline ( int $y, int $x, int $attrchar, int $n )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_mvinch";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:37:"int ncurses_mvinch ( int $y, int $x )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_mvvline";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:61:"int ncurses_mvvline ( int $y, int $x, int $attrchar, int $n )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_mvwaddstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:72:"int ncurses_mvwaddstr ( resource $window, int $y, int $x, string $text )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_napms";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_napms ( int $milliseconds )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_new_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:47:"resource ncurses_new_panel ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_newpad";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:48:"resource ncurses_newpad ( int $rows, int $cols )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_newwin";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:64:"resource ncurses_newwin ( int $rows, int $cols, int $y, int $x )";i:3;s:41:"Creates a new window to draw elements in.";}
a:4:{i:0;s:10:"ncurses_nl";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:24:"bool ncurses_nl ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_nocbreak";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"bool ncurses_nocbreak ( void )";i:3;s:168:"Returns terminal to normal (cooked) mode. Initially the terminal may or may not in cbreak mode as the mode is inherited. Therefore a program should call and explicitly.";}
a:4:{i:0;s:14:"ncurses_noecho";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:28:"bool ncurses_noecho ( void )";i:3;s:42:"Prevents echoing of user typed characters.";}
a:4:{i:0;s:12:"ncurses_nonl";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:26:"bool ncurses_nonl ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_noqiflush";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:31:"void ncurses_noqiflush ( void )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_noraw";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:27:"bool ncurses_noraw ( void )";i:3;s:321:"Switches the terminal out of raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The differences that are that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal.";}
a:4:{i:0;s:20:"ncurses_pair_content";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:56:"int ncurses_pair_content ( int $pair, int &$f, int &$b )";i:3;s:169:"Retrieves the foreground and background colors that constitute the given color pair. Terminal color capabilities must be initialized with prior to calling this function.";}
a:4:{i:0;s:19:"ncurses_panel_above";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:48:"resource ncurses_panel_above ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:19:"ncurses_panel_below";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:48:"resource ncurses_panel_below ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:20:"ncurses_panel_window";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:49:"resource ncurses_panel_window ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:20:"ncurses_pnoutrefresh";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:126:"int ncurses_pnoutrefresh ( resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_prefresh";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:122:"int ncurses_prefresh ( resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol )";i:3;s:0:"";}
a:4:{i:0;s:12:"ncurses_putp";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:33:"int ncurses_putp ( string $text )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_qiflush";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"void ncurses_qiflush ( void )";i:3;s:0:"";}
a:4:{i:0;s:11:"ncurses_raw";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:25:"bool ncurses_raw ( void )";i:3;s:315:"Places the terminal in raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The differences that are that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal.";}
a:4:{i:0;s:15:"ncurses_refresh";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:31:"int ncurses_refresh ( int $ch )";i:3;s:0:"";}
a:4:{i:0;s:21:"ncurses_replace_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:63:"int ncurses_replace_panel ( resource $panel, resource $window )";i:3;s:0:"";}
a:4:{i:0;s:23:"ncurses_reset_prog_mode";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:36:"int ncurses_reset_prog_mode ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"ncurses_reset_shell_mode";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:37:"int ncurses_reset_shell_mode ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_resetty";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"bool ncurses_resetty ( void )";i:3;s:68:"Restores the terminal state, which was previously saved by calling .";}
a:4:{i:0;s:15:"ncurses_savetty";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"bool ncurses_savetty ( void )";i:3;s:81:"Saves the current terminal state. The saved terminal state can be restored with .";}
a:4:{i:0;s:16:"ncurses_scr_dump";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:41:"int ncurses_scr_dump ( string $filename )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_scr_init";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:41:"int ncurses_scr_init ( string $filename )";i:3;s:0:"";}
a:4:{i:0;s:19:"ncurses_scr_restore";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:44:"int ncurses_scr_restore ( string $filename )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_scr_set";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:40:"int ncurses_scr_set ( string $filename )";i:3;s:0:"";}
a:4:{i:0;s:12:"ncurses_scrl";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:31:"int ncurses_scrl ( int $count )";i:3;s:0:"";}
a:4:{i:0;s:18:"ncurses_show_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:42:"int ncurses_show_panel ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_slk_attr";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"int ncurses_slk_attr ( void )";i:3;s:45:"Returns the current soft label key attribute.";}
a:4:{i:0;s:19:"ncurses_slk_attroff";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_slk_attroff ( int $intarg )";i:3;s:0:"";}
a:4:{i:0;s:18:"ncurses_slk_attron";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:38:"int ncurses_slk_attron ( int $intarg )";i:3;s:0:"";}
a:4:{i:0;s:19:"ncurses_slk_attrset";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_slk_attrset ( int $intarg )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_slk_clear";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:31:"bool ncurses_slk_clear ( void )";i:3;s:48:"The function clears soft label keys from screen.";}
a:4:{i:0;s:17:"ncurses_slk_color";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:37:"int ncurses_slk_color ( int $intarg )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_slk_init";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:37:"bool ncurses_slk_init ( int $format )";i:3;s:36:"Initializes soft label key functions";}
a:4:{i:0;s:23:"ncurses_slk_noutrefresh";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:37:"bool ncurses_slk_noutrefresh ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"ncurses_slk_refresh";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:32:"int ncurses_slk_refresh ( void )";i:3;s:62:"Copies soft label keys from virtual screen to physical screen.";}
a:4:{i:0;s:19:"ncurses_slk_restore";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:32:"int ncurses_slk_restore ( void )";i:3;s:54:"Restores the soft label keys after has been performed.";}
a:4:{i:0;s:15:"ncurses_slk_set";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:65:"bool ncurses_slk_set ( int $labelnr, string $label, int $format )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_slk_touch";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:30:"int ncurses_slk_touch ( void )";i:3;s:69:"Forces all the soft labels to be output the next time a is performed.";}
a:4:{i:0;s:16:"ncurses_standend";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"int ncurses_standend ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_standout";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:29:"int ncurses_standout ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"ncurses_start_color";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:32:"int ncurses_start_color ( void )";i:3;s:200:"Initializes color functionality in ncurses. This function must be called before any color manipulation functions are called and after is called. It is good practice to call this function right after .";}
a:4:{i:0;s:17:"ncurses_termattrs";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:31:"bool ncurses_termattrs ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_termname";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:32:"string ncurses_termname ( void )";i:3;s:28:"Returns terminals shortname.";}
a:4:{i:0;s:15:"ncurses_timeout";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:38:"void ncurses_timeout ( int $millisec )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_top_panel";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:41:"int ncurses_top_panel ( resource $panel )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_typeahead";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:33:"int ncurses_typeahead ( int $fd )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_ungetch";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:36:"int ncurses_ungetch ( int $keycode )";i:3;s:0:"";}
a:4:{i:0;s:18:"ncurses_ungetmouse";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:41:"bool ncurses_ungetmouse ( array $mevent )";i:3;s:160:"Pushes a KEY_MOUSE event onto the unput queue and associates with this event the given state sata and screen-relative character cell coordinates, specified in .";}
a:4:{i:0;s:21:"ncurses_update_panels";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"void ncurses_update_panels ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"ncurses_use_default_colors";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:40:"bool ncurses_use_default_colors ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_use_env";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"void ncurses_use_env ( bool $flag )";i:3;s:0:"";}
a:4:{i:0;s:26:"ncurses_use_extended_names";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:45:"int ncurses_use_extended_names ( bool $flag )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_vidattr";i:1;s:54:"(PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:35:"int ncurses_vidattr ( int $intarg )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_vline";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:43:"int ncurses_vline ( int $charattr, int $n )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_waddch";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:48:"int ncurses_waddch ( resource $window, int $ch )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_waddstr";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:65:"int ncurses_waddstr ( resource $window, string $str [, int $n ] )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_wattroff";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:53:"int ncurses_wattroff ( resource $window, int $attrs )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_wattron";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:52:"int ncurses_wattron ( resource $window, int $attrs )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_wattrset";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:53:"int ncurses_wattrset ( resource $window, int $attrs )";i:3;s:0:"";}
a:4:{i:0;s:15:"ncurses_wborder";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:150:"int ncurses_wborder ( resource $window, int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner )";i:3;s:57:"Draws the specified lines and corners around the passed .";}
a:4:{i:0;s:14:"ncurses_wclear";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_wclear ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:18:"ncurses_wcolor_set";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:60:"int ncurses_wcolor_set ( resource $window, int $color_pair )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_werase";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_werase ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_wgetch";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:39:"int ncurses_wgetch ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_whline";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:62:"int ncurses_whline ( resource $window, int $charattr, int $n )";i:3;s:0:"";}
a:4:{i:0;s:20:"ncurses_wmouse_trafo";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:80:"bool ncurses_wmouse_trafo ( resource $window, int &$y, int &$x, bool $toscreen )";i:3;s:0:"";}
a:4:{i:0;s:13:"ncurses_wmove";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:54:"int ncurses_wmove ( resource $window, int $y, int $x )";i:3;s:0:"";}
a:4:{i:0;s:20:"ncurses_wnoutrefresh";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:45:"int ncurses_wnoutrefresh ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:16:"ncurses_wrefresh";i:1;s:54:"(PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:41:"int ncurses_wrefresh ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_wstandend";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:42:"int ncurses_wstandend ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:17:"ncurses_wstandout";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:42:"int ncurses_wstandout ( resource $window )";i:3;s:0:"";}
a:4:{i:0;s:14:"ncurses_wvline";i:1;s:54:"(PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL
ncurses >= 1.0.0)";i:2;s:62:"int ncurses_wvline ( resource $window, int $charattr, int $n )";i:3;s:0:"";}
a:4:{i:0;s:9:"newt_bell";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:23:"void newt_bell ( void )";i:3;s:43:"This function sends a beep to the terminal.";}
a:4:{i:0;s:15:"newt_button_bar";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:44:"resource newt_button_bar ( array &$buttons )";i:3;s:60:"This function returns a grid containing the buttons created.";}
a:4:{i:0;s:11:"newt_button";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:58:"resource newt_button ( int $left, int $top, string $text )";i:3;s:21:"Creates a new button.";}
a:4:{i:0;s:20:"newt_centered_window";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:71:"int newt_centered_window ( int $width, int $height [, string $title ] )";i:3;s:45:"Open a centered window of the specified size.";}
a:4:{i:0;s:23:"newt_checkbox_get_value";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:53:"string newt_checkbox_get_value ( resource $checkbox )";i:3;s:102:"This function returns the character in the sequence which indicates the current value of the checkbox.";}
a:4:{i:0;s:23:"newt_checkbox_set_flags";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:75:"void newt_checkbox_set_flags ( resource $checkbox, int $flags, int $sense )";i:3;s:63:"This function allows to set various flags on checkbox resource.";}
a:4:{i:0;s:23:"newt_checkbox_set_value";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:66:"void newt_checkbox_set_value ( resource $checkbox, string $value )";i:3;s:71:"This function allows to set the current value of the checkbox resource.";}
a:4:{i:0;s:27:"newt_checkbox_tree_add_item";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:124:"void newt_checkbox_tree_add_item ( resource $checkboxtree, string $text, mixed $data, int $flags, int $index [, int $... ] )";i:3;s:58:"This function allows to add new item to the checkbox tree.";}
a:4:{i:0;s:28:"newt_checkbox_tree_find_item";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:74:"array newt_checkbox_tree_find_item ( resource $checkboxtree, mixed $data )";i:3;s:50:"Finds an item in the checkbox tree by item's data.";}
a:4:{i:0;s:30:"newt_checkbox_tree_get_current";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:63:"mixed newt_checkbox_tree_get_current ( resource $checkboxtree )";i:3;s:47:"This method returns checkbox tree selected tem.";}
a:4:{i:0;s:34:"newt_checkbox_tree_get_entry_value";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:81:"string newt_checkbox_tree_get_entry_value ( resource $checkboxtree, mixed $data )";i:3;s:0:"";}
a:4:{i:0;s:38:"newt_checkbox_tree_get_multi_selection";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:87:"array newt_checkbox_tree_get_multi_selection ( resource $checkboxtree, string $seqnum )";i:3;s:0:"";}
a:4:{i:0;s:32:"newt_checkbox_tree_get_selection";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:65:"array newt_checkbox_tree_get_selection ( resource $checkboxtree )";i:3;s:0:"";}
a:4:{i:0;s:24:"newt_checkbox_tree_multi";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:99:"resource newt_checkbox_tree_multi ( int $left, int $top, int $height, string $seq [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:30:"newt_checkbox_tree_set_current";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:75:"void newt_checkbox_tree_set_current ( resource $checkboxtree, mixed $data )";i:3;s:0:"";}
a:4:{i:0;s:34:"newt_checkbox_tree_set_entry_value";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:94:"void newt_checkbox_tree_set_entry_value ( resource $checkboxtree, mixed $data, string $value )";i:3;s:0:"";}
a:4:{i:0;s:28:"newt_checkbox_tree_set_entry";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:87:"void newt_checkbox_tree_set_entry ( resource $checkboxtree, mixed $data, string $text )";i:3;s:0:"";}
a:4:{i:0;s:28:"newt_checkbox_tree_set_width";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:73:"void newt_checkbox_tree_set_width ( resource $checkbox_tree, int $width )";i:3;s:0:"";}
a:4:{i:0;s:18:"newt_checkbox_tree";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:80:"resource newt_checkbox_tree ( int $left, int $top, int $height [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"newt_checkbox";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:96:"resource newt_checkbox ( int $left, int $top, string $text, string $def_value [, string $seq ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"newt_clear_key_buffer";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:35:"void newt_clear_key_buffer ( void )";i:3;s:90:"Discards the contents of the terminal's input buffer without waiting for additional input.";}
a:4:{i:0;s:8:"newt_cls";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:22:"void newt_cls ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"newt_compact_button";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:66:"resource newt_compact_button ( int $left, int $top, string $text )";i:3;s:0:"";}
a:4:{i:0;s:27:"newt_component_add_callback";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:87:"void newt_component_add_callback ( resource $component, mixed $func_name, mixed $data )";i:3;s:0:"";}
a:4:{i:0;s:26:"newt_component_takes_focus";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:74:"void newt_component_takes_focus ( resource $component, bool $takes_focus )";i:3;s:0:"";}
a:4:{i:0;s:16:"newt_create_grid";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:50:"resource newt_create_grid ( int $cols, int $rows )";i:3;s:0:"";}
a:4:{i:0;s:15:"newt_cursor_off";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:29:"void newt_cursor_off ( void )";i:3;s:0:"";}
a:4:{i:0;s:14:"newt_cursor_on";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:28:"void newt_cursor_on ( void )";i:3;s:0:"";}
a:4:{i:0;s:10:"newt_delay";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:37:"void newt_delay ( int $microseconds )";i:3;s:0:"";}
a:4:{i:0;s:14:"newt_draw_form";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:38:"void newt_draw_form ( resource $form )";i:3;s:0:"";}
a:4:{i:0;s:19:"newt_draw_root_text";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:62:"void newt_draw_root_text ( int $left, int $top, string $text )";i:3;s:51:"Displays the string text at the position indicated.";}
a:4:{i:0;s:20:"newt_entry_get_value";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:47:"string newt_entry_get_value ( resource $entry )";i:3;s:0:"";}
a:4:{i:0;s:21:"newt_entry_set_filter";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:77:"void newt_entry_set_filter ( resource $entry, callable $filter, mixed $data )";i:3;s:0:"";}
a:4:{i:0;s:20:"newt_entry_set_flags";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:69:"void newt_entry_set_flags ( resource $entry, int $flags, int $sense )";i:3;s:0:"";}
a:4:{i:0;s:14:"newt_entry_set";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:79:"void newt_entry_set ( resource $entry, string $value [, bool $cursor_at_end ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"newt_entry";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:94:"resource newt_entry ( int $left, int $top, int $width [, string $init_value [, int $flags ]] )";i:3;s:0:"";}
a:4:{i:0;s:13:"newt_finished";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:26:"int newt_finished ( void )";i:3;s:85:"Uninitializes newt interface. This function be called, when program is ready to exit.";}
a:4:{i:0;s:23:"newt_form_add_component";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:68:"void newt_form_add_component ( resource $form, resource $component )";i:3;s:32:"Adds a single component to the .";}
a:4:{i:0;s:24:"newt_form_add_components";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:67:"void newt_form_add_components ( resource $form, array $components )";i:3;s:32:"Adds several components to the .";}
a:4:{i:0;s:21:"newt_form_add_hot_key";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:55:"void newt_form_add_hot_key ( resource $form, int $key )";i:3;s:0:"";}
a:4:{i:0;s:17:"newt_form_destroy";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:41:"void newt_form_destroy ( resource $form )";i:3;s:244:"This function frees the memory resources used by the form and all of the components which have been added to the form (including those components which are on subforms). Once a form has been destroyed, none of the form's components can be used.";}
a:4:{i:0;s:21:"newt_form_get_current";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:49:"resource newt_form_get_current ( resource $form )";i:3;s:0:"";}
a:4:{i:0;s:13:"newt_form_run";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:58:"void newt_form_run ( resource $form, array &$exit_struct )";i:3;s:41:"This function runs the form passed to it.";}
a:4:{i:0;s:24:"newt_form_set_background";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:65:"void newt_form_set_background ( resource $from, int $background )";i:3;s:0:"";}
a:4:{i:0;s:20:"newt_form_set_height";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:57:"void newt_form_set_height ( resource $form, int $height )";i:3;s:0:"";}
a:4:{i:0;s:18:"newt_form_set_size";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:42:"void newt_form_set_size ( resource $form )";i:3;s:0:"";}
a:4:{i:0;s:19:"newt_form_set_timer";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:62:"void newt_form_set_timer ( resource $form, int $milliseconds )";i:3;s:0:"";}
a:4:{i:0;s:19:"newt_form_set_width";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:55:"void newt_form_set_width ( resource $form, int $width )";i:3;s:0:"";}
a:4:{i:0;s:18:"newt_form_watch_fd";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:76:"void newt_form_watch_fd ( resource $form, resource $stream [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:9:"newt_form";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:76:"resource newt_form ([ resource $vert_bar [, string $help [, int $flags ]]] )";i:3;s:18:"Create a new form.";}
a:4:{i:0;s:20:"newt_get_screen_size";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:52:"void newt_get_screen_size ( int &$cols, int &$rows )";i:3;s:69:"Fills in the passed references with the current size of the terminal.";}
a:4:{i:0;s:32:"newt_grid_add_components_to_form";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:87:"void newt_grid_add_components_to_form ( resource $grid, resource $form, bool $recurse )";i:3;s:0:"";}
a:4:{i:0;s:22:"newt_grid_basic_window";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:87:"resource newt_grid_basic_window ( resource $text, resource $middle, resource $buttons )";i:3;s:0:"";}
a:4:{i:0;s:14:"newt_grid_free";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:53:"void newt_grid_free ( resource $grid, bool $recurse )";i:3;s:0:"";}
a:4:{i:0;s:18:"newt_grid_get_size";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:68:"void newt_grid_get_size ( resouce $grid, int &$width, int &$height )";i:3;s:0:"";}
a:4:{i:0;s:25:"newt_grid_h_close_stacked";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:109:"resource newt_grid_h_close_stacked ( int $element1_type, resource $element1 [, int $... [, resource $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:19:"newt_grid_h_stacked";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:103:"resource newt_grid_h_stacked ( int $element1_type, resource $element1 [, int $... [, resource $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:15:"newt_grid_place";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:60:"void newt_grid_place ( resource $grid, int $left, int $top )";i:3;s:0:"";}
a:4:{i:0;s:19:"newt_grid_set_field";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:180:"void newt_grid_set_field ( resource $grid, int $col, int $row, int $type, resource $val, int $pad_left, int $pad_top, int $pad_right, int $pad_bottom, int $anchor [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"newt_grid_simple_window";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:88:"resource newt_grid_simple_window ( resource $text, resource $middle, resource $buttons )";i:3;s:0:"";}
a:4:{i:0;s:25:"newt_grid_v_close_stacked";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:109:"resource newt_grid_v_close_stacked ( int $element1_type, resource $element1 [, int $... [, resource $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:19:"newt_grid_v_stacked";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:103:"resource newt_grid_v_stacked ( int $element1_type, resource $element1 [, int $... [, resource $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:27:"newt_grid_wrapped_window_at";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:87:"void newt_grid_wrapped_window_at ( resource $grid, string $title, int $left, int $top )";i:3;s:0:"";}
a:4:{i:0;s:24:"newt_grid_wrapped_window";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:63:"void newt_grid_wrapped_window ( resource $grid, string $title )";i:3;s:0:"";}
a:4:{i:0;s:9:"newt_init";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:22:"int newt_init ( void )";i:3;s:92:"Initializes the newt interface. This function must be called before any other newt function.";}
a:4:{i:0;s:19:"newt_label_set_text";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:58:"void newt_label_set_text ( resource $label, string $text )";i:3;s:0:"";}
a:4:{i:0;s:10:"newt_label";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:57:"resource newt_label ( int $left, int $top, string $text )";i:3;s:0:"";}
a:4:{i:0;s:25:"newt_listbox_append_entry";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:79:"void newt_listbox_append_entry ( resource $listbox, string $text, mixed $data )";i:3;s:0:"";}
a:4:{i:0;s:28:"newt_listbox_clear_selection";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:55:"void newt_listbox_clear_selection ( resource $listbox )";i:3;s:0:"";}
a:4:{i:0;s:18:"newt_listbox_clear";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:45:"void newt_listbox_clear ( resource $listobx )";i:3;s:0:"";}
a:4:{i:0;s:25:"newt_listbox_delete_entry";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:64:"void newt_listbox_delete_entry ( resource $listbox, mixed $key )";i:3;s:0:"";}
a:4:{i:0;s:24:"newt_listbox_get_current";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:53:"string newt_listbox_get_current ( resource $listbox )";i:3;s:0:"";}
a:4:{i:0;s:26:"newt_listbox_get_selection";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:54:"array newt_listbox_get_selection ( resource $listbox )";i:3;s:0:"";}
a:4:{i:0;s:25:"newt_listbox_insert_entry";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:91:"void newt_listbox_insert_entry ( resource $listbox, string $text, mixed $data, mixed $key )";i:3;s:0:"";}
a:4:{i:0;s:23:"newt_listbox_item_count";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:49:"int newt_listbox_item_count ( resource $listbox )";i:3;s:0:"";}
a:4:{i:0;s:24:"newt_listbox_select_item";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:75:"void newt_listbox_select_item ( resource $listbox, mixed $key, int $sense )";i:3;s:0:"";}
a:4:{i:0;s:31:"newt_listbox_set_current_by_key";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:70:"void newt_listbox_set_current_by_key ( resource $listbox, mixed $key )";i:3;s:0:"";}
a:4:{i:0;s:24:"newt_listbox_set_current";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:61:"void newt_listbox_set_current ( resource $listbox, int $num )";i:3;s:0:"";}
a:4:{i:0;s:21:"newt_listbox_set_data";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:71:"void newt_listbox_set_data ( resource $listbox, int $num, mixed $data )";i:3;s:0:"";}
a:4:{i:0;s:22:"newt_listbox_set_entry";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:73:"void newt_listbox_set_entry ( resource $listbox, int $num, string $text )";i:3;s:0:"";}
a:4:{i:0;s:22:"newt_listbox_set_width";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:61:"void newt_listbox_set_width ( resource $listbox, int $width )";i:3;s:0:"";}
a:4:{i:0;s:12:"newt_listbox";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:74:"resource newt_listbox ( int $left, int $top, int $height [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"newt_listitem_get_data";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:47:"mixed newt_listitem_get_data ( resource $item )";i:3;s:0:"";}
a:4:{i:0;s:17:"newt_listitem_set";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:55:"void newt_listitem_set ( resource $item, string $text )";i:3;s:0:"";}
a:4:{i:0;s:13:"newt_listitem";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:127:"resource newt_listitem ( int $left, int $top, string $text, bool $is_default, resouce $prev_item, mixed $data [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:16:"newt_open_window";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:88:"int newt_open_window ( int $left, int $top, int $width, int $height [, string $title ] )";i:3;s:49:"Open a window of the specified size and position.";}
a:4:{i:0;s:18:"newt_pop_help_line";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:32:"void newt_pop_help_line ( void )";i:3;s:59:"Replaces the current help line with the one from the stack.";}
a:4:{i:0;s:15:"newt_pop_window";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:29:"void newt_pop_window ( void )";i:3;s:98:"Removes the top window from the display, and redraws the display areas which the window overwrote.";}
a:4:{i:0;s:19:"newt_push_help_line";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:44:"void newt_push_help_line ([ string $text ] )";i:3;s:66:"Saves the current help line on a stack, and displays the new line.";}
a:4:{i:0;s:22:"newt_radio_get_current";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:56:"resource newt_radio_get_current ( resource $set_member )";i:3;s:0:"";}
a:4:{i:0;s:16:"newt_radiobutton";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:108:"resource newt_radiobutton ( int $left, int $top, string $text, bool $is_default [, resource $prev_button ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"newt_redraw_help_line";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:35:"void newt_redraw_help_line ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"newt_reflow_text";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:123:"string newt_reflow_text ( string $text, int $width, int $flex_down, int $flex_up, int &$actual_width, int &$actual_height )";i:3;s:0:"";}
a:4:{i:0;s:12:"newt_refresh";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:26:"void newt_refresh ( void )";i:3;s:236:"To increase performance, newt only updates the display when it needs to, not when the program tells it to write to the terminal. Applications can force newt to immediately update modified portions of the screen by calling this function.";}
a:4:{i:0;s:18:"newt_resize_screen";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:43:"void newt_resize_screen ([ bool $redraw ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"newt_resume";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:25:"void newt_resume ( void )";i:3;s:47:"Resume using the newt interface after calling .";}
a:4:{i:0;s:13:"newt_run_form";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:41:"resource newt_run_form ( resource $form )";i:3;s:41:"This function runs the form passed to it.";}
a:4:{i:0;s:14:"newt_scale_set";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:52:"void newt_scale_set ( resource $scale, int $amount )";i:3;s:0:"";}
a:4:{i:0;s:10:"newt_scale";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:72:"resource newt_scale ( int $left, int $top, int $width, int $full_value )";i:3;s:0:"";}
a:4:{i:0;s:18:"newt_scrollbar_set";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:71:"void newt_scrollbar_set ( resource $scrollbar, int $where, int $total )";i:3;s:0:"";}
a:4:{i:0;s:22:"newt_set_help_callback";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:47:"void newt_set_help_callback ( mixed $function )";i:3;s:0:"";}
a:4:{i:0;s:25:"newt_set_suspend_callback";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:66:"void newt_set_suspend_callback ( callable $function, mixed $data )";i:3;s:163:"Set a callback function which gets invoked when user presses the suspend key (normally ^Z). If no suspend callback is registered, the suspend keystroke is ignored.";}
a:4:{i:0;s:12:"newt_suspend";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:26:"void newt_suspend ( void )";i:3;s:192:"Tells newt to return the terminal to its initial state. Once this is done, the application can suspend itself (by sending itself a SIGTSTP, fork a child program, or do whatever else it likes).";}
a:4:{i:0;s:26:"newt_textbox_get_num_lines";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:52:"int newt_textbox_get_num_lines ( resource $textbox )";i:3;s:0:"";}
a:4:{i:0;s:21:"newt_textbox_reflowed";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:125:"resource newt_textbox_reflowed ( int $left, int $top, char $*text, int $width, int $flex_down, int $flex_up [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"newt_textbox_set_height";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:63:"void newt_textbox_set_height ( resource $textbox, int $height )";i:3;s:0:"";}
a:4:{i:0;s:21:"newt_textbox_set_text";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:62:"void newt_textbox_set_text ( resource $textbox, string $text )";i:3;s:0:"";}
a:4:{i:0;s:12:"newt_textbox";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:86:"resource newt_textbox ( int $left, int $top, int $width, int $height [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"newt_vertical_scrollbar";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:119:"resource newt_vertical_scrollbar ( int $left, int $top, int $height [, int $normal_colorset [, int $thumb_colorset ]] )";i:3;s:0:"";}
a:4:{i:0;s:17:"newt_wait_for_key";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:31:"void newt_wait_for_key ( void )";i:3;s:195:"This function doesn't return until a key has been pressed. The keystroke is then ignored. If a key is already in the terminal's buffer, this function discards a keystroke and returns immediately.";}
a:4:{i:0;s:15:"newt_win_choice";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:129:"int newt_win_choice ( string $title, string $button1_text, string $button2_text, string $format [, mixed $args [, mixed $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:16:"newt_win_entries";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:170:"int newt_win_entries ( string $title, string $text, int $suggested_width, int $flex_down, int $flex_up, int $data_width, array &$items, string $button1 [, string $... ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"newt_win_menu";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:185:"int newt_win_menu ( string $title, string $text, int $suggestedWidth, int $flexDown, int $flexUp, int $maxListHeight, array $items, int &$listItem [, string $button1 [, string $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:16:"newt_win_message";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:108:"void newt_win_message ( string $title, string $button_text, string $format [, mixed $args [, mixed $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:17:"newt_win_messagev";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:90:"void newt_win_messagev ( string $title, string $button_text, string $format, array $args )";i:3;s:0:"";}
a:4:{i:0;s:16:"newt_win_ternary";i:1;s:18:"(PECL newt >= 0.1)";i:2;s:152:"int newt_win_ternary ( string $title, string $button1_text, string $button2_text, string $button3_text, string $format [, mixed $args [, mixed $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:20:"readline_add_history";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"bool readline_add_history ( string $line )";i:3;s:54:"This function adds a line to the command line history.";}
a:4:{i:0;s:33:"readline_callback_handler_install";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:77:"bool readline_callback_handler_install ( string $prompt, callable $callback )";i:3;s:216:"Sets up a readline callback interface then prints and immediately returns. Calling this function twice without removing the previous callback interface will automatically and conveniently overwrite the old interface.";}
a:4:{i:0;s:32:"readline_callback_handler_remove";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:46:"bool readline_callback_handler_remove ( void )";i:3;s:79:"Removes a previously installed callback handler and restores terminal settings.";}
a:4:{i:0;s:27:"readline_callback_read_char";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"void readline_callback_read_char ( void )";i:3;s:159:"Reads a character of user input. When a line is received, this function informs the readline callback interface installed using that a line is ready for input.";}
a:4:{i:0;s:22:"readline_clear_history";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"bool readline_clear_history ( void )";i:3;s:53:"This function clears the entire command line history.";}
a:4:{i:0;s:28:"readline_completion_function";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:56:"bool readline_completion_function ( callable $function )";i:3;s:137:"This function registers a completion function. This is the same kind of functionality you'd get if you hit your tab key while using Bash.";}
a:4:{i:0;s:13:"readline_info";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"mixed readline_info ([ string $varname [, string $newvalue ]] )";i:3;s:49:"Gets or sets various internal readline variables.";}
a:4:{i:0;s:21:"readline_list_history";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"array readline_list_history ( void )";i:3;s:37:"Gets the entire command line history.";}
a:4:{i:0;s:20:"readline_on_new_line";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:34:"void readline_on_new_line ( void )";i:3;s:55:"Tells readline that the cursor has moved to a new line.";}
a:4:{i:0;s:21:"readline_read_history";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"bool readline_read_history ([ string $filename ] )";i:3;s:50:"This function reads a command history from a file.";}
a:4:{i:0;s:18:"readline_redisplay";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:32:"void readline_redisplay ( void )";i:3;s:39:"Redraws readline to redraw the display.";}
a:4:{i:0;s:22:"readline_write_history";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:51:"bool readline_write_history ([ string $filename ] )";i:3;s:51:"This function writes the command history to a file.";}
a:4:{i:0;s:8:"readline";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"string readline ([ string $prompt ] )";i:3;s:89:"Reads a single line from the user. You must add this line to the history yourself using .";}
a:4:{i:0;s:7:"bzclose";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:28:"int bzclose ( resource $bz )";i:3;s:36:"Closes the given bzip2 file pointer.";}
a:4:{i:0;s:10:"bzcompress";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:83:"mixed bzcompress ( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]] )";i:3;s:65:"compresses the given string and returns it as bzip2 encoded data.";}
a:4:{i:0;s:12:"bzdecompress";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:57:"mixed bzdecompress ( string $source [, int $small = 0 ] )";i:3;s:60:"decompresses the given string containing bzip2 encoded data.";}
a:4:{i:0;s:7:"bzerrno";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:28:"int bzerrno ( resource $bz )";i:3;s:79:"Returns the error number of any bzip2 error returned by the given file pointer.";}
a:4:{i:0;s:7:"bzerror";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:30:"array bzerror ( resource $bz )";i:3;s:96:"Returns the error number and error string of any bzip2 error returned by the given file pointer.";}
a:4:{i:0;s:8:"bzerrstr";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:32:"string bzerrstr ( resource $bz )";i:3;s:76:"Gets the error string of any bzip2 error returned by the given file pointer.";}
a:4:{i:0;s:7:"bzflush";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:28:"int bzflush ( resource $bz )";i:3;s:64:"Forces a write of all buffered bzip2 data for the file pointer .";}
a:4:{i:0;s:6:"bzopen";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:50:"resource bzopen ( string $filename, string $mode )";i:3;s:49:"opens a bzip2 (.bz2) file for reading or writing.";}
a:4:{i:0;s:6:"bzread";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:54:"string bzread ( resource $bz [, int $length = 1024 ] )";i:3;s:40:"reads from the given bzip2 file pointer.";}
a:4:{i:0;s:7:"bzwrite";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:59:"int bzwrite ( resource $bz, string $data [, int $length ] )";i:3;s:49:"writes a string into the given bzip2 file stream.";}
a:4:{i:0;s:12:"lzf_compress";i:1;s:19:"(PECL lzf >= 0.1.0)";i:2;s:36:"string lzf_compress ( string $data )";i:3;s:47:"compresses the given string using LZF encoding.";}
a:4:{i:0;s:14:"lzf_decompress";i:1;s:19:"(PECL lzf >= 0.1.0)";i:2;s:38:"string lzf_decompress ( string $data )";i:3;s:58:"decompresses the given string containing lzf encoded data.";}
a:4:{i:0;s:17:"lzf_optimized_for";i:1;s:19:"(PECL lzf >= 1.0.0)";i:2;s:30:"int lzf_optimized_for ( void )";i:3;s:67:"Determines what was LZF extension optimized for during compilation.";}
a:4:{i:0;s:17:"Phar::addEmptyDir";i:1;s:9:"(Unknown)";i:2;s:49:"public void Phar::addEmptyDir ( string $dirname )";i:3;s:87:"With this method, an empty directory is created with path . This method is similar to .";}
a:4:{i:0;s:13:"Phar::addFile";i:1;s:9:"(Unknown)";i:2;s:65:"public void Phar::addFile ( string $file [, string $localname ] )";i:3;s:324:"With this method, any file or URL can be added to the phar archive. If the optional second parameter is specified, the file will be stored in the archive with that name, otherwise the parameter is used as the path to store within the archive. URLs must have a localname or an exception is thrown. This method is similar to .";}
a:4:{i:0;s:19:"Phar::addFromString";i:1;s:9:"(Unknown)";i:2;s:71:"public void Phar::addFromString ( string $localname, string $contents )";i:3;s:147:"With this method, any string can be added to the phar archive. The file will be stored in the archive with as its path. This method is similar to .";}
a:4:{i:0;s:16:"Phar::apiVersion";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:52:"final public static string Phar::apiVersion ( void )";i:3;s:271:"Return the API version of the phar file format that will be used when creating phars. The Phar extension supports reading API version 1.0.0 or newer. API version 1.1.0 is required for SHA-256 and SHA-512 hash, and API version 1.1.1 is required to store empty directories.";}
a:4:{i:0;s:24:"Phar::buildFromDirectory";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:77:"public array Phar::buildFromDirectory ( string $base_dir [, string $regex ] )";i:3;s:273:"Populate a phar archive from directory contents. The optional second parameter is a regular expression (pcre) that is used to exclude files. Any filename that matches the regular expression will be included, all others will be excluded. For more fine-grained control, use .";}
a:4:{i:0;s:23:"Phar::buildFromIterator";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:83:"public array Phar::buildFromIterator ( Iterator $iter [, string $base_directory ] )";i:3;s:310:"Populate a phar archive from an iterator. Two styles of iterators are supported, iterators that map the filename within the phar to the name of a file on disk, and iterators like DirectoryIterator that return SplFileInfo objects. For iterators that return SplFileInfo objects, the second parameter is required.";}
a:4:{i:0;s:17:"Phar::canCompress";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:63:"final public static bool Phar::canCompress ([ int $type = 0 ] )";i:3;s:120:"This should be used to test whether compression is possible prior to loading a phar archive containing compressed files.";}
a:4:{i:0;s:14:"Phar::canWrite";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:48:"final public static bool Phar::canWrite ( void )";i:3;s:112:"This static method determines whether write access has been disabled in the system php.ini via the ini variable.";}
a:4:{i:0;s:14:"Phar::compress";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:72:"public object Phar::compress ( int $compression [, string $extension ] )";i:3;s:270:"For tar-based and phar-based phar archives, this method compresses the entire archive using gzip compression or bzip2 compression. The resulting file can be processed with the gunzip command/bunzip command, or accessed directly and transparently with the Phar extension.";}
a:4:{i:0;s:27:"Phar::compressAllFilesBZIP2";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:48:"public bool Phar::compressAllFilesBZIP2 ( void )";i:3;s:440:"This method compresses all files in the Phar archive using bzip2 compression. The extension must be enabled to take advantage of this feature. In addition, if any files are already compressed using gzip compression, the extension must be enabled in order to decompress the files prior to re-compressing with bzip2 compression. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed.";}
a:4:{i:0;s:24:"Phar::compressAllFilesGZ";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:45:"public bool Phar::compressAllFilesGZ ( void )";i:3;s:219:"For tar-based phar archives, this method compresses the entire archive using gzip compression. The resulting file can be processed with the gunzip command, or accessed directly and transparently with the Phar extension.";}
a:4:{i:0;s:19:"Phar::compressFiles";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:52:"public void Phar::compressFiles ( int $compression )";i:3;s:193:"For tar-based phar archives, this method throws a, as compression of individual files within a tar archive is not supported by the file format. Use to compress an entire tar-based phar archive.";}
a:4:{i:0;s:17:"Phar::__construct";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:76:"public Phar::__construct ( string $fname [, int $flags [, string $alias ]] )";i:3;s:0:"";}
a:4:{i:0;s:19:"Phar::convertToData";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:117:"public PharData Phar::convertToData ([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]] )";i:3;s:204:"This method is used to convert an executable phar archive to either a tar or zip file. To make the tar or zip non-executable, the phar stub and phar alias files are removed from the newly created archive.";}
a:4:{i:0;s:25:"Phar::convertToExecutable";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:119:"public Phar Phar::convertToExecutable ([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]] )";i:3;s:341:"This method is used to convert a phar archive to another file format. For instance, it can be used to create a tar-based executable phar archive from a zip-based executable phar archive, or from an executable phar archive in the phar file format. In addition, it can be used to apply whole-archive compression to a tar or phar-based archive.";}
a:4:{i:0;s:10:"Phar::copy";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:59:"public bool Phar::copy ( string $oldfile, string $newfile )";i:3;s:155:"Copy a file internal to the phar archive to another new file within the phar. This is an object-oriented alternative to using with the phar stream wrapper.";}
a:4:{i:0;s:11:"Phar::count";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:31:"public int Phar::count ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"Phar::createDefaultStub";i:1;s:9:"(Unknown)";i:2;s:100:"final public static string Phar::createDefaultStub ([ string $indexfile [, string $webindexfile ]] )";i:3;s:138:"This method is intended for creation of phar-file format-specific stubs, and is not intended for use with tar- or zip-based phar archives.";}
a:4:{i:0;s:16:"Phar::decompress";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:55:"public object Phar::decompress ([ string $extension ] )";i:3;s:88:"For tar-based and phar-based phar archives, this method decompresses the entire archive.";}
a:4:{i:0;s:21:"Phar::decompressFiles";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:42:"public bool Phar::decompressFiles ( void )";i:3;s:193:"For tar-based phar archives, this method throws a, as compression of individual files within a tar archive is not supported by the file format. Use to compress an entire tar-based phar archive.";}
a:4:{i:0;s:17:"Phar::delMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.2.0)";i:2;s:38:"public bool Phar::delMetadata ( void )";i:3;s:39:"Deletes the global metadata of the phar";}
a:4:{i:0;s:12:"Phar::delete";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:42:"public bool Phar::delete ( string $entry )";i:3;s:142:"Delete a file within an archive. This is the functional equivalent of calling on the stream wrapper equivalent, as shown in the example below.";}
a:4:{i:0;s:15:"Phar::extractTo";i:1;s:9:"(Unknown)";i:2;s:99:"public bool Phar::extractTo ( string $pathto [, string|array $files [, bool $overwrite = false ]] )";i:3;s:556:"Extract all files within a phar archive to disk. Extracted files and directories preserve permissions as stored in the archive. The optional parameters allow optional control over which files are extracted, and whether existing files on disk can be overwritten. The second parameter can be either the name of a file or directory to extract, or an array of names of files and directories to extract. By default, this method will not overwrite existing files, the third parameter can be set to true to enable overwriting of files. This method is similar to .";}
a:4:{i:0;s:17:"Phar::getMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:39:"public mixed Phar::getMetadata ( void )";i:3;s:85:"Retrieve archive meta-data. Meta-data can be any PHP variable that can be serialized.";}
a:4:{i:0;s:17:"Phar::getModified";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:38:"public bool Phar::getModified ( void )";i:3;s:135:"This method can be used to determine whether a phar has either had an internal file deleted, or contents of a file changed in some way.";}
a:4:{i:0;s:18:"Phar::getSignature";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:40:"public array Phar::getSignature ( void )";i:3;s:77:"Returns the verification signature of a phar archive in a hexadecimal string.";}
a:4:{i:0;s:13:"Phar::getStub";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:36:"public string Phar::getStub ( void )";i:3;s:132:"Phar archives contain a bootstrap loader, or written in PHP that is executed when the archive is executed in PHP either via include:";}
a:4:{i:0;s:29:"Phar::getSupportedCompression";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.2.0)";i:2;s:64:"final public static array Phar::getSupportedCompression ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Phar::getSupportedSignatures";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.1.0)";i:2;s:63:"final public static array Phar::getSupportedSignatures ( void )";i:3;s:41:"Return array of supported signature types";}
a:4:{i:0;s:16:"Phar::getVersion";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:39:"public string Phar::getVersion ( void )";i:3;s:50:"Returns the API version of an opened Phar archive.";}
a:4:{i:0;s:17:"Phar::hasMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.2.0)";i:2;s:38:"public bool Phar::hasMetadata ( void )";i:3;s:46:"Returns whether phar has global meta-data set.";}
a:4:{i:0;s:24:"Phar::interceptFileFuncs";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:58:"final public static void Phar::interceptFileFuncs ( void )";i:3;s:306:"instructs phar to intercept, ,, , and all of the stat-related functions. If any of these functions is called from within a phar archive with a relative path, the call is modified to access a file within the phar archive. Absolute paths are assumed to be attempts to load external files from the filesystem.";}
a:4:{i:0;s:17:"Phar::isBuffering";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:38:"public bool Phar::isBuffering ( void )";i:3;s:147:"This method can be used to determine whether a Phar will save changes to disk immediately, or whether a call to is needed to enable saving changes.";}
a:4:{i:0;s:18:"Phar::isCompressed";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:40:"public mixed Phar::isCompressed ( void )";i:3;s:232:"Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on). Zip-based phar archives cannot be compressed as a file, and so this method will always return if a zip-based phar archive is queried.";}
a:4:{i:0;s:18:"Phar::isFileFormat";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:46:"public bool Phar::isFileFormat ( int $format )";i:3;s:0:"";}
a:4:{i:0;s:25:"Phar::isValidPharFilename";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.2.0)";i:2;s:100:"final public static bool Phar::isValidPharFilename ( string $filename [, bool $executable = true ] )";i:3;s:289:"Returns whether the given filename is a valid phar filename that will be recognized as a phar archive by the phar extension. This can be used to test a name without having to instantiate a phar archive and catch the inevitable Exception that will be thrown if an invalid name is specified.";}
a:4:{i:0;s:16:"Phar::isWritable";i:1;s:9:"(Unknown)";i:2;s:37:"public bool Phar::isWritable ( void )";i:3;s:80:"This method returns if is, and the actual phar archive on disk is not read-only.";}
a:4:{i:0;s:14:"Phar::loadPhar";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:79:"final public static bool Phar::loadPhar ( string $filename [, string $alias ] )";i:3;s:301:"This can be used to read the contents of an external Phar archive. This is most useful for assigning an alias to a phar so that subsequent references to the phar can use the shorter alias, or for loading Phar archives that only contain data and are not intended for execution/inclusion in PHP scripts.";}
a:4:{i:0;s:13:"Phar::mapPhar";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:83:"final public static bool Phar::mapPhar ([ string $alias [, int $dataoffset = 0 ]] )";i:3;s:175:"This static method can only be used inside a Phar archive's loader stub in order to initialize the phar when it is directly executed, or when it is included in another script.";}
a:4:{i:0;s:11:"Phar::mount";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:79:"final public static void Phar::mount ( string $pharpath, string $externalpath )";i:3;s:311:"Much like the unix file system concept of mounting external devices to paths within the directory tree, allows referring to external files and directories as if they were inside of an archive. This allows powerful abstraction such as referring to external configuration files as if they were inside the archive.";}
a:4:{i:0;s:16:"Phar::mungServer";i:1;s:9:"(Unknown)";i:2;s:61:"final public static void Phar::mungServer ( array $munglist )";i:3;s:56:"should only be called within the stub of a phar archive.";}
a:4:{i:0;s:18:"Phar::offsetExists";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:49:"public bool Phar::offsetExists ( string $offset )";i:3;s:134:"This is an implementation of the interface allowing direct manipulation of the contents of a Phar archive using array access brackets.";}
a:4:{i:0;s:15:"Phar::offsetGet";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:45:"public int Phar::offsetGet ( string $offset )";i:3;s:184:"This is an implementation of the interface allowing direct manipulation of the contents of a Phar archive using array access brackets. is used for retrieving files from a Phar archive.";}
a:4:{i:0;s:15:"Phar::offsetSet";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:61:"public void Phar::offsetSet ( string $offset, string $value )";i:3;s:224:"This is an implementation of the interface allowing direct manipulation of the contents of a Phar archive using array access brackets. offsetSet is used for modifying an existing file, or adding a new file to a Phar archive.";}
a:4:{i:0;s:17:"Phar::offsetUnset";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:48:"public bool Phar::offsetUnset ( string $offset )";i:3;s:226:"This is an implementation of the interface allowing direct manipulation of the contents of a Phar archive using array access brackets. offsetUnset is used for deleting an existing file, and is called by the language construct.";}
a:4:{i:0;s:13:"Phar::running";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:68:"final public static string Phar::running ([ bool $retphar = true ] )";i:3;s:159:"Returns the full path to the running phar archive. This is intended for use much like the magic constant, and only has effect inside an executing phar archive.";}
a:4:{i:0;s:14:"Phar::setAlias";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.2.1)";i:2;s:44:"public bool Phar::setAlias ( string $alias )";i:3;s:382:"Set the alias for the Phar archive, and write it as the permanent alias for this phar archive. An alias can be used internally to a phar archive to ensure that use of the stream wrapper to access internal files always works regardless of the location of the phar archive on the filesystem. Another alternative is to rely upon Phar's interception of or to use and use relative paths.";}
a:4:{i:0;s:20:"Phar::setDefaultStub";i:1;s:9:"(Unknown)";i:2;s:74:"public bool Phar::setDefaultStub ([ string $index [, string $webindex ]] )";i:3;s:76:"This method is a convenience method that combines the functionality of and .";}
a:4:{i:0;s:17:"Phar::setMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:49:"public void Phar::setMetadata ( mixed $metadata )";i:3;s:241:"should be used to store customized data that describes something about the phar archive as a complete entity. should be used for file-specific meta-data. Meta-data can slow down the performance of loading a phar archive if the data is large.";}
a:4:{i:0;s:27:"Phar::setSignatureAlgorithm";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.1.0)";i:2;s:80:"public void Phar::setSignatureAlgorithm ( int $sigtype [, string $privatekey ] )";i:3;s:102:"set the signature algorithm for a phar and apply it. The signature algorithm must be one of, ,, , or .";}
a:4:{i:0;s:13:"Phar::setStub";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:61:"public bool Phar::setStub ( string $stub [, int $len = -1 ] )";i:3;s:136:"This method is used to add a PHP bootstrap loader stub to a new Phar archive, or to replace the loader stub in an existing Phar archive.";}
a:4:{i:0;s:20:"Phar::startBuffering";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:41:"public void Phar::startBuffering ( void )";i:3;s:386:"Although technically unnecessary, the method can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it.";}
a:4:{i:0;s:19:"Phar::stopBuffering";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:40:"public void Phar::stopBuffering ( void )";i:3;s:381:"is used in conjunction with the method. can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it.";}
a:4:{i:0;s:24:"Phar::uncompressAllFiles";i:1;s:19:"(PECL phar < 2.0.0)";i:2;s:45:"public bool Phar::uncompressAllFiles ( void )";i:3;s:389:"This method decompresses all files in the Phar archive. If any files are already compressed using gzip compression, the extension must be enabled in order to decompress the files, and any files compressed using bzip2 compression require the extension to decompress the files. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed.";}
a:4:{i:0;s:19:"Phar::unlinkArchive";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:64:"final public static bool Phar::unlinkArchive ( string $archive )";i:3;s:43:"Removes a phar archive for disk and memory.";}
a:4:{i:0;s:13:"Phar::webPhar";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:152:"final public static void Phar::webPhar ([ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites ]]]]] )";i:3;s:456:"for web-based phars. This method parses and routes a request from a web browser to an internal file within the phar archive. In essence, it simulates a web server, routing requests to the correct file, echoing the correct headers and parsing PHP files as needed. This powerful method is part of what makes it easy to convert an existing PHP application into a phar archive. Combined with and, any web application can be used unmodified from a phar archive.";}
a:4:{i:0;s:21:"PharData::addEmptyDir";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:46:"bool PharData::addEmptyDir ( string $dirname )";i:3;s:87:"With this method, an empty directory is created with path . This method is similar to .";}
a:4:{i:0;s:17:"PharData::addFile";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:65:"public void Phar::addFile ( string $file [, string $localname ] )";i:3;s:327:"With this method, any file or URL can be added to the tar/zip archive. If the optional second parameter is specified, the file will be stored in the archive with that name, otherwise the parameter is used as the path to store within the archive. URLs must have a localname or an exception is thrown. This method is similar to .";}
a:4:{i:0;s:23:"PharData::addFromString";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:68:"bool PharData::addFromString ( string $localname, string $contents )";i:3;s:150:"With this method, any string can be added to the tar/zip archive. The file will be stored in the archive with as its path. This method is similar to .";}
a:4:{i:0;s:28:"PharData::buildFromDirectory";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:77:"public array Phar::buildFromDirectory ( string $base_dir [, string $regex ] )";i:3;s:276:"Populate a tar/zip archive from directory contents. The optional second parameter is a regular expression (pcre) that is used to exclude files. Any filename that matches the regular expression will be included, all others will be excluded. For more fine-grained control, use .";}
a:4:{i:0;s:27:"PharData::buildFromIterator";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:80:"array PharData::buildFromIterator ( Iterator $iter [, string $base_directory ] )";i:3;s:319:"Populate a tar or zip archive from an iterator. Two styles of iterators are supported, iterators that map the filename within the tar/zip to the name of a file on disk, and iterators like DirectoryIterator that return SplFileInfo objects. For iterators that return SplFileInfo objects, the second parameter is required.";}
a:4:{i:0;s:18:"PharData::compress";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:69:"object PharData::compress ( int $compression [, string $extension ] )";i:3;s:244:"For tar archives, this method compresses the entire archive using gzip compression or bzip2 compression. The resulting file can be processed with the gunzip command/bunzip command, or accessed directly and transparently with the Phar extension.";}
a:4:{i:0;s:23:"PharData::compressFiles";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:49:"bool PharData::compressFiles ( int $compression )";i:3;s:183:"For tar-based archives, this method throws a, as compression of individual files within a tar archive is not supported by the file format. Use to compress an entire tar-based archive.";}
a:4:{i:0;s:21:"PharData::__construct";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:101:"PharData::__construct ( string $fname [, int $flags [, string $alias [, int $format = Phar::TAR ]]] )";i:3;s:0:"";}
a:4:{i:0;s:23:"PharData::convertToData";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:94:"PharData PharData::convertToData ([ int $format [, int $compression [, string $extension ]]] )";i:3;s:100:"This method is used to convert a non-executable tar or zip archive to another non-executable format.";}
a:4:{i:0;s:29:"PharData::convertToExecutable";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:96:"Phar PharData::convertToExecutable ([ int $format [, int $compression [, string $extension ]]] )";i:3;s:223:"This method is used to convert a non-executable tar or zip archive to an executable phar archive. Any of the three executable file formats (phar, tar or zip) can be used, and whole-archive compression can also be performed.";}
a:4:{i:0;s:14:"PharData::copy";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:56:"bool PharData::copy ( string $oldfile, string $newfile )";i:3;s:166:"Copy a file internal to the tar/zip archive to another new file within the same archive. This is an object-oriented alternative to using with the phar stream wrapper.";}
a:4:{i:0;s:20:"PharData::decompress";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:52:"object PharData::decompress ([ string $extension ] )";i:3;s:68:"For tar-based archives, this method decompresses the entire archive.";}
a:4:{i:0;s:25:"PharData::decompressFiles";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:39:"bool PharData::decompressFiles ( void )";i:3;s:183:"For tar-based archives, this method throws a, as compression of individual files within a tar archive is not supported by the file format. Use to compress an entire tar-based archive.";}
a:4:{i:0;s:21:"PharData::delMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:35:"bool PharData::delMetadata ( void )";i:3;s:46:"Deletes the global metadata of the zip archive";}
a:4:{i:0;s:16:"PharData::delete";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:39:"bool PharData::delete ( string $entry )";i:3;s:142:"Delete a file within an archive. This is the functional equivalent of calling on the stream wrapper equivalent, as shown in the example below.";}
a:4:{i:0;s:19:"PharData::extractTo";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:96:"bool PharData::extractTo ( string $pathto [, string|array $files [, bool $overwrite = false ]] )";i:3;s:559:"Extract all files within a tar/zip archive to disk. Extracted files and directories preserve permissions as stored in the archive. The optional parameters allow optional control over which files are extracted, and whether existing files on disk can be overwritten. The second parameter can be either the name of a file or directory to extract, or an array of names of files and directories to extract. By default, this method will not overwrite existing files, the third parameter can be set to true to enable overwriting of files. This method is similar to .";}
a:4:{i:0;s:20:"PharData::isWritable";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:34:"bool PharData::isWritable ( void )";i:3;s:139:"This method returns if the tar/zip archive on disk is not read-only. Unlike, data-only tar/zip archives can be modified even if is set to .";}
a:4:{i:0;s:19:"PharData::offsetSet";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:58:"void PharData::offsetSet ( string $offset, string $value )";i:3;s:230:"This is an implementation of the interface allowing direct manipulation of the contents of a tar/zip archive using array access brackets. offsetSet is used for modifying an existing file, or adding a new file to a tar/zip archive.";}
a:4:{i:0;s:21:"PharData::offsetUnset";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:45:"bool PharData::offsetUnset ( string $offset )";i:3;s:229:"This is an implementation of the interface allowing direct manipulation of the contents of a tar/zip archive using array access brackets. offsetUnset is used for deleting an existing file, and is called by the language construct.";}
a:4:{i:0;s:18:"PharData::setAlias";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:41:"bool PharData::setAlias ( string $alias )";i:3;s:96:"Non-executable tar/zip archives cannot have an alias, so this method simply throws an exception.";}
a:4:{i:0;s:24:"PharData::setDefaultStub";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:71:"bool PharData::setDefaultStub ([ string $index [, string $webindex ]] )";i:3;s:94:"Non-executable tar/zip archives cannot have a stub, so this method simply throws an exception.";}
a:4:{i:0;s:17:"Phar::setMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:49:"public void Phar::setMetadata ( mixed $metadata )";i:3;s:241:"should be used to store customized data that describes something about the phar archive as a complete entity. should be used for file-specific meta-data. Meta-data can slow down the performance of loading a phar archive if the data is large.";}
a:4:{i:0;s:27:"Phar::setSignatureAlgorithm";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.1.0)";i:2;s:56:"public void Phar::setSignatureAlgorithm ( int $sigtype )";i:3;s:149:"set the signature algorithm for a phar and apply it. The signature algorithm must be one of, ,, , or (pgp not yet supported and falls back to SHA-1).";}
a:4:{i:0;s:17:"PharData::setStub";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:58:"bool PharData::setStub ( string $stub [, int $len = -1 ] )";i:3;s:94:"Non-executable tar/zip archives cannot have a stub, so this method simply throws an exception.";}
a:4:{i:0;s:19:"PharFileInfo::chmod";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:52:"public void PharFileInfo::chmod ( int $permissions )";i:3;s:353:"allows setting of the executable file permissions bit, as well as read-only bits. Writeable bits are ignored, and set at runtime based on the INI variable. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed if the file is within a archive. Files within archives do not have this restriction.";}
a:4:{i:0;s:22:"PharFileInfo::compress";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:55:"public bool PharFileInfo::compress ( int $compression )";i:3;s:495:"This method compresses the file inside the Phar archive using either bzip2 compression or zlib compression. The or extension must be enabled to take advantage of this feature. In addition, if the file is already compressed, the respective extension must be enabled in order to decompress the file. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed if the file is within a archive. Files within archives do not have this restriction.";}
a:4:{i:0;s:25:"PharFileInfo::__construct";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:50:"public PharFileInfo::__construct ( string $entry )";i:3;s:114:"This should not be called directly. Instead, a PharFileInfo object is initialized by calling through array access.";}
a:4:{i:0;s:24:"PharFileInfo::decompress";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 2.0.0)";i:2;s:45:"public bool PharFileInfo::decompress ( void )";i:3;s:366:"This method decompresses the file inside the Phar archive. Depending on how the file is compressed, the or extensions must be enabled to take advantage of this feature. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed if the file is within a archive. Files within archives do not have this restriction.";}
a:4:{i:0;s:25:"PharFileInfo::delMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.2.0)";i:2;s:46:"public bool PharFileInfo::delMetadata ( void )";i:3;s:42:"Deletes the metadata of the entry, if any.";}
a:4:{i:0;s:22:"PharFileInfo::getCRC32";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:42:"public int PharFileInfo::getCRC32 ( void )";i:3;s:62:"This returns the checksum of the file within the Phar archive.";}
a:4:{i:0;s:31:"PharFileInfo::getCompressedSize";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:51:"public int PharFileInfo::getCompressedSize ( void )";i:3;s:144:"This returns the size of the file within the Phar archive. Uncompressed files will return the same value for getCompressedSize as they will with";}
a:4:{i:0;s:25:"PharFileInfo::getMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:47:"public mixed PharFileInfo::getMetadata ( void )";i:3;s:77:"Return meta-data that was saved in the Phar archive's manifest for this file.";}
a:4:{i:0;s:26:"PharFileInfo::getPharFlags";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:46:"public int PharFileInfo::getPharFlags ( void )";i:3;s:109:"This returns the flags set in the manifest for a Phar. This will always return in the current implementation.";}
a:4:{i:0;s:25:"PharFileInfo::hasMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.2.0)";i:2;s:46:"public bool PharFileInfo::hasMetadata ( void )";i:3;s:53:"Returns the metadata of a file within a phar archive.";}
a:4:{i:0;s:26:"PharFileInfo::isCRCChecked";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:47:"public bool PharFileInfo::isCRCChecked ( void )";i:3;s:75:"This returns whether a file within a Phar archive has had its CRC verified.";}
a:4:{i:0;s:26:"PharFileInfo::isCompressed";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:77:"public bool PharFileInfo::isCompressed ([ int $compression_type = 9021976 ] )";i:3;s:102:"This returns whether a file is compressed within a Phar archive with either Gzip or Bzip2 compression.";}
a:4:{i:0;s:31:"PharFileInfo::isCompressedBZIP2";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:52:"public bool PharFileInfo::isCompressedBZIP2 ( void )";i:3;s:87:"This returns whether a file is compressed within a Phar archive with Bzip2 compression.";}
a:4:{i:0;s:28:"PharFileInfo::isCompressedGZ";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:49:"public bool PharFileInfo::isCompressedGZ ( void )";i:3;s:86:"This returns whether a file is compressed within a Phar archive with Gzip compression.";}
a:4:{i:0;s:32:"PharFileInfo::setCompressedBZIP2";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:53:"public bool PharFileInfo::setCompressedBZIP2 ( void )";i:3;s:393:"This method compresses the file inside the Phar archive using bzip2 compression. The extension must be enabled to take advantage of this feature. In addition, if the file is already compressed using gzip compression, the extension must be enabled in order to decompress the file. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed.";}
a:4:{i:0;s:29:"PharFileInfo::setCompressedGZ";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:50:"public bool PharFileInfo::setCompressedGZ ( void )";i:3;s:393:"This method compresses the file inside the Phar archive using gzip compression. The extension must be enabled to take advantage of this feature. In addition, if the file is already compressed using bzip2 compression, the extension must be enabled in order to decompress the file. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed.";}
a:4:{i:0;s:25:"PharFileInfo::setMetadata";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:57:"public void PharFileInfo::setMetadata ( mixed $metadata )";i:3;s:604:"should only be used to store customized data in a file that cannot be represented with existing information stored with a file. Meta-data can significantly slow down the performance of loading a phar archive if the data is large, or if there are many files containing meta-data. It is important to note that file permissions are natively supported inside a phar; it is possible to set them with the method. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed if the file is within a archive. Files within archives do not have this restriction.";}
a:4:{i:0;s:29:"PharFileInfo::setUncompressed";i:1;s:34:"(PHP >= 5.3.0, PECL phar >= 1.0.0)";i:2;s:50:"public bool PharFileInfo::setUncompressed ( void )";i:3;s:282:"This method decompresses the file inside the Phar archive. Depending on how the file is compressed, the or extensions must be enabled to take advantage of this feature. As with all functionality that modifies the contents of a phar, the INI variable must be off in order to succeed.";}
a:4:{i:0;s:13:"PharException";i:1;s:9:"(Unknown)";i:2;s:0:"";i:3;s:0:"";}
a:4:{i:0;s:23:"rar_wrapper_cache_stats";i:1;s:19:"(PECL rar >= 3.0.0)";i:2;s:39:"string rar_wrapper_cache_stats ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"RarArchive::close";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:38:"public bool RarArchive::close ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"RarArchive::getComment";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:45:"public string RarArchive::getComment ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"RarArchive::getEntries";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:44:"public array RarArchive::getEntries ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"RarArchive::getEntry";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:58:"public RarEntry RarArchive::getEntry ( string $entryname )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"RarArchive::isBroken";i:1;s:19:"(PECL rar >= 3.0.0)";i:2;s:41:"public bool RarArchive::isBroken ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"RarArchive::isSolid";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:40:"public bool RarArchive::isSolid ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:16:"RarArchive::open";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:128:"public static RarArchive RarArchive::open ( string $filename [, string $password = NULL [, callable $volume_callback = NULL ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"RarArchive::setAllowBroken";i:1;s:19:"(PECL rar >= 3.0.0)";i:2;s:61:"public bool RarArchive::setAllowBroken ( bool $allow_broken )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"RarArchive::__toString";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:45:"public string RarArchive::__toString ( void )";i:3;s:201:"Provides a string representation for this object. It currently shows the full path name of the archive volume that was opened and whether the resource is valid or was already closed through a call to .";}
a:4:{i:0;s:17:"RarEntry::extract";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:132:"public bool RarEntry::extract ( string $dir [, string $filepath = '' [, string $password = NULL [, bool $extended_data = false ]]] )";i:3;s:185:"extracts the entry's data. It will create new file in the specified with the name identical to the entry's name, unless the second argument is specified. See below for more information.";}
a:4:{i:0;s:17:"RarEntry::getAttr";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:37:"public int RarEntry::getAttr ( void )";i:3;s:57:"Returns the OS-dependent attributes of the archive entry.";}
a:4:{i:0;s:16:"RarEntry::getCrc";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:39:"public string RarEntry::getCrc ( void )";i:3;s:77:"Returns an hexadecimal string representation of the CRC of the archive entry.";}
a:4:{i:0;s:21:"RarEntry::getFileTime";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:44:"public string RarEntry::getFileTime ( void )";i:3;s:34:"Gets entry last modification time.";}
a:4:{i:0;s:19:"RarEntry::getHostOs";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:39:"public int RarEntry::getHostOs ( void )";i:3;s:53:"Returns the code of the host OS of the archive entry.";}
a:4:{i:0;s:19:"RarEntry::getMethod";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:39:"public int RarEntry::getMethod ( void )";i:3;s:68:"returns number of the method used when adding current archive entry.";}
a:4:{i:0;s:17:"RarEntry::getName";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:40:"public string RarEntry::getName ( void )";i:3;s:50:"Returns the name (with path) of the archive entry.";}
a:4:{i:0;s:23:"RarEntry::getPackedSize";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:43:"public int RarEntry::getPackedSize ( void )";i:3;s:37:"Get packed size of the archive entry.";}
a:4:{i:0;s:19:"RarEntry::getStream";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:59:"public resource RarEntry::getStream ([ string $password ] )";i:3;s:116:"Returns a file handler that supports read operations. This handler provides on-the-fly decompression for this entry.";}
a:4:{i:0;s:25:"RarEntry::getUnpackedSize";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:45:"public int RarEntry::getUnpackedSize ( void )";i:3;s:39:"Get unpacked size of the archive entry.";}
a:4:{i:0;s:20:"RarEntry::getVersion";i:1;s:17:"(PECL rar >= 0.1)";i:2;s:40:"public int RarEntry::getVersion ( void )";i:3;s:135:"Returns minimum version of RAR program (e.g. WinRAR) required to unpack the entry. It is encoded as 10 * major version + minor version.";}
a:4:{i:0;s:21:"RarEntry::isDirectory";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:42:"public bool RarEntry::isDirectory ( void )";i:3;s:47:"Tests whether the current entry is a directory.";}
a:4:{i:0;s:21:"RarEntry::isEncrypted";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:42:"public bool RarEntry::isEncrypted ( void )";i:3;s:55:"Tests whether the current entry contents are encrypted.";}
a:4:{i:0;s:20:"RarEntry::__toString";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:43:"public string RarEntry::__toString ( void )";i:3;s:318:"returns a textual representation for this entry. It includes whether the entry is a file or a directory (symbolic links and other special objects will be treated as files), the UTF-8 name of the entry and its CRC. The form and content of this representation may be changed in the future, so they cannot be relied upon.";}
a:4:{i:0;s:31:"RarException::isUsingExceptions";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:59:"public static bool RarException::isUsingExceptions ( void )";i:3;s:231:"Checks whether the RAR functions will emit warnings and return error values or whether they will throw exceptions in most of the circumstances (does not include some programmatic errors such as passing the wrong type of arguments).";}
a:4:{i:0;s:32:"RarException::setUsingExceptions";i:1;s:19:"(PECL rar >= 2.0.0)";i:2;s:78:"public static void RarException::setUsingExceptions ( bool $using_exceptions )";i:3;s:194:"If and only if the argument is, then, instead of emitting warnings and returning a special value indicating error when the UnRAR library encounters an error, an exception of type will be thrown.";}
a:4:{i:0;s:23:"ZipArchive::addEmptyDir";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.8.0)";i:2;s:48:"bool ZipArchive::addEmptyDir ( string $dirname )";i:3;s:39:"Adds an empty directory in the archive.";}
a:4:{i:0;s:19:"ZipArchive::addFile";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:114:"bool ZipArchive::addFile ( string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0 ]]] )";i:3;s:47:"Adds a file to a ZIP archive from a given path.";}
a:4:{i:0;s:25:"ZipArchive::addFromString";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:70:"bool ZipArchive::addFromString ( string $localname, string $contents )";i:3;s:47:"Add a file to a ZIP archive using its contents.";}
a:4:{i:0;s:19:"ZipArchive::addGlob";i:1;s:35:"(PHP 5 >= 5.3.0, PECL zip >= 1.9.0)";i:2;s:93:"bool ZipArchive::addGlob ( string $pattern [, int $flags = 0 [, array $options = array() ]] )";i:3;s:49:"Add files from a directory which match the glob .";}
a:4:{i:0;s:22:"ZipArchive::addPattern";i:1;s:35:"(PHP 5 >= 5.3.0, PECL zip >= 1.9.0)";i:2;s:100:"bool ZipArchive::addPattern ( string $pattern [, string $path = '.' [, array $options = array() ]] )";i:3;s:151:"Add files from a directory which match the regular expression . The operation is not recursive. The pattern will be matched against the file name only.";}
a:4:{i:0;s:17:"ZipArchive::close";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:31:"bool ZipArchive::close ( void )";i:3;s:111:"Close opened or created archive and save changes. This method is automatically called at the end of the script.";}
a:4:{i:0;s:23:"ZipArchive::deleteIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:43:"bool ZipArchive::deleteIndex ( int $index )";i:3;s:47:"Delete an entry in the archive using its index.";}
a:4:{i:0;s:22:"ZipArchive::deleteName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:44:"bool ZipArchive::deleteName ( string $name )";i:3;s:46:"Delete an entry in the archive using its name.";}
a:4:{i:0;s:21:"ZipArchive::extractTo";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:70:"bool ZipArchive::extractTo ( string $destination [, mixed $entries ] )";i:3;s:77:"Extract the complete archive or the given files to the specified destination.";}
a:4:{i:0;s:29:"ZipArchive::getArchiveComment";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:54:"string ZipArchive::getArchiveComment ([ int $flags ] )";i:3;s:32:"Returns the Zip archive comment.";}
a:4:{i:0;s:27:"ZipArchive::getCommentIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.4.0)";i:2;s:65:"string ZipArchive::getCommentIndex ( int $index [, int $flags ] )";i:3;s:54:"Returns the comment of an entry using the entry index.";}
a:4:{i:0;s:26:"ZipArchive::getCommentName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.4.0)";i:2;s:66:"string ZipArchive::getCommentName ( string $name [, int $flags ] )";i:3;s:53:"Returns the comment of an entry using the entry name.";}
a:4:{i:0;s:24:"ZipArchive::getFromIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.3.0)";i:2;s:82:"string ZipArchive::getFromIndex ( int $index [, int $length = 0 [, int $flags ]] )";i:3;s:43:"Returns the entry contents using its index.";}
a:4:{i:0;s:23:"ZipArchive::getFromName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:83:"string ZipArchive::getFromName ( string $name [, int $length = 0 [, int $flags ]] )";i:3;s:42:"Returns the entry contents using its name.";}
a:4:{i:0;s:24:"ZipArchive::getNameIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:62:"string ZipArchive::getNameIndex ( int $index [, int $flags ] )";i:3;s:45:"Returns the name of an entry using its index.";}
a:4:{i:0;s:27:"ZipArchive::getStatusString";i:1;s:16:"(PHP 5 >= 5.2.7)";i:2;s:43:"string ZipArchive::getStatusString ( void )";i:3;s:61:"Returns the status error message, system and/or zip messages.";}
a:4:{i:0;s:21:"ZipArchive::getStream";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:47:"resource ZipArchive::getStream ( string $name )";i:3;s:94:"Get a file handler to the entry defined by its name. For now it only supports read operations.";}
a:4:{i:0;s:22:"ZipArchive::locateName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:59:"int ZipArchive::locateName ( string $name [, int $flags ] )";i:3;s:32:"Locates an entry using its name.";}
a:4:{i:0;s:16:"ZipArchive::open";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:59:"mixed ZipArchive::open ( string $filename [, int $flags ] )";i:3;s:58:"Opens a new zip archive for reading, writing or modifying.";}
a:4:{i:0;s:23:"ZipArchive::renameIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:60:"bool ZipArchive::renameIndex ( int $index, string $newname )";i:3;s:38:"Renames an entry defined by its index.";}
a:4:{i:0;s:22:"ZipArchive::renameName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:61:"bool ZipArchive::renameName ( string $name, string $newname )";i:3;s:37:"Renames an entry defined by its name.";}
a:4:{i:0;s:29:"ZipArchive::setArchiveComment";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.4.0)";i:2;s:54:"bool ZipArchive::setArchiveComment ( string $comment )";i:3;s:33:"Set the comment of a ZIP archive.";}
a:4:{i:0;s:27:"ZipArchive::setCommentIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.4.0)";i:2;s:64:"bool ZipArchive::setCommentIndex ( int $index, string $comment )";i:3;s:49:"Set the comment of an entry defined by its index.";}
a:4:{i:0;s:26:"ZipArchive::setCommentName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.4.0)";i:2;s:65:"bool ZipArchive::setCommentName ( string $name, string $comment )";i:3;s:48:"Set the comment of an entry defined by its name.";}
a:4:{i:0;s:21:"ZipArchive::statIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:58:"array ZipArchive::statIndex ( int $index [, int $flags ] )";i:3;s:70:"The function obtains information about the entry defined by its index.";}
a:4:{i:0;s:20:"ZipArchive::statName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:59:"array ZipArchive::statName ( string $name [, int $flags ] )";i:3;s:69:"The function obtains information about the entry defined by its name.";}
a:4:{i:0;s:23:"ZipArchive::unchangeAll";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:37:"bool ZipArchive::unchangeAll ( void )";i:3;s:37:"Undo all changes done in the archive.";}
a:4:{i:0;s:27:"ZipArchive::unchangeArchive";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:41:"bool ZipArchive::unchangeArchive ( void )";i:3;s:93:"Revert all global changes to the archive. For now, this only reverts archive comment changes.";}
a:4:{i:0;s:25:"ZipArchive::unchangeIndex";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.1.0)";i:2;s:45:"bool ZipArchive::unchangeIndex ( int $index )";i:3;s:55:"Revert all changes done to an entry at the given index.";}
a:4:{i:0;s:24:"ZipArchive::unchangeName";i:1;s:35:"(PHP 5 >= 5.2.0, PECL zip >= 1.5.0)";i:2;s:46:"bool ZipArchive::unchangeName ( string $name )";i:3;s:36:"Revert all changes done to an entry.";}
a:4:{i:0;s:9:"zip_close";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:32:"void zip_close ( resource $zip )";i:3;s:34:"Closes the given ZIP file archive.";}
a:4:{i:0;s:15:"zip_entry_close";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:44:"bool zip_entry_close ( resource $zip_entry )";i:3;s:37:"Closes the specified directory entry.";}
a:4:{i:0;s:24:"zip_entry_compressedsize";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:52:"int zip_entry_compressedsize ( resource $zip_entry )";i:3;s:61:"Returns the compressed size of the specified directory entry.";}
a:4:{i:0;s:27:"zip_entry_compressionmethod";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:58:"string zip_entry_compressionmethod ( resource $zip_entry )";i:3;s:68:"Returns the compression method of the directory entry specified by .";}
a:4:{i:0;s:18:"zip_entry_filesize";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:46:"int zip_entry_filesize ( resource $zip_entry )";i:3;s:57:"Returns the actual size of the specified directory entry.";}
a:4:{i:0;s:14:"zip_entry_name";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:45:"string zip_entry_name ( resource $zip_entry )";i:3;s:50:"Returns the name of the specified directory entry.";}
a:4:{i:0;s:14:"zip_entry_open";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:76:"bool zip_entry_open ( resource $zip, resource $zip_entry [, string $mode ] )";i:3;s:50:"Opens a directory entry in a zip file for reading.";}
a:4:{i:0;s:14:"zip_entry_read";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:69:"string zip_entry_read ( resource $zip_entry [, int $length = 1024 ] )";i:3;s:35:"Reads from an open directory entry.";}
a:4:{i:0;s:8:"zip_open";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:38:"resource zip_open ( string $filename )";i:3;s:36:"Opens a new zip archive for reading.";}
a:4:{i:0;s:8:"zip_read";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip
>= 1.0.0)";i:2;s:35:"resource zip_read ( resource $zip )";i:3;s:43:"Reads the next entry in a zip file archive.";}
a:4:{i:0;s:7:"gzclose";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"bool gzclose ( resource $zp )";i:3;s:33:"Closes the given gz-file pointer.";}
a:4:{i:0;s:10:"gzcompress";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:97:"string gzcompress ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]] )";i:3;s:62:"This function compress the given string using the data format.";}
a:4:{i:0;s:8:"gzdecode";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:49:"string gzdecode ( string $data [, int $length ] )";i:3;s:54:"This function returns a decoded version of the input .";}
a:4:{i:0;s:9:"gzdeflate";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:92:"string gzdeflate ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]] )";i:3;s:62:"This function compress the given string using the data format.";}
a:4:{i:0;s:8:"gzencode";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:89:"string gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] )";i:3;s:98:"This function returns a compressed version of the input compatible with the output of the program.";}
a:4:{i:0;s:5:"gzeof";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int gzeof ( resource $zp )";i:3;s:37:"Tests the given GZ file pointer for .";}
a:4:{i:0;s:6:"gzfile";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"array gzfile ( string $filename [, int $use_include_path = 0 ] )";i:3;s:75:"This function is identical to, except that it returns the file in an array.";}
a:4:{i:0;s:6:"gzgetc";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"string gzgetc ( resource $zp )";i:3;s:98:"Returns a string containing a single (uncompressed) character read from the given gz-file pointer.";}
a:4:{i:0;s:6:"gzgets";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"string gzgets ( resource $zp, int $length )";i:3;s:188:"Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).";}
a:4:{i:0;s:7:"gzgetss";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:72:"string gzgetss ( resource $zp, int $length [, string $allowable_tags ] )";i:3;s:89:"Identical to, except that attempts to strip any HTML and PHP tags from the text it reads.";}
a:4:{i:0;s:9:"gzinflate";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:54:"string gzinflate ( string $data [, int $length = 0 ] )";i:3;s:40:"This function inflate a deflated string.";}
a:4:{i:0;s:6:"gzopen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"resource gzopen ( string $filename, string $mode [, int $use_include_path = 0 ] )";i:3;s:47:"Opens a gzip (.gz) file for reading or writing.";}
a:4:{i:0;s:10:"gzpassthru";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"int gzpassthru ( resource $zp )";i:3;s:121:"Reads to on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output.";}
a:4:{i:0;s:6:"gzputs";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:6:"gzread";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"string gzread ( resource $zp, int $length )";i:3;s:142:"reads up to bytes from the given gz-file pointer. Reading stops when (uncompressed) bytes have been read or is reached, whichever comes first.";}
a:4:{i:0;s:8:"gzrewind";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"bool gzrewind ( resource $zp )";i:3;s:98:"Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.";}
a:4:{i:0;s:6:"gzseek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:68:"int gzseek ( resource $zp, int $offset [, int $whence = SEEK_SET ] )";i:3;s:137:"Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) .";}
a:4:{i:0;s:6:"gztell";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"int gztell ( resource $zp )";i:3;s:96:"Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.";}
a:4:{i:0;s:12:"gzuncompress";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:57:"string gzuncompress ( string $data [, int $length = 0 ] )";i:3;s:45:"This function uncompress a compressed string.";}
a:4:{i:0;s:7:"gzwrite";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"int gzwrite ( resource $zp, string $string [, int $length ] )";i:3;s:44:"writes the contents of to the given gz-file.";}
a:4:{i:0;s:10:"readgzfile";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:66:"int readgzfile ( string $filename [, int $use_include_path = 0 ] )";i:3;s:63:"Reads a file, decompresses it and writes it to standard output.";}
a:4:{i:0;s:11:"zlib_decode";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:64:"string zlib_decode ( string $data [, string $max_decoded_len ] )";i:3;s:42:"Uncompress any raw/gzip/zlib encoded data.";}
a:4:{i:0;s:11:"zlib_encode";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:77:"string zlib_encode ( string $data, string $encoding [, string $level = -1 ] )";i:3;s:42:"Compress data with the specified encoding.";}
a:4:{i:0;s:20:"zlib_get_coding_type";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:36:"string zlib_get_coding_type ( void )";i:3;s:52:"Returns the coding type used for output compression.";}
a:4:{i:0;s:13:"m_checkstatus";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:53:"int m_checkstatus ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:24:"m_completeauthorizations";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:60:"int m_completeauthorizations ( resource $conn, int &$array )";i:3;s:0:"";}
a:4:{i:0;s:9:"m_connect";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:32:"int m_connect ( resource $conn )";i:3;s:0:"";}
a:4:{i:0;s:17:"m_connectionerror";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:43:"string m_connectionerror ( resource $conn )";i:3;s:0:"";}
a:4:{i:0;s:13:"m_deletetrans";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:54:"bool m_deletetrans ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:13:"m_destroyconn";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:37:"bool m_destroyconn ( resource $conn )";i:3;s:0:"";}
a:4:{i:0;s:15:"m_destroyengine";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:29:"void m_destroyengine ( void )";i:3;s:0:"";}
a:4:{i:0;s:9:"m_getcell";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:78:"string m_getcell ( resource $conn, int $identifier, string $column, int $row )";i:3;s:0:"";}
a:4:{i:0;s:14:"m_getcellbynum";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:80:"string m_getcellbynum ( resource $conn, int $identifier, int $column, int $row )";i:3;s:0:"";}
a:4:{i:0;s:19:"m_getcommadelimited";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:62:"string m_getcommadelimited ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:11:"m_getheader";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:71:"string m_getheader ( resource $conn, int $identifier, int $column_num )";i:3;s:0:"";}
a:4:{i:0;s:10:"m_initconn";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:28:"resource m_initconn ( void )";i:3;s:0:"";}
a:4:{i:0;s:12:"m_initengine";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:37:"int m_initengine ( string $location )";i:3;s:0:"";}
a:4:{i:0;s:18:"m_iscommadelimited";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:58:"int m_iscommadelimited ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:16:"m_maxconntimeout";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:51:"bool m_maxconntimeout ( resource $conn, int $secs )";i:3;s:0:"";}
a:4:{i:0;s:9:"m_monitor";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:32:"int m_monitor ( resource $conn )";i:3;s:0:"";}
a:4:{i:0;s:12:"m_numcolumns";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:52:"int m_numcolumns ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:9:"m_numrows";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:49:"int m_numrows ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:21:"m_parsecommadelimited";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:61:"int m_parsecommadelimited ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:14:"m_responsekeys";i:1;s:36:"(PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)";i:2;s:56:"array m_responsekeys ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:15:"m_responseparam";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:71:"string m_responseparam ( resource $conn, int $identifier, string $key )";i:3;s:0:"";}
a:4:{i:0;s:14:"m_returnstatus";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:54:"int m_returnstatus ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:13:"m_setblocking";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:45:"int m_setblocking ( resource $conn, int $tf )";i:3;s:0:"";}
a:4:{i:0;s:13:"m_setdropfile";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:55:"int m_setdropfile ( resource $conn, string $directory )";i:3;s:0:"";}
a:4:{i:0;s:7:"m_setip";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:55:"int m_setip ( resource $conn, string $host, int $port )";i:3;s:0:"";}
a:4:{i:0;s:15:"m_setssl_cafile";i:1;s:36:"(PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)";i:2;s:54:"int m_setssl_cafile ( resource $conn, string $cafile )";i:3;s:0:"";}
a:4:{i:0;s:14:"m_setssl_files";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:78:"int m_setssl_files ( resource $conn, string $sslkeyfile, string $sslcertfile )";i:3;s:0:"";}
a:4:{i:0;s:8:"m_setssl";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:56:"int m_setssl ( resource $conn, string $host, int $port )";i:3;s:0:"";}
a:4:{i:0;s:12:"m_settimeout";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:49:"int m_settimeout ( resource $conn, int $seconds )";i:3;s:0:"";}
a:4:{i:0;s:18:"m_sslcert_gen_hash";i:1;s:20:"(PECL mcve >= 5.2.0)";i:2;s:46:"string m_sslcert_gen_hash ( string $filename )";i:3;s:0:"";}
a:4:{i:0;s:18:"m_transactionssent";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:41:"int m_transactionssent ( resource $conn )";i:3;s:0:"";}
a:4:{i:0;s:14:"m_transinqueue";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:37:"int m_transinqueue ( resource $conn )";i:3;s:0:"";}
a:4:{i:0;s:13:"m_transkeyval";i:1;s:36:"(PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)";i:2;s:81:"int m_transkeyval ( resource $conn, int $identifier, string $key, string $value )";i:3;s:0:"";}
a:4:{i:0;s:10:"m_transnew";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:33:"int m_transnew ( resource $conn )";i:3;s:0:"";}
a:4:{i:0;s:11:"m_transsend";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:51:"int m_transsend ( resource $conn, int $identifier )";i:3;s:0:"";}
a:4:{i:0;s:7:"m_uwait";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:30:"int m_uwait ( int $microsecs )";i:3;s:0:"";}
a:4:{i:0;s:20:"m_validateidentifier";i:1;s:36:"(PHP 5 >= 5.0.5, PECL mcve >= 1.0.0)";i:2;s:52:"int m_validateidentifier ( resource $conn, int $tf )";i:3;s:0:"";}
a:4:{i:0;s:18:"m_verifyconnection";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:51:"bool m_verifyconnection ( resource $conn, int $tf )";i:3;s:0:"";}
a:4:{i:0;s:15:"m_verifysslcert";i:1;s:52:"(PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve
>= 1.0.0)";i:2;s:48:"bool m_verifysslcert ( resource $conn, int $tf )";i:3;s:0:"";}
a:4:{i:0;s:11:"calcul_hmac";i:1;s:22:"(PECL spplus >= 1.0.0)";i:2;s:159:"string calcul_hmac ( string $clent, string $siretcode, string $price, string $reference, string $validity, string $taxation, string $devise, string $language )";i:3;s:0:"";}
a:4:{i:0;s:10:"calculhmac";i:1;s:22:"(PECL spplus >= 1.0.0)";i:2;s:49:"string calculhmac ( string $clent, string $data )";i:3;s:0:"";}
a:4:{i:0;s:6:"nthmac";i:1;s:22:"(PECL spplus >= 1.0.0)";i:2;s:45:"string nthmac ( string $clent, string $data )";i:3;s:0:"";}
a:4:{i:0;s:16:"signeurlpaiement";i:1;s:22:"(PECL spplus >= 1.0.0)";i:2;s:45:"string nthmac ( string $clent, string $data )";i:3;s:0:"";}
a:4:{i:0;s:11:"crack_check";i:1;s:19:"(PECL crack >= 0.1)";i:2;s:59:"bool crack_check ( resource $dictionary, string $password )";i:3;s:78:"Performs an obscure check with the given password on the specified dictionary.";}
a:4:{i:0;s:15:"crack_closedict";i:1;s:19:"(PECL crack >= 0.1)";i:2;s:48:"bool crack_closedict ([ resource $dictionary ] )";i:3;s:32:"closes the specified identifier.";}
a:4:{i:0;s:20:"crack_getlastmessage";i:1;s:19:"(PECL crack >= 0.1)";i:2;s:36:"string crack_getlastmessage ( void )";i:3;s:48:"returns the message from the last obscure check.";}
a:4:{i:0;s:14:"crack_opendict";i:1;s:19:"(PECL crack >= 0.1)";i:2;s:46:"resource crack_opendict ( string $dictionary )";i:3;s:43:"opens the specified CrackLib for use with .";}
a:4:{i:0;s:10:"hash_algos";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:25:"array hash_algos ( void )";i:3;s:0:"";}
a:4:{i:0;s:9:"hash_copy";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:40:"resource hash_copy ( resource $context )";i:3;s:0:"";}
a:4:{i:0;s:9:"hash_file";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:81:"string hash_file ( string $algo, string $filename [, bool $raw_output = false ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"hash_final";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:69:"string hash_final ( resource $context [, bool $raw_output = false ] )";i:3;s:0:"";}
a:4:{i:0;s:14:"hash_hmac_file";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:99:"string hash_hmac_file ( string $algo, string $filename, string $key [, bool $raw_output = false ] )";i:3;s:0:"";}
a:4:{i:0;s:9:"hash_hmac";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:90:"string hash_hmac ( string $algo, string $data, string $key [, bool $raw_output = false ] )";i:3;s:0:"";}
a:4:{i:0;s:9:"hash_init";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:80:"resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )";i:3;s:0:"";}
a:4:{i:0;s:11:"hash_pbkdf2";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:134:"string hash_pbkdf2 ( string $algo, string $password, string $salt, int $iterations [, int $length = 0 [, bool $raw_output = false ]] )";i:3;s:0:"";}
a:4:{i:0;s:16:"hash_update_file";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:91:"bool hash_update_file ( resource $context, string $filename [, resource $context = NULL ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"hash_update_stream";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:84:"int hash_update_stream ( resource $context, resource $handle [, int $length = -1 ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"hash_update";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:52:"bool hash_update ( resource $context, string $data )";i:3;s:0:"";}
a:4:{i:0;s:4:"hash";i:1;s:34:"(PHP 5 >= 5.1.2, PECL hash >= 1.1)";i:2;s:72:"string hash ( string $algo, string $data [, bool $raw_output = false ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"mcrypt_cbc";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:87:"string mcrypt_cbc ( int $cipher, string $key, string $data, int $mode [, string $iv ] )";i:3;s:143:"The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The should be either or .";}
a:4:{i:0;s:10:"mcrypt_cfb";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"string mcrypt_cfb ( int $cipher, string $key, string $data, int $mode, string $iv )";i:3;s:143:"The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The should be either or .";}
a:4:{i:0;s:16:"mcrypt_create_iv";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_RANDOM ] )";i:3;s:59:"Creates an initialization vector (IV) from a random source.";}
a:4:{i:0;s:14:"mcrypt_decrypt";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:97:"string mcrypt_decrypt ( string $cipher, string $key, string $data, string $mode [, string $iv ] )";i:3;s:46:"Decrypts the and returns the unencrypted data.";}
a:4:{i:0;s:10:"mcrypt_ecb";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"string mcrypt_ecb ( int $cipher, string $key, string $data, int $mode )";i:3;s:143:"The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The should be either or .";}
a:4:{i:0;s:30:"mcrypt_enc_get_algorithms_name";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:54:"string mcrypt_enc_get_algorithms_name ( resource $td )";i:3;s:48:"This function returns the name of the algorithm.";}
a:4:{i:0;s:25:"mcrypt_enc_get_block_size";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:46:"int mcrypt_enc_get_block_size ( resource $td )";i:3;s:43:"Gets the blocksize of the opened algorithm.";}
a:4:{i:0;s:22:"mcrypt_enc_get_iv_size";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:43:"int mcrypt_enc_get_iv_size ( resource $td )";i:3;s:186:"This function returns the size of the IV of the algorithm specified by the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode.";}
a:4:{i:0;s:23:"mcrypt_enc_get_key_size";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:44:"int mcrypt_enc_get_key_size ( resource $td )";i:3;s:62:"Gets the maximum supported key size of the algorithm in bytes.";}
a:4:{i:0;s:25:"mcrypt_enc_get_modes_name";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:49:"string mcrypt_enc_get_modes_name ( resource $td )";i:3;s:43:"This function returns the name of the mode.";}
a:4:{i:0;s:34:"mcrypt_enc_get_supported_key_sizes";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:57:"array mcrypt_enc_get_supported_key_sizes ( resource $td )";i:3;s:53:"Gets the supported key sizes of the opened algorithm.";}
a:4:{i:0;s:34:"mcrypt_enc_is_block_algorithm_mode";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:56:"bool mcrypt_enc_is_block_algorithm_mode ( resource $td )";i:3;s:105:"Tells whether the algorithm of the opened mode works on blocks (e.g. for stream, and for cbc, cfb, ofb)..";}
a:4:{i:0;s:29:"mcrypt_enc_is_block_algorithm";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:51:"bool mcrypt_enc_is_block_algorithm ( resource $td )";i:3;s:68:"Tells whether the algorithm of the opened mode is a block algorithm.";}
a:4:{i:0;s:24:"mcrypt_enc_is_block_mode";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:46:"bool mcrypt_enc_is_block_mode ( resource $td )";i:3;s:92:"Tells whether the opened mode outputs blocks (e.g. for cbc and ecb, and for cfb and stream).";}
a:4:{i:0;s:20:"mcrypt_enc_self_test";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:41:"int mcrypt_enc_self_test ( resource $td )";i:3;s:79:"This function runs the self test on the algorithm specified by the descriptor .";}
a:4:{i:0;s:14:"mcrypt_encrypt";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:97:"string mcrypt_encrypt ( string $cipher, string $key, string $data, string $mode [, string $iv ] )";i:3;s:33:"Encrypts the data and returns it.";}
a:4:{i:0;s:21:"mcrypt_generic_deinit";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:43:"bool mcrypt_generic_deinit ( resource $td )";i:3;s:213:"This function terminates encryption specified by the encryption descriptor (). It clears all buffers, but does not close the module. You need to call yourself. (But PHP does this for you at the end of the script.)";}
a:4:{i:0;s:18:"mcrypt_generic_end";i:1;s:32:"(PHP 4 >= 4.0.2, PHP 5 <= 5.1.6)";i:2;s:40:"bool mcrypt_generic_end ( resource $td )";i:3;s:0:"";}
a:4:{i:0;s:19:"mcrypt_generic_init";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:65:"int mcrypt_generic_init ( resource $td, string $key, string $iv )";i:3;s:56:"You need to call this function before every call to or .";}
a:4:{i:0;s:14:"mcrypt_generic";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:52:"string mcrypt_generic ( resource $td, string $data )";i:3;s:265:"This function encrypts data. The data is padded with "" to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer than the input, due to the padding of the data.";}
a:4:{i:0;s:21:"mcrypt_get_block_size";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"int mcrypt_get_block_size ( int $cipher )";i:3;s:116:"The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.";}
a:4:{i:0;s:22:"mcrypt_get_cipher_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"string mcrypt_get_cipher_name ( int $cipher )";i:3;s:48:"is used to get the name of the specified cipher.";}
a:4:{i:0;s:18:"mcrypt_get_iv_size";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:55:"int mcrypt_get_iv_size ( string $cipher, string $mode )";i:3;s:62:"Gets the size of the IV belonging to a specific / combination.";}
a:4:{i:0;s:19:"mcrypt_get_key_size";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"int mcrypt_get_key_size ( int $cipher )";i:3;s:116:"The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.";}
a:4:{i:0;s:22:"mcrypt_list_algorithms";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:86:"array mcrypt_list_algorithms ([ string $lib_dir = ini_get("mcrypt.algorithms_dir") ] )";i:3;s:59:"Gets the list of all supported algorithms in the parameter.";}
a:4:{i:0;s:17:"mcrypt_list_modes";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:76:"array mcrypt_list_modes ([ string $lib_dir = ini_get("mcrypt.modes_dir") ] )";i:3;s:54:"Gets the list of all supported modes in the parameter.";}
a:4:{i:0;s:19:"mcrypt_module_close";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:41:"bool mcrypt_module_close ( resource $td )";i:3;s:39:"Closes the specified encryption handle.";}
a:4:{i:0;s:33:"mcrypt_module_get_algo_block_size";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:80:"int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )";i:3;s:46:"Gets the blocksize of the specified algorithm.";}
a:4:{i:0;s:31:"mcrypt_module_get_algo_key_size";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:78:"int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )";i:3;s:54:"Gets the maximum supported keysize of the opened mode.";}
a:4:{i:0;s:37:"mcrypt_module_get_supported_key_sizes";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:86:"array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )";i:3;s:167:"Returns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and are supported by the algorithm.";}
a:4:{i:0;s:37:"mcrypt_module_is_block_algorithm_mode";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:80:"bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )";i:3;s:132:"This function returns if the mode is for use with block algorithms, otherwise it returns . (e.g. for stream, and for cbc, cfb, ofb).";}
a:4:{i:0;s:32:"mcrypt_module_is_block_algorithm";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:80:"bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )";i:3;s:96:"This function returns if the specified algorithm is a block algorithm, or if it is a stream one.";}
a:4:{i:0;s:27:"mcrypt_module_is_block_mode";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:70:"bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )";i:3;s:134:"This function returns if the mode outputs blocks of bytes or if it outputs just bytes. (e.g. for cbc and ecb, and for cfb and stream).";}
a:4:{i:0;s:18:"mcrypt_module_open";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:116:"resource mcrypt_module_open ( string $algorithm, string $algorithm_directory, string $mode, string $mode_directory )";i:3;s:192:"This function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. or is one of the constants. The module is closed by calling .";}
a:4:{i:0;s:23:"mcrypt_module_self_test";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:71:"bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )";i:3;s:60:"This function runs the self test on the algorithm specified.";}
a:4:{i:0;s:10:"mcrypt_ofb";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"string mcrypt_ofb ( int $cipher, string $key, string $data, int $mode, string $iv )";i:3;s:143:"The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The should be either or .";}
a:4:{i:0;s:16:"mdecrypt_generic";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:54:"string mdecrypt_generic ( resource $td, string $data )";i:3;s:155:"This function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data.";}
a:4:{i:0;s:11:"mhash_count";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:24:"int mhash_count ( void )";i:3;s:35:"Gets the highest available hash ID.";}
a:4:{i:0;s:20:"mhash_get_block_size";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"int mhash_get_block_size ( int $hash )";i:3;s:43:"Gets the size of a block of the specified .";}
a:4:{i:0;s:19:"mhash_get_hash_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"string mhash_get_hash_name ( int $hash )";i:3;s:32:"Gets the name of the specified .";}
a:4:{i:0;s:16:"mhash_keygen_s2k";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:81:"string mhash_keygen_s2k ( int $hash, string $password, string $salt, int $bytes )";i:3;s:64:"Generates a key according to the given, using an user provided .";}
a:4:{i:0;s:5:"mhash";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"string mhash ( int $hash, string $data [, string $key ] )";i:3;s:45:"applies a hash function specified by to the .";}
a:4:{i:0;s:24:"openssl_cipher_iv_length";i:1;s:20:"(PHP 5 >= PHP 5.3.3)";i:2;s:47:"int openssl_cipher_iv_length ( string $method )";i:3;s:26:"Gets the cipher iv length.";}
a:4:{i:0;s:26:"openssl_csr_export_to_file";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:95:"bool openssl_csr_export_to_file ( resource $csr, string $outfilename [, bool $notext = true ] )";i:3;s:113:"takes the Certificate Signing Request represented by and saves it as ascii-armoured text into the file named by .";}
a:4:{i:0;s:18:"openssl_csr_export";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:80:"bool openssl_csr_export ( resource $csr, string &$out [, bool $notext = true ] )";i:3;s:125:"takes the Certificate Signing Request represented by and stores it as ascii-armoured text into, which is passed by reference.";}
a:4:{i:0;s:26:"openssl_csr_get_public_key";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:83:"resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"openssl_csr_get_subject";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:77:"array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"openssl_csr_new";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:102:"mixed openssl_csr_new ( array $dn, resource &$privkey [, array $configargs [, array $extraattribs ]] )";i:3;s:158:"generates a new CSR (Certificate Signing Request) based on the information provided by, which represents the Distinguished Name to be used in the certificate.";}
a:4:{i:0;s:16:"openssl_csr_sign";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:126:"resource openssl_csr_sign ( mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs [, int $serial = 0 ]] )";i:3;s:58:"generates an x509 certificate resource from the given CSR.";}
a:4:{i:0;s:15:"openssl_decrypt";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:115:"string openssl_decrypt ( string $data, string $method, string $password [, int $options = 0 [, string $iv = "" ]] )";i:3;s:82:"Takes a raw or base64 encoded string and decrypts it using a given method and key.";}
a:4:{i:0;s:22:"openssl_dh_compute_key";i:1;s:17:"(PHP 5 >= 5.3.11)";i:2;s:67:"string openssl_dh_compute_key ( string $pub_key, resource $dh_key )";i:3;s:0:"";}
a:4:{i:0;s:14:"openssl_digest";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:84:"string openssl_digest ( string $data, string $method [, bool $raw_output = false ] )";i:3;s:113:"Computes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string.";}
a:4:{i:0;s:15:"openssl_encrypt";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:115:"string openssl_encrypt ( string $data, string $method, string $password [, int $options = 0 [, string $iv = "" ]] )";i:3;s:85:"Encrypts given data with given method and key, returns a raw or base64 encoded string";}
a:4:{i:0;s:20:"openssl_error_string";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:36:"string openssl_error_string ( void )";i:3;s:203:"returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one.";}
a:4:{i:0;s:16:"openssl_free_key";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:50:"void openssl_free_key ( resource $key_identifier )";i:3;s:56:"frees the key associated with the specified from memory.";}
a:4:{i:0;s:26:"openssl_get_cipher_methods";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:61:"array openssl_get_cipher_methods ([ bool $aliases = false ] )";i:3;s:40:"Gets a list of available cipher methods.";}
a:4:{i:0;s:22:"openssl_get_md_methods";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:57:"array openssl_get_md_methods ([ bool $aliases = false ] )";i:3;s:40:"Gets a list of available digest methods.";}
a:4:{i:0;s:22:"openssl_get_privatekey";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:21:"openssl_get_publickey";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:12:"openssl_open";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:118:"bool openssl_open ( string $sealed_data, string &$open_data, string $env_key, mixed $priv_key_id [, string $method ] )";i:3;s:261:"opens (decrypts) using the private key associated with the key identifier and the envelope key, and fills with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See for more information.";}
a:4:{i:0;s:14:"openssl_pbkdf2";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:120:"string openssl_pbkdf2 ( string $password, string $salt, int $key_length, int $iterations [, string $digest_algorithm ] )";i:3;s:0:"";}
a:4:{i:0;s:29:"openssl_pkcs12_export_to_file";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:116:"bool openssl_pkcs12_export_to_file ( mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args ] )";i:3;s:53:"stores into a file named by in a PKCS#12 file format.";}
a:4:{i:0;s:21:"openssl_pkcs12_export";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:104:"bool openssl_pkcs12_export ( mixed $x509, string &$out, mixed $priv_key, string $pass [, array $args ] )";i:3;s:55:"stores into a string named by in a PKCS#12 file format.";}
a:4:{i:0;s:19:"openssl_pkcs12_read";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:72:"bool openssl_pkcs12_read ( string $pkcs12, array &$certs, string $pass )";i:3;s:69:"parses the PKCS#12 certificate store supplied by into a array named .";}
a:4:{i:0;s:21:"openssl_pkcs7_decrypt";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:109:"bool openssl_pkcs7_decrypt ( string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey ] )";i:3;s:144:"Decrypts the S/MIME encrypted message contained in the file specified by using the certificate and its associated private key specified by and .";}
a:4:{i:0;s:21:"openssl_pkcs7_encrypt";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:159:"bool openssl_pkcs7_encrypt ( string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )";i:3;s:153:"takes the contents of the file named and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by .";}
a:4:{i:0;s:18:"openssl_pkcs7_sign";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:172:"bool openssl_pkcs7_sign ( string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )";i:3;s:131:"takes the contents of the file named and signs them using the certificate and its matching private key specified by and parameters.";}
a:4:{i:0;s:20:"openssl_pkcs7_verify";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:145:"mixed openssl_pkcs7_verify ( string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )";i:3;s:88:"reads the S/MIME message contained in the given file and examines the digital signature.";}
a:4:{i:0;s:27:"openssl_pkey_export_to_file";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:114:"bool openssl_pkey_export_to_file ( mixed $key, string $outfilename [, string $passphrase [, array $configargs ]] )";i:3;s:75:"saves an ascii-armoured (PEM encoded) rendition of into the file named by .";}
a:4:{i:0;s:19:"openssl_pkey_export";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:99:"bool openssl_pkey_export ( mixed $key, string &$out [, string $passphrase [, array $configargs ]] )";i:3;s:82:"exports as a PEM encoded string and stores it into (which is passed by reference).";}
a:4:{i:0;s:17:"openssl_pkey_free";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:40:"void openssl_pkey_free ( resource $key )";i:3;s:46:"This function frees a private key created by .";}
a:4:{i:0;s:24:"openssl_pkey_get_details";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:48:"array openssl_pkey_get_details ( resource $key )";i:3;s:56:"This function returns the key details (bits, key, type).";}
a:4:{i:0;s:24:"openssl_pkey_get_private";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:77:"resource openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] )";i:3;s:50:"parses and prepares it for use by other functions.";}
a:4:{i:0;s:23:"openssl_pkey_get_public";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:55:"resource openssl_pkey_get_public ( mixed $certificate )";i:3;s:72:"extracts the public key from and prepares it for use by other functions.";}
a:4:{i:0;s:16:"openssl_pkey_new";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:50:"resource openssl_pkey_new ([ array $configargs ] )";i:3;s:100:"generates a new private and public key pair. The public component of the key can be obtained using .";}
a:4:{i:0;s:23:"openssl_private_decrypt";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:119:"bool openssl_private_decrypt ( string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )";i:3;s:69:"decrypts that was previous encrypted via and stores the result into .";}
a:4:{i:0;s:23:"openssl_private_encrypt";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:117:"bool openssl_private_encrypt ( string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )";i:3;s:88:"encrypts with private and stores the result into . Encrypted data can be decrypted via .";}
a:4:{i:0;s:22:"openssl_public_decrypt";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:118:"bool openssl_public_decrypt ( string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )";i:3;s:69:"decrypts that was previous encrypted via and stores the result into .";}
a:4:{i:0;s:22:"openssl_public_encrypt";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:116:"bool openssl_public_encrypt ( string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )";i:3;s:87:"encrypts with public and stores the result into . Encrypted data can be decrypted via .";}
a:4:{i:0;s:27:"openssl_random_pseudo_bytes";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:76:"string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )";i:3;s:89:"Generates a of pseudo-random bytes, with the number of bytes determined by the parameter.";}
a:4:{i:0;s:12:"openssl_seal";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:113:"int openssl_seal ( string $data, string &$sealed_data, array &$env_keys, array $pub_key_ids [, string $method ] )";i:3;s:425:"seals (encrypts) by using RC4 with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in and each encrypted key is returned in . This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.";}
a:4:{i:0;s:12:"openssl_sign";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:118:"bool openssl_sign ( string $data, string &$signature, mixed $priv_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )";i:3;s:171:"computes a signature for the specified by using SHA1 for hashing followed by encryption using the private key associated with . Note that the data itself is not encrypted.";}
a:4:{i:0;s:14:"openssl_verify";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:117:"int openssl_verify ( string $data, string $signature, mixed $pub_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )";i:3;s:164:"verifies that the is correct for the specified using the public key associated with . This must be the public key corresponding to the private key used for signing.";}
a:4:{i:0;s:30:"openssl_x509_check_private_key";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:63:"bool openssl_x509_check_private_key ( mixed $cert, mixed $key )";i:3;s:65:"Checks whether the given is the private key that corresponds to .";}
a:4:{i:0;s:25:"openssl_x509_checkpurpose";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:118:"int openssl_x509_checkpurpose ( mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )";i:3;s:67:"examines a certificate to see if it can be used for the specified .";}
a:4:{i:0;s:27:"openssl_x509_export_to_file";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:94:"bool openssl_x509_export_to_file ( mixed $x509, string $outfilename [, bool $notext = TRUE ] )";i:3;s:52:"stores into a file named by in a PEM encoded format.";}
a:4:{i:0;s:19:"openssl_x509_export";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:82:"bool openssl_x509_export ( mixed $x509, string &$output [, bool $notext = TRUE ] )";i:3;s:54:"stores into a string named by in a PEM encoded format.";}
a:4:{i:0;s:17:"openssl_x509_free";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:45:"void openssl_x509_free ( resource $x509cert )";i:3;s:73:"frees the certificate associated with the specified resource from memory.";}
a:4:{i:0;s:18:"openssl_x509_parse";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:73:"array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )";i:3;s:136:"returns information about the supplied, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.";}
a:4:{i:0;s:17:"openssl_x509_read";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:50:"resource openssl_x509_read ( mixed $x509certdata )";i:3;s:76:"parses the certificate supplied by and returns a resource identifier for it.";}
a:4:{i:0;s:17:"password_get_info";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:40:"array password_get_info ( string $hash )";i:3;s:132:"When passed in a valid hash created by an algorithm supported by, this function will return an array of information about that hash.";}
a:4:{i:0;s:13:"password_hash";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:76:"string password_hash ( string $password, integer $algo [, array $options ] )";i:3;s:69:"creates a new password hash using a strong one-way hashing algorithm.";}
a:4:{i:0;s:21:"password_needs_rehash";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:81:"boolean password_needs_rehash ( string $hash, string $algo [, string $options ] )";i:3;s:153:"This function checks to see if the supplied hash implements the algorithm and options provided. If not, it is assumed that the hash needs to be rehashed.";}
a:4:{i:0;s:15:"password_verify";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:58:"boolean password_verify ( string $password, string $hash )";i:3;s:56:"Verifies that the given hash matches the given password.";}
a:4:{i:0;s:9:"dba_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"void dba_close ( resource $handle )";i:3;s:89:"closes the established database and frees all resources of the specified database handle.";}
a:4:{i:0;s:10:"dba_delete";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"bool dba_delete ( string $key, resource $handle )";i:3;s:46:"deletes the specified entry from the database.";}
a:4:{i:0;s:10:"dba_exists";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"bool dba_exists ( string $key, resource $handle )";i:3;s:52:"checks whether the specified exists in the database.";}
a:4:{i:0;s:9:"dba_fetch";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"string dba_fetch ( string $key, resource $handle )";i:3;s:64:"fetches the data specified by from the database specified with .";}
a:4:{i:0;s:12:"dba_firstkey";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"string dba_firstkey ( resource $handle )";i:3;s:131:"returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.";}
a:4:{i:0;s:12:"dba_handlers";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:49:"array dba_handlers ([ bool $full_info = false ] )";i:3;s:50:"list all the handlers supported by this extension.";}
a:4:{i:0;s:10:"dba_insert";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"bool dba_insert ( string $key, string $value, resource $handle )";i:3;s:55:"inserts the entry described with and into the database.";}
a:4:{i:0;s:13:"dba_key_split";i:1;s:7:"(PHP 5)";i:2;s:34:"mixed dba_key_split ( mixed $key )";i:3;s:66:"splits a key (string representation) into an array representation.";}
a:4:{i:0;s:8:"dba_list";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:23:"array dba_list ( void )";i:3;s:29:"list all open database files.";}
a:4:{i:0;s:11:"dba_nextkey";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"string dba_nextkey ( resource $handle )";i:3;s:75:"returns the next key of the database and advances the internal key pointer.";}
a:4:{i:0;s:8:"dba_open";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"resource dba_open ( string $path, string $mode [, string $handler [, mixed $... ]] )";i:3;s:48:"establishes a database instance for with using .";}
a:4:{i:0;s:12:"dba_optimize";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"bool dba_optimize ( resource $handle )";i:3;s:34:"optimizes the underlying database.";}
a:4:{i:0;s:9:"dba_popen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:85:"resource dba_popen ( string $path, string $mode [, string $handler [, mixed $... ]] )";i:3;s:59:"establishes a persistent database instance for with using .";}
a:4:{i:0;s:11:"dba_replace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"bool dba_replace ( string $key, string $value, resource $handle )";i:3;s:81:"replaces or inserts the entry described with and into the database specified by .";}
a:4:{i:0;s:8:"dba_sync";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"bool dba_sync ( resource $handle )";i:3;s:97:"synchronizes the database. This will probably trigger a physical write to the disk, if supported.";}
a:4:{i:0;s:9:"dbx_close";i:1;s:51:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx
>= 1.1.0)";i:2;s:41:"int dbx_close ( object $link_identifier )";i:3;s:0:"";}
a:4:{i:0;s:11:"dbx_compare";i:1;s:51:"(PHP 4 >= 4.1.0, PHP 5 <= 5.0.5, PECL dbx
>= 1.1.0)";i:2;s:113:"int dbx_compare ( array $row_a, array $row_b, string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE ] )";i:3;s:81:"is a helper function for to ease the make and use of the custom sorting function.";}
a:4:{i:0;s:11:"dbx_connect";i:1;s:51:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx
>= 1.1.0)";i:2;s:125:"object dbx_connect ( mixed $module, string $host, string $database, string $username, string $password [, int $persistent ] )";i:3;s:33:"Opens a connection to a database.";}
a:4:{i:0;s:9:"dbx_error";i:1;s:51:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx
>= 1.1.0)";i:2;s:44:"string dbx_error ( object $link_identifier )";i:3;s:31:"returns the last error message.";}
a:4:{i:0;s:17:"dbx_escape_string";i:1;s:51:"(PHP 4 >= 4.3.0, PHP 5 <= 5.0.5, PECL dbx
>= 1.1.0)";i:2;s:66:"string dbx_escape_string ( object $link_identifier, string $text )";i:3;s:74:"Escape the given string so that it can safely be used in an sql-statement.";}
a:4:{i:0;s:13:"dbx_fetch_row";i:1;s:35:"(PHP 5 <= 5.0.5, PECL dbx >= 1.1.0)";i:2;s:49:"mixed dbx_fetch_row ( object $result_identifier )";i:3;s:60:"fetches rows from a result identifier that had the flag set.";}
a:4:{i:0;s:9:"dbx_query";i:1;s:51:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx
>= 1.1.0)";i:2;s:82:"mixed dbx_query ( object $link_identifier, string $sql_statement [, int $flags ] )";i:3;s:36:"Sends a query and fetch all results.";}
a:4:{i:0;s:8:"dbx_sort";i:1;s:51:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx
>= 1.1.0)";i:2;s:63:"bool dbx_sort ( object $result, string $user_compare_function )";i:3;s:54:"Sort a result from a call with a custom sort function.";}
a:4:{i:0;s:15:"odbc_autocommit";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"mixed odbc_autocommit ( resource $connection_id [, bool $OnOff = false ] )";i:3;s:29:"Toggles autocommit behaviour.";}
a:4:{i:0;s:12:"odbc_binmode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"bool odbc_binmode ( resource $result_id, int $mode )";i:3;s:76:"Enables handling of binary column data. ODBC SQL types affected are, , and .";}
a:4:{i:0;s:14:"odbc_close_all";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"void odbc_close_all ( void )";i:3;s:54:"will close down all connections to database server(s).";}
a:4:{i:0;s:10:"odbc_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"void odbc_close ( resource $connection_id )";i:3;s:50:"Closes down the connection to the database server.";}
a:4:{i:0;s:21:"odbc_columnprivileges";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:133:"resource odbc_columnprivileges ( resource $connection_id, string $qualifier, string $owner, string $table_name, string $column_name )";i:3;s:60:"Lists columns and associated privileges for the given table.";}
a:4:{i:0;s:12:"odbc_columns";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:138:"resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )";i:3;s:41:"Lists all columns in the requested range.";}
a:4:{i:0;s:11:"odbc_commit";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"bool odbc_commit ( resource $connection_id )";i:3;s:51:"Commits all pending transactions on the connection.";}
a:4:{i:0;s:12:"odbc_connect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"resource odbc_connect ( string $dsn, string $user, string $password [, int $cursor_type ] )";i:3;s:192:"The connection id returned by this functions is needed by other ODBC functions. You can have multiple connections open at once as long as they either use different db or different credentials.";}
a:4:{i:0;s:11:"odbc_cursor";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"string odbc_cursor ( resource $result_id )";i:3;s:44:"Gets the cursorname for the given result_id.";}
a:4:{i:0;s:16:"odbc_data_source";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:67:"array odbc_data_source ( resource $connection_id, int $fetch_type )";i:3;s:85:"This function will return the list of available DSN (after calling it several times).";}
a:4:{i:0;s:7:"odbc_do";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:10:"odbc_error";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:48:"string odbc_error ([ resource $connection_id ] )";i:3;s:79:"Returns a six-digit ODBC state, or an empty string if there has been no errors.";}
a:4:{i:0;s:13:"odbc_errormsg";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:51:"string odbc_errormsg ([ resource $connection_id ] )";i:3;s:104:"Returns a string containing the last ODBC error message, or an empty string if there has been no errors.";}
a:4:{i:0;s:9:"odbc_exec";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"resource odbc_exec ( resource $connection_id, string $query_string [, int $flags ] )";i:3;s:46:"Sends an SQL statement to the database server.";}
a:4:{i:0;s:12:"odbc_execute";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:70:"bool odbc_execute ( resource $result_id [, array $parameters_array ] )";i:3;s:36:"Executes a statement prepared with .";}
a:4:{i:0;s:16:"odbc_fetch_array";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:63:"array odbc_fetch_array ( resource $result [, int $rownumber ] )";i:3;s:101:"Fetch an associative from an ODBC query. See the changelog below for when this function is available.";}
a:4:{i:0;s:15:"odbc_fetch_into";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:85:"int odbc_fetch_into ( resource $result_id, array &$result_array [, int $rownumber ] )";i:3;s:27:"Fetch one result row into .";}
a:4:{i:0;s:17:"odbc_fetch_object";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:65:"object odbc_fetch_object ( resource $result [, int $rownumber ] )";i:3;s:89:"Fetch an from an ODBC query. See the changelog below for when this function is available.";}
a:4:{i:0;s:14:"odbc_fetch_row";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"bool odbc_fetch_row ( resource $result_id [, int $row_number ] )";i:3;s:114:"Fetches a row of the data that was returned by or . After is called, the fields of that row can be accessed with .";}
a:4:{i:0;s:14:"odbc_field_len";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"int odbc_field_len ( resource $result_id, int $field_number )";i:3;s:81:"Gets the length of the field referenced by number in the given result identifier.";}
a:4:{i:0;s:15:"odbc_field_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"string odbc_field_name ( resource $result_id, int $field_number )";i:3;s:92:"Gets the name of the field occupying the given column number in the given result identifier.";}
a:4:{i:0;s:14:"odbc_field_num";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"int odbc_field_num ( resource $result_id, string $field_name )";i:3;s:102:"Gets the number of the column slot that corresponds to the named field in the given result identifier.";}
a:4:{i:0;s:20:"odbc_field_precision";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:16:"odbc_field_scale";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"int odbc_field_scale ( resource $result_id, int $field_number )";i:3;s:80:"Gets the scale of the field referenced by number in the given result identifier.";}
a:4:{i:0;s:15:"odbc_field_type";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"string odbc_field_type ( resource $result_id, int $field_number )";i:3;s:83:"Gets the SQL type of the field referenced by number in the given result identifier.";}
a:4:{i:0;s:16:"odbc_foreignkeys";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:169:"resource odbc_foreignkeys ( resource $connection_id, string $pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier, string $fk_owner, string $fk_table )";i:3;s:150:"Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table";}
a:4:{i:0;s:16:"odbc_free_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"bool odbc_free_result ( resource $result_id )";i:3;s:40:"Free resources associated with a result.";}
a:4:{i:0;s:16:"odbc_gettypeinfo";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:73:"resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )";i:3;s:68:"Retrieves information about data types supported by the data source.";}
a:4:{i:0;s:16:"odbc_longreadlen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"bool odbc_longreadlen ( resource $result_id, int $length )";i:3;s:51:"Enables handling of LONG and LONGVARBINARY columns.";}
a:4:{i:0;s:16:"odbc_next_result";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:45:"bool odbc_next_result ( resource $result_id )";i:3;s:109:"Checks if there are more result sets available as well as allowing access to the next result set via, ,, etc.";}
a:4:{i:0;s:15:"odbc_num_fields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"int odbc_num_fields ( resource $result_id )";i:3;s:54:"Gets the number of fields (columns) in an ODBC result.";}
a:4:{i:0;s:13:"odbc_num_rows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"int odbc_num_rows ( resource $result_id )";i:3;s:172:"Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements returns the number of rows affected. For a SELECT clause this be the number of rows available.";}
a:4:{i:0;s:13:"odbc_pconnect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:92:"resource odbc_pconnect ( string $dsn, string $user, string $password [, int $cursor_type ] )";i:3;s:39:"Opens a persistent database connection.";}
a:4:{i:0;s:12:"odbc_prepare";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"resource odbc_prepare ( resource $connection_id, string $query_string )";i:3;s:107:"Prepares a statement for execution. The result identifier can be used later to execute the statement with .";}
a:4:{i:0;s:16:"odbc_primarykeys";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:102:"resource odbc_primarykeys ( resource $connection_id, string $qualifier, string $owner, string $table )";i:3;s:113:"Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table.";}
a:4:{i:0;s:21:"odbc_procedurecolumns";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"resource odbc_procedurecolumns ( resource $connection_id )";i:3;s:52:"Retrieve information about parameters to procedures.";}
a:4:{i:0;s:15:"odbc_procedures";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"resource odbc_procedures ( resource $connection_id )";i:3;s:44:"Lists all procedures in the requested range.";}
a:4:{i:0;s:15:"odbc_result_all";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"int odbc_result_all ( resource $result_id [, string $format ] )";i:3;s:98:"Prints all rows from a result identifier produced by . The result is printed in HTML table format.";}
a:4:{i:0;s:11:"odbc_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"mixed odbc_result ( resource $result_id, mixed $field )";i:3;s:15:"Get result data";}
a:4:{i:0;s:13:"odbc_rollback";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"bool odbc_rollback ( resource $connection_id )";i:3;s:52:"Rolls back all pending statements on the connection.";}
a:4:{i:0;s:14:"odbc_setoption";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"bool odbc_setoption ( resource $id, int $function, int $option, int $param )";i:3;s:468:"This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options.";}
a:4:{i:0;s:19:"odbc_specialcolumns";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:143:"resource odbc_specialcolumns ( resource $connection_id, int $type, string $qualifier, string $owner, string $table, int $scope, int $nullable )";i:3;s:185:"Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction.";}
a:4:{i:0;s:15:"odbc_statistics";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:134:"resource odbc_statistics ( resource $connection_id, string $qualifier, string $owner, string $table_name, int $unique, int $accuracy )";i:3;s:45:"Get statistics about a table and its indexes.";}
a:4:{i:0;s:20:"odbc_tableprivileges";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:105:"resource odbc_tableprivileges ( resource $connection_id, string $qualifier, string $owner, string $name )";i:3;s:82:"Lists tables in the requested range and the privileges associated with each table.";}
a:4:{i:0;s:11:"odbc_tables";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:124:"resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )";i:3;s:40:"Lists all tables in the requested range.";}
a:4:{i:0;s:21:"PDO::beginTransaction";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:42:"public bool PDO::beginTransaction ( void )";i:3;s:278:"Turns off autocommit mode. While autocommit mode is turned off, changes made to the database via the PDO object instance are not committed until you end the transaction by calling . Calling will roll back all changes to the database and return the connection to autocommit mode.";}
a:4:{i:0;s:11:"PDO::commit";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:32:"public bool PDO::commit ( void )";i:3;s:124:"Commits a transaction, returning the database connection to autocommit mode until the next call to starts a new transaction.";}
a:4:{i:0;s:16:"PDO::__construct";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:110:"public PDO::__construct() ( string $dsn [, string $username [, string $password [, array $driver_options ]]] )";i:3;s:75:"Creates a PDO instance to represent a connection to the requested database.";}
a:4:{i:0;s:14:"PDO::errorCode";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:36:"public mixed PDO::errorCode ( void )";i:3;s:0:"";}
a:4:{i:0;s:14:"PDO::errorInfo";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:36:"public array PDO::errorInfo ( void )";i:3;s:0:"";}
a:4:{i:0;s:9:"PDO::exec";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:42:"public int PDO::exec ( string $statement )";i:3;s:108:"executes an SQL statement in a single function call, returning the number of rows affected by the statement.";}
a:4:{i:0;s:17:"PDO::getAttribute";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:49:"public mixed PDO::getAttribute ( int $attribute )";i:3;s:115:"This function returns the value of a database connection attribute. To retrieve PDOStatement attributes, refer to .";}
a:4:{i:0;s:24:"PDO::getAvailableDrivers";i:1;s:35:"(PHP 5 >= 5.1.3, PECL pdo >= 1.0.3)";i:2;s:53:"public static array PDO::getAvailableDrivers ( void )";i:3;s:93:"This function returns all currently available PDO drivers which can be used in parameter of .";}
a:4:{i:0;s:18:"PDO::inTransaction";i:1;s:35:"(PHP 5 >= 5.3.3, Bundled pdo_pgsql)";i:2;s:39:"public bool PDO::inTransaction ( void )";i:3;s:133:"Checks if a transaction is currently active within the driver. This method only works for database drivers that support transactions.";}
a:4:{i:0;s:17:"PDO::lastInsertId";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:58:"public string PDO::lastInsertId ([ string $name = NULL ] )";i:3;s:204:"Returns the ID of the last inserted row, or the last value from a sequence object, depending on the underlying driver. For example, requires you to specify the name of a sequence object for the parameter.";}
a:4:{i:0;s:12:"PDO::prepare";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:91:"public PDOStatement PDO::prepare ( string $statement [, array $driver_options = array() ] )";i:3;s:455:"Prepares an SQL statement to be executed by the method. The SQL statement can contain zero or more named (:name) or question mark (?) parameter markers for which real values will be substituted when the statement is executed. You cannot use both named and question mark parameter markers within the same SQL statement; pick one or the other parameter style. Use these parameters to bind any user-input, do not include the user-input directly in the query.";}
a:4:{i:0;s:10:"PDO::query";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:52:"public PDOStatement PDO::query ( string $statement )";i:3;s:138:"executes an SQL statement in a single function call, returning the result set (if any) returned by the statement as a PDOStatement object.";}
a:4:{i:0;s:10:"PDO::quote";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.1)";i:2;s:85:"public string PDO::quote ( string $string [, int $parameter_type = PDO::PARAM_STR ] )";i:3;s:167:"places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver.";}
a:4:{i:0;s:13:"PDO::rollBack";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:34:"public bool PDO::rollBack ( void )";i:3;s:99:"Rolls back the current transaction, as initiated by . A will be thrown if no transaction is active.";}
a:4:{i:0;s:17:"PDO::setAttribute";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:62:"public bool PDO::setAttribute ( int $attribute, mixed $value )";i:3;s:168:"Sets an attribute on the database handle. Some of the available generic attributes are listed below; some drivers may make use of additional driver specific attributes.";}
a:4:{i:0;s:24:"PDOStatement::bindColumn";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:122:"public bool PDOStatement::bindColumn ( mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )";i:3;s:167:"arranges to have a particular variable bound to a given column in the result-set from a query. Each call to or will update all the variables that are bound to columns.";}
a:4:{i:0;s:23:"PDOStatement::bindParam";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:153:"public bool PDOStatement::bindParam ( mixed $parameter, mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] )";i:3;s:235:"Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement. Unlike, the variable is bound as a reference and will only be evaluated at the time that is called.";}
a:4:{i:0;s:23:"PDOStatement::bindValue";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 1.0.0)";i:2;s:107:"public bool PDOStatement::bindValue ( mixed $parameter, mixed $value [, int $data_type = PDO::PARAM_STR ] )";i:3;s:128:"Binds a value to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement.";}
a:4:{i:0;s:25:"PDOStatement::closeCursor";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.9.0)";i:2;s:46:"public bool PDOStatement::closeCursor ( void )";i:3;s:155:"frees up the connection to the server so that other SQL statements may be issued, but leaves the statement in a state that enables it to be executed again.";}
a:4:{i:0;s:25:"PDOStatement::columnCount";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:45:"public int PDOStatement::columnCount ( void )";i:3;s:93:"Use to return the number of columns in the result set represented by the PDOStatement object.";}
a:4:{i:0;s:29:"PDOStatement::debugDumpParams";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.9.0)";i:2;s:50:"public void PDOStatement::debugDumpParams ( void )";i:3;s:349:"Dumps the informations contained by a prepared statement directly on the output. It will provide the query in use, the number of parameters used (), the list of parameters, with their name, type () as an integer, their key name or position, the value, and the position in the query (if this is supported by the PDO driver, otherwise, it will be -1).";}
a:4:{i:0;s:23:"PDOStatement::errorCode";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:46:"public string PDOStatement::errorCode ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"PDOStatement::errorInfo";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:45:"public array PDOStatement::errorInfo ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"PDOStatement::execute";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:64:"public bool PDOStatement::execute ([ array $input_parameters ] )";i:3;s:102:"Execute the prepared statement. If the prepared statement included parameter markers, you must either:";}
a:4:{i:0;s:19:"PDOStatement::fetch";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:133:"public mixed PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] )";i:3;s:120:"Fetches a row from a result set associated with a PDOStatement object. The parameter determines how PDO returns the row.";}
a:4:{i:0;s:22:"PDOStatement::fetchAll";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:116:"public array PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] )";i:3;s:0:"";}
a:4:{i:0;s:25:"PDOStatement::fetchColumn";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.9.0)";i:2;s:69:"public string PDOStatement::fetchColumn ([ int $column_number = 0 ] )";i:3;s:87:"Returns a single column from the next row of a result set or if there are no more rows.";}
a:4:{i:0;s:25:"PDOStatement::fetchObject";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.4)";i:2;s:98:"public mixed PDOStatement::fetchObject ([ string $class_name = "stdClass" [, array $ctor_args ]] )";i:3;s:99:"Fetches the next row and returns it as an object. This function is an alternative to with or style.";}
a:4:{i:0;s:26:"PDOStatement::getAttribute";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:58:"public mixed PDOStatement::getAttribute ( int $attribute )";i:3;s:100:"Gets an attribute of the statement. Currently, no generic attributes exist but only driver specific:";}
a:4:{i:0;s:27:"PDOStatement::getColumnMeta";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:56:"public array PDOStatement::getColumnMeta ( int $column )";i:3;s:86:"Retrieves the metadata for a 0-indexed column in a result set as an associative array.";}
a:4:{i:0;s:24:"PDOStatement::nextRowset";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:45:"public bool PDOStatement::nextRowset ( void )";i:3;s:280:"Some database servers support stored procedures that return more than one rowset (also known as a result set). enables you to access the second and subsequent rowsets associated with a PDOStatement object. Each rowset can have a different set of columns from the preceding rowset.";}
a:4:{i:0;s:22:"PDOStatement::rowCount";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.1.0)";i:2;s:42:"public int PDOStatement::rowCount ( void )";i:3;s:121:"returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement executed by the corresponding object.";}
a:4:{i:0;s:26:"PDOStatement::setAttribute";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:71:"public bool PDOStatement::setAttribute ( int $attribute, mixed $value )";i:3;s:102:"Sets an attribute on the statement. Currently, no generic attributes are set but only driver specific:";}
a:4:{i:0;s:26:"PDOStatement::setFetchMode";i:1;s:35:"(PHP 5 >= 5.1.0, PECL pdo >= 0.2.0)";i:2;s:52:"public bool PDOStatement::setFetchMode ( int $mode )";i:3;s:0:"";}
a:4:{i:0;s:14:"PDO_CUBRID DSN";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:0:"";i:3;s:101:"The PDO_CUBRID Data Source Name (DSN) is composed of the following elements, delimited by semicolons:";}
a:4:{i:0;s:18:"PDO::cubrid_schema";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:97:"public array PDO::cubrid_schema ( int $schema_type [, string $table_name [, string $col_name ]] )";i:3;s:253:"This function is used to get the requested schema information from database. You have to designate, if you want to get information on certain table,, if you want to get information on certain column (can be used only with PDO::CUBRID_SCH_COL_PRIVILEGE).";}
a:4:{i:0;s:13:"PDO_DBLIB DSN";i:1;s:25:"(PECL PDO_DBLIB >= 0.9.0)";i:2;s:0:"";i:3;s:75:"The PDO_DBLIB Data Source Name (DSN) is composed of the following elements:";}
a:4:{i:0;s:16:"PDO_FIREBIRD DSN";i:1;s:28:"(PECL PDO_FIREBIRD >= 0.1.0)";i:2;s:0:"";i:3;s:78:"The PDO_FIREBIRD Data Source Name (DSN) is composed of the following elements:";}
a:4:{i:0;s:11:"PDO_IBM DSN";i:1;s:23:"(PECL PDO_IBM >= 0.9.0)";i:2;s:0:"";i:3;s:108:"The PDO_IBM Data Source Name (DSN) is based on the IBM CLI DSN. The major components of the PDO_IBM DSN are:";}
a:4:{i:0;s:16:"PDO_INFORMIX DSN";i:1;s:28:"(PECL PDO_INFORMIX >= 0.1.0)";i:2;s:0:"";i:3;s:200:"The PDO_INFORMIX Data Source Name (DSN) is based on the Informix ODBC DSN string. Details on configuring an Informix ODBC DSN are available from the . The major components of the PDO_INFORMIX DSN are:";}
a:4:{i:0;s:13:"PDO_MYSQL DSN";i:1;s:25:"(PECL PDO_MYSQL >= 0.1.0)";i:2;s:0:"";i:3;s:75:"The PDO_MYSQL Data Source Name (DSN) is composed of the following elements:";}
a:4:{i:0;s:14:"PDO_SQLSRV DSN";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:0:"";i:3;s:76:"The PDO_SQLSRV Data Source Name (DSN) is composed of the following elements:";}
a:4:{i:0;s:11:"PDO_OCI DSN";i:1;s:23:"(PECL PDO_OCI >= 0.1.0)";i:2;s:0:"";i:3;s:73:"The PDO_OCI Data Source Name (DSN) is composed of the following elements:";}
a:4:{i:0;s:12:"PDO_ODBC DSN";i:1;s:24:"(PECL PDO_ODBC >= 0.1.0)";i:2;s:0:"";i:3;s:74:"The PDO_ODBC Data Source Name (DSN) is composed of the following elements:";}
a:4:{i:0;s:13:"PDO_PGSQL DSN";i:1;s:25:"(PECL PDO_PGSQL >= 0.1.0)";i:2;s:0:"";i:3;s:110:"The PDO_PGSQL Data Source Name (DSN) is composed of the following elements, delimited by spaces or semicolons:";}
a:4:{i:0;s:19:"PDO::pgsqlLOBCreate";i:1;s:41:"(PHP 5 >= 5.1.2, PECL pdo_pgsql >=
1.0.2)";i:2;s:42:"public string PDO::pgsqlLOBCreate ( void )";i:3;s:361:"creates a large object and returns the OID of that object. You may then open a stream on the object using to read or write data to it. The OID can be stored in columns of type OID and be used to reference the large object, without causing the row to grow arbitrarily large. The large object will continue to live in the database until it is removed by calling .";}
a:4:{i:0;s:17:"PDO::pgsqlLOBOpen";i:1;s:41:"(PHP 5 >= 5.1.2, PECL pdo_pgsql >=
1.0.2)";i:2;s:74:"public resource PDO::pgsqlLOBOpen ( string $oid [, string $mode = "rb" ] )";i:3;s:244:"opens a stream to access the data referenced by . If is, the stream is opened for reading, if is, then the stream will be opened for writing. You can use all the usual filesystem functions, such as, and to manipulate the contents of the stream.";}
a:4:{i:0;s:19:"PDO::pgsqlLOBUnlink";i:1;s:41:"(PHP 5 >= 5.1.2, PECL pdo_pgsql >=
1.0.2)";i:2;s:47:"public bool PDO::pgsqlLOBUnlink ( string $oid )";i:3;s:59:"Deletes a large object from the database identified by OID.";}
a:4:{i:0;s:14:"PDO_SQLITE DSN";i:1;s:26:"(PECL PDO_SQLITE >= 0.2.0)";i:2;s:0:"";i:3;s:76:"The PDO_SQLITE Data Source Name (DSN) is composed of the following elements:";}
a:4:{i:0;s:26:"PDO::sqliteCreateAggregate";i:1;s:42:"(PHP 5 >= 5.1.0, PECL pdo_sqlite >=
1.0.0)";i:2;s:129:"public bool PDO::sqliteCreateAggregate ( string $function_name, callable $step_func, callable $finalize_func [, int $num_args ] )";i:3;s:142:"This method is similar to except that it registers functions that can be used to calculate a result aggregated across all the rows of a query.";}
a:4:{i:0;s:25:"PDO::sqliteCreateFunction";i:1;s:42:"(PHP 5 >= 5.1.0, PECL pdo_sqlite >=
1.0.0)";i:2;s:102:"public bool PDO::sqliteCreateFunction ( string $function_name, callable $callback [, int $num_args ] )";i:3;s:150:"This method allows you to register a PHP function with SQLite as an (User Defined Function), so that it can be called from within your SQL statements.";}
a:4:{i:0;s:10:"PDO_4D DSN";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:0:"";i:3;s:27:"The PDO_4D DSN consists of:";}
a:4:{i:0;s:20:"Constants for PDO_4D";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:0:"";i:3;s:449:"The constants below are defined by this driver, and will only be available when the extension has been either compiled into PHP or dynamically loaded at runtime. In addition, these driver-specific constants should only be used if you are using this driver. Using driver-specific attributes with another driver may result in unexpected behaviour. may be used to obtain the attribute to check the driver, if your code can run against multiple drivers.";}
a:4:{i:0;s:29:"SQL types with PDO_4D and PHP";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:0:"";i:3;s:0:"";}
a:4:{i:0;s:20:"SQL acceptable by 4D";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:0:"";i:3;s:291:"4D implements strictly the ANSI 89 standard, and have it enforced. It is highly recommended to read the 4D SQL documentation to learn about the available commands. The URL of the manual is : . Below is a list of 4D SQL characteristics: it is not exhaustive, but may serve as an introduction.";}
a:4:{i:0;s:20:"Examples with PDO_4D";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:894:"Example #1 Basic example with PDO_4D <?php $dsnÂ =Â '4D:host=localhost;charset=UTF-8'; $userÂ =Â 'test';$passÂ =Â 'test'; //Â ConnectionÂ toÂ theÂ 4DÂ SQLÂ server $dbÂ =Â newÂ PDO($dsn,Â $user,Â $pass); tryÂ { Â Â Â Â $db->exec('CREATEÂ TABLEÂ test(idÂ varCHAR(1)Â NOTÂ NULL,Â valÂ VARCHAR(10))'); }Â catchÂ (PDOExceptionÂ $e)Â { Â Â Â Â die("ErreurÂ 4DÂ :Â "Â .Â $e->getMessage()); } Â Â Â Â Â Â Â Â $db->exec("INSERTÂ INTOÂ testÂ VALUES('A',Â 'B')"); $db->exec("INSERTÂ INTOÂ testÂ VALUES('C',Â 'D')"); $db->exec("INSERTÂ INTOÂ testÂ VALUES('E',Â 'F')"); $stmtÂ =Â $db->prepare('SELECTÂ id,Â valÂ fromÂ test'); $stmt->execute();print_r($stmt->fetchAll()); unset($stmt); unset($db);?> The above example will output: Array ( [0] => Array ( [ID] => A [0] => A [VAL] => B [1] => B ) [1] => Array ( [ID] => C [0] => C [VAL] => D [1] => D ) [2] => Array ( [ID] => E [0] => E [VAL] => F [1] => F ) )";i:3;s:103:"This basic example show how to connect, execute a query, read data and disconnect from a 4D SQL server.";}
a:4:{i:0;s:11:"cubrid_bind";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:110:"bool cubrid_bind ( resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type ] )";i:3;s:176:"The function is used to bind values to a corresponding named or question mark placeholder in the SQL statement that was passed to . If is not given, string will be the default.";}
a:4:{i:0;s:20:"cubrid_close_prepare";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:54:"bool cubrid_close_prepare ( resource $req_identifier )";i:3;s:135:"The function closes the request handle given by the argument, and releases the memory region related to the handle. It is an alias of .";}
a:4:{i:0;s:20:"cubrid_close_request";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:54:"bool cubrid_close_request ( resource $req_identifier )";i:3;s:135:"The function closes the request handle given by the argument, and releases the memory region related to the handle. It is an alias of .";}
a:4:{i:0;s:14:"cubrid_col_get";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:82:"array cubrid_col_get ( resource $conn_identifier, string $oid, string $attr_name )";i:3;s:138:"The function is used to get contents of the elements of the collection type (set, multiset, sequence) attribute you requested as an array.";}
a:4:{i:0;s:15:"cubrid_col_size";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:81:"int cubrid_col_size ( resource $conn_identifier, string $oid, string $attr_name )";i:3;s:108:"The function is used to get the number of elements in a collection type (set, multiset, sequence) attribute.";}
a:4:{i:0;s:19:"cubrid_column_names";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:54:"array cubrid_column_names ( resource $req_identifier )";i:3;s:75:"The function is used to get the column names of the query result by using .";}
a:4:{i:0;s:19:"cubrid_column_types";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:54:"array cubrid_column_types ( resource $req_identifier )";i:3;s:58:"The function gets column types of query results by using .";}
a:4:{i:0;s:13:"cubrid_commit";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:48:"bool cubrid_commit ( resource $conn_identifier )";i:3;s:204:"The function is used to execute commit on the transaction pointed by, currently in progress. Connection to the server is closed after the function is called; However, the connection handle is still valid.";}
a:4:{i:0;s:23:"cubrid_connect_with_url";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:119:"resource cubrid_connect_with_url ( string $conn_url [, string $userid [, string $passwd [, bool $new_link = false ]]] )";i:3;s:445:"The function is used to establish the environment for connecting to your server by using connection information passed with an url string argument. If the HA feature is enabled in CUBRID, you must specify the connection information of the standby server, which is used for failover when failure occurs, in the url string argument of this function. If the user name and password is not given, then the "PUBLIC" connection will be made by default.";}
a:4:{i:0;s:14:"cubrid_connect";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:133:"resource cubrid_connect ( string $host, int $port, string $dbname [, string $userid [, string $passwd [, bool $new_link = false ]]] )";i:3;s:260:"The function is used to establish the environment for connecting to your server by using your server address, port number, database name, user name, and password. If the user name and password is not given, then the "PUBLIC" connection will be made by default.";}
a:4:{i:0;s:18:"cubrid_current_oid";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:54:"string cubrid_current_oid ( resource $req_identifier )";i:3;s:222:"The function is used to get the oid of the current cursor location from the query result. To use, the query executed must be a updatable query, and the CUBRID_INCLUDE_OID option must be included during the query execution.";}
a:4:{i:0;s:17:"cubrid_disconnect";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:55:"bool cubrid_disconnect ([ resource $conn_identifier ] )";i:3;s:196:"The function closes the connection handle and disconnects from server. If any request handle is not closed at this point, it will be closed. It is similar to the CUBRID MySQL compatible function .";}
a:4:{i:0;s:11:"cubrid_drop";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:59:"bool cubrid_drop ( resource $conn_identifier, string $oid )";i:3;s:86:"The function is used to delete an instance from database by using the of the instance.";}
a:4:{i:0;s:26:"cubrid_error_code_facility";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:39:"int cubrid_error_code_facility ( void )";i:3;s:234:"The function is used to get the facility code (level in which the error occurred) from the error code of the error that occurred during the API execution. Usually, you can get the error code when API returns false as its return value.";}
a:4:{i:0;s:17:"cubrid_error_code";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:30:"int cubrid_error_code ( void )";i:3;s:171:"The function is used to get the error code of the error that occurred during the API execution. Usually, it gets the error code when API returns false as its return value.";}
a:4:{i:0;s:16:"cubrid_error_msg";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:32:"string cubrid_error_msg ( void )";i:3;s:164:"The function is used to get the error message that occurred during the use of CUBRID API. Usually, it gets error message when API returns false as its return value.";}
a:4:{i:0;s:14:"cubrid_execute";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:83:"resource cubrid_execute ( resource $conn_identifier, string $sql [, int $option ] )";i:3;s:369:"The function is used to execute the given SQL statement. It executes the query by using and SQL, and then returns the request identifier created. It is used for simple execution of query, where the parameter binding is not needed. In addition, the function is used to execute the prepared statement by means of and . At this time, you need to specify arguments of and .";}
a:4:{i:0;s:12:"cubrid_fetch";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:68:"mixed cubrid_fetch ( resource $result [, int $type = CUBRID_BOTH ] )";i:3;s:136:"The function is used to get a single row from the query result. The cursor automatically moves to the next row after getting the result.";}
a:4:{i:0;s:18:"cubrid_free_result";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:52:"bool cubrid_free_result ( resource $req_identifier )";i:3;s:212:"This function frees the memory occupied by the result data. It returns TRUE on success or FALSE on failure. Note that it can only frees the client fetch buffer now, and if you want free all memory, use function .";}
a:4:{i:0;s:21:"cubrid_get_autocommit";i:1;s:22:"(PECL CUBRID >= 8.4.0)";i:2;s:56:"bool cubrid_get_autocommit ( resource $conn_identifier )";i:3;s:86:"The function is used to get the status of CUBRID database connection auto-commit mode.";}
a:4:{i:0;s:18:"cubrid_get_charset";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:55:"string cubrid_get_charset ( resource $conn_identifier )";i:3;s:116:"This function returns the current CUBRID connection charset and is similar to the CUBRID MySQL compatible function .";}
a:4:{i:0;s:21:"cubrid_get_class_name";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:71:"string cubrid_get_class_name ( resource $conn_identifier, string $oid )";i:3;s:131:"The function is used to get the class name from . It doesn't work when selecting data from the system tables, for example db_class.";}
a:4:{i:0;s:22:"cubrid_get_client_info";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:38:"string cubrid_get_client_info ( void )";i:3;s:74:"This function returns a string that represents the client library version.";}
a:4:{i:0;s:23:"cubrid_get_db_parameter";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:59:"array cubrid_get_db_parameter ( resource $conn_identifier )";i:3;s:162:"This function returns the CUBRID database parameters or it returns FALSE on failure. It returns an associative array with the values for the following parameters:";}
a:4:{i:0;s:24:"cubrid_get_query_timeout";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:57:"int cubrid_get_query_timeout ( resource $req_identifier )";i:3;s:61:"The function is used to get the query timeout of the request.";}
a:4:{i:0;s:22:"cubrid_get_server_info";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:59:"string cubrid_get_server_info ( resource $conn_identifier )";i:3;s:73:"This function returns a string that represents the CUBRID server version.";}
a:4:{i:0;s:10:"cubrid_get";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:76:"mixed cubrid_get ( resource $conn_identifier, string $oid [, mixed $attr ] )";i:3;s:207:"The function is used to get the attribute of the instance of the given . You can get single attribute by using string data type for the argument, or many attributes by using array data type for the argument.";}
a:4:{i:0;s:16:"cubrid_insert_id";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:56:"string cubrid_insert_id ([ resource $conn_identifier ] )";i:3;s:200:"The function retrieves the ID generated for the AUTO_INCREMENT column which is updated by the previous INSERT query. It returns 0 if the previous query does not generate new rows, or FALSE on failure.";}
a:4:{i:0;s:18:"cubrid_is_instance";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:65:"int cubrid_is_instance ( resource $conn_identifier, string $oid )";i:3;s:86:"The function is used to check whether the instance pointed by the given exists or not.";}
a:4:{i:0;s:16:"cubrid_lob_close";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:53:"bool cubrid_lob_close ( array $lob_identifier_array )";i:3;s:46:"is used to close all BLOB/CLOB returned from .";}
a:4:{i:0;s:17:"cubrid_lob_export";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:97:"bool cubrid_lob_export ( resource $conn_identifier, resource $lob_identifier, string $path_name )";i:3;s:161:"is used to get BLOB/CLOB data from CUBRID database, and saves its contents to a file. To use this function, you must use first to get BLOB/CLOB info from CUBRID.";}
a:4:{i:0;s:14:"cubrid_lob_get";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:63:"array cubrid_lob_get ( resource $conn_identifier, string $sql )";i:3;s:234:"is used to get BLOB/CLOB meta info from CUBRID database, CUBRID gets BLOB/CLOB by executing the SQL statement, and returns all LOBs as a resource array. Be sure that the SQL retrieves only one column and its data type is BLOB or CLOB.";}
a:4:{i:0;s:15:"cubrid_lob_send";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:76:"bool cubrid_lob_send ( resource $conn_identifier, resource $lob_identifier )";i:3;s:143:"reads BLOB/CLOB data and passes it straight through to the browser. To use this function, you must use first to get BLOB/CLOB info from CUBRID.";}
a:4:{i:0;s:15:"cubrid_lob_size";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:51:"string cubrid_lob_size ( resource $lob_identifier )";i:3;s:35:"is used to get BLOB/CLOB data size.";}
a:4:{i:0;s:16:"cubrid_lob2_bind";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:115:"bool cubrid_lob2_bind ( resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type ] )";i:3;s:252:"The function is used to bind BLOB/CLOB datas to a corresponding question mark placeholder in the SQL statement that was passed to . If is not given, string will be "BLOB" as the default. But if you use before, will be consistent with in as the default.";}
a:4:{i:0;s:17:"cubrid_lob2_close";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:51:"bool cubrid_lob2_close ( resource $lob_identifier )";i:3;s:82:"The function is used to close LOB object returned from or got from the result set.";}
a:4:{i:0;s:18:"cubrid_lob2_export";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:71:"bool cubrid_lob2_export ( resource $lob_identifier, string $file_name )";i:3;s:315:"The function is used to save the contents of BLOB/CLOB data to a file. To use this function, you must use or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object.";}
a:4:{i:0;s:18:"cubrid_lob2_import";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:71:"bool cubrid_lob2_import ( resource $lob_identifier, string $file_name )";i:3;s:317:"The function is used to save the contents of BLOB/CLOB data from a file. To use this function, you must use or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object.";}
a:4:{i:0;s:15:"cubrid_lob2_new";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:83:"resource cubrid_lob2_new ([ resource $conn_identifier [, string $type = "BLOB" ]] )";i:3;s:124:"The function is used to create a lob object (both BLOB and CLOB). This function should be used before you bind a lob object.";}
a:4:{i:0;s:16:"cubrid_lob2_read";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:62:"string cubrid_lob2_read ( resource $lob_identifier, int $len )";i:3;s:70:"The function reads bytes from the LOB data and returns the bytes read.";}
a:4:{i:0;s:18:"cubrid_lob2_seek64";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:109:"bool cubrid_lob2_seek64 ( resource $lob_identifier, string $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )";i:3;s:233:"The function is used to move the cursor position of a lob object by the value set in the argument, to the direction set in the argument. If the you want to move is larger than an integer data can be stored, you can use this function.";}
a:4:{i:0;s:16:"cubrid_lob2_seek";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:104:"bool cubrid_lob2_seek ( resource $lob_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )";i:3;s:136:"The function is used to move the cursor position of a lob object by the value set in the argument, to the direction set in the argument.";}
a:4:{i:0;s:18:"cubrid_lob2_size64";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:54:"string cubrid_lob2_size64 ( resource $lob_identifier )";i:3;s:194:"The function is used to get the size of a lob object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the size as a string.";}
a:4:{i:0;s:16:"cubrid_lob2_size";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:49:"int cubrid_lob2_size ( resource $lob_identifier )";i:3;s:53:"The function is used to get the size of a lob object.";}
a:4:{i:0;s:18:"cubrid_lob2_tell64";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:54:"string cubrid_lob2_tell64 ( resource $lob_identifier )";i:3;s:224:"The function is used to tell the cursor position of the LOB object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the position information as a string.";}
a:4:{i:0;s:16:"cubrid_lob2_tell";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:49:"int cubrid_lob2_tell ( resource $lob_identifier )";i:3;s:67:"The function is used to tell the cursor position of the LOB object.";}
a:4:{i:0;s:17:"cubrid_lob2_write";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:64:"bool cubrid_lob2_write ( resource $lob_identifier, string $buf )";i:3;s:128:"The function reads as much as data from and stores it to the LOB object. Note that this function can only append characters now.";}
a:4:{i:0;s:16:"cubrid_lock_read";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:64:"bool cubrid_lock_read ( resource $conn_identifier, string $oid )";i:3;s:72:"The function is used to put read lock on the instance pointed by given .";}
a:4:{i:0;s:17:"cubrid_lock_write";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:65:"bool cubrid_lock_write ( resource $conn_identifier, string $oid )";i:3;s:77:"The function is used to put write lock on the instance pointed by the given .";}
a:4:{i:0;s:18:"cubrid_move_cursor";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:105:"int cubrid_move_cursor ( resource $req_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )";i:3;s:444:"The function is used to move the current cursor location of by the value set in the argument, to the direction set in the argument. To set the argument, you can use CUBRID_CURSOR_FIRST for the first part of the result, CUBRID_CURSOR_CURRENT for the current location of the result, or CUBRID_CURSOR_LAST for the last part of the result. If argument is not explicitly designated, then the function uses CUBRID_CURSOR_CURRENT as its default value.";}
a:4:{i:0;s:18:"cubrid_next_result";i:1;s:22:"(PECL CUBRID >= 8.4.0)";i:2;s:44:"bool cubrid_next_result ( resource $result )";i:3;s:134:"The function is used to get results of next query if multiple SQL statements are executed and CUBRID_EXEC_QUERY_ALL flag is set upon .";}
a:4:{i:0;s:15:"cubrid_num_cols";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:40:"int cubrid_num_cols ( resource $result )";i:3;s:139:"The function is used to get the number of columns from the query result. It can only be used when the query executed is a select statement.";}
a:4:{i:0;s:15:"cubrid_num_rows";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:40:"int cubrid_num_rows ( resource $result )";i:3;s:236:"The function is used to get the number of rows from the query result. You can use it only when the query executed is a select statement. When you want to know such value for INSERT, UPDATE, or DELETE query, you have to use the function.";}
a:4:{i:0;s:24:"cubrid_pconnect_with_url";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:93:"resource cubrid_pconnect_with_url ( string $conn_url [, string $userid [, string $passwd ]] )";i:3;s:55:"Establishes a persistent connection to a CUBRID server.";}
a:4:{i:0;s:15:"cubrid_pconnect";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:107:"resource cubrid_pconnect ( string $host, int $port, string $dbname [, string $userid [, string $passwd ]] )";i:3;s:55:"Establishes a persistent connection to a CUBRID server.";}
a:4:{i:0;s:14:"cubrid_prepare";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:96:"resource cubrid_prepare ( resource $conn_identifier, string $prepare_stmt [, int $option = 0 ] )";i:3;s:169:"The function is a sort of API which represents SQL statements compiled previously to a given connection handle. This pre-compiled SQL statement will be included in the .";}
a:4:{i:0;s:10:"cubrid_put";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:89:"int cubrid_put ( resource $conn_identifier, string $oid [, string $attr ], mixed $value )";i:3;s:74:"The function is used to update an attribute of the instance of the given .";}
a:4:{i:0;s:15:"cubrid_rollback";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:50:"bool cubrid_rollback ( resource $conn_identifier )";i:3;s:84:"The function executes rollback on the transaction pointed by, currently in progress.";}
a:4:{i:0;s:13:"cubrid_schema";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:113:"array cubrid_schema ( resource $conn_identifier, int $schema_type [, string $class_name [, string $attr_name ]] )";i:3;s:252:"The function is used to get the requested schema information from database. You have to designate, if you want to get information on certain class,, if you want to get information on certain attribute (can be used only with CUBRID_ SCH_ATTR_PRIVILEGE).";}
a:4:{i:0;s:15:"cubrid_seq_drop";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:94:"bool cubrid_seq_drop ( resource $conn_identifier, string $oid, string $attr_name, int $index )";i:3;s:109:"The function is used to delete an element you request from the given sequence type attribute in the database.";}
a:4:{i:0;s:17:"cubrid_seq_insert";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:117:"bool cubrid_seq_insert ( resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element )";i:3;s:95:"The function is used to insert an element to a sequence type attribute in a requested location.";}
a:4:{i:0;s:14:"cubrid_seq_put";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:114:"bool cubrid_seq_put ( resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element )";i:3;s:106:"The function is used to update the content of the requested element in a sequent type attribute using OID.";}
a:4:{i:0;s:14:"cubrid_set_add";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:102:"bool cubrid_set_add ( resource $conn_identifier, string $oid, string $attr_name, string $set_element )";i:3;s:112:"The function is used to insert a single element to a set type attribute (set, multiset, sequence) you requested.";}
a:4:{i:0;s:21:"cubrid_set_autocommit";i:1;s:22:"(PECL CUBRID >= 8.4.0)";i:2;s:68:"bool cubrid_set_autocommit ( resource $conn_identifier, bool $mode )";i:3;s:100:"The function is used to set the CUBRID database auto-commit mode of the current database connection.";}
a:4:{i:0;s:23:"cubrid_set_db_parameter";i:1;s:22:"(PECL CUBRID >= 8.4.0)";i:2;s:93:"bool cubrid_set_db_parameter ( resource $conn_identifier, int $param_type, int $param_value )";i:3;s:112:"The function is used to set the CUBRID database parameters. It can set the following CUBRID database parameters:";}
a:4:{i:0;s:15:"cubrid_set_drop";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:103:"bool cubrid_set_drop ( resource $conn_identifier, string $oid, string $attr_name, string $set_element )";i:3;s:125:"The function is used to delete an element that you request from the given set type (set, multiset) attribute of the database.";}
a:4:{i:0;s:24:"cubrid_set_query_timeout";i:1;s:22:"(PECL CUBRID >= 8.4.1)";i:2;s:72:"bool cubrid_set_query_timeout ( resource $req_identifier, int $timeout )";i:3;s:64:"The function is used to set the timeout time of query execution.";}
a:4:{i:0;s:14:"cubrid_version";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:30:"string cubrid_version ( void )";i:3;s:60:"The function is used to get the CUBRID PHP module's version.";}
a:4:{i:0;s:20:"cubrid_affected_rows";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:57:"int cubrid_affected_rows ([ resource $conn_identifier ] )";i:3;s:102:"The function is used to get the number of rows affected by the SQL statement (INSERT, DELETE, UPDATE).";}
a:4:{i:0;s:22:"cubrid_client_encoding";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:62:"string cubrid_client_encoding ([ resource $conn_identifier ] )";i:3;s:99:"This function returns the current CUBRID connection charset and is similar to the CUBRID function .";}
a:4:{i:0;s:12:"cubrid_close";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:50:"bool cubrid_close ([ resource $conn_identifier ] )";i:3;s:235:"The function ends the transaction currently in process, closes the connection handle and disconnects from server. If there is any request handles not closed yet at this point, they will be closed. It is similar to the CUBRID function .";}
a:4:{i:0;s:16:"cubrid_data_seek";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:59:"bool cubrid_data_seek ( resource $result, int $row_number )";i:3;s:237:"This function performs the moving of the internal row pointer of the CUBRID result (associated with the specified result identifier) to point to a specific row number. There are functions, such as, which use the current stored value of .";}
a:4:{i:0;s:14:"cubrid_db_name";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:51:"string cubrid_db_name ( array $result, int $index )";i:3;s:43:"Retrieve the database name from a call to .";}
a:4:{i:0;s:12:"cubrid_errno";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:49:"int cubrid_errno ([ resource $conn_identifier ] )";i:3;s:55:"Returns the error number from the last CUBRID function.";}
a:4:{i:0;s:12:"cubrid_error";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:47:"string cubrid_error ([ resource $connection ] )";i:3;s:164:"The function is used to get the error message that occurred during the use of CUBRID API. Usually, it gets error message when API returns false as its return value.";}
a:4:{i:0;s:18:"cubrid_fetch_array";i:1;s:21:"(PECL CUBRID >=8.3.0)";i:2;s:74:"array cubrid_fetch_array ( resource $result [, int $type = CUBRID_BOTH ] )";i:3;s:157:"The function is used to get a single row from the query result and returns an array. The cursor automatically moves to the next row after getting the result.";}
a:4:{i:0;s:18:"cubrid_fetch_assoc";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:60:"array cubrid_fetch_assoc ( resource $result [, int $type ] )";i:3;s:171:"This function returns the associative array, that corresponds to the fetched row, and then moves the internal data pointer ahead, or returns FALSE when the end is reached.";}
a:4:{i:0;s:18:"cubrid_fetch_field";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:73:"object cubrid_fetch_field ( resource $result [, int $field_offset = 0 ] )";i:3;s:113:"This function returns an object with certain properties of the specific column. The properties of the object are:";}
a:4:{i:0;s:20:"cubrid_fetch_lengths";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:47:"array cubrid_fetch_lengths ( resource $result )";i:3;s:154:"This function returns an numeric array with the lengths of the values of each field from the current row of the result set or it returns FALSE on failure.";}
a:4:{i:0;s:19:"cubrid_fetch_object";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:103:"object cubrid_fetch_object ( resource $result [, string $class_name [, array $params [, int $type ]]] )";i:3;s:167:"This function returns an object with the column names of the result set as properties. The values of these properties are extracted from the current row of the result.";}
a:4:{i:0;s:16:"cubrid_fetch_row";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:58:"array cubrid_fetch_row ( resource $result [, int $type ] )";i:3;s:155:"This function returns a numerical array with the values of the current row from the result set, starting from 0, and moves the internal data pointer ahead.";}
a:4:{i:0;s:18:"cubrid_field_flags";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:65:"string cubrid_field_flags ( resource $result, int $field_offset )";i:3;s:184:"This function returns a string with the flags of the given field offset separated by space. You can split the returned value using explode. The possible flags could be:, ,, ,, ,, and .";}
a:4:{i:0;s:16:"cubrid_field_len";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:60:"int cubrid_field_len ( resource $result, int $field_offset )";i:3;s:107:"This function returns the maximum length of the specified field on success, or it returns FALSE on failure.";}
a:4:{i:0;s:17:"cubrid_field_name";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:64:"string cubrid_field_name ( resource $result, int $field_offset )";i:3;s:102:"This function returns the name of the specified field index on success or it returns FALSE on failure.";}
a:4:{i:0;s:17:"cubrid_field_seek";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:70:"bool cubrid_field_seek ( resource $result [, int $field_offset = 0 ] )";i:3;s:181:"This function moves the result set cursor to the specified field offset. This offset is used by if it doesn't include a field offset. It returns TRUE on success or FALSE on failure.";}
a:4:{i:0;s:18:"cubrid_field_table";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:65:"string cubrid_field_table ( resource $result, int $field_offset )";i:3;s:126:"This function returns the name of the table of the specified field. This is useful when using large select queries with JOINS.";}
a:4:{i:0;s:17:"cubrid_field_type";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:64:"string cubrid_field_type ( resource $result, int $field_offset )";i:3;s:170:"This function returns the type of the column corresponding to the given field offset. The returned field type could be one of the following: "int", "real", "string", etc.";}
a:4:{i:0;s:15:"cubrid_list_dbs";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:54:"array cubrid_list_dbs ([ resource $conn_identifier ] )";i:3;s:78:"This function returns an array with the list of all existing Cubrid databases.";}
a:4:{i:0;s:17:"cubrid_num_fields";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:42:"int cubrid_num_fields ( resource $result )";i:3;s:106:"This function returns the number of columns in the result set, on success, or it returns FALSE on failure.";}
a:4:{i:0;s:11:"cubrid_ping";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:49:"bool cubrid_ping ([ resource $conn_identifier ] )";i:3;s:62:"Checks whether or not the connection to the server is working.";}
a:4:{i:0;s:12:"cubrid_query";i:1;s:22:"(PECL CUBRID >= 8.3.1)";i:2;s:70:"resource cubrid_query ( string $query [, resource $conn_identifier ] )";i:3;s:143:"sends a unique query (multiple queries are not supported) to the currently active database on the server that's associated with the specified .";}
a:4:{i:0;s:25:"cubrid_real_escape_string";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:92:"string cubrid_real_escape_string ( string $unescaped_string [, resource $conn_identifier ] )";i:3;s:573:"This function returns the escaped string version of the given string. It will escape the following characters: . In general, single quotations are used to enclose character string. Double quotations may be used as well depending on the value of ansi_quotes, which is a parameter related to SQL statement. If the ansi_quotes value is set to no, character string enclosed by double quotations is handled as character string, not as an identifier. The default value is yes. If you want to include a single quote as part of a character string, enter two single quotes in a row.";}
a:4:{i:0;s:13:"cubrid_result";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:73:"string cubrid_result ( resource $result, int $row [, mixed $field = 0 ] )";i:3;s:88:"This function returns the value of a specific field in a specific row from a result set.";}
a:4:{i:0;s:23:"cubrid_unbuffered_query";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:81:"resource cubrid_unbuffered_query ( string $query [, resource $conn_identifier ] )";i:3;s:146:"This function performs a query without waiting for that all query results have been complete. It will return when the results are being generated.";}
a:4:{i:0;s:20:"cubrid_load_from_glo";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:86:"int cubrid_load_from_glo ( resource $conn_identifier, string $oid, string $file_name )";i:3;s:91:"The function is used to read a data from a glo instance, and saves it in a designated file.";}
a:4:{i:0;s:14:"cubrid_new_glo";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:90:"string cubrid_new_glo ( resource $conn_identifier, string $class_name, string $file_name )";i:3;s:138:"The function is used to create a glo instance in the requested class (glo class). The glo created is a LO type, and is stored in the file.";}
a:4:{i:0;s:18:"cubrid_save_to_glo";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:84:"int cubrid_save_to_glo ( resource $conn_identifier, string $oid, string $file_name )";i:3;s:62:"The function is used to save requested file in a glo instance.";}
a:4:{i:0;s:15:"cubrid_send_glo";i:1;s:22:"(PECL CUBRID >= 8.3.0)";i:2;s:62:"int cubrid_send_glo ( resource $conn_identifier, string $oid )";i:3;s:92:"The function is used to read data from glo instance and sends it to the PHP standard output.";}
a:4:{i:0;s:10:"dbplus_add";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:51:"int dbplus_add ( resource $relation, array $tuple )";i:3;s:19:"Adds a tuple to a .";}
a:4:{i:0;s:10:"dbplus_aql";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:76:"resource dbplus_aql ( string $query [, string $server [, string $dbpath ]] )";i:3;s:34:"Executes an AQL on the given and .";}
a:4:{i:0;s:12:"dbplus_chdir";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:41:"string dbplus_chdir ([ string $newdir ] )";i:3;s:82:"Changes the virtual current directory where relation files will be looked for by .";}
a:4:{i:0;s:12:"dbplus_close";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:41:"mixed dbplus_close ( resource $relation )";i:3;s:40:"Closes a relation previously opened by .";}
a:4:{i:0;s:11:"dbplus_curr";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:53:"int dbplus_curr ( resource $relation, array &$tuple )";i:3;s:52:"Reads the data for the current tuple for the given .";}
a:4:{i:0;s:14:"dbplus_errcode";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:39:"string dbplus_errcode ([ int $errno ] )";i:3;s:54:"Returns a clear error string for the given error code.";}
a:4:{i:0;s:12:"dbplus_errno";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:25:"int dbplus_errno ( void )";i:3;s:59:"Returns the error code returned by the last db++ operation.";}
a:4:{i:0;s:11:"dbplus_find";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:72:"int dbplus_find ( resource $relation, array $constraints, mixed $tuple )";i:3;s:34:"Places a constraint on the given .";}
a:4:{i:0;s:12:"dbplus_first";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:54:"int dbplus_first ( resource $relation, array &$tuple )";i:3;s:122:"Reads the data for the first tuple for the given, makes it the current tuple and pass it back as an associative array in .";}
a:4:{i:0;s:12:"dbplus_flush";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:39:"int dbplus_flush ( resource $relation )";i:3;s:59:"Writes all changes applied to since the last flush to disk.";}
a:4:{i:0;s:19:"dbplus_freealllocks";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:32:"int dbplus_freealllocks ( void )";i:3;s:42:"Frees all tuple locks held by this client.";}
a:4:{i:0;s:15:"dbplus_freelock";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:57:"int dbplus_freelock ( resource $relation, string $tuple )";i:3;s:59:"Releases a write lock on the given previously obtained by .";}
a:4:{i:0;s:17:"dbplus_freerlocks";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:44:"int dbplus_freerlocks ( resource $relation )";i:3;s:41:"Frees all tuple locks held on the given .";}
a:4:{i:0;s:14:"dbplus_getlock";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:56:"int dbplus_getlock ( resource $relation, string $tuple )";i:3;s:40:"Requests a write lock on the specified .";}
a:4:{i:0;s:16:"dbplus_getunique";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:58:"int dbplus_getunique ( resource $relation, int $uniqueid )";i:3;s:103:"Obtains a number guaranteed to be unique for the given and will pass it back in the variable given as .";}
a:4:{i:0;s:11:"dbplus_info";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:67:"int dbplus_info ( resource $relation, string $key, array &$result )";i:3;s:0:"";}
a:4:{i:0;s:11:"dbplus_last";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:53:"int dbplus_last ( resource $relation, array &$tuple )";i:3;s:121:"Reads the data for the last tuple for the given, makes it the current tuple and pass it back as an associative array in .";}
a:4:{i:0;s:14:"dbplus_lockrel";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:41:"int dbplus_lockrel ( resource $relation )";i:3;s:36:"Requests a write lock on the given .";}
a:4:{i:0;s:11:"dbplus_next";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:53:"int dbplus_next ( resource $relation, array &$tuple )";i:3;s:126:"Reads the data for the next tuple for the given, makes it the current tuple and will pass it back as an associative array in .";}
a:4:{i:0;s:11:"dbplus_open";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:37:"resource dbplus_open ( string $name )";i:3;s:30:"Opens the given relation file.";}
a:4:{i:0;s:11:"dbplus_prev";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:53:"int dbplus_prev ( resource $relation, array &$tuple )";i:3;s:130:"Reads the data for the previous tuple for the given, makes it the current tuple and will pass it back as an associative array in .";}
a:4:{i:0;s:14:"dbplus_rchperm";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:81:"int dbplus_rchperm ( resource $relation, int $mask, string $user, string $group )";i:3;s:101:"Changes access permissions as specified by, and . The values for these are operating system specific.";}
a:4:{i:0;s:14:"dbplus_rcreate";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:77:"resource dbplus_rcreate ( string $name, mixed $domlist [, bool $overwrite ] )";i:3;s:142:"Creates a new relation. Any existing relation sharing the same will be overwritten if the relation is currently not in use and is set to TRUE.";}
a:4:{i:0;s:16:"dbplus_rcrtexact";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:80:"mixed dbplus_rcrtexact ( string $name, resource $relation [, bool $overwrite ] )";i:3;s:62:"will create an exact but empty copy of the given under a new .";}
a:4:{i:0;s:15:"dbplus_rcrtlike";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:78:"mixed dbplus_rcrtlike ( string $name, resource $relation [, int $overwrite ] )";i:3;s:77:"will create an empty copy of the given under a new, but with default indices.";}
a:4:{i:0;s:14:"dbplus_resolve";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:46:"array dbplus_resolve ( string $relation_name )";i:3;s:112:"will try to resolve the given and find out internal server id, real hostname and the database path on this host.";}
a:4:{i:0;s:17:"dbplus_restorepos";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:58:"int dbplus_restorepos ( resource $relation, array $tuple )";i:3;s:0:"";}
a:4:{i:0;s:12:"dbplus_rkeys";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:57:"mixed dbplus_rkeys ( resource $relation, mixed $domlist )";i:3;s:87:"will replace the current primary key for with the combination of domains specified by .";}
a:4:{i:0;s:12:"dbplus_ropen";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:38:"resource dbplus_ropen ( string $name )";i:3;s:157:"will open the relation locally for quick access without any client/server overhead. Access is read only and only and may be applied to the returned relation.";}
a:4:{i:0;s:13:"dbplus_rquery";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:60:"resource dbplus_rquery ( string $query [, string $dbpath ] )";i:3;s:145:"performs a local (raw) AQL query using an AQL interpreter embedded into the db++ client library. is faster than but will work on local data only.";}
a:4:{i:0;s:14:"dbplus_rrename";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:55:"int dbplus_rrename ( resource $relation, string $name )";i:3;s:28:"will change the name of to .";}
a:4:{i:0;s:16:"dbplus_rsecindex";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:72:"mixed dbplus_rsecindex ( resource $relation, mixed $domlist, int $type )";i:3;s:94:"will create a new secondary index for with consists of the domains specified by and is of type";}
a:4:{i:0;s:14:"dbplus_runlink";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:41:"int dbplus_runlink ( resource $relation )";i:3;s:27:"will close and remove the .";}
a:4:{i:0;s:11:"dbplus_rzap";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:38:"int dbplus_rzap ( resource $relation )";i:3;s:29:"will remove all tuples from .";}
a:4:{i:0;s:14:"dbplus_savepos";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:41:"int dbplus_savepos ( resource $relation )";i:3;s:0:"";}
a:4:{i:0;s:15:"dbplus_setindex";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:60:"int dbplus_setindex ( resource $relation, string $idx_name )";i:3;s:0:"";}
a:4:{i:0;s:23:"dbplus_setindexbynumber";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:67:"int dbplus_setindexbynumber ( resource $relation, int $idx_number )";i:3;s:0:"";}
a:4:{i:0;s:10:"dbplus_sql";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:76:"resource dbplus_sql ( string $query [, string $server [, string $dbpath ]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"dbplus_tcl";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:46:"string dbplus_tcl ( int $sid, string $script )";i:3;s:299:"A db++ server will prepare a TCL interpreter for each client connection. This interpreter will enable the server to execute TCL code provided by the client as a sort of stored procedures to improve the performance of database operations by avoiding client/server data transfers and context switches.";}
a:4:{i:0;s:14:"dbplus_tremove";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:76:"int dbplus_tremove ( resource $relation, array $tuple [, array &$current ] )";i:3;s:139:"removes from if it perfectly matches a tuple within the relation., if given, will contain the data of the new current tuple after calling .";}
a:4:{i:0;s:11:"dbplus_undo";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:38:"int dbplus_undo ( resource $relation )";i:3;s:0:"";}
a:4:{i:0;s:18:"dbplus_undoprepare";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:45:"int dbplus_undoprepare ( resource $relation )";i:3;s:0:"";}
a:4:{i:0;s:16:"dbplus_unlockrel";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:43:"int dbplus_unlockrel ( resource $relation )";i:3;s:45:"Release a write lock previously obtained by .";}
a:4:{i:0;s:15:"dbplus_unselect";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:42:"int dbplus_unselect ( resource $relation )";i:3;s:55:"Calling will remove a constraint previously set by on .";}
a:4:{i:0;s:13:"dbplus_update";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:64:"int dbplus_update ( resource $relation, array $old, array $new )";i:3;s:94:"replaces the tuple with the data from the one, only if the completely matches a tuple within .";}
a:4:{i:0;s:15:"dbplus_xlockrel";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:42:"int dbplus_xlockrel ( resource $relation )";i:3;s:76:"Request an exclusive lock on preventing even read access from other clients.";}
a:4:{i:0;s:17:"dbplus_xunlockrel";i:1;s:36:"(PHP 4 <= 4.1.0, PECL dbplus >= 0.9)";i:2;s:44:"int dbplus_xunlockrel ( resource $relation )";i:3;s:51:"Releases an exclusive lock previously obtained by .";}
a:4:{i:0;s:16:"dbase_add_record";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"bool dbase_add_record ( int $dbase_identifier, array $record )";i:3;s:36:"Adds the given data to the database.";}
a:4:{i:0;s:11:"dbase_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"bool dbase_close ( int $dbase_identifier )";i:3;s:42:"Closes the given database link identifier.";}
a:4:{i:0;s:12:"dbase_create";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"int dbase_create ( string $filename, array $fields )";i:3;s:51:"creates a dBase database with the given definition.";}
a:4:{i:0;s:19:"dbase_delete_record";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:70:"bool dbase_delete_record ( int $dbase_identifier, int $record_number )";i:3;s:55:"Marks the given record to be deleted from the database.";}
a:4:{i:0;s:21:"dbase_get_header_info";i:1;s:7:"(PHP 5)";i:2;s:53:"array dbase_get_header_info ( int $dbase_identifier )";i:3;s:82:"Returns information on the column structure of the given database link identifier.";}
a:4:{i:0;s:27:"dbase_get_record_with_names";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:79:"array dbase_get_record_with_names ( int $dbase_identifier, int $record_number )";i:3;s:60:"Gets a record from a dBase database as an associative array.";}
a:4:{i:0;s:16:"dbase_get_record";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:68:"array dbase_get_record ( int $dbase_identifier, int $record_number )";i:3;s:50:"Gets a record from a database as an indexed array.";}
a:4:{i:0;s:15:"dbase_numfields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"int dbase_numfields ( int $dbase_identifier )";i:3;s:62:"Gets the number of fields (columns) in the specified database.";}
a:4:{i:0;s:16:"dbase_numrecords";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"int dbase_numrecords ( int $dbase_identifier )";i:3;s:60:"Gets the number of records (rows) in the specified database.";}
a:4:{i:0;s:10:"dbase_open";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"int dbase_open ( string $filename, int $mode )";i:3;s:50:"opens a dBase database with the given access mode.";}
a:4:{i:0;s:10:"dbase_pack";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"bool dbase_pack ( int $dbase_identifier )";i:3;s:92:"Packs the specified database by permanently deleting all records marked for deletion using .";}
a:4:{i:0;s:20:"dbase_replace_record";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:86:"bool dbase_replace_record ( int $dbase_identifier, array $record, int $record_number )";i:3;s:62:"Replaces the given record in the database with the given data.";}
a:4:{i:0;s:18:"filepro_fieldcount";i:1;s:23:"(PHP 4, PHP 5 <= 5.1.6)";i:2;s:31:"int filepro_fieldcount ( void )";i:3;s:70:"Returns the number of fields (columns) in the opened filePro database.";}
a:4:{i:0;s:17:"filepro_fieldname";i:1;s:23:"(PHP 4, PHP 5 <= 5.1.6)";i:2;s:46:"string filepro_fieldname ( int $field_number )";i:3;s:48:"Returns the name of the field corresponding to .";}
a:4:{i:0;s:17:"filepro_fieldtype";i:1;s:23:"(PHP 4, PHP 5 <= 5.1.6)";i:2;s:46:"string filepro_fieldtype ( int $field_number )";i:3;s:53:"Returns the edit type of the field corresponding to .";}
a:4:{i:0;s:18:"filepro_fieldwidth";i:1;s:23:"(PHP 4, PHP 5 <= 5.1.6)";i:2;s:44:"int filepro_fieldwidth ( int $field_number )";i:3;s:49:"Returns the width of the field corresponding to .";}
a:4:{i:0;s:16:"filepro_retrieve";i:1;s:23:"(PHP 4, PHP 5 <= 5.1.6)";i:2;s:62:"string filepro_retrieve ( int $row_number, int $field_number )";i:3;s:61:"Returns the data from the specified location in the database.";}
a:4:{i:0;s:16:"filepro_rowcount";i:1;s:23:"(PHP 4, PHP 5 <= 5.1.6)";i:2;s:29:"int filepro_rowcount ( void )";i:3;s:58:"Returns the number of rows in the opened filePro database.";}
a:4:{i:0;s:7:"filepro";i:1;s:23:"(PHP 4, PHP 5 <= 5.1.6)";i:2;s:34:"bool filepro ( string $directory )";i:3;s:71:"This reads and verifies the map file, storing the field count and info.";}
a:4:{i:0;s:14:"ibase_add_user";i:1;s:7:"(PHP 5)";i:2;s:155:"bool ibase_add_user ( resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )";i:3;s:0:"";}
a:4:{i:0;s:19:"ibase_affected_rows";i:1;s:7:"(PHP 5)";i:2;s:56:"int ibase_affected_rows ([ resource $link_identifier ] )";i:3;s:173:"This function returns the number of rows that were affected by the previous query (INSERT, UPDATE or DELETE) that was executed from within the specified transaction context.";}
a:4:{i:0;s:12:"ibase_backup";i:1;s:7:"(PHP 5)";i:2;s:133:"mixed ibase_backup ( resource $service_handle, string $source_db, string $dest_file [, int $options = 0 [, bool $verbose = false ]] )";i:3;s:0:"";}
a:4:{i:0;s:14:"ibase_blob_add";i:1;s:7:"(PHP 5)";i:2;s:59:"void ibase_blob_add ( resource $blob_handle, string $data )";i:3;s:36:"adds data into a blob created with .";}
a:4:{i:0;s:17:"ibase_blob_cancel";i:1;s:7:"(PHP 5)";i:2;s:48:"bool ibase_blob_cancel ( resource $blob_handle )";i:3;s:68:"This function will discard a BLOB if it has not yet been closed by .";}
a:4:{i:0;s:16:"ibase_blob_close";i:1;s:7:"(PHP 5)";i:2;s:48:"mixed ibase_blob_close ( resource $blob_handle )";i:3;s:106:"This function closes a BLOB that has either been opened for reading by or has been opened for writing by .";}
a:4:{i:0;s:17:"ibase_blob_create";i:1;s:7:"(PHP 5)";i:2;s:66:"resource ibase_blob_create ([ resource $link_identifier = NULL ] )";i:3;s:41:"creates a new BLOB for filling with data.";}
a:4:{i:0;s:15:"ibase_blob_echo";i:1;s:7:"(PHP 5)";i:2;s:40:"bool ibase_blob_echo ( string $blob_id )";i:3;s:119:"This function opens a BLOB for reading and sends its contents directly to standard output (the browser, in most cases).";}
a:4:{i:0;s:14:"ibase_blob_get";i:1;s:7:"(PHP 5)";i:2;s:57:"string ibase_blob_get ( resource $blob_handle, int $len )";i:3;s:85:"This function returns at most bytes from a BLOB that has been opened for reading by .";}
a:4:{i:0;s:17:"ibase_blob_import";i:1;s:7:"(PHP 5)";i:2;s:77:"string ibase_blob_import ( resource $link_identifier, resource $file_handle )";i:3;s:103:"This function creates a BLOB, reads an entire file into it, closes it and returns the assigned BLOB id.";}
a:4:{i:0;s:15:"ibase_blob_info";i:1;s:7:"(PHP 5)";i:2;s:68:"array ibase_blob_info ( resource $link_identifier, string $blob_id )";i:3;s:53:"Returns the BLOB length and other useful information.";}
a:4:{i:0;s:15:"ibase_blob_open";i:1;s:7:"(PHP 5)";i:2;s:71:"resource ibase_blob_open ( resource $link_identifier, string $blob_id )";i:3;s:35:"Opens an existing BLOB for reading.";}
a:4:{i:0;s:11:"ibase_close";i:1;s:7:"(PHP 5)";i:2;s:54:"bool ibase_close ([ resource $connection_id = NULL ] )";i:3;s:173:"Closes the link to an InterBase database that's associated with a connection id returned from . Default transaction on link is committed, other transactions are rolled back.";}
a:4:{i:0;s:16:"ibase_commit_ret";i:1;s:7:"(PHP 5)";i:2;s:70:"bool ibase_commit_ret ([ resource $link_or_trans_identifier = NULL ] )";i:3;s:41:"Commits a transaction without closing it.";}
a:4:{i:0;s:12:"ibase_commit";i:1;s:7:"(PHP 5)";i:2;s:66:"bool ibase_commit ([ resource $link_or_trans_identifier = NULL ] )";i:3;s:22:"Commits a transaction.";}
a:4:{i:0;s:13:"ibase_connect";i:1;s:7:"(PHP 5)";i:2;s:173:"resource ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )";i:3;s:57:"Establishes a connection to an Firebird/InterBase server.";}
a:4:{i:0;s:13:"ibase_db_info";i:1;s:7:"(PHP 5)";i:2;s:97:"string ibase_db_info ( resource $service_handle, string $db, int $action [, int $argument = 0 ] )";i:3;s:0:"";}
a:4:{i:0;s:17:"ibase_delete_user";i:1;s:7:"(PHP 5)";i:2;s:70:"bool ibase_delete_user ( resource $service_handle, string $user_name )";i:3;s:0:"";}
a:4:{i:0;s:13:"ibase_drop_db";i:1;s:7:"(PHP 5)";i:2;s:53:"bool ibase_drop_db ([ resource $connection = NULL ] )";i:3;s:114:"This functions drops a database that was opened by either or . The database is closed and deleted from the server.";}
a:4:{i:0;s:13:"ibase_errcode";i:1;s:7:"(PHP 5)";i:2;s:26:"int ibase_errcode ( void )";i:3;s:82:"Returns the error code that resulted from the most recent InterBase function call.";}
a:4:{i:0;s:12:"ibase_errmsg";i:1;s:7:"(PHP 5)";i:2;s:28:"string ibase_errmsg ( void )";i:3;s:85:"Returns the error message that resulted from the most recent InterBase function call.";}
a:4:{i:0;s:13:"ibase_execute";i:1;s:7:"(PHP 5)";i:2;s:78:"resource ibase_execute ( resource $query [, mixed $bind_arg [, mixed $... ]] )";i:3;s:29:"Execute a query prepared by .";}
a:4:{i:0;s:17:"ibase_fetch_assoc";i:1;s:7:"(PHP 5)";i:2;s:69:"array ibase_fetch_assoc ( resource $result [, int $fetch_flag = 0 ] )";i:3;s:56:"Fetch a result row from a query as an associative array.";}
a:4:{i:0;s:18:"ibase_fetch_object";i:1;s:7:"(PHP 5)";i:2;s:74:"object ibase_fetch_object ( resource $result_id [, int $fetch_flag = 0 ] )";i:3;s:64:"Fetches a row as a pseudo-object from a given result identifier.";}
a:4:{i:0;s:15:"ibase_fetch_row";i:1;s:7:"(PHP 5)";i:2;s:78:"array ibase_fetch_row ( resource $result_identifier [, int $fetch_flag = 0 ] )";i:3;s:50:"fetches one row of data from the given result set.";}
a:4:{i:0;s:16:"ibase_field_info";i:1;s:7:"(PHP 5)";i:2;s:62:"array ibase_field_info ( resource $result, int $field_number )";i:3;s:82:"Returns an array with information about a field after a select query has been run.";}
a:4:{i:0;s:24:"ibase_free_event_handler";i:1;s:7:"(PHP 5)";i:2;s:49:"bool ibase_free_event_handler ( resource $event )";i:3;s:170:"This function causes the registered event handler specified by to be cancelled. The callback function will no longer be called for the events it was registered to handle.";}
a:4:{i:0;s:16:"ibase_free_query";i:1;s:7:"(PHP 5)";i:2;s:41:"bool ibase_free_query ( resource $query )";i:3;s:23:"Frees a prepared query.";}
a:4:{i:0;s:17:"ibase_free_result";i:1;s:7:"(PHP 5)";i:2;s:54:"bool ibase_free_result ( resource $result_identifier )";i:3;s:19:"Frees a result set.";}
a:4:{i:0;s:12:"ibase_gen_id";i:1;s:7:"(PHP 5)";i:2;s:101:"mixed ibase_gen_id ( string $generator [, int $increment = 1 [, resource $link_identifier = NULL ]] )";i:3;s:0:"";}
a:4:{i:0;s:17:"ibase_maintain_db";i:1;s:7:"(PHP 5)";i:2;s:99:"bool ibase_maintain_db ( resource $service_handle, string $db, int $action [, int $argument = 0 ] )";i:3;s:0:"";}
a:4:{i:0;s:17:"ibase_modify_user";i:1;s:7:"(PHP 5)";i:2;s:158:"bool ibase_modify_user ( resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )";i:3;s:0:"";}
a:4:{i:0;s:17:"ibase_name_result";i:1;s:7:"(PHP 5)";i:2;s:57:"bool ibase_name_result ( resource $result, string $name )";i:3;s:123:"This function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF statements.";}
a:4:{i:0;s:16:"ibase_num_fields";i:1;s:7:"(PHP 5)";i:2;s:44:"int ibase_num_fields ( resource $result_id )";i:3;s:41:"Get the number of fields in a result set.";}
a:4:{i:0;s:16:"ibase_num_params";i:1;s:7:"(PHP 5)";i:2;s:40:"int ibase_num_params ( resource $query )";i:3;s:159:"This function returns the number of parameters in the prepared query specified by . This is the number of binding arguments that must be present when calling .";}
a:4:{i:0;s:16:"ibase_param_info";i:1;s:7:"(PHP 5)";i:2;s:61:"array ibase_param_info ( resource $query, int $param_number )";i:3;s:84:"Returns an array with information about a parameter after a query has been prepared.";}
a:4:{i:0;s:14:"ibase_pconnect";i:1;s:7:"(PHP 5)";i:2;s:174:"resource ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )";i:3;s:55:"Opens a persistent connection to an InterBase database.";}
a:4:{i:0;s:13:"ibase_prepare";i:1;s:7:"(PHP 5)";i:2;s:40:"resource ibase_prepare ( string $query )";i:3;s:81:"Prepare a query for later binding of parameter placeholders and execution (via ).";}
a:4:{i:0;s:11:"ibase_query";i:1;s:7:"(PHP 5)";i:2;s:88:"resource ibase_query ([ resource $link_identifier ], string $query [, int $bind_args ] )";i:3;s:42:"Performs a query on an InterBase database.";}
a:4:{i:0;s:13:"ibase_restore";i:1;s:7:"(PHP 5)";i:2;s:134:"mixed ibase_restore ( resource $service_handle, string $source_file, string $dest_db [, int $options = 0 [, bool $verbose = false ]] )";i:3;s:0:"";}
a:4:{i:0;s:18:"ibase_rollback_ret";i:1;s:7:"(PHP 5)";i:2;s:72:"bool ibase_rollback_ret ([ resource $link_or_trans_identifier = NULL ] )";i:3;s:44:"Rolls back a transaction without closing it.";}
a:4:{i:0;s:14:"ibase_rollback";i:1;s:7:"(PHP 5)";i:2;s:68:"bool ibase_rollback ([ resource $link_or_trans_identifier = NULL ] )";i:3;s:25:"Rolls back a transaction.";}
a:4:{i:0;s:17:"ibase_server_info";i:1;s:7:"(PHP 5)";i:2;s:66:"string ibase_server_info ( resource $service_handle, int $action )";i:3;s:0:"";}
a:4:{i:0;s:20:"ibase_service_attach";i:1;s:7:"(PHP 5)";i:2;s:90:"resource ibase_service_attach ( string $host, string $dba_username, string $dba_password )";i:3;s:0:"";}
a:4:{i:0;s:20:"ibase_service_detach";i:1;s:7:"(PHP 5)";i:2;s:54:"bool ibase_service_detach ( resource $service_handle )";i:3;s:0:"";}
a:4:{i:0;s:23:"ibase_set_event_handler";i:1;s:7:"(PHP 5)";i:2;s:122:"resource ibase_set_event_handler ( callable $event_handler, string $event_name1 [, string $event_name2 [, string $... ]] )";i:3;s:86:"This function registers a PHP user function as event handler for the specified events.";}
a:4:{i:0;s:11:"ibase_trans";i:1;s:7:"(PHP 5)";i:2;s:73:"resource ibase_trans ([ int $trans_args [, resource $link_identifier ]] )";i:3;s:21:"Begins a transaction.";}
a:4:{i:0;s:16:"ibase_wait_event";i:1;s:7:"(PHP 5)";i:2;s:88:"string ibase_wait_event ( string $event_name1 [, string $event_name2 [, string $... ]] )";i:3;s:206:"This function suspends execution of the script until one of the specified events is posted by the database. The name of the event that was posted is returned. This function accepts up to 15 event arguments.";}
a:4:{i:0;s:19:"fbsql_affected_rows";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:56:"int fbsql_affected_rows ([ resource $link_identifier ] )";i:3;s:96:"returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with .";}
a:4:{i:0;s:16:"fbsql_autocommit";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:68:"bool fbsql_autocommit ( resource $link_identifier [, bool $OnOff ] )";i:3;s:38:"Returns the current autocommit status.";}
a:4:{i:0;s:15:"fbsql_blob_size";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:74:"int fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] )";i:3;s:35:"Returns the size of the given BLOB.";}
a:4:{i:0;s:17:"fbsql_change_user";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:109:"bool fbsql_change_user ( string $user, string $password [, string $database [, resource $link_identifier ]] )";i:3;s:146:"changes the logged in user of the specified connection. If the new user and password authorization fails, the current connected user stays active.";}
a:4:{i:0;s:15:"fbsql_clob_size";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:74:"int fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] )";i:3;s:35:"Returns the size of the given CLOB.";}
a:4:{i:0;s:11:"fbsql_close";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:49:"bool fbsql_close ([ resource $link_identifier ] )";i:3;s:99:"Closes the connection to the FrontBase server that's associated with the specified link identifier.";}
a:4:{i:0;s:12:"fbsql_commit";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:50:"bool fbsql_commit ([ resource $link_identifier ] )";i:3;s:206:"Ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction. This command is only needed if autocommit is set to false.";}
a:4:{i:0;s:13:"fbsql_connect";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:188:"resource fbsql_connect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] )";i:3;s:47:"establishes a connection to a FrontBase server.";}
a:4:{i:0;s:17:"fbsql_create_blob";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:77:"string fbsql_create_blob ( string $blob_data [, resource $link_identifier ] )";i:3;s:35:"Creates a BLOB from the given data.";}
a:4:{i:0;s:17:"fbsql_create_clob";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:77:"string fbsql_create_clob ( string $clob_data [, resource $link_identifier ] )";i:3;s:35:"Creates a CLOB from the given data.";}
a:4:{i:0;s:15:"fbsql_create_db";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:106:"bool fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )";i:3;s:58:"Attempts to create a new database on the specified server.";}
a:4:{i:0;s:15:"fbsql_data_seek";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:58:"bool fbsql_data_seek ( resource $result, int $row_number )";i:3;s:140:"Moves the internal row pointer of the FrontBase result associated with the specified result identifier to point to the specified row number.";}
a:4:{i:0;s:23:"fbsql_database_password";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:91:"string fbsql_database_password ( resource $link_identifier [, string $database_password ] )";i:3;s:165:"Sets and retrieves the database password used by the connection. If a database is protected by a database password, the user must call this function before calling .";}
a:4:{i:0;s:14:"fbsql_database";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:73:"string fbsql_database ( resource $link_identifier [, string $database ] )";i:3;s:54:"Get or set the database name used with the connection.";}
a:4:{i:0;s:14:"fbsql_db_query";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:90:"resource fbsql_db_query ( string $database, string $query [, resource $link_identifier ] )";i:3;s:46:"Selects a database and executes a query on it.";}
a:4:{i:0;s:15:"fbsql_db_status";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:76:"int fbsql_db_status ( string $database_name [, resource $link_identifier ] )";i:3;s:50:"Gets the current status of the specified database.";}
a:4:{i:0;s:13:"fbsql_drop_db";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:75:"bool fbsql_drop_db ( string $database_name [, resource $link_identifier ] )";i:3;s:107:"attempts to drop (remove) an entire database from the server associated with the specified link identifier.";}
a:4:{i:0;s:11:"fbsql_errno";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:48:"int fbsql_errno ([ resource $link_identifier ] )";i:3;s:83:"Returns the numerical value of the error message from previous FrontBase operation.";}
a:4:{i:0;s:11:"fbsql_error";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:51:"string fbsql_error ([ resource $link_identifier ] )";i:3;s:60:"Returns the error message from previous FrontBase operation.";}
a:4:{i:0;s:17:"fbsql_fetch_array";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:66:"array fbsql_fetch_array ( resource $result [, int $result_type ] )";i:3;s:25:"is a combination of and .";}
a:4:{i:0;s:17:"fbsql_fetch_assoc";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:44:"array fbsql_fetch_assoc ( resource $result )";i:3;s:96:"Calling is equivalent to calling with as second parameter. It only returns an associative array.";}
a:4:{i:0;s:17:"fbsql_fetch_field";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:68:"object fbsql_fetch_field ( resource $result [, int $field_offset ] )";i:3;s:75:"Used in order to obtain information about fields in a certain query result.";}
a:4:{i:0;s:19:"fbsql_fetch_lengths";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:46:"array fbsql_fetch_lengths ( resource $result )";i:3;s:86:"Stores the lengths of each result column in the last row returned by, and in an array.";}
a:4:{i:0;s:18:"fbsql_fetch_object";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:46:"object fbsql_fetch_object ( resource $result )";i:3;s:220:"is similar to, with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).";}
a:4:{i:0;s:15:"fbsql_fetch_row";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:42:"array fbsql_fetch_row ( resource $result )";i:3;s:88:"fetches one row of data from the result associated with the specified result identifier.";}
a:4:{i:0;s:17:"fbsql_field_flags";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:68:"string fbsql_field_flags ( resource $result [, int $field_offset ] )";i:3;s:63:"Gets the flags associated with the specified field in a result.";}
a:4:{i:0;s:15:"fbsql_field_len";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:63:"int fbsql_field_len ( resource $result [, int $field_offset ] )";i:3;s:42:"Returns the length of the specified field.";}
a:4:{i:0;s:16:"fbsql_field_name";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:66:"string fbsql_field_name ( resource $result [, int $field_index ] )";i:3;s:46:"Returns the name of the specified field index.";}
a:4:{i:0;s:16:"fbsql_field_seek";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:65:"bool fbsql_field_seek ( resource $result [, int $field_offset ] )";i:3;s:136:"Seeks to the specified field offset. If the next call to doesn't include a field offset, the field offset specified in will be returned.";}
a:4:{i:0;s:17:"fbsql_field_table";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:68:"string fbsql_field_table ( resource $result [, int $field_offset ] )";i:3;s:61:"Returns the name of the table that the specified field is in.";}
a:4:{i:0;s:16:"fbsql_field_type";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:67:"string fbsql_field_type ( resource $result [, int $field_offset ] )";i:3;s:67:"is similar to the function, but the field type is returned instead.";}
a:4:{i:0;s:17:"fbsql_free_result";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:43:"bool fbsql_free_result ( resource $result )";i:3;s:54:"Frees all memory associated with the given identifier.";}
a:4:{i:0;s:24:"fbsql_get_autostart_info";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:63:"array fbsql_get_autostart_info ([ resource $link_identifier ] )";i:3;s:0:"";}
a:4:{i:0;s:14:"fbsql_hostname";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:74:"string fbsql_hostname ( resource $link_identifier [, string $host_name ] )";i:3;s:50:"Gets or sets the host name used with a connection.";}
a:4:{i:0;s:15:"fbsql_insert_id";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:52:"int fbsql_insert_id ([ resource $link_identifier ] )";i:3;s:94:"Gets the id generated from the previous INSERT operation which created a DEFAULT UNIQUE value.";}
a:4:{i:0;s:14:"fbsql_list_dbs";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:56:"resource fbsql_list_dbs ([ resource $link_identifier ] )";i:3;s:130:"Return a result pointer containing the databases available from the current fbsql daemon. Use the to traverse this result pointer.";}
a:4:{i:0;s:17:"fbsql_list_fields";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:103:"resource fbsql_list_fields ( string $database_name, string $table_name [, resource $link_identifier ] )";i:3;s:44:"Retrieves information about the given table.";}
a:4:{i:0;s:17:"fbsql_list_tables";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:78:"resource fbsql_list_tables ( string $database [, resource $link_identifier ] )";i:3;s:41:"Returns a result pointer describing the .";}
a:4:{i:0;s:17:"fbsql_next_result";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:43:"bool fbsql_next_result ( resource $result )";i:3;s:364:"When sending more than one SQL statement to the server or executing a stored procedure with multiple results will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the words from the new result set.";}
a:4:{i:0;s:16:"fbsql_num_fields";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:41:"int fbsql_num_fields ( resource $result )";i:3;s:46:"Returns the number of fields in the given set.";}
a:4:{i:0;s:14:"fbsql_num_rows";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:39:"int fbsql_num_rows ( resource $result )";i:3;s:41:"Gets the number of rows in the given set.";}
a:4:{i:0;s:14:"fbsql_password";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:73:"string fbsql_password ( resource $link_identifier [, string $password ] )";i:3;s:52:"Get or set the user password used with a connection.";}
a:4:{i:0;s:14:"fbsql_pconnect";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:189:"resource fbsql_pconnect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] )";i:3;s:58:"Establishes a persistent connection to a FrontBase server.";}
a:4:{i:0;s:11:"fbsql_query";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:89:"resource fbsql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )";i:3;s:55:"Sends a to the currently active database on the server.";}
a:4:{i:0;s:15:"fbsql_read_blob";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:77:"string fbsql_read_blob ( string $blob_handle [, resource $link_identifier ] )";i:3;s:34:"Reads BLOB data from the database.";}
a:4:{i:0;s:15:"fbsql_read_clob";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:77:"string fbsql_read_clob ( string $clob_handle [, resource $link_identifier ] )";i:3;s:34:"Reads CLOB data from the database.";}
a:4:{i:0;s:12:"fbsql_result";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:70:"mixed fbsql_result ( resource $result [, int $row [, mixed $field ]] )";i:3;s:54:"Returns the contents of one cell from a FrontBase set.";}
a:4:{i:0;s:14:"fbsql_rollback";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:52:"bool fbsql_rollback ([ resource $link_identifier ] )";i:3;s:85:"Ends the current transaction by rolling back all statements issued since last commit.";}
a:4:{i:0;s:18:"fbsql_rows_fetched";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"int fbsql_rows_fetched ( resource $result )";i:3;s:55:"Gets the number of rows affected by the last statement.";}
a:4:{i:0;s:15:"fbsql_select_db";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:79:"bool fbsql_select_db ([ string $database_name [, resource $link_identifier ]] )";i:3;s:62:"Sets the current active database on the given link identifier.";}
a:4:{i:0;s:22:"fbsql_set_characterset";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:98:"void fbsql_set_characterset ( resource $link_identifier, int $characterset [, int $in_out_both ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"fbsql_set_lob_mode";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:59:"bool fbsql_set_lob_mode ( resource $result, int $lob_mode )";i:3;s:56:"Sets the mode for retrieving LOB data from the database.";}
a:4:{i:0;s:18:"fbsql_set_password";i:1;s:7:"(PHP 5)";i:2;s:107:"bool fbsql_set_password ( resource $link_identifier, string $user, string $password, string $old_password )";i:3;s:36:"Changes the password for the given .";}
a:4:{i:0;s:21:"fbsql_set_transaction";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:86:"void fbsql_set_transaction ( resource $link_identifier, int $locking, int $isolation )";i:3;s:26:"Sets the transaction and .";}
a:4:{i:0;s:14:"fbsql_start_db";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:105:"bool fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )";i:3;s:43:"Start a database on local or remote server.";}
a:4:{i:0;s:13:"fbsql_stop_db";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:75:"bool fbsql_stop_db ( string $database_name [, resource $link_identifier ] )";i:3;s:43:"Stops a database on local or remote server.";}
a:4:{i:0;s:16:"fbsql_table_name";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:56:"string fbsql_table_name ( resource $result, int $index )";i:3;s:52:"gets the name of the current table in the given set.";}
a:4:{i:0;s:15:"fbsql_tablename";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:14:"fbsql_username";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:73:"string fbsql_username ( resource $link_identifier [, string $username ] )";i:3;s:48:"Get or set the username used for the connection.";}
a:4:{i:0;s:14:"fbsql_warnings";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:38:"bool fbsql_warnings ([ bool $OnOff ] )";i:3;s:39:"Enables or disables FrontBase warnings.";}
a:4:{i:0;s:14:"db2_autocommit";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:62:"mixed db2_autocommit ( resource $connection [, bool $value ] )";i:3;s:74:"Sets or gets the AUTOCOMMIT behavior of the specified connection resource.";}
a:4:{i:0;s:14:"db2_bind_param";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:175:"bool db2_bind_param ( resource $stmt, int $parameter-number, string $variable-name [, int $parameter-type [, int $data-type = 0 [, int $precision = -1 [, int $scale = 0 ]]]] )";i:3;s:274:"Binds a PHP variable to an SQL statement parameter in a statement resource returned by . This function gives you more control over the parameter type, data type, precision, and scale for the parameter than simply passing the variable as part of the optional input array to .";}
a:4:{i:0;s:15:"db2_client_info";i:1;s:23:"(PECL ibm_db2 >= 1.1.1)";i:2;s:47:"object db2_client_info ( resource $connection )";i:3;s:165:"This function returns an object with read-only properties that return information about the DB2 database client. The following table lists the DB2 client properties:";}
a:4:{i:0;s:9:"db2_close";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:39:"bool db2_close ( resource $connection )";i:3;s:121:"This function closes a DB2 client connection created with and returns the corresponding resources to the database server.";}
a:4:{i:0;s:21:"db2_column_privileges";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:144:"resource db2_column_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )";i:3;s:79:"Returns a result set listing the columns and associated privileges for a table.";}
a:4:{i:0;s:11:"db2_columns";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:134:"resource db2_columns ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )";i:3;s:77:"Returns a result set listing the columns and associated metadata for a table.";}
a:4:{i:0;s:10:"db2_commit";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:40:"bool db2_commit ( resource $connection )";i:3;s:242:"Commits an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so is not necessary unless AUTOCOMMIT has been turned off for the connection resource.";}
a:4:{i:0;s:14:"db2_conn_error";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:49:"string db2_conn_error ([ resource $connection ] )";i:3;s:221:"returns an SQLSTATE value representing the reason the last attempt to connect to a database failed. As returns in the event of a failed connection attempt, you do not pass any parameters to to retrieve the SQLSTATE value.";}
a:4:{i:0;s:17:"db2_conn_errormsg";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:52:"string db2_conn_errormsg ([ resource $connection ] )";i:3;s:257:"returns an error message and SQLCODE value representing the reason the last database connection attempt failed. As returns in the event of a failed connection attempt, do not pass any parameters to to retrieve the associated error message and SQLCODE value.";}
a:4:{i:0;s:11:"db2_connect";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:97:"resource db2_connect ( string $database, string $username, string $password [, array $options ] )";i:3;s:100:"Creates a new connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database.";}
a:4:{i:0;s:15:"db2_cursor_type";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:38:"int db2_cursor_type ( resource $stmt )";i:3;s:143:"Returns the cursor type used by a statement resource. Use this to determine if you are working with a forward-only cursor or scrollable cursor.";}
a:4:{i:0;s:17:"db2_escape_string";i:1;s:23:"(PECL ibm_db2 >= 1.6.0)";i:2;s:51:"string db2_escape_string ( string $string_literal )";i:3;s:66:"Prepends backslashes to special characters in the string argument.";}
a:4:{i:0;s:8:"db2_exec";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:81:"resource db2_exec ( resource $connection, string $statement [, array $options ] )";i:3;s:35:"Executes an SQL statement directly.";}
a:4:{i:0;s:11:"db2_execute";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:58:"bool db2_execute ( resource $stmt [, array $parameters ] )";i:3;s:48:"executes an SQL statement that was prepared by .";}
a:4:{i:0;s:15:"db2_fetch_array";i:1;s:23:"(PECL ibm_db2 >= 1.0.1)";i:2;s:66:"array db2_fetch_array ( resource $stmt [, int $row_number = -1 ] )";i:3;s:108:"Returns an array, indexed by column position, representing a row in a result set. The columns are 0-indexed.";}
a:4:{i:0;s:15:"db2_fetch_assoc";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:66:"array db2_fetch_assoc ( resource $stmt [, int $row_number = -1 ] )";i:3;s:77:"Returns an array, indexed by column name, representing a row in a result set.";}
a:4:{i:0;s:14:"db2_fetch_both";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:65:"array db2_fetch_both ( resource $stmt [, int $row_number = -1 ] )";i:3;s:194:"Returns an array, indexed by both column name and position, representing a row in a result set. Note that the row returned by requires more memory than the single-indexed arrays returned by or .";}
a:4:{i:0;s:16:"db2_fetch_object";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:68:"object db2_fetch_object ( resource $stmt [, int $row_number = -1 ] )";i:3;s:107:"Returns an object in which each property represents a column returned in the row fetched from a result set.";}
a:4:{i:0;s:13:"db2_fetch_row";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:58:"bool db2_fetch_row ( resource $stmt [, int $row_number ] )";i:3;s:120:"Use to iterate through a result set, or to point to a specific row in a result set if you requested a scrollable cursor.";}
a:4:{i:0;s:22:"db2_field_display_size";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:60:"int db2_field_display_size ( resource $stmt, mixed $column )";i:3;s:81:"Returns the maximum number of bytes required to display a column in a result set.";}
a:4:{i:0;s:14:"db2_field_name";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:55:"string db2_field_name ( resource $stmt, mixed $column )";i:3;s:59:"Returns the name of the specified column in the result set.";}
a:4:{i:0;s:13:"db2_field_num";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:51:"int db2_field_num ( resource $stmt, mixed $column )";i:3;s:57:"Returns the position of the named column in a result set.";}
a:4:{i:0;s:19:"db2_field_precision";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:57:"int db2_field_precision ( resource $stmt, mixed $column )";i:3;s:62:"Returns the precision of the indicated column in a result set.";}
a:4:{i:0;s:15:"db2_field_scale";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:53:"int db2_field_scale ( resource $stmt, mixed $column )";i:3;s:58:"Returns the scale of the indicated column in a result set.";}
a:4:{i:0;s:14:"db2_field_type";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:55:"string db2_field_type ( resource $stmt, mixed $column )";i:3;s:62:"Returns the data type of the indicated column in a result set.";}
a:4:{i:0;s:15:"db2_field_width";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:53:"int db2_field_width ( resource $stmt, mixed $column )";i:3;s:216:"Returns the width of the current value of the indicated column in a result set. This is the maximum width of the column for a fixed-length data type, or the actual width of the column for a variable-length data type.";}
a:4:{i:0;s:16:"db2_foreign_keys";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:105:"resource db2_foreign_keys ( resource $connection, string $qualifier, string $schema, string $table-name )";i:3;s:58:"Returns a result set listing the foreign keys for a table.";}
a:4:{i:0;s:15:"db2_free_result";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:39:"bool db2_free_result ( resource $stmt )";i:3;s:230:"Frees the system and database resources that are associated with a result set. These resources are freed implicitly when a script finishes, but you can call to explicitly free the result set resources before the end of the script.";}
a:4:{i:0;s:13:"db2_free_stmt";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:37:"bool db2_free_stmt ( resource $stmt )";i:3;s:237:"Frees the system and database resources that are associated with a statement resource. These resources are freed implicitly when a script finishes, but you can call to explicitly free the statement resources before the end of the script.";}
a:4:{i:0;s:14:"db2_get_option";i:1;s:23:"(PECL ibm_db2 >= 1.6.0)";i:2;s:60:"string db2_get_option ( resource $resource, string $option )";i:3;s:98:"Retrieves the value of a specified option value for a statement resource or a connection resource.";}
a:4:{i:0;s:18:"db2_last_insert_id";i:1;s:23:"(PECL ibm_db2 >= 1.7.1)";i:2;s:48:"string db2_last_insert_id ( resource $resource )";i:3;s:101:"Returns the auto generated ID of the last insert query that successfully executed on this connection.";}
a:4:{i:0;s:12:"db2_lob_read";i:1;s:23:"(PECL ibm_db2 >= 1.6.0)";i:2;s:64:"string db2_lob_read ( resource $stmt, int $colnum, int $length )";i:3;s:103:"Use to iterate through a specified column of a result set and retrieve a user defined size of LOB data.";}
a:4:{i:0;s:15:"db2_next_result";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:43:"resource db2_next_result ( resource $stmt )";i:3;s:339:"A stored procedure can return zero or more result sets. While you handle the first result set in exactly the same way you would handle the results returned by a simple SELECT statement, to fetch the second and subsequent result sets from a stored procedure you must call the function and return the result to a uniquely named PHP variable.";}
a:4:{i:0;s:14:"db2_num_fields";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:37:"int db2_num_fields ( resource $stmt )";i:3;s:279:"Returns the number of fields contained in a result set. This is most useful for handling the result sets returned by dynamically generated queries, or for result sets returned by stored procedures, where your application cannot otherwise know how to retrieve and use the results.";}
a:4:{i:0;s:12:"db2_num_rows";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:35:"int db2_num_rows ( resource $stmt )";i:3;s:77:"Returns the number of rows deleted, inserted, or updated by an SQL statement.";}
a:4:{i:0;s:10:"db2_pclose";i:1;s:23:"(PECL ibm_db2 >= 1.8.0)";i:2;s:38:"bool db2_pclose ( resource $resource )";i:3;s:121:"This function closes a DB2 client connection created with and returns the corresponding resources to the database server.";}
a:4:{i:0;s:12:"db2_pconnect";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:98:"resource db2_pconnect ( string $database, string $username, string $password [, array $options ] )";i:3;s:107:"Returns a persistent connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database.";}
a:4:{i:0;s:11:"db2_prepare";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:84:"resource db2_prepare ( resource $connection, string $statement [, array $options ] )";i:3;s:259:"creates a prepared SQL statement which can include 0 or more parameter markers ( characters) representing parameters for input, output, or input/output. You can pass parameters to the prepared statement using, or for input values only, as an array passed to .";}
a:4:{i:0;s:16:"db2_primary_keys";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:105:"resource db2_primary_keys ( resource $connection, string $qualifier, string $schema, string $table-name )";i:3;s:58:"Returns a result set listing the primary keys for a table.";}
a:4:{i:0;s:21:"db2_procedure_columns";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:128:"resource db2_procedure_columns ( resource $connection, string $qualifier, string $schema, string $procedure, string $parameter )";i:3;s:78:"Returns a result set listing the parameters for one or more stored procedures.";}
a:4:{i:0;s:14:"db2_procedures";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:102:"resource db2_procedures ( resource $connection, string $qualifier, string $schema, string $procedure )";i:3;s:76:"Returns a result set listing the stored procedures registered in a database.";}
a:4:{i:0;s:10:"db2_result";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:50:"mixed db2_result ( resource $stmt, mixed $column )";i:3;s:157:"Use to return the value of a specified column in the current row of a result set. You must call before calling to set the location of the result set pointer.";}
a:4:{i:0;s:12:"db2_rollback";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:42:"bool db2_rollback ( resource $connection )";i:3;s:251:"Rolls back an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so normally has no effect unless AUTOCOMMIT has been turned off for the connection resource.";}
a:4:{i:0;s:15:"db2_server_info";i:1;s:23:"(PECL ibm_db2 >= 1.1.1)";i:2;s:47:"object db2_server_info ( resource $connection )";i:3;s:203:"This function returns an object with read-only properties that return information about the IBM DB2, Cloudscape, or Apache Derby database server. The following table lists the database server properties:";}
a:4:{i:0;s:14:"db2_set_option";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:69:"bool db2_set_option ( resource $resource, array $options, int $type )";i:3;s:112:"Sets options for a statement resource or a connection resource. You cannot set options for result set resources.";}
a:4:{i:0;s:19:"db2_special_columns";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:120:"resource db2_special_columns ( resource $connection, string $qualifier, string $schema, string $table_name, int $scope )";i:3;s:75:"Returns a result set listing the unique row identifier columns for a table.";}
a:4:{i:0;s:14:"db2_statistics";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:117:"resource db2_statistics ( resource $connection, string $qualifier, string $schema, string $table-name, bool $unique )";i:3;s:66:"Returns a result set listing the index and statistics for a table.";}
a:4:{i:0;s:14:"db2_stmt_error";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:43:"string db2_stmt_error ([ resource $stmt ] )";i:3;s:76:"Returns a string containing the SQLSTATE value returned by an SQL statement.";}
a:4:{i:0;s:17:"db2_stmt_errormsg";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:46:"string db2_stmt_errormsg ([ resource $stmt ] )";i:3;s:65:"Returns a string containing the last SQL statement error message.";}
a:4:{i:0;s:20:"db2_table_privileges";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:119:"resource db2_table_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table_name ]]] )";i:3;s:80:"Returns a result set listing the tables and associated privileges in a database.";}
a:4:{i:0;s:10:"db2_tables";i:1;s:23:"(PECL ibm_db2 >= 1.0.0)";i:2;s:132:"resource db2_tables ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]] )";i:3;s:78:"Returns a result set listing the tables and associated metadata in a database.";}
a:4:{i:0;s:17:"ifx_affected_rows";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:45:"int ifx_affected_rows ( resource $result_id )";i:3;s:64:"Returns the number of rows affected by a query associated with .";}
a:4:{i:0;s:19:"ifx_blobinfile_mode";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:38:"bool ifx_blobinfile_mode ( int $mode )";i:3;s:49:"Set the default blob mode for all select queries.";}
a:4:{i:0;s:17:"ifx_byteasvarchar";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:36:"bool ifx_byteasvarchar ( int $mode )";i:3;s:50:"Sets the default byte mode for all select-queries.";}
a:4:{i:0;s:9:"ifx_close";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:47:"bool ifx_close ([ resource $link_identifier ] )";i:3;s:93:"closes the link to an Informix database that's associated with the specified link identifier.";}
a:4:{i:0;s:11:"ifx_connect";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:84:"resource ifx_connect ([ string $database [, string $userid [, string $password ]]] )";i:3;s:47:"establishes a connection to an Informix server.";}
a:4:{i:0;s:13:"ifx_copy_blob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:30:"int ifx_copy_blob ( int $bid )";i:3;s:33:"Duplicates the given blob object.";}
a:4:{i:0;s:15:"ifx_create_blob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:59:"int ifx_create_blob ( int $type, int $mode, string $param )";i:3;s:22:"Creates a blob object.";}
a:4:{i:0;s:15:"ifx_create_char";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:37:"int ifx_create_char ( string $param )";i:3;s:23:"Creates an char object.";}
a:4:{i:0;s:6:"ifx_do";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:35:"bool ifx_do ( resource $result_id )";i:3;s:62:"Executes a previously prepared query or opens a cursor for it.";}
a:4:{i:0;s:9:"ifx_error";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:49:"string ifx_error ([ resource $link_identifier ] )";i:3;s:165:"Returns in a string one character describing the general results of a statement and both SQLSTATE and SQLCODE associated with the most recent SQL statement executed.";}
a:4:{i:0;s:12:"ifx_errormsg";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:41:"string ifx_errormsg ([ int $errorcode ] )";i:3;s:82:"Returns the Informix error message associated with the most recent Informix error.";}
a:4:{i:0;s:13:"ifx_fetch_row";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:64:"array ifx_fetch_row ( resource $result_id [, mixed $position ] )";i:3;s:88:"Fetches one row of data from the result associated with the specified result identifier.";}
a:4:{i:0;s:19:"ifx_fieldproperties";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:49:"array ifx_fieldproperties ( resource $result_id )";i:3;s:248:"Returns the Informix SQL fieldproperties of every field in the query as an associative array. Properties are encoded as: "SQLTYPE;length;precision;scale;ISNULLABLE" where SQLTYPE = the Informix type like "SQLVCHAR" etc. and ISNULLABLE = "Y" or "N".";}
a:4:{i:0;s:14:"ifx_fieldtypes";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:44:"array ifx_fieldtypes ( resource $result_id )";i:3;s:114:"Returns an associative array with fieldnames as key and the SQL fieldtypes as data for the query associated with .";}
a:4:{i:0;s:13:"ifx_free_blob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:31:"bool ifx_free_blob ( int $bid )";i:3;s:52:"Deletes the blobobject for the given blob object-id.";}
a:4:{i:0;s:13:"ifx_free_char";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:31:"bool ifx_free_char ( int $bid )";i:3;s:52:"Deletes the charobject for the given char object-id.";}
a:4:{i:0;s:15:"ifx_free_result";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:44:"bool ifx_free_result ( resource $result_id )";i:3;s:50:"Releases resources for the query associated with .";}
a:4:{i:0;s:12:"ifx_get_blob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:32:"string ifx_get_blob ( int $bid )";i:3;s:39:"Returns the content of the blob object.";}
a:4:{i:0;s:12:"ifx_get_char";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:32:"string ifx_get_char ( int $bid )";i:3;s:39:"Returns the content of the char object.";}
a:4:{i:0;s:12:"ifx_getsqlca";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:42:"array ifx_getsqlca ( resource $result_id )";i:3;s:97:"Returns a pseudo-row with sqlca.sqlerrd[0] ... sqlca.sqlerrd[5] after the query associated with .";}
a:4:{i:0;s:18:"ifx_htmltbl_result";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:78:"int ifx_htmltbl_result ( resource $result_id [, string $html_table_options ] )";i:3;s:59:"Formats and prints all rows of the query into a HTML table.";}
a:4:{i:0;s:14:"ifx_nullformat";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:33:"bool ifx_nullformat ( int $mode )";i:3;s:61:"Sets the default return value of a NULL-value on a fetch row.";}
a:4:{i:0;s:14:"ifx_num_fields";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:42:"int ifx_num_fields ( resource $result_id )";i:3;s:93:"After preparing or executing a query, this call gives you the number of columns in the query.";}
a:4:{i:0;s:12:"ifx_num_rows";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:40:"int ifx_num_rows ( resource $result_id )";i:3;s:74:"Gives the number of rows fetched so far for a query with after a or query.";}
a:4:{i:0;s:12:"ifx_pconnect";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:85:"resource ifx_pconnect ([ string $database [, string $userid [, string $password ]]] )";i:3;s:47:"acts very much like with two major differences.";}
a:4:{i:0;s:11:"ifx_prepare";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:106:"resource ifx_prepare ( string $query, resource $link_identifier [, int $cursor_def ], mixed $blobidarray )";i:3;s:31:"Prepares a for later use with .";}
a:4:{i:0;s:9:"ifx_query";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:108:"resource ifx_query ( string $query, resource $link_identifier [, int $cursor_type [, mixed $blobidarray ]] )";i:3;s:108:"Sends a to the currently active database on the server that's associated with the specified link identifier.";}
a:4:{i:0;s:17:"ifx_textasvarchar";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:36:"bool ifx_textasvarchar ( int $mode )";i:3;s:50:"Sets the default text mode for all select-queries.";}
a:4:{i:0;s:15:"ifx_update_blob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:50:"bool ifx_update_blob ( int $bid, string $content )";i:3;s:66:"Updates the content of the blob object for the given blob object .";}
a:4:{i:0;s:15:"ifx_update_char";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:50:"bool ifx_update_char ( int $bid, string $content )";i:3;s:66:"Updates the content of the char object for the given char object .";}
a:4:{i:0;s:16:"ifxus_close_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:34:"bool ifxus_close_slob ( int $bid )";i:3;s:53:"Deletes the slob object on the given slob object-id .";}
a:4:{i:0;s:17:"ifxus_create_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:35:"int ifxus_create_slob ( int $mode )";i:3;s:36:"Creates an slob object and opens it.";}
a:4:{i:0;s:15:"ifxus_free_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:33:"bool ifxus_free_slob ( int $bid )";i:3;s:24:"Deletes the slob object.";}
a:4:{i:0;s:15:"ifxus_open_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:43:"int ifxus_open_slob ( int $bid, int $mode )";i:3;s:52:"Opens an slob object. should be an existing slob id.";}
a:4:{i:0;s:15:"ifxus_read_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:48:"string ifxus_read_slob ( int $bid, int $nbytes )";i:3;s:25:"Reads of the slob object.";}
a:4:{i:0;s:15:"ifxus_seek_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:56:"int ifxus_seek_slob ( int $bid, int $mode, int $offset )";i:3;s:62:"Sets the current file or seek position of an open slob object.";}
a:4:{i:0;s:15:"ifxus_tell_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:32:"int ifxus_tell_slob ( int $bid )";i:3;s:64:"Returns the current file or seek position of an open slob object";}
a:4:{i:0;s:16:"ifxus_write_slob";i:1;s:20:"(PHP 4, PHP <=5.2.0)";i:2;s:50:"int ifxus_write_slob ( int $bid, string $content )";i:3;s:37:"Writes a string into the slob object.";}
a:4:{i:0;s:23:"ingres_autocommit_state";i:1;s:22:"(PECL ingres >= 2.0.0)";i:2;s:47:"bool ingres_autocommit_state ( resource $link )";i:3;s:78:"is called to determine whether the current link has autocommit enabled or not.";}
a:4:{i:0;s:17:"ingres_autocommit";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:41:"bool ingres_autocommit ( resource $link )";i:3;s:200:"is called before opening a transaction (before the first call to or just after a call to or ) to switch the autocommit mode of the server on or off (when the script begins the autocommit mode is off).";}
a:4:{i:0;s:14:"ingres_charset";i:1;s:22:"(PECL ingres >= 2.1.0)";i:2;s:40:"string ingres_charset ( resource $link )";i:3;s:128:"is called to determine the character set being used by the Ingres client, from II_CHARSETxx (where xx is the installation code).";}
a:4:{i:0;s:12:"ingres_close";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:36:"bool ingres_close ( resource $link )";i:3;s:86:"closes the connection to the Ingres server that is associated with the specified link.";}
a:4:{i:0;s:13:"ingres_commit";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:37:"bool ingres_commit ( resource $link )";i:3;s:90:"commits the currently open transaction, making all changes made to the database permanent.";}
a:4:{i:0;s:14:"ingres_connect";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:108:"resource ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] )";i:3;s:42:"opens a connection with the given Ingres .";}
a:4:{i:0;s:13:"ingres_cursor";i:1;s:22:"(PECL ingres >= 1.1.0)";i:2;s:41:"string ingres_cursor ( resource $result )";i:3;s:91:"Returns a string with the active cursor name. If no cursor is active then NULL is returned.";}
a:4:{i:0;s:12:"ingres_errno";i:1;s:22:"(PECL ingres >= 1.1.0)";i:2;s:38:"int ingres_errno ([ resource $link ] )";i:3;s:92:"Returns an integer containing the last error number. If no error was reported 0 is returned.";}
a:4:{i:0;s:12:"ingres_error";i:1;s:22:"(PECL ingres >= 1.1.0)";i:2;s:41:"string ingres_error ([ resource $link ] )";i:3;s:77:"Returns a string containing the last error, or NULL if no error has occurred.";}
a:4:{i:0;s:18:"ingres_errsqlstate";i:1;s:22:"(PECL ingres >= 1.1.0)";i:2;s:47:"string ingres_errsqlstate ([ resource $link ] )";i:3;s:80:"Returns a string containing the last SQLSTATE, or NULL if no error has occurred.";}
a:4:{i:0;s:20:"ingres_escape_string";i:1;s:22:"(PECL ingres >= 2.1.0)";i:2;s:69:"string ingres_escape_string ( resource $link, string $source_string )";i:3;s:94:"is used to escape certain characters within a string before it is sent to the database server.";}
a:4:{i:0;s:14:"ingres_execute";i:1;s:22:"(PECL ingres >= 1.1.0)";i:2;s:77:"bool ingres_execute ( resource $result [, array $params [, string $types ]] )";i:3;s:32:"Execute a query prepared using .";}
a:4:{i:0;s:18:"ingres_fetch_array";i:1;s:39:"( PHP 5 <= 5.0.5, PECL ingres >=
1.0.0)";i:2;s:67:"array ingres_fetch_array ( resource $result [, int $result_type ] )";i:3;s:196:"This function is an extended version of . In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.";}
a:4:{i:0;s:18:"ingres_fetch_assoc";i:1;s:22:"(PECL ingres >= 2.2.2)";i:2;s:45:"array ingres_fetch_assoc ( resource $result )";i:3;s:124:"This function is stores the data fetched from a query executed using in an associative array, using the field names as keys.";}
a:4:{i:0;s:19:"ingres_fetch_object";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:69:"object ingres_fetch_object ( resource $result [, int $result_type ] )";i:3;s:232:"This function is similar to, with one difference - an object is returned instead of an array. Indirectly, this means that you can access the data only by the field names and not by their offsets (numbers are illegal property names).";}
a:4:{i:0;s:24:"ingres_fetch_proc_return";i:1;s:22:"(PECL ingres >= 1.4.0)";i:2;s:49:"int ingres_fetch_proc_return ( resource $result )";i:3;s:126:"This function is used to retrieve the return value following the execution of an Ingres database procedure (stored procedure).";}
a:4:{i:0;s:16:"ingres_fetch_row";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:43:"array ingres_fetch_row ( resource $result )";i:3;s:154:"returns an array that corresponds to the fetched row, or if there are no more rows. Each result column is stored in an array offset, starting at offset 1.";}
a:4:{i:0;s:19:"ingres_field_length";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:56:"int ingres_field_length ( resource $result, int $index )";i:3;s:174:"returns the length of a field. This is the number of bytes the server uses to store the field. For detailed information, see the Ingres, Appendix in the Ingres documentation.";}
a:4:{i:0;s:17:"ingres_field_name";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:57:"string ingres_field_name ( resource $result, int $index )";i:3;s:46:"returns the name of a field in a query result.";}
a:4:{i:0;s:21:"ingres_field_nullable";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:59:"bool ingres_field_nullable ( resource $result, int $index )";i:3;s:28:"Test if a field is nullable.";}
a:4:{i:0;s:22:"ingres_field_precision";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:59:"int ingres_field_precision ( resource $result, int $index )";i:3;s:196:"returns the precision of a field. This value is used only for decimal, float, and money SQL data types. For detailed information, see the Ingres, Appendix "Data Types" in the Ingres documentation.";}
a:4:{i:0;s:18:"ingres_field_scale";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:55:"int ingres_field_scale ( resource $result, int $index )";i:3;s:164:"returns the scale of a field. This value is used only for the decimal SQL data type. For detailed information, see the Ingres, Appendix in the Ingres documentation.";}
a:4:{i:0;s:17:"ingres_field_type";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:57:"string ingres_field_type ( resource $result, int $index )";i:3;s:42:"Get the type of a field in a query result.";}
a:4:{i:0;s:18:"ingres_free_result";i:1;s:22:"(PECL ingres >= 2.0.0)";i:2;s:44:"bool ingres_free_result ( resource $result )";i:3;s:0:"";}
a:4:{i:0;s:17:"ingres_next_error";i:1;s:22:"(PECL ingres >= 2.0.0)";i:2;s:44:"bool ingres_next_error ([ resource $link ] )";i:3;s:209:"Get the next Ingres error for the last executed query. Each call to can be followed by a call to, or to get the respective error number, error text, or SQL STATE. While returns, there are more errors to fetch.";}
a:4:{i:0;s:17:"ingres_num_fields";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:42:"int ingres_num_fields ( resource $result )";i:3;s:91:"returns the number of fields in the results returned by the Ingres server after a call to .";}
a:4:{i:0;s:15:"ingres_num_rows";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:40:"int ingres_num_rows ( resource $result )";i:3;s:172:"This function primarily is meant to get the number of rows modified in the database. However, it can be used to retrieve the number of rows to fetch for a SELECT statement.";}
a:4:{i:0;s:15:"ingres_pconnect";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:109:"resource ingres_pconnect ([ string $database [, string $username [, string $password [, array $options ]]]] )";i:3;s:51:"Open a persistent connection to an Ingres database.";}
a:4:{i:0;s:14:"ingres_prepare";i:1;s:22:"(PECL ingres >= 1.1.0)";i:2;s:54:"mixed ingres_prepare ( resource $link, string $query )";i:3;s:35:"Prepares a query for execution by .";}
a:4:{i:0;s:12:"ingres_query";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:89:"mixed ingres_query ( resource $link, string $query [, array $params [, string $types ]] )";i:3;s:37:"sends the given to the Ingres server.";}
a:4:{i:0;s:18:"ingres_result_seek";i:1;s:22:"(PECL ingres >= 2.1.0)";i:2;s:59:"bool ingres_result_seek ( resource $result, int $position )";i:3;s:231:"This function is used to position the cursor associated with the result resource before issuing a fetch. If is set to 0 then the first row is 0 else it is 1. can be used only with queries that make use of . It cannot be used with .";}
a:4:{i:0;s:15:"ingres_rollback";i:1;s:54:"(PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL
ingres >= 1.0.0)";i:2;s:39:"bool ingres_rollback ( resource $link )";i:3;s:119:"rolls back the currently open transaction, actually cancelling all changes made to the database during the transaction.";}
a:4:{i:0;s:22:"ingres_set_environment";i:1;s:22:"(PECL ingres >= 1.2.0)";i:2;s:62:"bool ingres_set_environment ( resource $link, array $options )";i:3;s:177:"is called to set environmental options that affect the output of certain values from Ingres, such as the timezone, date format, decimal character separator, and float precision.";}
a:4:{i:0;s:23:"ingres_unbuffered_query";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:100:"mixed ingres_unbuffered_query ( resource $link, string $query [, array $params [, string $types ]] )";i:3;s:37:"sends the given to the Ingres server.";}
a:4:{i:0;s:19:"maxdb_affected_rows";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:42:"int maxdb_affected_rows ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_autocommit";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:52:"bool maxdb_autocommit ( resource $link, bool $mode )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_bind_param";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:17:"maxdb_bind_result";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:17:"maxdb_change_user";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:91:"bool maxdb_change_user ( resource $link, string $user, string $password, string $database )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:24:"maxdb_character_set_name";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:50:"string maxdb_character_set_name ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:21:"maxdb_client_encoding";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:21:"maxdb_close_long_data";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"maxdb_close";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:35:"bool maxdb_close ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:12:"maxdb_commit";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:36:"bool maxdb_commit ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:19:"maxdb_connect_errno";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:32:"int maxdb_connect_errno ( void )";i:3;s:130:"The function will return the last error code number for last call to . If no errors have occurred, this function will return zero.";}
a:4:{i:0;s:19:"maxdb_connect_error";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:35:"string maxdb_connect_error ( void )";i:3;s:283:"The function is identical to the corresponding function in every way, except instead of returning an integer error code the function will return a string representation of the last error to occur for the last call. If no error has occurred, this function will return an empty string.";}
a:4:{i:0;s:13:"maxdb_connect";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:138:"resource maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"maxdb_data_seek";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:54:"bool maxdb_data_seek ( resource $result, int $offset )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:11:"maxdb_debug";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:34:"void maxdb_debug ( string $debug )";i:3;s:104:"The can be used to trace the SQLDBC communication. The following strings can be used as a parameter to :";}
a:4:{i:0;s:31:"maxdb_disable_reads_from_master";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:55:"bool maxdb_disable_reads_from_master ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:23:"maxdb_disable_rpl_parse";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:47:"bool maxdb_disable_rpl_parse ( resource $link )";i:3;s:0:"";}
a:4:{i:0;s:21:"maxdb_dump_debug_info";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:45:"bool maxdb_dump_debug_info ( resource $link )";i:3;s:0:"";}
a:4:{i:0;s:22:"maxdb_embedded_connect";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:53:"resource maxdb_embedded_connect ([ string $dbname ] )";i:3;s:0:"";}
a:4:{i:0;s:30:"maxdb_enable_reads_from_master";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:54:"bool maxdb_enable_reads_from_master ( resource $link )";i:3;s:0:"";}
a:4:{i:0;s:22:"maxdb_enable_rpl_parse";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:46:"bool maxdb_enable_rpl_parse ( resource $link )";i:3;s:0:"";}
a:4:{i:0;s:11:"maxdb_errno";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:34:"int maxdb_errno ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:11:"maxdb_error";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:37:"string maxdb_error ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:19:"maxdb_escape_string";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:13:"maxdb_execute";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:17:"maxdb_fetch_array";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:65:"mixed maxdb_fetch_array ( resource $result [, int $resulttype ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"maxdb_fetch_assoc";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:44:"array maxdb_fetch_assoc ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:24:"maxdb_fetch_field_direct";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:65:"mixed maxdb_fetch_field_direct ( resource $result, int $fieldnr )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"maxdb_fetch_field";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:44:"mixed maxdb_fetch_field ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_fetch_fields";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:45:"mixed maxdb_fetch_fields ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:19:"maxdb_fetch_lengths";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:46:"array maxdb_fetch_lengths ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_fetch_object";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:44:"object maxdb_fetch_object ( object $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"maxdb_fetch_row";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:42:"mixed maxdb_fetch_row ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:11:"maxdb_fetch";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:17:"maxdb_field_count";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:40:"int maxdb_field_count ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_field_seek";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:56:"bool maxdb_field_seek ( resource $result, int $fieldnr )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_field_tell";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:41:"int maxdb_field_tell ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"maxdb_free_result";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:43:"void maxdb_free_result ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:21:"maxdb_get_client_info";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:37:"string maxdb_get_client_info ( void )";i:3;s:106:"The function is used to return a string representing the client version being used in the MaxDB extension.";}
a:4:{i:0;s:24:"maxdb_get_client_version";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:37:"int maxdb_get_client_version ( void )";i:3;s:44:"Returns client version number as an integer.";}
a:4:{i:0;s:19:"maxdb_get_host_info";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:45:"string maxdb_get_host_info ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_get_metadata";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:20:"maxdb_get_proto_info";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:43:"int maxdb_get_proto_info ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:21:"maxdb_get_server_info";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:47:"string maxdb_get_server_info ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:24:"maxdb_get_server_version";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:47:"int maxdb_get_server_version ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:10:"maxdb_info";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:36:"string maxdb_info ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:10:"maxdb_init";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:28:"resource maxdb_init ( void )";i:3;s:60:"Allocates or initializes a MaxDB resource suitable for and .";}
a:4:{i:0;s:15:"maxdb_insert_id";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:40:"mixed maxdb_insert_id ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:10:"maxdb_kill";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:50:"bool maxdb_kill ( resource $link, int $processid )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_master_query";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:57:"bool maxdb_master_query ( resource $link, string $query )";i:3;s:0:"";}
a:4:{i:0;s:18:"maxdb_more_results";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:42:"bool maxdb_more_results ( resource $link )";i:3;s:76:"indicates if one or more result sets are available from a previous call to .";}
a:4:{i:0;s:17:"maxdb_multi_query";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:56:"bool maxdb_multi_query ( resource $link, string $query )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"maxdb_next_result";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:41:"bool maxdb_next_result ( resource $link )";i:3;s:62:"Since multiple queries are not yet supported, returns always .";}
a:4:{i:0;s:16:"maxdb_num_fields";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:41:"int maxdb_num_fields ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:14:"maxdb_num_rows";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:39:"int maxdb_num_rows ( resource $result )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:13:"maxdb_options";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:64:"bool maxdb_options ( resource $link, int $option, mixed $value )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"maxdb_param_count";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:10:"maxdb_ping";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:34:"bool maxdb_ping ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:13:"maxdb_prepare";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:56:"resource maxdb_prepare ( resource $link, string $query )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:11:"maxdb_query";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:72:"mixed maxdb_query ( resource $link, string $query [, int $resultmode ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_real_connect";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:160:"bool maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:24:"maxdb_real_escape_string";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:69:"string maxdb_real_escape_string ( resource $link, string $escapestr )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_real_query";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:55:"bool maxdb_real_query ( resource $link, string $query )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:12:"maxdb_report";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:32:"bool maxdb_report ( int $flags )";i:3;s:0:"";}
a:4:{i:0;s:14:"maxdb_rollback";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:38:"bool maxdb_rollback ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:23:"maxdb_rpl_parse_enabled";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:46:"int maxdb_rpl_parse_enabled ( resource $link )";i:3;s:0:"";}
a:4:{i:0;s:15:"maxdb_rpl_probe";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:39:"bool maxdb_rpl_probe ( resource $link )";i:3;s:0:"";}
a:4:{i:0;s:20:"maxdb_rpl_query_type";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:43:"int maxdb_rpl_query_type ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"maxdb_select_db";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:55:"bool maxdb_select_db ( resource $link, string $dbname )";i:3;s:167:"The function selects the default database (specified by the parameter) to be used when performing queries against the database connection represented by the parameter.";}
a:4:{i:0;s:20:"maxdb_send_long_data";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:16:"maxdb_send_query";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:55:"bool maxdb_send_query ( resource $link, string $query )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_server_end";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:30:"void maxdb_server_end ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"maxdb_server_init";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:61:"bool maxdb_server_init ([ array $server [, array $groups ]] )";i:3;s:0:"";}
a:4:{i:0;s:13:"maxdb_set_opt";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:14:"maxdb_sqlstate";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:40:"string maxdb_sqlstate ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:13:"maxdb_ssl_set";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:108:"bool maxdb_ssl_set ( resource $link, string $key, string $cert, string $ca, string $capath, string $cipher )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:10:"maxdb_stat";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:36:"string maxdb_stat ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:24:"maxdb_stmt_affected_rows";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:47:"int maxdb_stmt_affected_rows ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:21:"maxdb_stmt_bind_param";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:91:"bool maxdb_stmt_bind_param ( resource $stmt, string $types, mixed &$var1 [, mixed &$... ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:22:"maxdb_stmt_bind_result";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:77:"bool maxdb_stmt_bind_result ( resource $stmt, mixed &$var1 [, mixed &$... ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:26:"maxdb_stmt_close_long_data";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:65:"bool maxdb_stmt_close_long_data ( resource $stmt, int $param_nr )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_stmt_close";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:40:"bool maxdb_stmt_close ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:20:"maxdb_stmt_data_seek";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:62:"bool maxdb_stmt_data_seek ( resource $statement, int $offset )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_stmt_errno";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:39:"int maxdb_stmt_errno ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_stmt_error";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:42:"string maxdb_stmt_error ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_stmt_execute";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:42:"bool maxdb_stmt_execute ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_stmt_fetch";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:40:"bool maxdb_stmt_fetch ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:22:"maxdb_stmt_free_result";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:46:"void maxdb_stmt_free_result ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"maxdb_stmt_init";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:43:"resource maxdb_stmt_init ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:19:"maxdb_stmt_num_rows";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:42:"int maxdb_stmt_num_rows ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:22:"maxdb_stmt_param_count";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:45:"int maxdb_stmt_param_count ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_stmt_prepare";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:57:"bool maxdb_stmt_prepare ( resource $stmt, string $query )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"maxdb_stmt_reset";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:40:"bool maxdb_stmt_reset ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:26:"maxdb_stmt_result_metadata";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:54:"resource maxdb_stmt_result_metadata ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:25:"maxdb_stmt_send_long_data";i:1;s:16:"(PECL maxdb 1.0)";i:2;s:78:"bool maxdb_stmt_send_long_data ( resource $stmt, int $param_nr, string $data )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:19:"maxdb_stmt_sqlstate";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:45:"string maxdb_stmt_sqlstate ( resource $stmt )";i:3;s:242:"Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. means no error. The values are specified by ANSI SQL and ODBC.";}
a:4:{i:0;s:23:"maxdb_stmt_store_result";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:47:"bool maxdb_stmt_store_result ( resource $stmt )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"maxdb_store_result";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:46:"resource maxdb_store_result ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"maxdb_thread_id";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:38:"int maxdb_thread_id ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"maxdb_thread_safe";i:1;s:25:"(PECL maxdb >= 7.6.06.04)";i:2;s:31:"bool maxdb_thread_safe ( void )";i:3;s:64:"indicates whether the client library is compiled as thread-safe.";}
a:4:{i:0;s:16:"maxdb_use_result";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:44:"resource maxdb_use_result ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:19:"maxdb_warning_count";i:1;s:19:"(PECL maxdb >= 1.0)";i:2;s:42:"int maxdb_warning_count ( resource $link )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"MongoClient::close";i:1;s:26:"(PECL mongoclient >=0.9.0)";i:2;s:64:"public bool MongoClient::close ([ boolean|string $connection ] )";i:3;s:160:"The method forcefully closes a connection to the database, even if persistent connections are being used. You should have to do this under normal circumstances.";}
a:4:{i:0;s:20:"MongoClient::connect";i:1;s:26:"(PECL mongoclient >=0.9.0)";i:2;s:41:"public bool MongoClient::connect ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"MongoClient::__construct";i:1;s:26:"(PECL mongoclient >=0.9.0)";i:2;s:131:"public MongoClient::__construct() ([ string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE) ]] )";i:3;s:112:"If no parameters are passed, this connects to "localhost:27017" (or whatever was specified in php.ini for and ).";}
a:4:{i:0;s:19:"MongoClient::dropDB";i:1;s:26:"(PECL mongoclient >=0.9.0)";i:2;s:46:"public array MongoClient::dropDB ( mixed $db )";i:3;s:0:"";}
a:4:{i:0;s:18:"MongoClient::__get";i:1;s:26:"(PECL mongoclient >=1.0.2)";i:2;s:52:"public MongoDB MongoClient::__get ( string $dbname )";i:3;s:169:"This is the cleanest way of getting a database. If the database name has any special characters, will need to be used; however, this should be sufficient for most cases.";}
a:4:{i:0;s:27:"MongoClient::getConnections";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:56:"public static array MongoClient::getConnections ( void )";i:3;s:83:"Returns an array of all open connections, and information about each of the servers";}
a:4:{i:0;s:21:"MongoClient::getHosts";i:1;s:26:"(PECL mongoclient >=1.1.0)";i:2;s:43:"public array MongoClient::getHosts ( void )";i:3;s:232:"This method is only useful with a connection to a replica set. It returns the status of all of the hosts in the set. Without a replica set, it will just return an array with one element containing the host that you are connected to.";}
a:4:{i:0;s:30:"MongoClient::getReadPreference";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:52:"public array MongoClient::getReadPreference ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"MongoClient::killCursor";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:79:"public bool MongoClient::killCursor ( string $server_hash, int|MongoInt64 $id )";i:3;s:317:"In certain situations it might be needed to kill a cursor on the server. Usually cursors time out after 10 minutes of inactivity, but it is possible to create an immortal cursor with that never times out. In order to be able to kill such an immortal cursor, you can call this method with the information supplied by .";}
a:4:{i:0;s:20:"MongoClient::listDBs";i:1;s:26:"(PECL mongoclient >=1.0.4)";i:2;s:42:"public array MongoClient::listDBs ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"MongoClient::selectCollection";i:1;s:26:"(PECL mongoclient >=0.9.0)";i:2;s:87:"public MongoCollection MongoClient::selectCollection ( string $db, string $collection )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoClient::selectDB";i:1;s:26:"(PECL mongoclient >=0.9.0)";i:2;s:53:"public MongoDB MongoClient::selectDB ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:30:"MongoClient::setReadPreference";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:87:"public bool MongoClient::setReadPreference ( string $read_preference [, array $tags ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"MongoClient::__toString";i:1;s:26:"(PECL mongoclient >=0.9.0)";i:2;s:46:"public string MongoClient::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoDB::authenticate";i:1;s:20:"(PECL mongo >=1.0.1)";i:2;s:73:"public array MongoDB::authenticate ( string $username, string $password )";i:3;s:201:"This method causes its connection to be authenticated. If authentication is enabled for the database server (it's not, by default), you need to log in before the database will allow you to do anything.";}
a:4:{i:0;s:16:"MongoDB::command";i:1;s:20:"(PECL mongo >=0.9.2)";i:2;s:78:"public array MongoDB::command ( array $command [, array $options = array() ] )";i:3;s:241:"Almost everything that is not a CRUD operation can be done with a database command. Need to know the database version? There's a command for that. Need to do aggregation? There's a command for that. Need to turn up logging? You get the idea.";}
a:4:{i:0;s:20:"MongoDB::__construct";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:63:"public MongoDB::__construct ( MongoClient $conn, string $name )";i:3;s:114:"This method is not meant to be called directly. The preferred way to create an instance of MongoDB is through or .";}
a:4:{i:0;s:25:"MongoDB::createCollection";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:85:"public MongoCollection MongoDB::createCollection ( string $name [, array $options ] )";i:3;s:125:"This method is used to create capped collections and other collections requiring special options. It is identical to running:";}
a:4:{i:0;s:20:"MongoDB::createDBRef";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:79:"public array MongoDB::createDBRef ( string $collection, mixed $document_or_id )";i:3;s:75:"This method is a flexible interface for creating database refrences (see ).";}
a:4:{i:0;s:13:"MongoDB::drop";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:35:"public array MongoDB::drop ( void )";i:3;s:45:"This drops the database currently being used.";}
a:4:{i:0;s:23:"MongoDB::dropCollection";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:52:"public array MongoDB::dropCollection ( mixed $coll )";i:3;s:0:"";}
a:4:{i:0;s:16:"MongoDB::execute";i:1;s:20:"(PECL mongo >=0.9.3)";i:2;s:72:"public array MongoDB::execute ( mixed $code [, array $args = array() ] )";i:3;s:289:"The Mongo database server runs a JavaScript engine. This method allows you to run arbitary JavaScript on the database. This can be useful if you want touch a number of collections lightly, or process some results on the database side to reduce the amount that has to be sent to the client.";}
a:4:{i:0;s:19:"MongoDB::forceError";i:1;s:20:"(PECL mongo >=0.9.5)";i:2;s:40:"public bool MongoDB::forceError ( void )";i:3;s:172:"This method is not very useful for normal MongoDB use. It forces a database error to occur. This means that will return a generic database error after running this command.";}
a:4:{i:0;s:14:"MongoDB::__get";i:1;s:20:"(PECL mongo >=1.0.2)";i:2;s:54:"public MongoCollection MongoDB::__get ( string $name )";i:3;s:150:"This is the easiest way of getting a collection from a database object. If a collection name contains strange characters, you may have to use instead.";}
a:4:{i:0;s:27:"MongoDB::getCollectionNames";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:86:"public array MongoDB::getCollectionNames ([ bool $includeSystemCollections = false ] )";i:3;s:68:"Returns an array of all the collection names for the given database.";}
a:4:{i:0;s:17:"MongoDB::getDBRef";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:45:"public array MongoDB::getDBRef ( array $ref )";i:3;s:0:"";}
a:4:{i:0;s:18:"MongoDB::getGridFS";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:66:"public MongoGridFS MongoDB::getGridFS ([ string $prefix = "fs" ] )";i:3;s:0:"";}
a:4:{i:0;s:26:"MongoDB::getProfilingLevel";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:46:"public int MongoDB::getProfilingLevel ( void )";i:3;s:50:"This returns the current database profiling level.";}
a:4:{i:0;s:26:"MongoDB::getReadPreference";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:48:"public array MongoDB::getReadPreference ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoDB::getSlaveOkay";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:42:"public bool MongoDB::getSlaveOkay ( void )";i:3;s:72:"See of this manual for information on distributing reads to secondaries.";}
a:4:{i:0;s:18:"MongoDB::lastError";i:1;s:20:"(PECL mongo >=0.9.5)";i:2;s:40:"public array MongoDB::lastError ( void )";i:3;s:29:"This method is equivalent to:";}
a:4:{i:0;s:24:"MongoDB::listCollections";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:83:"public array MongoDB::listCollections ([ bool $includeSystemCollections = false ] )";i:3;s:91:"Gets a list of all the collections in the database and returns them as an array of objects.";}
a:4:{i:0;s:18:"MongoDB::prevError";i:1;s:20:"(PECL mongo >=0.9.5)";i:2;s:40:"public array MongoDB::prevError ( void )";i:3;s:153:"is usually preferred to this. This method returns the last database error that occurred and how many operations ago it occurred. It is mostly deprecated.";}
a:4:{i:0;s:15:"MongoDB::repair";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:111:"public array MongoDB::repair ([ bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE ]] )";i:3;s:186:"This creates a fresh copy of all database data. It will remove any corrupt data and compact and large stretches of free space it finds. This is a very slow operation on a large database.";}
a:4:{i:0;s:19:"MongoDB::resetError";i:1;s:20:"(PECL mongo >=0.9.5)";i:2;s:41:"public array MongoDB::resetError ( void )";i:3;s:139:"This method is not used in normal operations. It resets the database error tracker (which can be incremented with, also not normally used).";}
a:4:{i:0;s:25:"MongoDB::selectCollection";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:65:"public MongoCollection MongoDB::selectCollection ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:26:"MongoDB::setProfilingLevel";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:52:"public int MongoDB::setProfilingLevel ( int $level )";i:3;s:50:"This changes the current database profiling level.";}
a:4:{i:0;s:26:"MongoDB::setReadPreference";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:83:"public bool MongoDB::setReadPreference ( string $read_preference [, array $tags ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoDB::setSlaveOkay";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:56:"public bool MongoDB::setSlaveOkay ([ bool $ok = true ] )";i:3;s:72:"See of this manual for information on distributing reads to secondaries.";}
a:4:{i:0;s:19:"MongoDB::__toString";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:42:"public string MongoDB::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"MongoCollection::aggregate";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:89:"public array MongoCollection::aggregate ( array $pipeline [, array $op [, array $... ]] )";i:3;s:242:"The MongoDB provides a means to calculate aggregated values without having to use MapReduce. While MapReduce is powerful, it is often more difficult than necessary for many simple aggregation tasks, such as totaling or averaging field values.";}
a:4:{i:0;s:28:"MongoCollection::batchInsert";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:84:"public mixed MongoCollection::batchInsert ( array $a [, array $options = array() ] )";i:3;s:0:"";}
a:4:{i:0;s:28:"MongoCollection::__construct";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:65:"public MongoCollection::__construct ( MongoDB $db, string $name )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoCollection::count";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:100:"public int MongoCollection::count ([ array $query = array() [, int $limit = 0 [, int $skip = 0 ]]] )";i:3;s:0:"";}
a:4:{i:0;s:28:"MongoCollection::createDBRef";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:67:"public array MongoCollection::createDBRef ( mixed $document_or_id )";i:3;s:0:"";}
a:4:{i:0;s:28:"MongoCollection::deleteIndex";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:64:"public array MongoCollection::deleteIndex ( string|array $keys )";i:3;s:28:"This method is identical to:";}
a:4:{i:0;s:30:"MongoCollection::deleteIndexes";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:52:"public array MongoCollection::deleteIndexes ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"MongoCollection::distinct";i:1;s:21:"(PECL mongo >=1.2.11)";i:2;s:72:"public array MongoCollection::distinct ( string $key [, array $query ] )";i:3;s:93:"The distinct command returns a list of distinct values for the given key across a collection.";}
a:4:{i:0;s:21:"MongoCollection::drop";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:43:"public array MongoCollection::drop ( void )";i:3;s:46:"Drops this collection and deletes its indices.";}
a:4:{i:0;s:28:"MongoCollection::ensureIndex";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:97:"public bool MongoCollection::ensureIndex ( string|array $key|keys [, array $options = array() ] )";i:3;s:218:"This method creates an index on the collection and the specified fields. The key specification can either be just a single field name as string, or an array containing one or more field names with their sort direction.";}
a:4:{i:0;s:21:"MongoCollection::find";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:98:"public MongoCursor MongoCollection::find ([ array $query = array() [, array $fields = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:30:"MongoCollection::findAndModify";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:116:"public array MongoCollection::findAndModify ( array $query [, array $update [, array $fields [, array $options ]]] )";i:3;s:247:"The findAndModify command atomically modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the option.";}
a:4:{i:0;s:24:"MongoCollection::findOne";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:95:"public array MongoCollection::findOne ([ array $query = array() [, array $fields = array() ]] )";i:3;s:112:"As opposed to, this method will return only the result from the result set, and not a that can be iterated over.";}
a:4:{i:0;s:22:"MongoCollection::__get";i:1;s:20:"(PECL mongo >=1.0.2)";i:2;s:62:"public MongoCollection MongoCollection::__get ( string $name )";i:3;s:147:"A concise syntax for getting a collection with a dot-separated name. If a collection name contains strange characters, you may have to use instead.";}
a:4:{i:0;s:25:"MongoCollection::getDBRef";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:53:"public array MongoCollection::getDBRef ( array $ref )";i:3;s:0:"";}
a:4:{i:0;s:29:"MongoCollection::getIndexInfo";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:51:"public array MongoCollection::getIndexInfo ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"MongoCollection::getName";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:47:"public string MongoCollection::getName ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"MongoCollection::getReadPreference";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:56:"public array MongoCollection::getReadPreference ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"MongoCollection::getSlaveOkay";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:50:"public bool MongoCollection::getSlaveOkay ( void )";i:3;s:72:"See of this manual for information on distributing reads to secondaries.";}
a:4:{i:0;s:22:"MongoCollection::group";i:1;s:20:"(PECL mongo >=0.9.2)";i:2;s:116:"public array MongoCollection::group ( mixed $keys, array $initial, MongoCode $reduce [, array $options = array() ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"MongoCollection::insert";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:91:"public bool|array MongoCollection::insert ( array|object $a [, array $options = array() ] )";i:3;s:142:"All strings sent to the database must be UTF-8. If a string is not UTF-8, a will be thrown. To insert (or query for) a non-UTF-8 string, use .";}
a:4:{i:0;s:23:"MongoCollection::remove";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:103:"public bool|array MongoCollection::remove ([ array $criteria = array() [, array $options = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoCollection::save";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:84:"public mixed MongoCollection::save ( array|object $a [, array $options = array() ] )";i:3;s:102:"If the object is from the database, update the existing database object, otherwise insert this object.";}
a:4:{i:0;s:34:"MongoCollection::setReadPreference";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:91:"public bool MongoCollection::setReadPreference ( string $read_preference [, array $tags ] )";i:3;s:0:"";}
a:4:{i:0;s:29:"MongoCollection::setSlaveOkay";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:64:"public bool MongoCollection::setSlaveOkay ([ bool $ok = true ] )";i:3;s:72:"See of this manual for information on distributing reads to secondaries.";}
a:4:{i:0;s:30:"MongoCollection::toIndexString";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:70:"static protected string MongoCollection::toIndexString ( mixed $keys )";i:3;s:0:"";}
a:4:{i:0;s:27:"MongoCollection::__toString";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:50:"public string MongoCollection::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"MongoCollection::update";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:110:"public bool|array MongoCollection::update ( array $criteria, array $new_object [, array $options = array() ] )";i:3;s:0:"";}
a:4:{i:0;s:25:"MongoCollection::validate";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:69:"public array MongoCollection::validate ([ bool $scan_data = FALSE ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoCursor::addOption";i:1;s:20:"(PECL mongo >=1.0.4)";i:2;s:71:"public MongoCursor MongoCursor::addOption ( string $key, mixed $value )";i:3;s:86:"This is an advanced function and should not be used unless you know what you're doing.";}
a:4:{i:0;s:22:"MongoCursor::awaitData";i:1;s:21:"(PECL mongo >=1.2.11)";i:2;s:66:"public MongoCursor MongoCursor::awaitData ([ bool $wait = true ] )";i:3;s:179:"This method is to be used with tailable cursors. If we are at the end of the data, block for a while rather than returning no data. After a timeout period, we do return as normal.";}
a:4:{i:0;s:22:"MongoCursor::batchSize";i:1;s:21:"(PECL mongo >=1.0.11)";i:2;s:60:"public MongoCursor MongoCursor::batchSize ( int $batchSize )";i:3;s:293:"A cursor typically fetches a batch of result objects and store them locally. This method sets the batchSize value to configure the amount of documents retrieved from the server in one data packet. However, it will never return more documents than fit in the max batch size limit (usually 4MB).";}
a:4:{i:0;s:24:"MongoCursor::__construct";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:127:"public MongoCursor::__construct ( MongoClient $connection, string $ns [, array $query = array() [, array $fields = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:18:"MongoCursor::count";i:1;s:20:"(PECL mongo >=0.9.2)";i:2;s:60:"public int MongoCursor::count ([ bool $foundOnly = FALSE ] )";i:3;s:275:"This method does not affect the state of the cursor: if you haven't queried yet, you can still apply limits, skips, etc. If you have started iterating through results, it will not move the current position of the cursor. If you have exhasted the cursor, it will not reset it.";}
a:4:{i:0;s:20:"MongoCursor::current";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:42:"public array MongoCursor::current ( void )";i:3;s:29:"This returns until is called.";}
a:4:{i:0;s:17:"MongoCursor::dead";i:1;s:20:"(PECL mongo >=0.9.6)";i:2;s:38:"public bool MongoCursor::dead ( void )";i:3;s:183:"The database sends responses in batches of documents, up to 4MB of documents per response. This method checks if the database has more batches or if the result set has been exhausted.";}
a:4:{i:0;s:20:"MongoCursor::doQuery";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:44:"protected void MongoCursor::doQuery ( void )";i:3;s:167:"This function actually queries the database. All queries and commands go through this function. Thus, this function can be overridden to provide custom query handling.";}
a:4:{i:0;s:20:"MongoCursor::explain";i:1;s:20:"(PECL mongo >=0.9.2)";i:2;s:42:"public array MongoCursor::explain ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"MongoCursor::fields";i:1;s:20:"(PECL mongo >=1.0.6)";i:2;s:51:"public MongoCursor MongoCursor::fields ( array $f )";i:3;s:152:"Fields are specified by . indicates that a field should be returned, indicates that it should not be returned. You can also use 1 and 0 instead of and .";}
a:4:{i:0;s:20:"MongoCursor::getNext";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:42:"public array MongoCursor::getNext ( void )";i:3;s:34:"This is identical to the function:";}
a:4:{i:0;s:30:"MongoCursor::getReadPreference";i:1;s:20:"(PECL mongo >=1.3.3)";i:2;s:52:"public array MongoCursor::getReadPreference ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"MongoCursor::hasNext";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:41:"public bool MongoCursor::hasNext ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"MongoCursor::hint";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:53:"public MongoCursor MongoCursor::hint ( mixed $index )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoCursor::immortal";i:1;s:20:"(PECL mongo >=1.0.1)";i:2;s:72:"public MongoCursor MongoCursor::immortal ([ bool $liveForever = true ] )";i:3;s:481:"After remaining idle on the server for some amount of time, cursors, by default, "die." This is generally the behavior one wants. The database cleans up a cursor once all of its results have been sent to the client, but if the client doesn't request all of the results, the cursor will languish there, taking up resources. Thus, after a few minutes, the cursor "times out" and the database assumes the client has gotten everything it needs and cleans up its the cursor's resources.";}
a:4:{i:0;s:17:"MongoCursor::info";i:1;s:20:"(PECL mongo >=1.0.5)";i:2;s:39:"public array MongoCursor::info ( void )";i:3;s:45:"This can be called before or after the query.";}
a:4:{i:0;s:16:"MongoCursor::key";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:39:"public string MongoCursor::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"MongoCursor::limit";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:50:"public MongoCursor MongoCursor::limit ( int $num )";i:3;s:0:"";}
a:4:{i:0;s:17:"MongoCursor::next";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:38:"public void MongoCursor::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"MongoCursor::partial";i:1;s:20:"(PECL mongo >=1.2.0)";i:2;s:64:"public MongoCursor MongoCursor::partial ([ bool $okay = true ] )";i:3;s:160:"This option allows to send partial query results if a shard is unreachable. This is only applicable when running a sharded MongoDB cluster and connecting to a .";}
a:4:{i:0;s:18:"MongoCursor::reset";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:39:"public void MongoCursor::reset ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"MongoCursor::rewind";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:40:"public void MongoCursor::rewind ( void )";i:3;s:34:"This is identical to the function:";}
a:4:{i:0;s:20:"MongoCursor::setFlag";i:1;s:21:"(PECL mongo >=1.2.11)";i:2;s:75:"public MongoCursor MongoCursor::setFlag ( int $flag [, bool $set = true ] )";i:3;s:318:"The class has several methods for setting flags on the query object. This method is available in case the MongoDB wire protocol has acquired a new flag, and the driver has not been updated with a method for this new flag. In all other cases, the method should be used. See the "See also" section for available methods.";}
a:4:{i:0;s:30:"MongoCursor::setReadPreference";i:1;s:20:"(PECL mongo >=1.3.3)";i:2;s:87:"public bool MongoCursor::setReadPreference ( string $read_preference [, array $tags ] )";i:3;s:0:"";}
a:4:{i:0;s:17:"MongoCursor::skip";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:49:"public MongoCursor MongoCursor::skip ( int $num )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoCursor::slaveOkay";i:1;s:20:"(PECL mongo >=0.9.4)";i:2;s:66:"public MongoCursor MongoCursor::slaveOkay ([ bool $okay = true ] )";i:3;s:64:"Calling this will make the driver route reads to secondaries if:";}
a:4:{i:0;s:21:"MongoCursor::snapshot";i:1;s:20:"(PECL mongo >=0.9.4)";i:2;s:49:"public MongoCursor MongoCursor::snapshot ( void )";i:3;s:296:"Use snapshot mode for the query. Snapshot mode assures no duplicates are returned, or objects missed, which were present at both the start and end of the query's execution (if an object is new during the query, or deleted during the query, it may or may not be returned, even with snapshot mode).";}
a:4:{i:0;s:17:"MongoCursor::sort";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:54:"public MongoCursor MongoCursor::sort ( array $fields )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoCursor::tailable";i:1;s:20:"(PECL mongo >=0.9.4)";i:2;s:65:"public MongoCursor MongoCursor::tailable ([ bool $tail = true ] )";i:3;s:94:"Mongo has a feature known as tailable cursors which are similar to the Unix "tail -f" command.";}
a:4:{i:0;s:20:"MongoCursor::timeout";i:1;s:20:"(PECL mongo >=1.0.3)";i:2;s:51:"public MongoCursor MongoCursor::timeout ( int $ms )";i:3;s:133:"A timeout can be set at any time and will affect subsequent queries on the cursor, including fetching more results from the database.";}
a:4:{i:0;s:18:"MongoCursor::valid";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:39:"public bool MongoCursor::valid ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"MongoId::__construct";i:1;s:21:"(PECL mongo >= 0.8.0)";i:2;s:52:"public MongoId::__construct ([ string $id = NULL ] )";i:3;s:0:"";}
a:4:{i:0;s:20:"MongoId::getHostname";i:1;s:21:"(PECL mongo >= 1.0.8)";i:2;s:50:"public static string MongoId::getHostname ( void )";i:3;s:97:"This returns the hostname is using to generate unique ids. This should be the same value returns.";}
a:4:{i:0;s:15:"MongoId::getInc";i:1;s:22:"(PECL mongo >= 1.0.11)";i:2;s:35:"public int MongoId::getInc ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"MongoId::getPID";i:1;s:22:"(PECL mongo >= 1.0.11)";i:2;s:35:"public int MongoId::getPID ( void )";i:3;s:34:"Extracts the pid from the Mongo ID";}
a:4:{i:0;s:21:"MongoId::getTimestamp";i:1;s:21:"(PECL mongo >= 1.0.1)";i:2;s:41:"public int MongoId::getTimestamp ( void )";i:3;s:62:"This returns the same thing as running when the id is created.";}
a:4:{i:0;s:20:"MongoId::__set_state";i:1;s:21:"(PECL mongo >= 1.0.8)";i:2;s:59:"public static MongoId MongoId::__set_state ( array $props )";i:3;s:94:"This function is only used by PHP internally, it shouldn't need to ever be called by the user.";}
a:4:{i:0;s:19:"MongoId::__toString";i:1;s:21:"(PECL mongo >= 0.8.0)";i:2;s:42:"public string MongoId::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoCode::__construct";i:1;s:21:"(PECL mongo >= 0.8.3)";i:2;s:74:"public MongoCode::__construct ( string $code [, array $scope = array() ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoCode::__toString";i:1;s:21:"(PECL mongo >= 0.8.3)";i:2;s:44:"public string MongoCode::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoDate::__construct";i:1;s:21:"(PECL mongo >= 0.8.1)";i:2;s:72:"public MongoDate::__construct ([ int $sec = time() [, int $usec = 0 ]] )";i:3;s:73:"Creates a new date. If no parameters are given, the current time is used.";}
a:4:{i:0;s:21:"MongoDate::__toString";i:1;s:21:"(PECL mongo >= 0.8.1)";i:2;s:44:"public string MongoDate::__toString ( void )";i:3;s:89:"Returns a string representation of this date, similar to the representation returned by .";}
a:4:{i:0;s:23:"MongoRegex::__construct";i:1;s:21:"(PECL mongo >= 0.8.1)";i:2;s:48:"public MongoRegex::__construct ( string $regex )";i:3;s:33:"Creates a new regular expression.";}
a:4:{i:0;s:22:"MongoRegex::__toString";i:1;s:21:"(PECL mongo >= 0.8.1)";i:2;s:45:"public string MongoRegex::__toString ( void )";i:3;s:59:"Returns a string representation of this regular expression.";}
a:4:{i:0;s:25:"MongoBinData::__construct";i:1;s:21:"(PECL mongo >= 0.8.1)";i:2;s:68:"public MongoBinData::__construct ( string $data [, int $type = 2 ] )";i:3;s:33:"Creates a new binary data object.";}
a:4:{i:0;s:24:"MongoBinData::__toString";i:1;s:21:"(PECL mongo >= 0.8.1)";i:2;s:47:"public string MongoBinData::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"MongoInt32::__construct";i:1;s:21:"(PECL mongo >= 1.0.9)";i:2;s:48:"public MongoInt32::__construct ( string $value )";i:3;s:49:"Creates a new 32-bit number with the given value.";}
a:4:{i:0;s:22:"MongoInt32::__toString";i:1;s:21:"(PECL mongo >= 1.0.9)";i:2;s:45:"public string MongoInt32::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"MongoInt64::__construct";i:1;s:21:"(PECL mongo >= 1.0.9)";i:2;s:48:"public MongoInt64::__construct ( string $value )";i:3;s:49:"Creates a new 64-bit number with the given value.";}
a:4:{i:0;s:22:"MongoInt64::__toString";i:1;s:21:"(PECL mongo >= 1.0.9)";i:2;s:45:"public string MongoInt64::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"MongoDBRef::create";i:1;s:21:"(PECL mongo >= 0.9.0)";i:2;s:94:"public static array MongoDBRef::create ( string $collection, mixed $id [, string $database ] )";i:3;s:54:"If no database is given, the current database is used.";}
a:4:{i:0;s:15:"MongoDBRef::get";i:1;s:21:"(PECL mongo >= 0.9.0)";i:2;s:63:"public static array MongoDBRef::get ( MongoDB $db, array $ref )";i:3;s:0:"";}
a:4:{i:0;s:17:"MongoDBRef::isRef";i:1;s:21:"(PECL mongo >= 0.9.0)";i:2;s:51:"public static bool MongoDBRef::isRef ( mixed $ref )";i:3;s:221:"This method does not actually follow the reference, so it does not determine if it is broken or not. It merely checks that is in valid database reference format (in that it is an object or array with $ref and $id fields).";}
a:4:{i:0;s:27:"MongoTimestamp::__construct";i:1;s:21:"(PECL mongo >= 1.0.1)";i:2;s:72:"public MongoTimestamp::__construct ([ int $sec = time() [, int $inc ]] )";i:3;s:271:"Creates a new timestamp. If no parameters are given, the current time is used and the increment is automatically provided. The increment is set to 0 when the module is loaded and is incremented every time this constructor is called (without the $inc parameter passed in).";}
a:4:{i:0;s:26:"MongoTimestamp::__toString";i:1;s:21:"(PECL mongo >= 1.0.1)";i:2;s:49:"public string MongoTimestamp::__toString ( void )";i:3;s:42:"Returns the "sec" field of this timestamp.";}
a:4:{i:0;s:24:"MongoGridFS::__construct";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:99:"public MongoGridFS::__construct ( MongoDB $db [, string $prefix = "fs" [, mixed $chunks = "fs" ]] )";i:3;s:198:"Files as stored across two collections, the first containing file meta information, the second containing chunks of the actual file. By default, fs.files and fs.chunks are the collection names used.";}
a:4:{i:0;s:19:"MongoGridFS::delete";i:1;s:20:"(PECL mongo >=1.0.8)";i:2;s:45:"public bool MongoGridFS::delete ( mixed $id )";i:3;s:0:"";}
a:4:{i:0;s:17:"MongoGridFS::drop";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:39:"public array MongoGridFS::drop ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"MongoGridFS::find";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:100:"public MongoGridFSCursor MongoGridFS::find ([ array $query = array() [, array $fields = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:20:"MongoGridFS::findOne";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:101:"public MongoGridFSFile MongoGridFS::findOne ([ mixed $query = array() [, mixed $fields = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:16:"MongoGridFS::get";i:1;s:20:"(PECL mongo >=1.0.8)";i:2;s:53:"public MongoGridFSFile MongoGridFS::get ( mixed $id )";i:3;s:0:"";}
a:4:{i:0;s:16:"MongoGridFS::put";i:1;s:20:"(PECL mongo >=1.0.8)";i:2;s:81:"public mixed MongoGridFS::put ( string $filename [, array $metadata = array() ] )";i:3;s:0:"";}
a:4:{i:0;s:19:"MongoGridFS::remove";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:93:"public bool MongoGridFS::remove ([ array $criteria = array() [, array $options = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:23:"MongoGridFS::storeBytes";i:1;s:20:"(PECL mongo >=0.9.2)";i:2;s:114:"public mixed MongoGridFS::storeBytes ( string $bytes [, array $metadata = array() [, array $options = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoGridFS::storeFile";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:116:"public mixed MongoGridFS::storeFile ( string $filename [, array $metadata = array() [, array $options = array() ]] )";i:3;s:0:"";}
a:4:{i:0;s:24:"MongoGridFS::storeUpload";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:75:"public mixed MongoGridFS::storeUpload ( string $name [, array $metadata ] )";i:3;s:0:"";}
a:4:{i:0;s:28:"MongoGridfsFile::__construct";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:72:"public MongoGridfsFile::__construct ( MongoGridFS $gridfs, array $file )";i:3;s:0:"";}
a:4:{i:0;s:25:"MongoGridFSFile::getBytes";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:48:"public string MongoGridFSFile::getBytes ( void )";i:3;s:111:"Warning: this will load the file into memory. If the file is bigger than your memory, this will cause problems!";}
a:4:{i:0;s:28:"MongoGridFSFile::getFilename";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:51:"public string MongoGridFSFile::getFilename ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"MongoGridFSFile::getResource";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:51:"public stream MongoGridFSFile::getResource ( void )";i:3;s:247:"This method returns a stream resource that can be used with all file functions in PHP that deal with reading files. The contents of the file are pulled out of MongoDB on the fly, so that the whole file does not have to be loaded into memory first.";}
a:4:{i:0;s:24:"MongoGridFSFile::getSize";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:44:"public int MongoGridFSFile::getSize ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoGridFSFile::write";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:64:"public int MongoGridFSFile::write ([ string $filename = NULL ] )";i:3;s:0:"";}
a:4:{i:0;s:30:"MongoGridFSCursor::__construct";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:124:"public MongoGridFSCursor::__construct ( MongoGridFS $gridfs, resource $connection, string $ns, array $query, array $fields )";i:3;s:0:"";}
a:4:{i:0;s:26:"MongoGridFSCursor::current";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:58:"public MongoGridFSFile MongoGridFSCursor::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"MongoGridFSCursor::getNext";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:58:"public MongoGridFSFile MongoGridFSCursor::getNext ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"MongoGridFSCursor::key";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:45:"public string MongoGridFSCursor::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"MongoLog::getCallback";i:1;s:21:"(PECL mongo >= 1.3.0)";i:2;s:49:"public static void MongoLog::getCallback ( void )";i:3;s:37:"Retrieves the callback function name.";}
a:4:{i:0;s:18:"MongoLog::getLevel";i:1;s:21:"(PECL mongo >= 1.2.3)";i:2;s:45:"public static int MongoLog::getLevel ( void )";i:3;s:124:"This can be used to see the log level. Use the constants described in the section with bitwise operators to check the level.";}
a:4:{i:0;s:19:"MongoLog::getModule";i:1;s:21:"(PECL mongo >= 1.2.3)";i:2;s:46:"public static int MongoLog::getModule ( void )";i:3;s:205:"This function can be used to see which parts of the driver's functionality are being logged. Use the constants described in the section with bitwise operators to check if specific modules are being logged.";}
a:4:{i:0;s:21:"MongoLog::setCallback";i:1;s:21:"(PECL mongo >= 1.3.0)";i:2;s:67:"public static void MongoLog::setCallback ( callable $log_function )";i:3;s:98:"This function will set a callback function to be called for events instead of triggering warnings.";}
a:4:{i:0;s:18:"MongoLog::setLevel";i:1;s:21:"(PECL mongo >= 1.2.3)";i:2;s:52:"public static void MongoLog::setLevel ( int $level )";i:3;s:198:"This function can be used to set how verbose logging should be and the types of activities that should be logged. Use the constants described in the section with bitwise operators to specify levels.";}
a:4:{i:0;s:19:"MongoLog::setModule";i:1;s:21:"(PECL mongo >= 1.2.3)";i:2;s:54:"public static void MongoLog::setModule ( int $module )";i:3;s:178:"This function can be used to set which parts of the driver's functionality should be logged. Use the constants described in the section with bitwise operators to specify modules.";}
a:4:{i:0;s:18:"MongoPool::getSize";i:1;s:21:"(PECL mongo >= 1.2.3)";i:2;s:45:"public static int MongoPool::getSize ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"MongoPool::info";i:1;s:21:"(PECL mongo >= 1.2.3)";i:2;s:37:"public array MongoPool::info ( void )";i:3;s:59:"Returns an array of information about all connection pools.";}
a:4:{i:0;s:18:"MongoPool::setSize";i:1;s:21:"(PECL mongo >= 1.2.3)";i:2;s:51:"public static bool MongoPool::setSize ( int $size )";i:3;s:68:"Sets the max number of connections new pools will be able to create.";}
a:4:{i:0;s:18:"Mongo::connectUtil";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:42:"protected bool Mongo::connectUtil ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"Mongo::__construct";i:1;s:20:"(PECL mongo >=0.9.0)";i:2;s:68:"public Mongo::__construct() ([ string $server [, array $options ]] )";i:3;s:73:"This method overwrites the constructor and turns off acknowledged writes.";}
a:4:{i:0;s:18:"Mongo::getPoolSize";i:1;s:20:"(PECL mongo >=1.2.0)";i:2;s:45:"public static int Mongo::getPoolSize ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"Mongo::getSlave";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:38:"public string Mongo::getSlave ( void )";i:3;s:165:"This finds the address of the secondary currently being used for reads. It is a read-only method: it does not change anything about the internal state of the object.";}
a:4:{i:0;s:19:"Mongo::getSlaveOkay";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:40:"public bool Mongo::getSlaveOkay ( void )";i:3;s:72:"See of this manual for information on distributing reads to secondaries.";}
a:4:{i:0;s:16:"Mongo::poolDebug";i:1;s:20:"(PECL mongo >=1.2.0)";i:2;s:38:"public array Mongo::poolDebug ( void )";i:3;s:59:"Returns an array of information about all connection pools.";}
a:4:{i:0;s:18:"Mongo::setPoolSize";i:1;s:20:"(PECL mongo >=1.2.0)";i:2;s:51:"public static bool Mongo::setPoolSize ( int $size )";i:3;s:68:"Sets the max number of connections new pools will be able to create.";}
a:4:{i:0;s:19:"Mongo::setSlaveOkay";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:54:"public bool Mongo::setSlaveOkay ([ bool $ok = true ] )";i:3;s:72:"See of this manual for information on distributing reads to secondaries.";}
a:4:{i:0;s:18:"Mongo::switchSlave";i:1;s:20:"(PECL mongo >=1.1.0)";i:2;s:41:"public string Mongo::switchSlave ( void )";i:3;s:207:"This choses a random secondary for a connection to read from. It is called automatically by the driver and should not need to be used. It calls (to refresh the status of hosts) and (to get the return value).";}
a:4:{i:0;s:11:"bson_decode";i:1;s:20:"(PECL mongo >=1.0.1)";i:2;s:34:"array bson_decode ( string $bson )";i:3;s:174:"This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver.";}
a:4:{i:0;s:11:"bson_encode";i:1;s:20:"(PECL mongo >=1.0.1)";i:2;s:38:"string bson_encode ( mixed $anything )";i:3;s:174:"This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver.";}
a:4:{i:0;s:33:"MongoResultException::getDocument";i:1;s:20:"(PECL mongo >=1.3.0)";i:2;s:55:"public array MongoResultException::getDocument ( void )";i:3;s:41:"Retrieves the full error result document.";}
a:4:{i:0;s:29:"MongoCursorException::getHost";i:1;s:21:"(PECL mongo >= 1.0.0)";i:2;s:52:"public string MongoCursorException::getHost ( void )";i:3;s:58:"Returns the hostname of the server the query was sent too.";}
a:4:{i:0;s:18:"msql_affected_rows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"int msql_affected_rows ( resource $result )";i:3;s:92:"Returns number of affected rows by the last SELECT, UPDATE or DELETE query associated with .";}
a:4:{i:0;s:10:"msql_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"bool msql_close ([ resource $link_identifier ] )";i:3;s:109:"closes the non-persistent connection to the mSQL server that's associated with the specified link identifier.";}
a:4:{i:0;s:12:"msql_connect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"resource msql_connect ([ string $hostname ] )";i:3;s:42:"establishes a connection to a mSQL server.";}
a:4:{i:0;s:14:"msql_create_db";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"bool msql_create_db ( string $database_name [, resource $link_identifier ] )";i:3;s:53:"attempts to create a new database on the mSQL server.";}
a:4:{i:0;s:13:"msql_createdb";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:14:"msql_data_seek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"bool msql_data_seek ( resource $result, int $row_number )";i:3;s:174:"moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specified row number. The next call to would return that row.";}
a:4:{i:0;s:13:"msql_db_query";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:89:"resource msql_db_query ( string $database, string $query [, resource $link_identifier ] )";i:3;s:46:"selects a database and executes a query on it.";}
a:4:{i:0;s:11:"msql_dbname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:12:"msql_drop_db";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"bool msql_drop_db ( string $database_name [, resource $link_identifier ] )";i:3;s:58:"attempts to drop (remove) a database from the mSQL server.";}
a:4:{i:0;s:10:"msql_error";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"string msql_error ( void )";i:3;s:108:"returns the last issued error by the mSQL server. Note that only the last error message is accessible with .";}
a:4:{i:0;s:16:"msql_fetch_array";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"array msql_fetch_array ( resource $result [, int $result_type ] )";i:3;s:182:"is an extended version of . In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.";}
a:4:{i:0;s:16:"msql_fetch_field";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"object msql_fetch_field ( resource $result [, int $field_offset = 0 ] )";i:3;s:82:"can be used in order to obtain information about fields in a certain query result.";}
a:4:{i:0;s:17:"msql_fetch_object";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"object msql_fetch_object ( resource $result )";i:3;s:220:"is similar to, with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).";}
a:4:{i:0;s:14:"msql_fetch_row";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"array msql_fetch_row ( resource $result )";i:3;s:191:"fetches one row of data from the result associated with the specified query identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0.";}
a:4:{i:0;s:16:"msql_field_flags";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"string msql_field_flags ( resource $result, int $field_offset )";i:3;s:47:"returns the field flags of the specified field.";}
a:4:{i:0;s:14:"msql_field_len";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"int msql_field_len ( resource $result, int $field_offset )";i:3;s:42:"returns the length of the specified field.";}
a:4:{i:0;s:15:"msql_field_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"string msql_field_name ( resource $result, int $field_offset )";i:3;s:43:"gets the name of the specified field index.";}
a:4:{i:0;s:15:"msql_field_seek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:60:"bool msql_field_seek ( resource $result, int $field_offset )";i:3;s:116:"Seeks to the specified field offset. If the next call to won't include a field offset, this field would be returned.";}
a:4:{i:0;s:16:"msql_field_table";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:60:"int msql_field_table ( resource $result, int $field_offset )";i:3;s:61:"Returns the name of the table that the specified field is in.";}
a:4:{i:0;s:15:"msql_field_type";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"string msql_field_type ( resource $result, int $field_offset )";i:3;s:43:"gets the type of the specified field index.";}
a:4:{i:0;s:15:"msql_fieldflags";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:13:"msql_fieldlen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:14:"msql_fieldname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:15:"msql_fieldtable";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:14:"msql_fieldtype";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:16:"msql_free_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"bool msql_free_result ( resource $result )";i:3;s:225:"frees the memory associated with . When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don't use too much memory while the script is running.";}
a:4:{i:0;s:13:"msql_list_dbs";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"resource msql_list_dbs ([ resource $link_identifier ] )";i:3;s:48:"lists the databases available on the specified .";}
a:4:{i:0;s:16:"msql_list_fields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:96:"resource msql_list_fields ( string $database, string $tablename [, resource $link_identifier ] )";i:3;s:42:"returns information about the given table.";}
a:4:{i:0;s:16:"msql_list_tables";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:77:"resource msql_list_tables ( string $database [, resource $link_identifier ] )";i:3;s:35:"lists the tables on the specified .";}
a:4:{i:0;s:15:"msql_num_fields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"int msql_num_fields ( resource $result )";i:3;s:45:"returns the number of fields in a result set.";}
a:4:{i:0;s:13:"msql_num_rows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"int msql_num_rows ( resource $query_identifier )";i:3;s:43:"returns the number of rows in a result set.";}
a:4:{i:0;s:14:"msql_numfields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:12:"msql_numrows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:13:"msql_pconnect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"resource msql_pconnect ([ string $hostname ] )";i:3;s:47:"acts very much like with two major differences.";}
a:4:{i:0;s:10:"msql_query";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:68:"resource msql_query ( string $query [, resource $link_identifier ] )";i:3;s:114:"sends a query to the currently active database on the server that's associated with the specified link identifier.";}
a:4:{i:0;s:12:"msql_regcase";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:11:"msql_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"string msql_result ( resource $result, int $row [, mixed $field ] )";i:3;s:56:"returns the contents of one cell from a mSQL result set.";}
a:4:{i:0;s:14:"msql_select_db";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"bool msql_select_db ( string $database_name [, resource $link_identifier ] )";i:3;s:85:"sets the current active database on the server that's associated with the specified .";}
a:4:{i:0;s:14:"msql_tablename";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:4:"msql";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:10:"mssql_bind";i:1;s:44:"(PHP 4 >= 4.0.7, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:154:"bool mssql_bind ( resource $stmt, string $param_name, mixed &$var, int $type [, bool $is_output = false [, bool $is_null = false [, int $maxlen = -1 ]]] )";i:3;s:69:"Binds a parameter to a stored procedure or a remote stored procedure.";}
a:4:{i:0;s:11:"mssql_close";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:49:"bool mssql_close ([ resource $link_identifier ] )";i:3;s:170:"Closes the link to a MS SQL Server database that's associated with the specified link identifier. If the link identifier isn't specified, the last opened link is assumed.";}
a:4:{i:0;s:13:"mssql_connect";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:117:"resource mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link = false ]]]] )";i:3;s:44:"establishes a connection to a MS SQL server.";}
a:4:{i:0;s:15:"mssql_data_seek";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:69:"bool mssql_data_seek ( resource $result_identifier, int $row_number )";i:3;s:203:"moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number, first row being number 0. The next call to would return that row.";}
a:4:{i:0;s:13:"mssql_execute";i:1;s:44:"(PHP 4 >= 4.0.7, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:70:"mixed mssql_execute ( resource $stmt [, bool $skip_results = false ] )";i:3;s:55:"Executes a stored procedure on a MS SQL server database";}
a:4:{i:0;s:17:"mssql_fetch_array";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:79:"array mssql_fetch_array ( resource $result [, int $result_type = MSSQL_BOTH ] )";i:3;s:182:"is an extended version of . In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.";}
a:4:{i:0;s:17:"mssql_fetch_assoc";i:1;s:44:"(PHP 4 >= 4.2.0, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:47:"array mssql_fetch_assoc ( resource $result_id )";i:3;s:172:"Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. is equivalent to calling with for the optional second parameter.";}
a:4:{i:0;s:17:"mssql_fetch_batch";i:1;s:44:"(PHP 4 >= 4.0.4, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:42:"int mssql_fetch_batch ( resource $result )";i:3;s:34:"Returns the next batch of records.";}
a:4:{i:0;s:17:"mssql_fetch_field";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:73:"object mssql_fetch_field ( resource $result [, int $field_offset = -1 ] )";i:3;s:82:"can be used in order to obtain information about fields in a certain query result.";}
a:4:{i:0;s:18:"mssql_fetch_object";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:46:"object mssql_fetch_object ( resource $result )";i:3;s:220:"is similar to, with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).";}
a:4:{i:0;s:15:"mssql_fetch_row";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:42:"array mssql_fetch_row ( resource $result )";i:3;s:192:"fetches one row of data from the result associated with the specified result identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0.";}
a:4:{i:0;s:18:"mssql_field_length";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:65:"int mssql_field_length ( resource $result [, int $offset = -1 ] )";i:3;s:36:"Returns the length of field no. in .";}
a:4:{i:0;s:16:"mssql_field_name";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:66:"string mssql_field_name ( resource $result [, int $offset = -1 ] )";i:3;s:34:"Returns the name of field no. in .";}
a:4:{i:0;s:16:"mssql_field_seek";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:61:"bool mssql_field_seek ( resource $result, int $field_offset )";i:3;s:116:"Seeks to the specified field offset. If the next call to won't include a field offset, this field would be returned.";}
a:4:{i:0;s:16:"mssql_field_type";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:66:"string mssql_field_type ( resource $result [, int $offset = -1 ] )";i:3;s:34:"Returns the type of field no. in .";}
a:4:{i:0;s:17:"mssql_free_result";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:43:"bool mssql_free_result ( resource $result )";i:3;s:271:"only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call with the result identifier as an argument and the associated result memory will be freed.";}
a:4:{i:0;s:20:"mssql_free_statement";i:1;s:44:"(PHP 4 >= 4.3.2, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:44:"bool mssql_free_statement ( resource $stmt )";i:3;s:280:"only needs to be called if you are worried about using too much memory while your script is running. All statement memory will automatically be freed when the script ends. You may call with the statement identifier as an argument and the associated statement memory will be freed.";}
a:4:{i:0;s:22:"mssql_get_last_message";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:38:"string mssql_get_last_message ( void )";i:3;s:44:"Gets the last message from the MS-SQL server";}
a:4:{i:0;s:17:"mssql_guid_string";i:1;s:44:"(PHP 4 >= 4.0.7, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:75:"string mssql_guid_string ( string $binary [, bool $short_format = false ] )";i:3;s:43:"Converts a 16 byte binary GUID to a string.";}
a:4:{i:0;s:10:"mssql_init";i:1;s:44:"(PHP 4 >= 4.0.7, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:70:"resource mssql_init ( string $sp_name [, resource $link_identifier ] )";i:3;s:60:"Initializes a stored procedure or a remote stored procedure.";}
a:4:{i:0;s:24:"mssql_min_error_severity";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:47:"void mssql_min_error_severity ( int $severity )";i:3;s:32:"Sets the minimum error severity.";}
a:4:{i:0;s:26:"mssql_min_message_severity";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:49:"void mssql_min_message_severity ( int $severity )";i:3;s:34:"Sets the minimum message severity.";}
a:4:{i:0;s:17:"mssql_next_result";i:1;s:44:"(PHP 4 >= 4.0.5, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:46:"bool mssql_next_result ( resource $result_id )";i:3;s:367:"When sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set.";}
a:4:{i:0;s:16:"mssql_num_fields";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:41:"int mssql_num_fields ( resource $result )";i:3;s:45:"returns the number of fields in a result set.";}
a:4:{i:0;s:14:"mssql_num_rows";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:39:"int mssql_num_rows ( resource $result )";i:3;s:43:"returns the number of rows in a result set.";}
a:4:{i:0;s:14:"mssql_pconnect";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:118:"resource mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link = false ]]]] )";i:3;s:47:"acts very much like with two major differences.";}
a:4:{i:0;s:11:"mssql_query";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:90:"mixed mssql_query ( string $query [, resource $link_identifier [, int $batch_size = 0 ]] )";i:3;s:114:"sends a query to the currently active database on the server that's associated with the specified link identifier.";}
a:4:{i:0;s:12:"mssql_result";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:64:"string mssql_result ( resource $result, int $row, mixed $field )";i:3;s:58:"returns the contents of one cell from a MS SQL result set.";}
a:4:{i:0;s:19:"mssql_rows_affected";i:1;s:44:"(PHP 4 >= 4.0.4, PHP 5, PECL odbtp >=
1.1.1)";i:2;s:53:"int mssql_rows_affected ( resource $link_identifier )";i:3;s:63:"Returns the number of records affected by the last write query.";}
a:4:{i:0;s:15:"mssql_select_db";i:1;s:35:"(PHP 4, PHP 5, PECL odbtp >= 1.1.1)";i:2;s:77:"bool mssql_select_db ( string $database_name [, resource $link_identifier ] )";i:3;s:100:"sets the current active database on the server that's associated with the specified link identifier.";}
a:4:{i:0;s:19:"mysql_affected_rows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:310:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_affected_rows() PDOStatement::rowCount()";i:3;s:0:"";}
a:4:{i:0;s:21:"mysql_client_encoding";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:290:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_character_set_name()";i:3;s:0:"";}
a:4:{i:0;s:11:"mysql_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:325:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_close() PDO: Assign the value of NULL to the PDO object";i:3;s:0:"";}
a:4:{i:0;s:13:"mysql_connect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:298:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_connect() PDO::__construct()";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_create_db";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:290:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_query() PDO::query()";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_data_seek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:300:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_data_seek() PDO::FETCH_ORI_ABS";i:3;s:0:"";}
a:4:{i:0;s:13:"mysql_db_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:287:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: Query: SELECT DATABASE()";i:3;s:0:"";}
a:4:{i:0;s:14:"mysql_db_query";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:315:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_select_db() then the query PDO::__construct()";i:3;s:0:"";}
a:4:{i:0;s:13:"mysql_drop_db";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:292:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: Execute a DROP DATABASE query";i:3;s:0:"";}
a:4:{i:0;s:11:"mysql_errno";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:294:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_errno() PDO::errorCode()";i:3;s:0:"";}
a:4:{i:0;s:11:"mysql_error";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:294:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_error() PDO::errorInfo()";i:3;s:0:"";}
a:4:{i:0;s:19:"mysql_escape_string";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:298:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_escape_string() PDO::quote()";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_fetch_array";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:305:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_array() PDOStatement::fetch()";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_fetch_assoc";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:321:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_assoc() PDOStatement::fetch(PDO::FETCH_ASSOC)";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_fetch_field";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:313:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_field() PDOStatement::getColumnMeta()";i:3;s:0:"";}
a:4:{i:0;s:19:"mysql_fetch_lengths";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:315:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_lengths() PDOStatement::getColumnMeta()";i:3;s:0:"";}
a:4:{i:0;s:18:"mysql_fetch_object";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:320:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_object() PDOStatement::fetch(PDO::FETCH_OBJ)";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_fetch_row";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:317:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_row() PDOStatement::fetch(PDO::FETCH_NUM)";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_field_flags";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:336:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_field_direct() [flags] PDOStatement::getColumnMeta() [flags]";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_field_len";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:335:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_field_direct() [length] PDOStatement::getColumnMeta() [len]";i:3;s:0:"";}
a:4:{i:0;s:16:"mysql_field_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:347:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_field_direct() [name] or [orgname] PDOStatement::getColumnMeta() [name]";i:3;s:0:"";}
a:4:{i:0;s:16:"mysql_field_seek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:330:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_field_seek() PDOStatement::fetch() using optional parameters";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_field_table";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:350:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_field_direct() [table] or [orgtable] PDOStatement::getColumnMeta() [table]";i:3;s:0:"";}
a:4:{i:0;s:16:"mysql_field_type";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:360:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_fetch_field_direct() [type] PDOStatement::getColumnMeta() [driver:decl_type] or [pdo_type]";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_free_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:358:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_free_result() Assign the value of NULL to the PDO object, or PDOStatement::closeCursor()";i:3;s:0:"";}
a:4:{i:0;s:21:"mysql_get_client_info";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:331:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_get_client_info() PDO::getAttribute(PDO::ATTR_CLIENT_VERSION)";i:3;s:0:"";}
a:4:{i:0;s:19:"mysql_get_host_info";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:332:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_get_host_info() PDO::getAttribute(PDO::ATTR_CONNECTION_STATUS)";i:3;s:0:"";}
a:4:{i:0;s:20:"mysql_get_proto_info";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:286:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_get_proto_info()";i:3;s:0:"";}
a:4:{i:0;s:21:"mysql_get_server_info";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:331:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_get_server_info() PDO::getAttribute(PDO::ATTR_SERVER_VERSION)";i:3;s:0:"";}
a:4:{i:0;s:10:"mysql_info";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:276:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_info()";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_insert_id";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:301:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_insert_id() PDO::lastInsertId()";i:3;s:0:"";}
a:4:{i:0;s:14:"mysql_list_dbs";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:288:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: SQL Query: SHOW DATABASES";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_list_fields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:301:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: SQL Query: SHOW COLUMNS FROM sometable";i:3;s:0:"";}
a:4:{i:0;s:20:"mysql_list_processes";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:281:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_thread_id()";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_list_tables";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:300:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: SQL Query: SHOW TABLES FROM sometable";i:3;s:0:"";}
a:4:{i:0;s:16:"mysql_num_fields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:311:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_field_count() PDOStatement::columnCount()";i:3;s:0:"";}
a:4:{i:0;s:14:"mysql_num_rows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:310:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_stmt_num_rows() PDOStatement::rowCount()";i:3;s:0:"";}
a:4:{i:0;s:14:"mysql_pconnect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:363:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_connect() with p: host prefix PDO::__construct() with PDO::ATTR_PERSISTENT as a driver option";i:3;s:0:"";}
a:4:{i:0;s:10:"mysql_ping";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:276:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_ping()";i:3;s:0:"";}
a:4:{i:0;s:11:"mysql_query";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:290:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_query() PDO::query()";i:3;s:0:"";}
a:4:{i:0;s:24:"mysql_real_escape_string";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:303:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_real_escape_string() PDO::quote()";i:3;s:0:"";}
a:4:{i:0;s:12:"mysql_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:374:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_data_seek() in conjunction with mysqli_field_seek() and mysqli_fetch_field() PDOStatement::fetchColumn()";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_select_db";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:314:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_select_db() PDO::__construct() (part of dsn)";i:3;s:0:"";}
a:4:{i:0;s:17:"mysql_set_charset";i:1;s:16:"(PHP 5 >= 5.2.3)";i:2;s:354:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_character_set_name() PDO: Add charset to the connection string, such as charset=utf8";i:3;s:0:"";}
a:4:{i:0;s:10:"mysql_stat";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:317:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_stat() PDO::getAttribute(PDO::ATTR_SERVER_INFO)";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_tablename";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:285:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: SQL Query: SHOW TABLES";i:3;s:0:"";}
a:4:{i:0;s:15:"mysql_thread_id";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:281:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: mysqli_thread_id()";i:3;s:0:"";}
a:4:{i:0;s:22:"mysql_unbuffered_query";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:299:"Warning This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used. See also MySQL: choosing an API guide and related FAQ for more information. Alternatives to this function include: See: Buffered and Unbuffered queries";i:3;s:0:"";}
a:4:{i:0;s:22:"mysqli::$affected_rows";i:1;s:7:"(PHP 5)";i:2;s:27:"int $mysqli->affected_rows;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli::autocommit";i:1;s:7:"(PHP 5)";i:2;s:38:"bool mysqli::autocommit ( bool $mode )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli::begin_transaction";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:72:"public bool mysqli::begin_transaction ([ int $flags [, string $name ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"mysqli::change_user";i:1;s:7:"(PHP 5)";i:2;s:77:"bool mysqli::change_user ( string $user, string $password, string $database )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"mysqli::character_set_name";i:1;s:7:"(PHP 5)";i:2;s:42:"string mysqli::character_set_name ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli::$client_info";i:1;s:7:"(PHP 5)";i:2;s:28:"string $mysqli->client_info;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli::$client_version";i:1;s:7:"(PHP 5)";i:2;s:28:"int $mysqli->client_version;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:13:"mysqli::close";i:1;s:7:"(PHP 5)";i:2;s:27:"bool mysqli::close ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:14:"mysqli::commit";i:1;s:7:"(PHP 5)";i:2;s:54:"bool mysqli::commit ([ int $flags [, string $name ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"mysqli::$connect_errno";i:1;s:7:"(PHP 5)";i:2;s:30:"string $mysqli->connect_errno;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"mysqli::$connect_error";i:1;s:7:"(PHP 5)";i:2;s:30:"string $mysqli->connect_error;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli::__construct";i:1;s:7:"(PHP 5)";i:2;s:303:"mysqli::__construct() ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:13:"mysqli::debug";i:1;s:7:"(PHP 5)";i:2;s:38:"bool mysqli::debug ( string $message )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli::dump_debug_info";i:1;s:7:"(PHP 5)";i:2;s:37:"bool mysqli::dump_debug_info ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:14:"mysqli::$errno";i:1;s:7:"(PHP 5)";i:2;s:19:"int $mysqli->errno;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli::$error_list";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:26:"array $mysqli->error_list;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:14:"mysqli::$error";i:1;s:7:"(PHP 5)";i:2;s:22:"string $mysqli->error;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli::$field_count";i:1;s:7:"(PHP 5)";i:2;s:25:"int $mysqli->field_count;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli::get_charset";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:35:"object mysqli::get_charset ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli::get_client_info";i:1;s:7:"(PHP 5)";i:2;s:39:"string mysqli::get_client_info ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli_get_client_stats";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:38:"array mysqli_get_client_stats ( void )";i:3;s:60:"Returns client per-process statistics. Available only with .";}
a:4:{i:0;s:25:"mysqli_get_client_version";i:1;s:7:"(PHP 5)";i:2;s:28:"int $mysqli->client_version;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"mysqli::get_connection_stats";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:42:"bool mysqli::get_connection_stats ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli::$host_info";i:1;s:7:"(PHP 5)";i:2;s:26:"string $mysqli->host_info;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli::$protocol_version";i:1;s:7:"(PHP 5)";i:2;s:33:"string $mysqli->protocol_version;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli::$server_info";i:1;s:7:"(PHP 5)";i:2;s:28:"string $mysqli->server_info;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli::$server_version";i:1;s:7:"(PHP 5)";i:2;s:28:"int $mysqli->server_version;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli::get_warnings";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"mysqli_warning mysqli::get_warnings ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:13:"mysqli::$info";i:1;s:7:"(PHP 5)";i:2;s:21:"string $mysqli->info;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:12:"mysqli::init";i:1;s:7:"(PHP 5)";i:2;s:28:"mysqli mysqli::init ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli::$insert_id";i:1;s:7:"(PHP 5)";i:2;s:25:"mixed $mysqli->insert_id;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:12:"mysqli::kill";i:1;s:7:"(PHP 5)";i:2;s:36:"bool mysqli::kill ( int $processid )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli::more_results";i:1;s:7:"(PHP 5)";i:2;s:34:"bool mysqli::more_results ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli::multi_query";i:1;s:7:"(PHP 5)";i:2;s:42:"bool mysqli::multi_query ( string $query )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli::next_result";i:1;s:7:"(PHP 5)";i:2;s:33:"bool mysqli::next_result ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"mysqli::options";i:1;s:7:"(PHP 5)";i:2;s:50:"bool mysqli::options ( int $option, mixed $value )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:12:"mysqli::ping";i:1;s:7:"(PHP 5)";i:2;s:26:"bool mysqli::ping ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:12:"mysqli::poll";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:103:"public static int mysqli::poll ( array &$read, array &$error, array &$reject, int $sec [, int $usec ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"mysqli::prepare";i:1;s:7:"(PHP 5)";i:2;s:45:"mysqli_stmt mysqli::prepare ( string $query )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:13:"mysqli::query";i:1;s:7:"(PHP 5)";i:2;s:80:"mixed mysqli::query ( string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli::real_connect";i:1;s:7:"(PHP 5)";i:2;s:152:"bool mysqli::real_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"mysqli::real_escape_string";i:1;s:7:"(PHP 5)";i:2;s:50:"string mysqli::escape_string ( string $escapestr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli::real_query";i:1;s:7:"(PHP 5)";i:2;s:41:"bool mysqli::real_query ( string $query )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli::reap_async_query";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:54:"public mysqli_result mysqli::reap_async_query ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"mysqli::refresh";i:1;s:16:"(PHP 5 <= 5.3.0)";i:2;s:44:"public bool mysqli::refresh ( int $options )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli::release_savepoint";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:54:"public bool mysqli::release_savepoint ( string $name )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:16:"mysqli::rollback";i:1;s:7:"(PHP 5)";i:2;s:56:"bool mysqli::rollback ([ int $flags [, string $name ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"mysqli::rpl_query_type";i:1;s:7:"(PHP 5)";i:2;s:44:"int mysqli::rpl_query_type ( string $query )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"mysqli::savepoint";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:46:"public bool mysqli::savepoint ( string $name )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:17:"mysqli::select_db";i:1;s:7:"(PHP 5)";i:2;s:41:"bool mysqli::select_db ( string $dbname )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli::send_query";i:1;s:7:"(PHP 5)";i:2;s:41:"bool mysqli::send_query ( string $query )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli::set_charset";i:1;s:16:"(PHP 5 >= 5.0.5)";i:2;s:44:"bool mysqli::set_charset ( string $charset )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:32:"mysqli::set_local_infile_default";i:1;s:7:"(PHP 5)";i:2;s:53:"void mysqli_set_local_infile_default ( mysqli $link )";i:3;s:43:"Deactivates a handler previously set with .";}
a:4:{i:0;s:32:"mysqli::set_local_infile_handler";i:1;s:7:"(PHP 5)";i:2;s:75:"bool mysqli::set_local_infile_handler ( mysqli $link, callable $read_func )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"mysqli::$sqlstate";i:1;s:7:"(PHP 5)";i:2;s:25:"string $mysqli->sqlstate;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"mysqli::ssl_set";i:1;s:7:"(PHP 5)";i:2;s:94:"bool mysqli::ssl_set ( string $key, string $cert, string $ca, string $capath, string $cipher )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:12:"mysqli::stat";i:1;s:7:"(PHP 5)";i:2;s:28:"string mysqli::stat ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"mysqli::stmt_init";i:1;s:7:"(PHP 5)";i:2;s:38:"mysqli_stmt mysqli::stmt_init ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli::store_result";i:1;s:7:"(PHP 5)";i:2;s:43:"mysqli_result mysqli::store_result ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli::$thread_id";i:1;s:7:"(PHP 5)";i:2;s:23:"int $mysqli->thread_id;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli::thread_safe";i:1;s:7:"(PHP 5)";i:2;s:32:"bool mysqli_thread_safe ( void )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:18:"mysqli::use_result";i:1;s:7:"(PHP 5)";i:2;s:41:"mysqli_result mysqli::use_result ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"mysqli::$warning_count";i:1;s:7:"(PHP 5)";i:2;s:27:"int $mysqli->warning_count;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"mysqli_stmt::$affected_rows";i:1;s:7:"(PHP 5)";i:2;s:32:"int $mysqli_stmt->affected_rows;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"mysqli_stmt::attr_get";i:1;s:7:"(PHP 5)";i:2;s:39:"int mysqli_stmt::attr_get ( int $attr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"mysqli_stmt::attr_set";i:1;s:7:"(PHP 5)";i:2;s:51:"bool mysqli_stmt::attr_set ( int $attr, int $mode )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli_stmt::bind_param";i:1;s:7:"(PHP 5)";i:2;s:77:"bool mysqli_stmt::bind_param ( string $types, mixed &$var1 [, mixed &$... ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_stmt::bind_result";i:1;s:7:"(PHP 5)";i:2;s:63:"bool mysqli_stmt::bind_result ( mixed &$var1 [, mixed &$... ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli_stmt::close";i:1;s:7:"(PHP 5)";i:2;s:32:"bool mysqli_stmt::close ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"mysqli_stmt::data_seek";i:1;s:7:"(PHP 5)";i:2;s:43:"void mysqli_stmt::data_seek ( int $offset )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli_stmt::$errno";i:1;s:7:"(PHP 5)";i:2;s:24:"int $mysqli_stmt->errno;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_stmt::$error_list";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:31:"array $mysqli_stmt->error_list;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli_stmt::$error";i:1;s:7:"(PHP 5)";i:2;s:27:"string $mysqli_stmt->error;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli_stmt::execute";i:1;s:7:"(PHP 5)";i:2;s:34:"bool mysqli_stmt::execute ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli_stmt::fetch";i:1;s:7:"(PHP 5)";i:2;s:32:"bool mysqli_stmt::fetch ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli_stmt::$field_count";i:1;s:7:"(PHP 5)";i:2;s:30:"int $mysqli_stmt->field_count;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_stmt::free_result";i:1;s:7:"(PHP 5)";i:2;s:38:"void mysqli_stmt::free_result ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli_stmt::get_result";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"mysqli_result mysqli_stmt::get_result ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli_stmt::get_warnings";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:54:"object mysqli_stmt::get_warnings ( mysqli_stmt $stmt )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli_stmt::$insert_id";i:1;s:7:"(PHP 5)";i:2;s:28:"int $mysqli_stmt->insert_id;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli_stmt::more_results";i:1;s:7:"(PHP 5)";i:2;s:46:"public bool mysqli_stmt::more_results ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"mysqli_stmt::next_result";i:1;s:7:"(PHP 5)";i:2;s:45:"public bool mysqli_stmt::next_result ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"mysqli_stmt::$num_rows";i:1;s:7:"(PHP 5)";i:2;s:27:"int $mysqli_stmt->num_rows;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli_stmt::$param_count";i:1;s:7:"(PHP 5)";i:2;s:30:"int $mysqli_stmt->param_count;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"mysqli_stmt::prepare";i:1;s:7:"(PHP 5)";i:2;s:44:"mixed mysqli_stmt::prepare ( string $query )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"mysqli_stmt::reset";i:1;s:7:"(PHP 5)";i:2;s:32:"bool mysqli_stmt::reset ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"mysqli_stmt::result_metadata";i:1;s:7:"(PHP 5)";i:2;s:51:"mysqli_result mysqli_stmt::result_metadata ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"mysqli_stmt::send_long_data";i:1;s:7:"(PHP 5)";i:2;s:64:"bool mysqli_stmt::send_long_data ( int $param_nr, string $data )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"mysqli_stmt::$sqlstate";i:1;s:7:"(PHP 5)";i:2;s:30:"string $mysqli_stmt->sqlstate;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli_stmt::store_result";i:1;s:7:"(PHP 5)";i:2;s:39:"bool mysqli_stmt::store_result ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"mysqli_result::$current_field";i:1;s:7:"(PHP 5)";i:2;s:35:"int $mysqli_result->current_field ;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_result::data_seek";i:1;s:7:"(PHP 5)";i:2;s:45:"bool mysqli_result::data_seek ( int $offset )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_result::fetch_all";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:66:"mixed mysqli_result::fetch_all ([ int $resulttype = MYSQLI_NUM ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"mysqli_result::fetch_array";i:1;s:7:"(PHP 5)";i:2;s:69:"mixed mysqli_result::fetch_array ([ int $resulttype = MYSQLI_BOTH ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"mysqli_result::fetch_assoc";i:1;s:7:"(PHP 5)";i:2;s:41:"array mysqli_result::fetch_assoc ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:33:"mysqli_result::fetch_field_direct";i:1;s:7:"(PHP 5)";i:2;s:57:"object mysqli_result::fetch_field_direct ( int $fieldnr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"mysqli_result::fetch_field";i:1;s:7:"(PHP 5)";i:2;s:42:"object mysqli_result::fetch_field ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"mysqli_result::fetch_fields";i:1;s:7:"(PHP 5)";i:2;s:42:"array mysqli_result::fetch_fields ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"mysqli_result::fetch_object";i:1;s:7:"(PHP 5)";i:2;s:78:"object mysqli_result::fetch_object ([ string $class_name [, array $params ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_result::fetch_row";i:1;s:7:"(PHP 5)";i:2;s:39:"mixed mysqli_result::fetch_row ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"mysqli_result::$field_count";i:1;s:7:"(PHP 5)";i:2;s:32:"int $mysqli_result->field_count;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"mysqli_result::field_seek";i:1;s:7:"(PHP 5)";i:2;s:47:"bool mysqli_result::field_seek ( int $fieldnr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"mysqli_result::free";i:1;s:7:"(PHP 5)";i:2;s:33:"void mysqli_result::free ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"mysqli_result::$lengths";i:1;s:7:"(PHP 5)";i:2;s:30:"array $mysqli_result->lengths;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_result::$num_rows";i:1;s:7:"(PHP 5)";i:2;s:29:"int $mysqli_result->num_rows;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:34:"mysqli_driver::embedded_server_end";i:1;s:7:"(PHP 5)";i:2;s:48:"void mysqli_driver::embedded_server_end ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:36:"mysqli_driver::embedded_server_start";i:1;s:7:"(PHP 5)";i:2;s:90:"bool mysqli_driver::embedded_server_start ( bool $start, array $arguments, array $groups )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"mysqli_driver::$report_mode";i:1;s:7:"(PHP 5)";i:2;s:33:"int $mysqli_driver->report_mode ;";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"mysqli_warning::__construct";i:1;s:7:"(PHP 5)";i:2;s:43:"public mysqli_warning::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"mysqli_warning::next";i:1;s:7:"(PHP 5)";i:2;s:41:"public void mysqli_warning::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"mysqli_bind_param";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:86:"Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:18:"mysqli_bind_result";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:86:"Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:22:"mysqli_client_encoding";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:86:"Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:14:"mysqli_connect";i:1;s:7:"(PHP 5)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:33:"mysqli::disable_reads_from_master";i:1;s:7:"(PHP 5)";i:2;s:47:"void mysqli::disable_reads_from_master ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"mysqli_disable_rpl_parse";i:1;s:7:"(PHP 5)";i:2;s:46:"bool mysqli_disable_rpl_parse ( mysqli $link )";i:3;s:0:"";}
a:4:{i:0;s:31:"mysqli_enable_reads_from_master";i:1;s:7:"(PHP 5)";i:2;s:53:"bool mysqli_enable_reads_from_master ( mysqli $link )";i:3;s:0:"";}
a:4:{i:0;s:23:"mysqli_enable_rpl_parse";i:1;s:7:"(PHP 5)";i:2;s:45:"bool mysqli_enable_rpl_parse ( mysqli $link )";i:3;s:0:"";}
a:4:{i:0;s:20:"mysqli_escape_string";i:1;s:7:"(PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:14:"mysqli_execute";i:1;s:7:"(PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:12:"mysqli_fetch";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:86:"Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:22:"mysqli_get_cache_stats";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:37:"array mysqli_get_cache_stats ( void )";i:3;s:59:"Returns client Zval cache statistics. Available only with .";}
a:4:{i:0;s:19:"mysqli_get_metadata";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:86:"Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:19:"mysqli_master_query";i:1;s:7:"(PHP 5)";i:2;s:56:"bool mysqli_master_query ( mysqli $link, string $query )";i:3;s:0:"";}
a:4:{i:0;s:18:"mysqli_param_count";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:86:"Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:13:"mysqli_report";i:1;s:7:"(PHP 5)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:24:"mysqli_rpl_parse_enabled";i:1;s:7:"(PHP 5)";i:2;s:45:"int mysqli_rpl_parse_enabled ( mysqli $link )";i:3;s:0:"";}
a:4:{i:0;s:16:"mysqli_rpl_probe";i:1;s:7:"(PHP 5)";i:2;s:38:"bool mysqli_rpl_probe ( mysqli $link )";i:3;s:0:"";}
a:4:{i:0;s:21:"mysqli_send_long_data";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:86:"Warning This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:15:"mysqli::set_opt";i:1;s:7:"(PHP 5)";i:2;s:0:"";i:3;s:30:"This function is an alias of .";}
a:4:{i:0;s:18:"mysqli_slave_query";i:1;s:7:"(PHP 5)";i:2;s:55:"bool mysqli_slave_query ( mysqli $link, string $query )";i:3;s:0:"";}
a:4:{i:0;s:24:"mysqlnd_ms_get_last_gtid";i:1;s:26:"(PECL mysqlnd_ms >= 1.2.0)";i:2;s:53:"string mysqlnd_ms_get_last_gtid ( mixed $connection )";i:3;s:277:"Returns a global transaction identifier which belongs to a write operation no older than the last write performed by the client. It is not guaranteed that the global transaction identifier is identical to that one created for the last write transaction performed by the client.";}
a:4:{i:0;s:35:"mysqlnd_ms_get_last_used_connection";i:1;s:26:"(PECL mysqlnd_ms >= 1.1.0)";i:2;s:63:"array mysqlnd_ms_get_last_used_connection ( mixed $connection )";i:3;s:376:"Returns an array which describes the last used connection from the plugins connection pool currently pointed to by the user connection handle. If using the plugin, a user connection handle represents a pool of database connections. It is not possible to tell from the user connection handles properties to which database server from the pool the user connection handle points.";}
a:4:{i:0;s:20:"mysqlnd_ms_get_stats";i:1;s:26:"(PECL mysqlnd_ms >= 1.0.0)";i:2;s:35:"array mysqlnd_ms_get_stats ( void )";i:3;s:86:"Returns an array of statistics collected by the replication and load balancing plugin.";}
a:4:{i:0;s:21:"mysqlnd_ms_match_wild";i:1;s:26:"(PECL mysqlnd_ms >= 1.1.0)";i:2;s:67:"bool mysqlnd_ms_match_wild ( string $table_name, string $wildcard )";i:3;s:61:"Finds whether a table name matches a wildcard pattern or not.";}
a:4:{i:0;s:26:"mysqlnd_ms_query_is_select";i:1;s:26:"(PECL mysqlnd_ms >= 1.0.0)";i:2;s:48:"int mysqlnd_ms_query_is_select ( string $query )";i:3;s:87:"Finds whether to send the query to the master, the slave or the last used MySQL server.";}
a:4:{i:0;s:18:"mysqlnd_ms_set_qos";i:1;s:25:"(PECL mysqlnd_ms < 1.2.0)";i:2;s:120:"bool mysqlnd_ms_set_qos ( mixed $connection, int $service_level [, int $service_level_option [, mixed $option_value ]] )";i:3;s:607:"Sets the quality of service needed from the cluster. A database cluster delivers a certain quality of service to the user depending on its architecture. A major aspect of the quality of service is the consistency level the cluster can offer. An asynchronous MySQL replication cluster defaults to eventual consistency for slave reads: a slave may serve stale data, current data, or it may have not the requested data at all, because it is not synchronous to the master. In a MySQL replication cluster, only master accesses can give strong consistency, which promises that all clients see each others changes.";}
a:4:{i:0;s:31:"mysqlnd_ms_set_user_pick_server";i:1;s:25:"(PECL mysqlnd_ms < 1.1.0)";i:2;s:57:"bool mysqlnd_ms_set_user_pick_server ( string $function )";i:3;s:194:"Sets a callback for user-defined read/write splitting. The plugin will call the callback only if is the default rule for server picking in the relevant section of the plugins configuration file.";}
a:4:{i:0;s:22:"mysqlnd_qc_clear_cache";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:36:"bool mysqlnd_qc_clear_cache ( void )";i:3;s:25:"Flush all cache contents.";}
a:4:{i:0;s:33:"mysqlnd_qc_get_available_handlers";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:48:"array mysqlnd_qc_get_available_handlers ( void )";i:3;s:219:"Which storage are available depends on the compile time configuration of the query cache plugin. The storage handler is always available. All other storage handler must be enabled explicitly when building the extension.";}
a:4:{i:0;s:25:"mysqlnd_qc_get_cache_info";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:40:"array mysqlnd_qc_get_cache_info ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"mysqlnd_qc_get_core_stats";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:40:"array mysqlnd_qc_get_core_stats ( void )";i:3;s:178:"Returns an array of statistics collected by the core of the cache plugin. The same data fields will be reported for any storage handler because the data is collected by the core.";}
a:4:{i:0;s:41:"mysqlnd_qc_get_normalized_query_trace_log";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:56:"array mysqlnd_qc_get_normalized_query_trace_log ( void )";i:3;s:213:"Returns a normalized query trace log for each query inspected by the query cache. The collection of the trace log is disabled by default. To collect the trace log you have to set the PHP configuration directive to";}
a:4:{i:0;s:30:"mysqlnd_qc_get_query_trace_log";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:45:"array mysqlnd_qc_get_query_trace_log ( void )";i:3;s:196:"Returns a backtrace for each query inspected by the query cache. The collection of the backtrace is disabled by default. To collect the backtrace you have to set the PHP configuration directive to";}
a:4:{i:0;s:30:"mysqlnd_qc_set_cache_condition";i:1;s:26:"(PECL mysqlnd_qc >= 1.1.0)";i:2;s:102:"bool mysqlnd_qc_set_cache_condition ( int $condition_type, mixed $condition, mixed $condition_option )";i:3;s:124:"Sets a condition for automatic caching of statements which do not contain the necessary SQL hints to enable caching of them.";}
a:4:{i:0;s:24:"mysqlnd_qc_set_is_select";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:51:"mixed mysqlnd_qc_set_is_select ( string $callback )";i:3;s:64:"Installs a callback which decides whether a statement is cached.";}
a:4:{i:0;s:30:"mysqlnd_qc_set_storage_handler";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:55:"bool mysqlnd_qc_set_storage_handler ( string $handler )";i:3;s:328:"Sets the storage handler used by the query cache. A list of available storage handler can be obtained from . Which storage are available depends on the compile time configuration of the query cache plugin. The storage handler is always available. All other storage handler must be enabled explicitly when building the extension.";}
a:4:{i:0;s:28:"mysqlnd_qc_set_user_handlers";i:1;s:26:"(PECL mysqlnd_qc >= 1.0.0)";i:2;s:252:"bool mysqlnd_qc_set_user_handlers ( string $get_hash, string $find_query_in_cache, string $return_to_cache, string $add_query_to_cache_if_not_exists, string $query_is_select, string $update_query_run_time_stats, string $get_stats, string $clear_cache )";i:3;s:74:"Sets the callback functions for a user-defined procedural storage handler.";}
a:4:{i:0;s:31:"MysqlndUhConnection::changeUser";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:159:"public bool MysqlndUhConnection::changeUser ( mysqlnd_connection $connection, string $user, string $password, string $database, bool $silent, int $passwd_len )";i:3;s:61:"Changes the user of the specified mysqlnd database connection";}
a:4:{i:0;s:32:"MysqlndUhConnection::charsetName";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:81:"public string MysqlndUhConnection::charsetName ( mysqlnd_connection $connection )";i:3;s:62:"Returns the default character set for the database connection.";}
a:4:{i:0;s:26:"MysqlndUhConnection::close";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:90:"public bool MysqlndUhConnection::close ( mysqlnd_connection $connection, int $close_type )";i:3;s:47:"Closes a previously opened database connection.";}
a:4:{i:0;s:28:"MysqlndUhConnection::connect";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:184:"public bool MysqlndUhConnection::connect ( mysqlnd_connection $connection, string $host, string $use", string $password, string $database, int $port, string $socket, int $mysql_flags )";i:3;s:42:"Open a new connection to the MySQL server.";}
a:4:{i:0;s:32:"MysqlndUhConnection::__construct";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:48:"public MysqlndUhConnection::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"MysqlndUhConnection::endPSession";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:79:"public bool MysqlndUhConnection::endPSession ( mysqlnd_connection $connection )";i:3;s:27:"End a persistent connection";}
a:4:{i:0;s:33:"MysqlndUhConnection::escapeString";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:105:"public string MysqlndUhConnection::escapeString ( mysqlnd_connection $connection, string $escape_string )";i:3;s:126:"Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection.";}
a:4:{i:0;s:36:"MysqlndUhConnection::getAffectedRows";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:82:"public int MysqlndUhConnection::getAffectedRows ( mysqlnd_connection $connection )";i:3;s:63:"Gets the number of affected rows in a previous MySQL operation.";}
a:4:{i:0;s:35:"MysqlndUhConnection::getErrorNumber";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:81:"public int MysqlndUhConnection::getErrorNumber ( mysqlnd_connection $connection )";i:3;s:57:"Returns the error code for the most recent function call.";}
a:4:{i:0;s:35:"MysqlndUhConnection::getErrorString";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:84:"public string MysqlndUhConnection::getErrorString ( mysqlnd_connection $connection )";i:3;s:47:"Returns a string description of the last error.";}
a:4:{i:0;s:34:"MysqlndUhConnection::getFieldCount";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:80:"public int MysqlndUhConnection::getFieldCount ( mysqlnd_connection $connection )";i:3;s:56:"Returns the number of columns for the most recent query.";}
a:4:{i:0;s:39:"MysqlndUhConnection::getHostInformation";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:88:"public string MysqlndUhConnection::getHostInformation ( mysqlnd_connection $connection )";i:3;s:58:"Returns a string representing the type of connection used.";}
a:4:{i:0;s:36:"MysqlndUhConnection::getLastInsertId";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:82:"public int MysqlndUhConnection::getLastInsertId ( mysqlnd_connection $connection )";i:3;s:53:"Returns the auto generated id used in the last query.";}
a:4:{i:0;s:35:"MysqlndUhConnection::getLastMessage";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:82:"public void MysqlndUhConnection::getLastMessage ( mysqlnd_connection $connection )";i:3;s:61:"Retrieves information about the most recently executed query.";}
a:4:{i:0;s:44:"
MysqlndUhConnection::getProtocolInformation";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:92:"public string MysqlndUhConnection::getProtocolInformation ( mysqlnd_connection $connection )";i:3;s:47:"Returns the version of the MySQL protocol used.";}
a:4:{i:0;s:41:"MysqlndUhConnection::getServerInformation";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:90:"public string MysqlndUhConnection::getServerInformation ( mysqlnd_connection $connection )";i:3;s:40:"Returns the version of the MySQL server.";}
a:4:{i:0;s:40:"MysqlndUhConnection::getServerStatistics";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:89:"public string MysqlndUhConnection::getServerStatistics ( mysqlnd_connection $connection )";i:3;s:31:"Gets the current system status.";}
a:4:{i:0;s:37:"MysqlndUhConnection::getServerVersion";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:83:"public int MysqlndUhConnection::getServerVersion ( mysqlnd_connection $connection )";i:3;s:54:"Returns the version of the MySQL server as an integer.";}
a:4:{i:0;s:32:"MysqlndUhConnection::getSqlstate";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:81:"public string MysqlndUhConnection::getSqlstate ( mysqlnd_connection $connection )";i:3;s:57:"Returns the SQLSTATE error from previous MySQL operation.";}
a:4:{i:0;s:34:"MysqlndUhConnection::getStatistics";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:82:"public array MysqlndUhConnection::getStatistics ( mysqlnd_connection $connection )";i:3;s:47:"Returns statistics about the client connection.";}
a:4:{i:0;s:32:"MysqlndUhConnection::getThreadId";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:78:"public int MysqlndUhConnection::getThreadId ( mysqlnd_connection $connection )";i:3;s:49:"Returns the thread ID for the current connection.";}
a:4:{i:0;s:36:"MysqlndUhConnection::getWarningCount";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:82:"public int MysqlndUhConnection::getWarningCount ( mysqlnd_connection $connection )";i:3;s:70:"Returns the number of warnings from the last query for the given link.";}
a:4:{i:0;s:25:"MysqlndUhConnection::init";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:72:"public bool MysqlndUhConnection::init ( mysqlnd_connection $connection )";i:3;s:100:"Initialize mysqlnd connection. This is an mysqlnd internal call to initialize the connection object.";}
a:4:{i:0;s:35:"MysqlndUhConnection::killConnection";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:92:"public bool MysqlndUhConnection::killConnection ( mysqlnd_connection $connection, int $pid )";i:3;s:39:"Asks the server to kill a MySQL thread.";}
a:4:{i:0;s:31:"MysqlndUhConnection::listFields";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:116:"public array MysqlndUhConnection::listFields ( mysqlnd_connection $connection, string $table, string $achtung_wild )";i:3;s:24:"List MySQL table fields.";}
a:4:{i:0;s:31:"MysqlndUhConnection::listMethod";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:129:"public void MysqlndUhConnection::listMethod ( mysqlnd_connection $connection, string $query, string $achtung_wild, string $par1 )";i:3;s:35:"Wrapper for assorted list commands.";}
a:4:{i:0;s:32:"MysqlndUhConnection::moreResults";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:79:"public bool MysqlndUhConnection::moreResults ( mysqlnd_connection $connection )";i:3;s:61:"Check if there are any more query results from a multi query.";}
a:4:{i:0;s:31:"MysqlndUhConnection::nextResult";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:78:"public bool MysqlndUhConnection::nextResult ( mysqlnd_connection $connection )";i:3;s:37:"Prepare next result from multi_query.";}
a:4:{i:0;s:25:"MysqlndUhConnection::ping";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:72:"public bool MysqlndUhConnection::ping ( mysqlnd_connection $connection )";i:3;s:81:"Pings a server connection, or tries to reconnect if the connection has gone down.";}
a:4:{i:0;s:26:"MysqlndUhConnection::query";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:88:"public bool MysqlndUhConnection::query ( mysqlnd_connection $connection, string $query )";i:3;s:45:"Performs a query on the database (COM_QUERY).";}
a:4:{i:0;s:46:"
MysqlndUhConnection::queryReadResultsetHeader";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:125:"public bool MysqlndUhConnection::queryReadResultsetHeader ( mysqlnd_connection $connection, mysqlnd_statement $mysqlnd_stmt )";i:3;s:25:"Read a result set header.";}
a:4:{i:0;s:30:"MysqlndUhConnection::reapQuery";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:77:"public bool MysqlndUhConnection::reapQuery ( mysqlnd_connection $connection )";i:3;s:28:"Get result from async query.";}
a:4:{i:0;s:34:"MysqlndUhConnection::refreshServer";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:95:"public bool MysqlndUhConnection::refreshServer ( mysqlnd_connection $connection, int $options )";i:3;s:33:"Flush or reset tables and caches.";}
a:4:{i:0;s:36:"MysqlndUhConnection::restartPSession";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:83:"public bool MysqlndUhConnection::restartPSession ( mysqlnd_connection $connection )";i:3;s:40:"Restart a persistent mysqlnd connection.";}
a:4:{i:0;s:29:"MysqlndUhConnection::selectDb";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:94:"public bool MysqlndUhConnection::selectDb ( mysqlnd_connection $connection, string $database )";i:3;s:50:"Selects the default database for database queries.";}
a:4:{i:0;s:30:"MysqlndUhConnection::sendClose";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:77:"public bool MysqlndUhConnection::sendClose ( mysqlnd_connection $connection )";i:3;s:31:"Sends a close command to MySQL.";}
a:4:{i:0;s:30:"MysqlndUhConnection::sendQuery";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:92:"public bool MysqlndUhConnection::sendQuery ( mysqlnd_connection $connection, string $query )";i:3;s:23:"Sends a query to MySQL.";}
a:4:{i:0;s:48:"
MysqlndUhConnection::serverDumpDebugInformation";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:94:"public bool MysqlndUhConnection::serverDumpDebugInformation ( mysqlnd_connection $connection )";i:3;s:61:"Dump debugging information into the log for the MySQL server.";}
a:4:{i:0;s:34:"MysqlndUhConnection::setAutocommit";i:1;s:46:"(PECL mysqlnd-uh >= 1.0.1-alpha, PHP >=
5.4.0)";i:2;s:92:"public bool MysqlndUhConnection::setAutocommit ( mysqlnd_connection $connection, int $mode )";i:3;s:54:"Turns on or off auto-committing database modifications";}
a:4:{i:0;s:31:"MysqlndUhConnection::setCharset";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:95:"public bool MysqlndUhConnection::setCharset ( mysqlnd_connection $connection, string $charset )";i:3;s:38:"Sets the default client character set.";}
a:4:{i:0;s:36:"MysqlndUhConnection::setClientOption";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:108:"public bool MysqlndUhConnection::setClientOption ( mysqlnd_connection $connection, int $option, int $value )";i:3;s:21:"Sets a client option.";}
a:4:{i:0;s:36:"MysqlndUhConnection::setServerOption";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:96:"public void MysqlndUhConnection::setServerOption ( mysqlnd_connection $connection, int $option )";i:3;s:21:"Sets a server option.";}
a:4:{i:0;s:35:"MysqlndUhConnection::shutdownServer";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:104:"public void MysqlndUhConnection::shutdownServer ( string $MYSQLND_UH_RES_MYSQLND_NAME, string $"level" )";i:3;s:0:"";}
a:4:{i:0;s:34:"MysqlndUhConnection::simpleCommand";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:166:"public bool MysqlndUhConnection::simpleCommand ( mysqlnd_connection $connection, int $command, string $arg, int $ok_packet, bool $silent, bool $ignore_upsert_status )";i:3;s:37:"Sends a basic COM_* command to MySQL.";}
a:4:{i:0;s:49:"
MysqlndUhConnection::simpleCommandHandleResponse";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:167:"public bool MysqlndUhConnection::simpleCommandHandleResponse ( mysqlnd_connection $connection, int $ok_packet, bool $silent, int $command, bool $ignore_upsert_status )";i:3;s:64:"Process a response for a basic COM_* command send to the client.";}
a:4:{i:0;s:27:"MysqlndUhConnection::sslSet";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:145:"public bool MysqlndUhConnection::sslSet ( mysqlnd_connection $connection, string $key, string $cert, string $ca, string $capath, string $cipher )";i:3;s:51:"Used for establishing secure connections using SSL.";}
a:4:{i:0;s:29:"MysqlndUhConnection::stmtInit";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:80:"public resource MysqlndUhConnection::stmtInit ( mysqlnd_connection $connection )";i:3;s:86:"Initializes a statement and returns a resource for use with mysqli_statement::prepare.";}
a:4:{i:0;s:32:"MysqlndUhConnection::storeResult";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:83:"public resource MysqlndUhConnection::storeResult ( mysqlnd_connection $connection )";i:3;s:43:"Transfers a result set from the last query.";}
a:4:{i:0;s:29:"MysqlndUhConnection::txCommit";i:1;s:46:"(PECL mysqlnd-uh >= 1.0.1-alpha, PHP >=
5.4.0)";i:2;s:76:"public bool MysqlndUhConnection::txCommit ( mysqlnd_connection $connection )";i:3;s:32:"Commits the current transaction.";}
a:4:{i:0;s:31:"MysqlndUhConnection::txRollback";i:1;s:46:"(PECL mysqlnd-uh >= 1.0.1-alpha, PHP >=
5.4.0)";i:2;s:78:"public bool MysqlndUhConnection::txRollback ( mysqlnd_connection $connection )";i:3;s:31:"Rolls back current transaction.";}
a:4:{i:0;s:30:"MysqlndUhConnection::useResult";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:81:"public resource MysqlndUhConnection::useResult ( mysqlnd_connection $connection )";i:3;s:32:"Initiate a result set retrieval.";}
a:4:{i:0;s:39:"MysqlndUhPreparedStatement::__construct";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:55:"public MysqlndUhPreparedStatement::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"MysqlndUhPreparedStatement::execute";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:89:"public bool MysqlndUhPreparedStatement::execute ( mysqlnd_prepared_statement $statement )";i:3;s:26:"Executes a prepared Query.";}
a:4:{i:0;s:35:"MysqlndUhPreparedStatement::prepare";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:104:"public bool MysqlndUhPreparedStatement::prepare ( mysqlnd_prepared_statement $statement, string $query )";i:3;s:39:"Prepare an SQL statement for execution.";}
a:4:{i:0;s:29:"mysqlnd_uh_convert_to_mysqlnd";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:68:"resource mysqlnd_uh_convert_to_mysqlnd ( mysqli &$mysql_connection )";i:3;s:247:"Converts a MySQL connection handle into a mysqlnd connection handle. After conversion you can execute mysqlnd library calls on the connection handle. This can be used to access mysqlnd functionality not made available through user space API calls.";}
a:4:{i:0;s:31:"mysqlnd_uh_set_connection_proxy";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:111:"bool mysqlnd_uh_set_connection_proxy ( MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection ] )";i:3;s:220:"Installs a proxy object to hook mysqlnd's connection objects methods. Once installed, the proxy will be used for all MySQL connections opened with, or, assuming that the listed extensions are compiled to use the library.";}
a:4:{i:0;s:30:"mysqlnd_uh_set_statement_proxy";i:1;s:32:"(PECL mysqlnd-uh >= 1.0.0-alpha)";i:2;s:76:"bool mysqlnd_uh_set_statement_proxy ( MysqlndUhStatement &$statement_proxy )";i:3;s:231:"Installs a proxy for mysqlnd statements. The proxy object will be used for all mysqlnd prepared statement objects, regardless which PHP MySQL extension (,, ) has created them as long as the extension is compiled to use the library.";}
a:4:{i:0;s:27:"mysqlnd_memcache_get_config";i:1;s:32:"(PECL mysqlnd_memcache >= 1.0.0)";i:2;s:55:"array mysqlnd_memcache_get_config ( mixed $connection )";i:3;s:277:"This function returns an array of all mysqlnd_memcache related configuration information that is attached to the MySQL connection. This includes MySQL, the Memcache object provided via, and the table mapping configuration that was automatically collected from the MySQL Server.";}
a:4:{i:0;s:20:"mysqlnd_memcache_set";i:1;s:32:"(PECL mysqlnd_memcache >= 1.0.0)";i:2;s:132:"bool mysqlnd_memcache_set ( mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback ]]] )";i:3;s:114:"Associate with using as a PCRE regular expression, and as a notification callback or to unset the association of .";}
a:4:{i:0;s:22:"OCI-Collection::append";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:44:"bool OCI-Collection::append ( mixed $value )";i:3;s:45:"Appends element to the end of the collection.";}
a:4:{i:0;s:22:"OCI-Collection::assign";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:52:"bool OCI-Collection::assign ( OCI-Collection $from )";i:3;s:137:"Assigns a value to the collection from another, previously created collection. Both collections must be created with prior to using them.";}
a:4:{i:0;s:26:"OCI-Collection::assignElem";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:60:"bool OCI-Collection::assignElem ( int $index, mixed $value )";i:3;s:43:"Assigns a value to the element with index .";}
a:4:{i:0;s:20:"OCI-Collection::free";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:34:"bool OCI-Collection::free ( void )";i:3;s:58:"Frees the resources associated with the collection object.";}
a:4:{i:0;s:23:"OCI-Collection::getElem";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:44:"mixed OCI-Collection::getElem ( int $index )";i:3;s:49:"Returns element's value with the index (0-based).";}
a:4:{i:0;s:19:"OCI-Collection::max";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:32:"int OCI-Collection::max ( void )";i:3;s:57:"Returns the maximum number of elements in the collection.";}
a:4:{i:0;s:20:"OCI-Collection::size";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:33:"int OCI-Collection::size ( void )";i:3;s:35:"Returns the size of the collection.";}
a:4:{i:0;s:20:"OCI-Collection::trim";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:38:"bool OCI-Collection::trim ( int $num )";i:3;s:49:"Trims of elements from the end of the collection.";}
a:4:{i:0;s:15:"OCI-Lob::append";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:42:"bool OCI-Lob::append ( OCI-Lob $lob_from )";i:3;s:70:"Appends data from the large object to the end of another large object.";}
a:4:{i:0;s:14:"OCI-Lob::close";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:28:"bool OCI-Lob::close ( void )";i:3;s:74:"Closes descriptor of LOB or FILE. This function should be used only with .";}
a:4:{i:0;s:12:"OCI-Lob::eof";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:26:"bool OCI-Lob::eof ( void )";i:3;s:72:"Tells whether the internal pointer of large object is at the end of LOB.";}
a:4:{i:0;s:14:"OCI-Lob::erase";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:53:"int OCI-Lob::erase ([ int $offset [, int $length ]] )";i:3;s:131:"Erases a specified portion of the internal LOB data starting at a specified . If called without parameters, it erases all LOB data.";}
a:4:{i:0;s:15:"OCI-Lob::export";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:73:"bool OCI-Lob::export ( string $filename [, int $start [, int $length ]] )";i:3;s:31:"Exports LOB contents to a file.";}
a:4:{i:0;s:14:"OCI-Lob::flush";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:36:"bool OCI-Lob::flush ([ int $flag ] )";i:3;s:35:"actually writes data to the server.";}
a:4:{i:0;s:13:"OCI-Lob::free";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:27:"bool OCI-Lob::free ( void )";i:3;s:75:"Frees resources associated with the descriptor, previously allocated with .";}
a:4:{i:0;s:21:"OCI-Lob::getBuffering";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:35:"bool OCI-Lob::getBuffering ( void )";i:3;s:62:"Tells whether the buffering for the large object is on or off.";}
a:4:{i:0;s:15:"OCI-Lob::import";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:41:"bool OCI-Lob::import ( string $filename )";i:3;s:64:"Writes data from the in to the current position of large object.";}
a:4:{i:0;s:13:"OCI-Lob::load";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:29:"string OCI-Lob::load ( void )";i:3;s:182:"Returns large object's contents. As script execution is terminated when the is reached, ensure that the LOB does not exceed this limit. In most cases it's recommended to use instead.";}
a:4:{i:0;s:13:"OCI-Lob::read";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:36:"string OCI-Lob::read ( int $length )";i:3;s:64:"Reads bytes from the current position of LOB's internal pointer.";}
a:4:{i:0;s:15:"OCI-Lob::rewind";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:29:"bool OCI-Lob::rewind ( void )";i:3;s:63:"Sets the internal pointer to the beginning of the large object.";}
a:4:{i:0;s:13:"OCI-Lob::save";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:52:"bool OCI-Lob::save ( string $data [, int $offset ] )";i:3;s:26:"Saves to the large object.";}
a:4:{i:0;s:17:"OCI-Lob::saveFile";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:13:"OCI-Lob::seek";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:66:"bool OCI-Lob::seek ( int $offset [, int $whence = OCI_SEEK_SET ] )";i:3;s:46:"Sets the internal pointer of the large object.";}
a:4:{i:0;s:21:"OCI-Lob::setBuffering";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:43:"bool OCI-Lob::setBuffering ( bool $on_off )";i:3;s:81:"Sets the buffering for the large object, depending on the value of the parameter.";}
a:4:{i:0;s:13:"OCI-Lob::size";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:26:"int OCI-Lob::size ( void )";i:3;s:34:"Gets the size of the large object.";}
a:4:{i:0;s:13:"OCI-Lob::tell";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:26:"int OCI-Lob::tell ( void )";i:3;s:54:"Gets the current position of a LOB's internal pointer.";}
a:4:{i:0;s:17:"OCI-Lob::truncate";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:45:"bool OCI-Lob::truncate ([ int $length = 0 ] )";i:3;s:18:"Truncates the LOB.";}
a:4:{i:0;s:14:"OCI-Lob::write";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:52:"int OCI-Lob::write ( string $data [, int $length ] )";i:3;s:83:"Writes data from the parameter into the current position of LOB's internal pointer.";}
a:4:{i:0;s:23:"OCI-Lob::writeTemporary";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:80:"bool OCI-Lob::writeTemporary ( string $data [, int $lob_type = OCI_TEMP_CLOB ] )";i:3;s:50:"Creates a temporary large object and writes to it.";}
a:4:{i:0;s:20:"OCI-Lob::writeToFile";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:22:"oci_bind_array_by_name";i:1;s:36:"(PHP 5 >= 5.1.2, PECL OCI8 >= 1.2.0)";i:2;s:163:"bool oci_bind_array_by_name ( resource $statement, string $name, array &$var_array, int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC ]] )";i:3;s:162:"Binds the PHP array to the Oracle placeholder, which points to an Oracle PL/SQL array. Whether it will be used for input or output will be determined at run-time.";}
a:4:{i:0;s:16:"oci_bind_by_name";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:130:"bool oci_bind_by_name ( resource $statement, string $bv_name, mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]] )";i:3;s:173:"Binds a PHP variable to the Oracle bind variable placeholder . Binding is important for Oracle database performance and also as a way to avoid SQL Injection security issues.";}
a:4:{i:0;s:10:"oci_cancel";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:39:"bool oci_cancel ( resource $statement )";i:3;s:95:"Invalidates a cursor, freeing all associated resources and cancels the ability to read from it.";}
a:4:{i:0;s:18:"oci_client_version";i:1;s:31:"(PHP 5.3.7, PECL OCI8 >= 1.4.6)";i:2;s:34:"string oci_client_version ( void )";i:3;s:102:"Returns a string containing the version number of the Oracle C client library that PHP is linked with.";}
a:4:{i:0;s:9:"oci_close";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:39:"bool oci_close ( resource $connection )";i:3;s:120:"Unsets . The underlying database connection is closed if no other resources are using it and if it was created with or .";}
a:4:{i:0;s:10:"oci_commit";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:40:"bool oci_commit ( resource $connection )";i:3;s:151:"Commits the outstanding transaction for the Oracle . A commit ends the current transaction and makes permanent all changes. It releases all locks held.";}
a:4:{i:0;s:11:"oci_connect";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:138:"resource oci_connect ( string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )";i:3;s:70:"Returns a connection identifier needed for most other OCI8 operations.";}
a:4:{i:0;s:18:"oci_define_by_name";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:112:"bool oci_define_by_name ( resource $statement, string $column_name, mixed &$variable [, int $type = SQLT_CHR ] )";i:3;s:65:"Associates a PHP variable with a column for query fetches using .";}
a:4:{i:0;s:9:"oci_error";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:41:"array oci_error ([ resource $resource ] )";i:3;s:29:"Returns the last error found.";}
a:4:{i:0;s:11:"oci_execute";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:79:"bool oci_execute ( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ] )";i:3;s:37:"Executes a previously returned from .";}
a:4:{i:0;s:13:"oci_fetch_all";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:156:"int oci_fetch_all ( resource $statement, array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ]]] )";i:3;s:99:"Fetches multiple rows from a query into a two-dimensional array. By default, all rows are returned.";}
a:4:{i:0;s:15:"oci_fetch_array";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:60:"array oci_fetch_array ( resource $statement [, int $mode ] )";i:3;s:209:"Returns an array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns, indicating no more rows exist.";}
a:4:{i:0;s:15:"oci_fetch_assoc";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:45:"array oci_fetch_assoc ( resource $statement )";i:3;s:221:"Returns an associative array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns, indicating no more rows exist.";}
a:4:{i:0;s:16:"oci_fetch_object";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:47:"object oci_fetch_object ( resource $statement )";i:3;s:222:"Returns an object containing the next result-set row of a query. Each attribute of the object corresponds to a column of the row. This function is typically called in a loop until it returns, indicating no more rows exist.";}
a:4:{i:0;s:13:"oci_fetch_row";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:43:"array oci_fetch_row ( resource $statement )";i:3;s:228:"Returns a numerically indexed array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns, indicating no more rows exist.";}
a:4:{i:0;s:9:"oci_fetch";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:38:"bool oci_fetch ( resource $statement )";i:3;s:127:"Fetches the next row from a query into internal buffers accessible either with, or by using variables previously defined with .";}
a:4:{i:0;s:17:"oci_field_is_null";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:60:"bool oci_field_is_null ( resource $statement, mixed $field )";i:3;s:33:"Checks if the given from the is .";}
a:4:{i:0;s:14:"oci_field_name";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:57:"string oci_field_name ( resource $statement, int $field )";i:3;s:25:"Returns the name of the .";}
a:4:{i:0;s:19:"oci_field_precision";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:59:"int oci_field_precision ( resource $statement, int $field )";i:3;s:26:"Returns precision of the .";}
a:4:{i:0;s:15:"oci_field_scale";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:55:"int oci_field_scale ( resource $statement, int $field )";i:3;s:43:"Returns the scale of the column with index.";}
a:4:{i:0;s:14:"oci_field_size";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:56:"int oci_field_size ( resource $statement, mixed $field )";i:3;s:23:"Returns the size of a .";}
a:4:{i:0;s:18:"oci_field_type_raw";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:58:"int oci_field_type_raw ( resource $statement, int $field )";i:3;s:39:"Returns Oracle's raw data type of the .";}
a:4:{i:0;s:14:"oci_field_type";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:56:"mixed oci_field_type ( resource $statement, int $field )";i:3;s:28:"Returns a field's data type.";}
a:4:{i:0;s:19:"oci_free_descriptor";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:49:"bool oci_free_descriptor ( resource $descriptor )";i:3;s:33:"Frees a descriptor allocated by .";}
a:4:{i:0;s:18:"oci_free_statement";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:47:"bool oci_free_statement ( resource $statement )";i:3;s:125:"Frees resources associated with Oracle's cursor or statement, which was received from as a result of or obtained from Oracle.";}
a:4:{i:0;s:18:"oci_internal_debug";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:39:"void oci_internal_debug ( bool $onoff )";i:3;s:42:"Enables or disables internal debug output.";}
a:4:{i:0;s:12:"oci_lob_copy";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:77:"bool oci_lob_copy ( OCI-Lob $lob_to, OCI-Lob $lob_from [, int $length = 0 ] )";i:3;s:118:"Copies a large object or a part of a large object to another large object. Old LOB-recipient data will be overwritten.";}
a:4:{i:0;s:16:"oci_lob_is_equal";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:54:"bool oci_lob_is_equal ( OCI-Lob $lob1, OCI-Lob $lob2 )";i:3;s:31:"Compares two LOB/FILE locators.";}
a:4:{i:0;s:18:"oci_new_collection";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:98:"OCI-Collection oci_new_collection ( resource $connection, string $tdo [, string $schema = NULL ] )";i:3;s:34:"Allocates a new collection object.";}
a:4:{i:0;s:15:"oci_new_connect";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:142:"resource oci_new_connect ( string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )";i:3;s:61:"Establishes a new connection to an Oracle server and logs on.";}
a:4:{i:0;s:14:"oci_new_cursor";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:48:"resource oci_new_cursor ( resource $connection )";i:3;s:61:"Allocates a new statement handle on the specified connection.";}
a:4:{i:0;s:18:"oci_new_descriptor";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:82:"OCI-Lob oci_new_descriptor ( resource $connection [, int $type = OCI_DTYPE_LOB ] )";i:3;s:54:"Allocates resources to hold descriptor or LOB locator.";}
a:4:{i:0;s:14:"oci_num_fields";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:42:"int oci_num_fields ( resource $statement )";i:3;s:41:"Gets the number of columns in the given .";}
a:4:{i:0;s:12:"oci_num_rows";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:40:"int oci_num_rows ( resource $statement )";i:3;s:60:"Gets the number of rows affected during statement execution.";}
a:4:{i:0;s:9:"oci_parse";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:61:"resource oci_parse ( resource $connection, string $sql_text )";i:3;s:97:"Prepares using and returns the statement identifier, which can be used with, and other functions.";}
a:4:{i:0;s:19:"oci_password_change";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:111:"bool oci_password_change ( resource $connection, string $username, string $old_password, string $new_password )";i:3;s:32:"Changes password for user with .";}
a:4:{i:0;s:12:"oci_pconnect";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:139:"resource oci_pconnect ( string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )";i:3;s:64:"Creates a persistent connection to an Oracle server and logs on.";}
a:4:{i:0;s:10:"oci_result";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:54:"mixed oci_result ( resource $statement, mixed $field )";i:3;s:54:"Returns the data from in the current row, fetched by .";}
a:4:{i:0;s:12:"oci_rollback";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:42:"bool oci_rollback ( resource $connection )";i:3;s:123:"Reverts all uncommitted changes for the Oracle and ends the transaction. It releases all locks held. All Oracle are erased.";}
a:4:{i:0;s:18:"oci_server_version";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:50:"string oci_server_version ( resource $connection )";i:3;s:71:"Returns a string with the Oracle Database version and available options";}
a:4:{i:0;s:14:"oci_set_action";i:1;s:31:"(PHP 5.3.2, PECL OCI8 >= 1.4.0)";i:2;s:65:"bool oci_set_action ( resource $connection, string $action_name )";i:3;s:40:"Sets the action name for Oracle tracing.";}
a:4:{i:0;s:25:"oci_set_client_identifier";i:1;s:31:"(PHP 5.3.2, PECL OCI8 >= 1.4.0)";i:2;s:82:"bool oci_set_client_identifier ( resource $connection, string $client_identifier )";i:3;s:148:"Sets the client identifier used by various database components to identify lightweight application users who authenticate as the same database user.";}
a:4:{i:0;s:19:"oci_set_client_info";i:1;s:31:"(PHP 5.3.2, PECL OCI8 >= 1.4.0)";i:2;s:70:"bool oci_set_client_info ( resource $connection, string $client_info )";i:3;s:47:"Sets the client information for Oracle tracing.";}
a:4:{i:0;s:15:"oci_set_edition";i:1;s:31:"(PHP 5.3.2, PECL OCI8 >= 1.4.0)";i:2;s:40:"bool oci_set_edition ( string $edition )";i:3;s:78:"Sets the database "edition" of objects to be used by a subsequent connections.";}
a:4:{i:0;s:19:"oci_set_module_name";i:1;s:31:"(PHP 5.3.2, PECL OCI8 >= 1.4.0)";i:2;s:70:"bool oci_set_module_name ( resource $connection, string $module_name )";i:3;s:40:"Sets the module name for Oracle tracing.";}
a:4:{i:0;s:16:"oci_set_prefetch";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:56:"bool oci_set_prefetch ( resource $statement, int $rows )";i:3;s:312:"Sets the number of rows to be buffered by the Oracle Client libraries after a successful query call to and for each subsequent internal fetch request to the database. For queries returning a large number of rows, performance can be significantly improved by increasing the prefetch count above the default value.";}
a:4:{i:0;s:18:"oci_statement_type";i:1;s:27:"(PHP 5, PECL OCI8 >= 1.1.0)";i:2;s:49:"string oci_statement_type ( resource $statement )";i:3;s:52:"Returns a keyword identifying the type of the OCI8 .";}
a:4:{i:0;s:13:"ocibindbyname";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:9:"ocicancel";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:11:"ocicloselob";i:1;s:31:"(PHP 4 >= 4.0.6, PECL OCI8 1.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:13:"ocicollappend";i:1;s:43:"(PHP 4 >= 4.0.6, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:13:"ocicollassign";i:1;s:31:"(PHP 4 >= 4.0.6, PECL OCI8 1.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:17:"ocicollassignelem";i:1;s:43:"(PHP 4 >= 4.0.6, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:14:"ocicollgetelem";i:1;s:43:"(PHP 4 >= 4.0.6, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:10:"ocicollmax";i:1;s:43:"(PHP 4 >= 4.0.6, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:11:"ocicollsize";i:1;s:43:"(PHP 4 >= 4.0.6, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:11:"ocicolltrim";i:1;s:43:"(PHP 4 >= 4.0.6, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:15:"ocicolumnisnull";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:13:"ocicolumnname";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:18:"ocicolumnprecision";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:14:"ocicolumnscale";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:13:"ocicolumnsize";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:13:"ocicolumntype";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:16:"ocicolumntyperaw";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:9:"ocicommit";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:15:"ocidefinebyname";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:8:"ocierror";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:10:"ociexecute";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:8:"ocifetch";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:12:"ocifetchinto";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:93:"int ocifetchinto ( resource $statement, array &$result [, int $mode = OCI_ASSOC + OCI_NUM ] )";i:3;s:63:"This function is deprecated. Recommended alternatives:, , and .";}
a:4:{i:0;s:17:"ocifetchstatement";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:17:"ocifreecollection";i:1;s:43:"(PHP 4 >= 4.0.7, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:13:"ocifreecursor";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:11:"ocifreedesc";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:16:"ocifreestatement";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:16:"ociinternaldebug";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:10:"ociloadlob";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:9:"ocilogoff";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:8:"ocilogon";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:16:"ocinewcollection";i:1;s:43:"(PHP 4 >= 4.0.6, PHP 5, PECL OCI8 >=
1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:12:"ocinewcursor";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:16:"ocinewdescriptor";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:9:"ocinlogon";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:10:"ocinumcols";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:8:"ociparse";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:9:"ociplogon";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:9:"ociresult";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:11:"ocirollback";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:11:"ocirowcount";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:10:"ocisavelob";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:14:"ocisavelobfile";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:16:"ociserverversion";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:14:"ocisetprefetch";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:16:"ocistatementtype";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:17:"ociwritelobtofile";i:1;s:34:"(PHP 4, PHP 5, PECL OCI8 >= 1.0.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:20:"ociwritetemporarylob";i:1;s:31:"(PHP 4 >= 4.0.6, PECL OCI8 1.0)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.";i:3;s:0:"";}
a:4:{i:0;s:13:"ovrimos_close";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:38:"void ovrimos_close ( int $connection )";i:3;s:94:"Closes the specified to Ovrimos. This has the effect of rolling back uncommitted transactions.";}
a:4:{i:0;s:14:"ovrimos_commit";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:42:"bool ovrimos_commit ( int $connection_id )";i:3;s:24:"Commits the transaction.";}
a:4:{i:0;s:15:"ovrimos_connect";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:86:"int ovrimos_connect ( string $host, string $dborport, string $user, string $password )";i:3;s:35:"Connects to the specified database.";}
a:4:{i:0;s:14:"ovrimos_cursor";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:40:"string ovrimos_cursor ( int $result_id )";i:3;s:90:"Gets the name of the cursor. Useful when wishing to perform positioned updates or deletes.";}
a:4:{i:0;s:12:"ovrimos_exec";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:54:"int ovrimos_exec ( int $connection_id, string $query )";i:3;s:76:"Executes an SQL statement (query or update) and returns a result identifier.";}
a:4:{i:0;s:15:"ovrimos_execute";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:68:"bool ovrimos_execute ( int $result_id [, array $parameters_array ] )";i:3;s:30:"Executes a prepared statement.";}
a:4:{i:0;s:18:"ovrimos_fetch_into";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:100:"bool ovrimos_fetch_into ( int $result_id, array &$result_array [, string $how [, int $rownumber ]] )";i:3;s:47:"Fetches a row from the given result set, into .";}
a:4:{i:0;s:17:"ovrimos_fetch_row";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:75:"bool ovrimos_fetch_row ( int $result_id [, int $how [, int $row_number ]] )";i:3;s:86:"Fetches a row from the result set. Column values should be retrieved with other calls.";}
a:4:{i:0;s:17:"ovrimos_field_len";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:59:"int ovrimos_field_len ( int $result_id, int $field_number )";i:3;s:47:"Gets the length of the specified output column.";}
a:4:{i:0;s:18:"ovrimos_field_name";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:63:"string ovrimos_field_name ( int $result_id, int $field_number )";i:3;s:54:"Returns the output column name at the index specified.";}
a:4:{i:0;s:17:"ovrimos_field_num";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:60:"int ovrimos_field_num ( int $result_id, string $field_name )";i:3;s:57:"Returns the 1-based index of the specified output column.";}
a:4:{i:0;s:18:"ovrimos_field_type";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:60:"int ovrimos_field_type ( int $result_id, int $field_number )";i:3;s:37:"Returns the type of the output column";}
a:4:{i:0;s:19:"ovrimos_free_result";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:43:"bool ovrimos_free_result ( int $result_id )";i:3;s:38:"Frees the specified result identifier.";}
a:4:{i:0;s:19:"ovrimos_longreadlen";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:56:"bool ovrimos_longreadlen ( int $result_id, int $length )";i:3;s:99:"Specifies how many bytes are to be retrieved from long datatypes (long varchar and long varbinary).";}
a:4:{i:0;s:18:"ovrimos_num_fields";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:41:"int ovrimos_num_fields ( int $result_id )";i:3;s:65:"Returns the number of columns in the specified result identifier.";}
a:4:{i:0;s:16:"ovrimos_num_rows";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:39:"int ovrimos_num_rows ( int $result_id )";i:3;s:54:"Gets the number of rows affected by update operations.";}
a:4:{i:0;s:15:"ovrimos_prepare";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:57:"int ovrimos_prepare ( int $connection_id, string $query )";i:3;s:26:"Prepares an SQL statement.";}
a:4:{i:0;s:18:"ovrimos_result_all";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:61:"int ovrimos_result_all ( int $result_id [, string $format ] )";i:3;s:45:"Prints the whole result set as an HTML table.";}
a:4:{i:0;s:14:"ovrimos_result";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:54:"string ovrimos_result ( int $result_id, mixed $field )";i:3;s:42:"Retrieves the output column specified by .";}
a:4:{i:0;s:16:"ovrimos_rollback";i:1;s:32:"(PHP 4 >= 4.0.3, PHP 5 <= 5.0.5)";i:2;s:44:"bool ovrimos_rollback ( int $connection_id )";i:3;s:27:"Rolls back the transaction.";}
a:4:{i:0;s:8:"px_close";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:33:"bool px_close ( resource $pxdoc )";i:3;s:101:"Closes the paradox database. This function will not close the file. You will have to call afterwards.";}
a:4:{i:0;s:12:"px_create_fp";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:71:"bool px_create_fp ( resource $pxdoc, resource $file, array $fielddesc )";i:3;s:114:"Create a new paradox database file. The actual file has to be opened before with . Make sure the file is writable.";}
a:4:{i:0;s:14:"px_date2string";i:1;s:23:"(PECL paradox >= 1.4.0)";i:2;s:69:"string px_date2string ( resource $pxdoc, int $value, string $format )";i:3;s:269:"Turns a date as it stored in the paradox file into human readable format. Paradox dates are the number of days since 1.1.0000. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the example below.";}
a:4:{i:0;s:16:"px_delete_record";i:1;s:23:"(PECL paradox >= 1.4.0)";i:2;s:51:"bool px_delete_record ( resource $pxdoc, int $num )";i:3;s:183:"This function deletes a record from the database. It does not free the space in the database file but just marks it as deleted. Inserting a new record afterwards will reuse the space.";}
a:4:{i:0;s:9:"px_delete";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:34:"bool px_delete ( resource $pxdoc )";i:3;s:62:"Deletes the resource of the paradox file and frees all memory.";}
a:4:{i:0;s:12:"px_get_field";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:52:"array px_get_field ( resource $pxdoc, int $fieldno )";i:3;s:0:"";}
a:4:{i:0;s:11:"px_get_info";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:37:"array px_get_info ( resource $pxdoc )";i:3;s:0:"";}
a:4:{i:0;s:16:"px_get_parameter";i:1;s:23:"(PECL paradox >= 1.1.0)";i:2;s:57:"string px_get_parameter ( resource $pxdoc, string $name )";i:3;s:24:"Gets various parameters.";}
a:4:{i:0;s:13:"px_get_record";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:68:"array px_get_record ( resource $pxdoc, int $num [, int $mode = 0 ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"px_get_schema";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:58:"array px_get_schema ( resource $pxdoc [, int $mode = 0 ] )";i:3;s:28:"returns the database schema.";}
a:4:{i:0;s:12:"px_get_value";i:1;s:23:"(PECL paradox >= 1.1.0)";i:2;s:52:"float px_get_value ( resource $pxdoc, string $name )";i:3;s:20:"Gets various values.";}
a:4:{i:0;s:16:"px_insert_record";i:1;s:23:"(PECL paradox >= 1.4.0)";i:2;s:53:"int px_insert_record ( resource $pxdoc, array $data )";i:3;s:191:"Inserts a new record into the database. The record is not necessarily inserted at the end of the database, but may be inserted at any position depending on where the first free slot is found.";}
a:4:{i:0;s:6:"px_new";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:24:"resource px_new ( void )";i:3;s:269:"Create a new paradox object. You will have to call this function before any further functions. does not create any file on the disk, it just creates an instance of a paradox object. This function must not be called if the object oriented interface is used. Use instead.";}
a:4:{i:0;s:12:"px_numfields";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:36:"int px_numfields ( resource $pxdoc )";i:3;s:44:"Get the number of fields in a database file.";}
a:4:{i:0;s:13:"px_numrecords";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:37:"int px_numrecords ( resource $pxdoc )";i:3;s:45:"Get the number of records in a database file.";}
a:4:{i:0;s:10:"px_open_fp";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:51:"bool px_open_fp ( resource $pxdoc, resource $file )";i:3;s:319:"Open an existing paradox database file. The actual file has to be opened before with . This function can also be used to open primary index files and tread them like a paradox database. This is supported for those who would like to investigate a primary index. It cannot be used to accelerate access to a database file.";}
a:4:{i:0;s:13:"px_put_record";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:75:"bool px_put_record ( resource $pxdoc, array $record [, int $recpos = -1 ] )";i:3;s:197:"Stores a record into a paradox database. The record is always added at the end of the database, regardless of any free slots. Use to add a new record into the first free slot found in the database.";}
a:4:{i:0;s:18:"px_retrieve_record";i:1;s:23:"(PECL paradox >= 1.4.0)";i:2;s:73:"array px_retrieve_record ( resource $pxdoc, int $num [, int $mode = 0 ] )";i:3;s:206:"This function is very similar to but uses internally a different approach to retrieve the data. It relies on pxlib for reading each single field value, which usually results in support for more field types.";}
a:4:{i:0;s:16:"px_set_blob_file";i:1;s:23:"(PECL paradox >= 1.3.0)";i:2;s:59:"bool px_set_blob_file ( resource $pxdoc, string $filename )";i:3;s:312:"Sets the name of the file where blobs are going to be read from or written into. Without calling this function, or will only return data in blob fields if the data is part of the record and not stored in the blob file. Blob data is stored in the record if it is small enough to fit in the size of the blob field.";}
a:4:{i:0;s:16:"px_set_parameter";i:1;s:23:"(PECL paradox >= 1.1.0)";i:2;s:70:"bool px_set_parameter ( resource $pxdoc, string $name, string $value )";i:3;s:24:"Sets various parameters.";}
a:4:{i:0;s:16:"px_set_tablename";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:55:"void px_set_tablename ( resource $pxdoc, string $name )";i:3;s:108:"Sets the table name of a paradox database, which was created with . This function is deprecated use instead.";}
a:4:{i:0;s:21:"px_set_targetencoding";i:1;s:23:"(PECL paradox >= 1.0.0)";i:2;s:64:"bool px_set_targetencoding ( resource $pxdoc, string $encoding )";i:3;s:377:"Set the encoding for data retrieved from a character field. All character fields will be recoded to the encoding set by this function. If the encoding is not set, the character data will be returned in the DOS code page encoding as specified in the database file. The can be any string identifier known to iconv or recode. On Unix systems run for a list of available encodings.";}
a:4:{i:0;s:12:"px_set_value";i:1;s:23:"(PECL paradox >= 1.1.0)";i:2;s:65:"bool px_set_value ( resource $pxdoc, string $name, float $value )";i:3;s:20:"Sets various values.";}
a:4:{i:0;s:19:"px_timestamp2string";i:1;s:23:"(PECL paradox >= 1.4.0)";i:2;s:76:"string px_timestamp2string ( resource $pxdoc, float $value, string $format )";i:3;s:292:"Turns a timestamp as it stored in the paradox file into human readable format. Paradox timestamps are the number of miliseconds since 0001-01-02. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the following example.";}
a:4:{i:0;s:16:"px_update_record";i:1;s:23:"(PECL paradox >= 1.4.0)";i:2;s:64:"bool px_update_record ( resource $pxdoc, array $data, int $num )";i:3;s:66:"Updates an exiting record in the database. The record starts at 0.";}
a:4:{i:0;s:16:"pg_affected_rows";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:41:"int pg_affected_rows ( resource $result )";i:3;s:81:"returns the number of tuples (instances/records/rows) affected by, , and queries.";}
a:4:{i:0;s:15:"pg_cancel_query";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:45:"bool pg_cancel_query ( resource $connection )";i:3;s:88:"cancels an asynchronous query sent with, or . You cannot cancel a query executed using .";}
a:4:{i:0;s:18:"pg_client_encoding";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:53:"string pg_client_encoding ([ resource $connection ] )";i:3;s:230:"PostgreSQL supports automatic character set conversion between server and client for certain character sets. returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers.";}
a:4:{i:0;s:8:"pg_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"bool pg_close ([ resource $connection ] )";i:3;s:97:"closes the non-persistent connection to a PostgreSQL database associated with the given resource.";}
a:4:{i:0;s:10:"pg_connect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:72:"resource pg_connect ( string $connection_string [, int $connect_type ] )";i:3;s:62:"opens a connection to a PostgreSQL database specified by the .";}
a:4:{i:0;s:18:"pg_connection_busy";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:48:"bool pg_connection_busy ( resource $connection )";i:3;s:149:"determines whether or not a connection is busy. If it is busy, a previous query is still executing. If is used on the connection, it will be blocked.";}
a:4:{i:0;s:19:"pg_connection_reset";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:49:"bool pg_connection_reset ( resource $connection )";i:3;s:55:"resets the connection. It is useful for error recovery.";}
a:4:{i:0;s:20:"pg_connection_status";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:49:"int pg_connection_status ( resource $connection )";i:3;s:37:"returns the status of the specified .";}
a:4:{i:0;s:10:"pg_convert";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:103:"array pg_convert ( resource $connection, string $table_name, array $assoc_array [, int $options = 0 ] )";i:3;s:342:"checks and converts the values in into suitable values for use in an SQL statement. Precondition for is the existence of a table which has at least as many columns as has elements. The fieldnames in must match the indices in and the corresponding datatypes must be compatible. Returns an array with the converted values on success, otherwise.";}
a:4:{i:0;s:12:"pg_copy_from";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:118:"bool pg_copy_from ( resource $connection, string $table_name, array $rows [, string $delimiter [, string $null_as ]] )";i:3;s:89:"inserts records into a table from . It issues a SQL command internally to insert records.";}
a:4:{i:0;s:10:"pg_copy_to";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:104:"array pg_copy_to ( resource $connection, string $table_name [, string $delimiter [, string $null_as ]] )";i:3;s:81:"copies a table to an array. It issues SQL command internally to retrieve records.";}
a:4:{i:0;s:9:"pg_dbname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"string pg_dbname ([ resource $connection ] )";i:3;s:68:"returns the name of the database that the given PostgreSQL resource.";}
a:4:{i:0;s:9:"pg_delete";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:115:"mixed pg_delete ( resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC ] )";i:3;s:125:"deletes records from a table specified by the keys and values in . If is specified, is applied to with the specified options.";}
a:4:{i:0;s:11:"pg_end_copy";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:44:"bool pg_end_copy ([ resource $connection ] )";i:3;s:243:"syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by . must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.";}
a:4:{i:0;s:15:"pg_escape_bytea";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:64:"string pg_escape_bytea ([ resource $connection ], string $data )";i:3;s:61:"escapes string for bytea datatype. It returns escaped string.";}
a:4:{i:0;s:20:"pg_escape_identifier";i:1;s:16:"(PHP 5 >= 5.4.4)";i:2;s:69:"string pg_escape_identifier ([ resource $connection ], string $data )";i:3;s:396:"escapes a identifier (e.g. table, field names) for quering the database. It returns an escaped identifier string for PostgreSQL server. adds double quotes before and after data. Users should not add double quotes. Use of this function is recommended for identifier parameters in query. For SQL literals (i.e. parameters except bytea), or muse be used. For bytea type fields, must be used instead.";}
a:4:{i:0;s:17:"pg_escape_literal";i:1;s:16:"(PHP 5 >= 5.4.4)";i:2;s:66:"string pg_escape_literal ([ resource $connection ], string $data )";i:3;s:348:"escapes a literal for querying the PostgreSQL database. It returns an escaped literal in the PostgreSQL format. adds quotes before and after data. Users should not add quotes. Use of this function is recommended instead of . If the type of the column is bytea, must be used instead. For escaping identifiers (e.g. table, field names), must be used.";}
a:4:{i:0;s:16:"pg_escape_string";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:65:"string pg_escape_string ([ resource $connection ], string $data )";i:3;s:335:"escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes. is more preferred way to escape SQL parameters for PostgreSQL. must not be used with PostgreSQL. If the type of the column is bytea, must be used instead. must be used to escape identifiers (e.g. table names, field names)";}
a:4:{i:0;s:10:"pg_execute";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:80:"resource pg_execute ([ resource $connection ], string $stmtname, array $params )";i:3;s:96:"Sends a request to execute a prepared statement with given parameters, and waits for the result.";}
a:4:{i:0;s:20:"pg_fetch_all_columns";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:68:"array pg_fetch_all_columns ( resource $result [, int $column = 0 ] )";i:3;s:96:"returns an array that contains all rows (records) in a particular column of the result resource.";}
a:4:{i:0;s:12:"pg_fetch_all";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:39:"array pg_fetch_all ( resource $result )";i:3;s:73:"returns an array that contains all rows (records) in the result resource.";}
a:4:{i:0;s:14:"pg_fetch_array";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:89:"array pg_fetch_array ( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] )";i:3;s:62:"returns an array that corresponds to the fetched row (record).";}
a:4:{i:0;s:14:"pg_fetch_assoc";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:55:"array pg_fetch_assoc ( resource $result [, int $row ] )";i:3;s:75:"returns an associative array that corresponds to the fetched row (records).";}
a:4:{i:0;s:15:"pg_fetch_object";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:92:"object pg_fetch_object ( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]] )";i:3;s:193:"returns an object with properties that correspond to the fetched row's field names. It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor.";}
a:4:{i:0;s:15:"pg_fetch_result";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:67:"string pg_fetch_result ( resource $result, int $row, mixed $field )";i:3;s:89:"returns the value of a particular row and field (column) in a PostgreSQL result resource.";}
a:4:{i:0;s:12:"pg_fetch_row";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"array pg_fetch_row ( resource $result [, int $row ] )";i:3;s:79:"fetches one row of data from the result associated with the specified resource.";}
a:4:{i:0;s:16:"pg_field_is_null";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:65:"int pg_field_is_null ( resource $result, int $row, mixed $field )";i:3;s:63:"tests if a field in a PostgreSQL result resource is SQL or not.";}
a:4:{i:0;s:13:"pg_field_name";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:60:"string pg_field_name ( resource $result, int $field_number )";i:3;s:114:"returns the name of the field occupying the given in the given PostgreSQL resource. Field numbering starts from 0.";}
a:4:{i:0;s:12:"pg_field_num";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:57:"int pg_field_num ( resource $result, string $field_name )";i:3;s:100:"will return the number of the field number that corresponds to the in the given PostgreSQL resource.";}
a:4:{i:0;s:15:"pg_field_prtlen";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:86:"int pg_field_prtlen ( resource $result, int $row_number, mixed $field_name_or_number )";i:3;s:160:"returns the actual printed length (number of characters) of a specific value in a PostgreSQL . Row numbering starts at 0. This function will return on an error.";}
a:4:{i:0;s:13:"pg_field_size";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:57:"int pg_field_size ( resource $result, int $field_number )";i:3;s:90:"returns the internal storage size (in bytes) of the field number in the given PostgreSQL .";}
a:4:{i:0;s:14:"pg_field_table";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:88:"mixed pg_field_table ( resource $result, int $field_number [, bool $oid_only = false ] )";i:3;s:79:"returns the name of the table that field belongs to, or the table's oid if is .";}
a:4:{i:0;s:17:"pg_field_type_oid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:61:"int pg_field_type_oid ( resource $result, int $field_number )";i:3;s:101:"returns an integer containing the OID of the base type of the given in the given PostgreSQL resource.";}
a:4:{i:0;s:13:"pg_field_type";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:60:"string pg_field_type ( resource $result, int $field_number )";i:3;s:93:"returns a string containing the base type name of the given in the given PostgreSQL resource.";}
a:4:{i:0;s:14:"pg_free_result";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:40:"bool pg_free_result ( resource $result )";i:3;s:81:"frees the memory and data associated with the specified PostgreSQL query result .";}
a:4:{i:0;s:13:"pg_get_notify";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:66:"array pg_get_notify ( resource $connection [, int $result_type ] )";i:3;s:104:"gets notifications generated by a SQL command. To receive notifications, the SQL command must be issued.";}
a:4:{i:0;s:10:"pg_get_pid";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:39:"int pg_get_pid ( resource $connection )";i:3;s:155:"gets the backend's (database server process) PID. The PID is useful to determine whether or not a message received via is sent from another process or not.";}
a:4:{i:0;s:13:"pg_get_result";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:50:"resource pg_get_result ([ resource $connection ] )";i:3;s:69:"gets the result resource from an asynchronous query executed by, or .";}
a:4:{i:0;s:7:"pg_host";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"string pg_host ([ resource $connection ] )";i:3;s:71:"returns the host name of the given PostgreSQL resource is connected to.";}
a:4:{i:0;s:9:"pg_insert";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:115:"mixed pg_insert ( resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC ] )";i:3;s:110:"inserts the values of into the table specified by . If is specified, is applied to with the specified options.";}
a:4:{i:0;s:13:"pg_last_error";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:48:"string pg_last_error ([ resource $connection ] )";i:3;s:44:"returns the last error message for a given .";}
a:4:{i:0;s:14:"pg_last_notice";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:46:"string pg_last_notice ( resource $connection )";i:3;s:187:"returns the last notice message from the PostgreSQL server on the specified . The PostgreSQL server sends notice messages in several cases, for instance when creating a column in a table.";}
a:4:{i:0;s:11:"pg_last_oid";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:39:"string pg_last_oid ( resource $result )";i:3;s:52:"is used to retrieve the assigned to an inserted row.";}
a:4:{i:0;s:11:"pg_lo_close";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:43:"bool pg_lo_close ( resource $large_object )";i:3;s:64:"closes a large object. is a resource for the large object from .";}
a:4:{i:0;s:12:"pg_lo_create";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:65:"int pg_lo_create ([ resource $connection [, mixed $object_id ]] )";i:3;s:236:"creates a large object and returns the of the large object. PostgreSQL access modes, , and are not supported, the object is created always with both read and write access. has been removed from PostgreSQL itself (version 6.3 and above).";}
a:4:{i:0;s:12:"pg_lo_export";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:73:"bool pg_lo_export ([ resource $connection ], int $oid, string $pathname )";i:3;s:103:"takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem.";}
a:4:{i:0;s:12:"pg_lo_import";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:84:"int pg_lo_import ([ resource $connection ], string $pathname [, mixed $object_id ] )";i:3;s:93:"creates a new large object in the database using a file on the filesystem as its data source.";}
a:4:{i:0;s:10:"pg_lo_open";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:68:"resource pg_lo_open ( resource $connection, int $oid, string $mode )";i:3;s:101:"opens a large object in the database and returns large object resource so that it can be manipulated.";}
a:4:{i:0;s:14:"pg_lo_read_all";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:45:"int pg_lo_read_all ( resource $large_object )";i:3;s:163:"reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound.";}
a:4:{i:0;s:10:"pg_lo_read";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:65:"string pg_lo_read ( resource $large_object [, int $len = 8192 ] )";i:3;s:61:"reads at most bytes from a large object and returns it as a .";}
a:4:{i:0;s:10:"pg_lo_seek";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:89:"bool pg_lo_seek ( resource $large_object, int $offset [, int $whence = PGSQL_SEEK_CUR ] )";i:3;s:48:"seeks a position within a large object resource.";}
a:4:{i:0;s:10:"pg_lo_tell";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:41:"int pg_lo_tell ( resource $large_object )";i:3;s:75:"returns the current position (offset from the beginning) of a large object.";}
a:4:{i:0;s:12:"pg_lo_unlink";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:52:"bool pg_lo_unlink ( resource $connection, int $oid )";i:3;s:67:"deletes a large object with the . Returns on success or on failure.";}
a:4:{i:0;s:11:"pg_lo_write";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:70:"int pg_lo_write ( resource $large_object, string $data [, int $len ] )";i:3;s:61:"writes data into a large object at the current seek position.";}
a:4:{i:0;s:12:"pg_meta_data";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:63:"array pg_meta_data ( resource $connection, string $table_name )";i:3;s:41:"returns table definition for as an array.";}
a:4:{i:0;s:13:"pg_num_fields";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:38:"int pg_num_fields ( resource $result )";i:3;s:71:"returns the number of fields (columns) in a PostgreSQL result resource.";}
a:4:{i:0;s:11:"pg_num_rows";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:36:"int pg_num_rows ( resource $result )";i:3;s:63:"will return the number of rows in a PostgreSQL result resource.";}
a:4:{i:0;s:10:"pg_options";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"string pg_options ([ resource $connection ] )";i:3;s:87:"will return a string containing the options specified on the given PostgreSQL resource.";}
a:4:{i:0;s:19:"pg_parameter_status";i:1;s:7:"(PHP 5)";i:2;s:74:"string pg_parameter_status ([ resource $connection ], string $param_name )";i:3;s:51:"Looks up a current parameter setting of the server.";}
a:4:{i:0;s:11:"pg_pconnect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:73:"resource pg_pconnect ( string $connection_string [, int $connect_type ] )";i:3;s:123:"opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions.";}
a:4:{i:0;s:7:"pg_ping";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:40:"bool pg_ping ([ resource $connection ] )";i:3;s:70:"pings a database connection and tries to reconnect it if it is broken.";}
a:4:{i:0;s:7:"pg_port";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"int pg_port ([ resource $connection ] )";i:3;s:75:"returns the port number that the given PostgreSQL resource is connected to.";}
a:4:{i:0;s:10:"pg_prepare";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:80:"resource pg_prepare ([ resource $connection ], string $stmtname, string $query )";i:3;s:299:"creates a prepared statement for later execution with or . This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.";}
a:4:{i:0;s:11:"pg_put_line";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:58:"bool pg_put_line ([ resource $connection ], string $data )";i:3;s:121:"sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL's command.";}
a:4:{i:0;s:15:"pg_query_params";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:82:"resource pg_query_params ([ resource $connection ], string $query, array $params )";i:3;s:131:"Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.";}
a:4:{i:0;s:8:"pg_query";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:60:"resource pg_query ([ resource $connection ], string $query )";i:3;s:75:"executes the on the specified database . should be preferred in most cases.";}
a:4:{i:0;s:21:"pg_result_error_field";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:65:"string pg_result_error_field ( resource $result, int $fieldcode )";i:3;s:175:"returns one of the detailed error message fields associated with resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the .";}
a:4:{i:0;s:15:"pg_result_error";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:43:"string pg_result_error ( resource $result )";i:3;s:144:"returns any error message associated with the resource. Therefore, the user has a better chance of getting the correct error message than with .";}
a:4:{i:0;s:14:"pg_result_seek";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:53:"bool pg_result_seek ( resource $result, int $offset )";i:3;s:50:"sets the internal row offset in a result resource.";}
a:4:{i:0;s:16:"pg_result_status";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:78:"mixed pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] )";i:3;s:108:"returns the status of a result resource, or the PostgreSQL command completion tag associated with the result";}
a:4:{i:0;s:9:"pg_select";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:115:"mixed pg_select ( resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC ] )";i:3;s:158:"selects records specified by which has . For a successful query, it returns an array containing all records and fields that match the condition specified by .";}
a:4:{i:0;s:15:"pg_send_execute";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:78:"bool pg_send_execute ( resource $connection, string $stmtname, array $params )";i:3;s:105:"Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).";}
a:4:{i:0;s:15:"pg_send_prepare";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:78:"bool pg_send_prepare ( resource $connection, string $stmtname, string $query )";i:3;s:105:"Sends a request to create a prepared statement with the given parameters, without waiting for completion.";}
a:4:{i:0;s:20:"pg_send_query_params";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:80:"bool pg_send_query_params ( resource $connection, string $query, array $params )";i:3;s:90:"Submits a command and separate parameters to the server without waiting for the result(s).";}
a:4:{i:0;s:13:"pg_send_query";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:58:"bool pg_send_query ( resource $connection, string $query )";i:3;s:146:"sends a query or queries asynchronously to the . Unlike, it can send multiple queries at once to PostgreSQL and get the results one by one using .";}
a:4:{i:0;s:22:"pg_set_client_encoding";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:72:"int pg_set_client_encoding ([ resource $connection ], string $encoding )";i:3;s:65:"sets the client encoding and returns 0 if success or -1 if error.";}
a:4:{i:0;s:22:"pg_set_error_verbosity";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:70:"int pg_set_error_verbosity ([ resource $connection ], int $verbosity )";i:3;s:54:"Determines the verbosity of messages returned by and .";}
a:4:{i:0;s:8:"pg_trace";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:83:"bool pg_trace ( string $pathname [, string $mode = "w" [, resource $connection ]] )";i:3;s:190:"enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.";}
a:4:{i:0;s:21:"pg_transaction_status";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:50:"int pg_transaction_status ( resource $connection )";i:3;s:56:"Returns the current in-transaction status of the server.";}
a:4:{i:0;s:6:"pg_tty";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"string pg_tty ([ resource $connection ] )";i:3;s:99:"returns the TTY name that server side debugging output is sent to on the given PostgreSQL resource.";}
a:4:{i:0;s:17:"pg_unescape_bytea";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:41:"string pg_unescape_bytea ( string $data )";i:3;s:105:"unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data.";}
a:4:{i:0;s:10:"pg_untrace";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:43:"bool pg_untrace ([ resource $connection ] )";i:3;s:25:"Stop tracing started by .";}
a:4:{i:0;s:9:"pg_update";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:126:"mixed pg_update ( resource $connection, string $table_name, array $data, array $condition [, int $options = PGSQL_DML_EXEC ] )";i:3;s:90:"updates records that matches with . If is specified, is applied to with specified options.";}
a:4:{i:0;s:10:"pg_version";i:1;s:7:"(PHP 5)";i:2;s:44:"array pg_version ([ resource $connection ] )";i:3;s:160:"returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later.";}
a:4:{i:0;s:18:"sqlite_array_query";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:129:"array sqlite_array_query ( resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"sqlite_busy_timeout";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:66:"void sqlite_busy_timeout ( resource $dbhandle, int $milliseconds )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:14:"sqlite_changes";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:41:"int sqlite_changes ( resource $dbhandle )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:12:"sqlite_close";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:40:"void sqlite_close ( resource $dbhandle )";i:3;s:121:"Closes the given database handle. If the database was persistent, it will be closed and removed from the persistent list.";}
a:4:{i:0;s:13:"sqlite_column";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:94:"mixed sqlite_column ( resource $result, mixed $index_or_name [, bool $decode_binary = true ] )";i:3;s:162:"Fetches the value of a column named (if it is a string), or of the ordinal column numbered (if it is an integer) from the current row of the query result handle .";}
a:4:{i:0;s:23:"sqlite_create_aggregate";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:144:"void sqlite_create_aggregate ( resource $dbhandle, string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1 ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"sqlite_create_function";i:1;s:32:"(PHP 5 < 5.4.0, sqlite >= 1.0.0)";i:2;s:117:"void sqlite_create_function ( resource $dbhandle, string $function_name, callable $callback [, int $num_args = -1 ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:14:"sqlite_current";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:108:"array sqlite_current ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"sqlite_error_string";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:46:"string sqlite_error_string ( int $error_code )";i:3;s:59:"Returns a human readable description of the returned from .";}
a:4:{i:0;s:20:"sqlite_escape_string";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:44:"string sqlite_escape_string ( string $item )";i:3;s:196:"will correctly quote the string specified by for use in an SQLite SQL statement. This includes doubling up single-quote characters () and checking for binary-unsafe characters in the query string.";}
a:4:{i:0;s:11:"sqlite_exec";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.3)";i:2;s:78:"bool sqlite_exec ( resource $dbhandle, string $query [, string &$error_msg ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:14:"sqlite_factory";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:99:"SQLiteDatabase sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] )";i:3;s:218:"behaves similarly to in that it opens an SQLite database or attempts to create it if it does not exist. However, a object is returned rather than a resource. Please see the reference page for further usage and caveats.";}
a:4:{i:0;s:16:"sqlite_fetch_all";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:110:"array sqlite_fetch_all ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"sqlite_fetch_array";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:112:"array sqlite_fetch_array ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"sqlite_fetch_column_types";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:111:"array sqlite_fetch_column_types ( string $table_name, resource $dbhandle [, int $result_type = SQLITE_ASSOC ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"sqlite_fetch_object";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:125:"object sqlite_fetch_object ( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = true ]]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"sqlite_fetch_single";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.1)";i:2;s:79:"string sqlite_fetch_single ( resource $result [, bool $decode_binary = true ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"sqlite_fetch_string";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:17:"sqlite_field_name";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:63:"string sqlite_field_name ( resource $result, int $field_index )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:15:"sqlite_has_more";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:41:"bool sqlite_has_more ( resource $result )";i:3;s:64:"Finds whether more rows are available from the given result set.";}
a:4:{i:0;s:15:"sqlite_has_prev";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:41:"bool sqlite_has_prev ( resource $result )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:10:"sqlite_key";i:1;s:28:"(PHP 5 >= 5.1.0 and < 5.4.0)";i:2;s:30:"int SQLiteResult::key ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:17:"sqlite_last_error";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:44:"int sqlite_last_error ( resource $dbhandle )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"sqlite_last_insert_rowid";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:51:"int sqlite_last_insert_rowid ( resource $dbhandle )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"sqlite_libencoding";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:34:"string sqlite_libencoding ( void )";i:3;s:165:"The SQLite library may be compiled in either or compatible modes. This function allows you to determine which encoding scheme is used by your version of the library.";}
a:4:{i:0;s:17:"sqlite_libversion";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:33:"string sqlite_libversion ( void )";i:3;s:49:"Returns the version of the linked SQLite library.";}
a:4:{i:0;s:11:"sqlite_next";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:37:"bool sqlite_next ( resource $result )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:17:"sqlite_num_fields";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:42:"int sqlite_num_fields ( resource $result )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:15:"sqlite_num_rows";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:40:"int sqlite_num_rows ( resource $result )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:11:"sqlite_open";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:90:"resource sqlite_open ( string $filename [, int $mode = 0666 [, string &$error_message ]] )";i:3;s:36:"Object oriented style (constructor):";}
a:4:{i:0;s:12:"sqlite_popen";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:91:"resource sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] )";i:3;s:173:"This function behaves identically to except that is uses the persistent resource mechanism of PHP. For information about the meaning of the parameters, read the manual page.";}
a:4:{i:0;s:11:"sqlite_prev";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:37:"bool sqlite_prev ( resource $result )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:12:"sqlite_query";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:118:"resource sqlite_query ( resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:13:"sqlite_rewind";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:39:"bool sqlite_rewind ( resource $result )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:11:"sqlite_seek";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:50:"bool sqlite_seek ( resource $result, int $rownum )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"sqlite_single_query";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.1)";i:2;s:107:"array sqlite_single_query ( resource $db, string $query [, bool $first_row_only [, bool $decode_binary ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"sqlite_udf_decode_binary";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:48:"string sqlite_udf_decode_binary ( string $data )";i:3;s:47:"Decodes binary data passed as parameters to a .";}
a:4:{i:0;s:24:"sqlite_udf_encode_binary";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:48:"string sqlite_udf_encode_binary ( string $data )";i:3;s:126:"applies a binary encoding to the so that it can be safely returned from queries (since the underlying API is not binary safe).";}
a:4:{i:0;s:23:"sqlite_unbuffered_query";i:1;s:37:"(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)";i:2;s:129:"resource sqlite_unbuffered_query ( resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:12:"sqlite_valid";i:1;s:15:"(PHP 5 < 5.4.0)";i:2;s:38:"bool sqlite_valid ( resource $result )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"SQLite3::busyTimeout";i:1;s:16:"(PHP 5 >= 5.3.3)";i:2;s:47:"public bool SQLite3::busyTimeout ( int $msecs )";i:3;s:95:"Sets a busy handler that will sleep until the database is not locked or the timeout is reached.";}
a:4:{i:0;s:16:"SQLite3::changes";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:36:"public int SQLite3::changes ( void )";i:3;s:112:"Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement.";}
a:4:{i:0;s:14:"SQLite3::close";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:35:"public bool SQLite3::close ( void )";i:3;s:31:"Closes the database connection.";}
a:4:{i:0;s:20:"SQLite3::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:91:"public SQLite3::__construct ( string $filename [, int $flags [, string $encryption_key ]] )";i:3;s:149:"Instantiates an SQLite3 object and opens a connection to an SQLite 3 database. If the build includes encryption, then it will attempt to use the key.";}
a:4:{i:0;s:24:"SQLite3::createAggregate";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:128:"public bool SQLite3::createAggregate ( string $name, mixed $step_callback, mixed $final_callback [, int $argument_count = -1 ] )";i:3;s:117:"Registers a PHP function or user-defined function for use as an SQL aggregate function for use within SQL statements.";}
a:4:{i:0;s:24:"SQLite3::createCollation";i:1;s:17:"(PHP 5 >= 5.3.11)";i:2;s:73:"public bool SQLite3::createCollation ( string $name, callable $callback )";i:3;s:104:"Registers a PHP function or user-defined function for use as a collating function within SQL statements.";}
a:4:{i:0;s:23:"SQLite3::createFunction";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:99:"public bool SQLite3::createFunction ( string $name, mixed $callback [, int $argument_count = -1 ] )";i:3;s:114:"Registers a PHP function or user-defined function for use as an SQL scalar function for use within SQL statements.";}
a:4:{i:0;s:21:"SQLite3::escapeString";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:60:"public static string SQLite3::escapeString ( string $value )";i:3;s:87:"Returns a string that has been properly escaped for safe inclusion in an SQL statement.";}
a:4:{i:0;s:13:"SQLite3::exec";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public bool SQLite3::exec ( string $query )";i:3;s:54:"Executes a result-less query against a given database.";}
a:4:{i:0;s:22:"SQLite3::lastErrorCode";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:42:"public int SQLite3::lastErrorCode ( void )";i:3;s:73:"Returns the numeric result code of the most recent failed SQLite request.";}
a:4:{i:0;s:21:"SQLite3::lastErrorMsg";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public string SQLite3::lastErrorMsg ( void )";i:3;s:70:"Returns English text describing the most recent failed SQLite request.";}
a:4:{i:0;s:24:"SQLite3::lastInsertRowID";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public int SQLite3::lastInsertRowID ( void )";i:3;s:63:"Returns the row ID of the most recent INSERT into the database.";}
a:4:{i:0;s:22:"SQLite3::loadExtension";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:61:"public bool SQLite3::loadExtension ( string $shared_library )";i:3;s:45:"Attempts to load an SQLite extension library.";}
a:4:{i:0;s:13:"SQLite3::open";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:136:"public void SQLite3::open ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key ]] )";i:3;s:98:"Opens an SQLite 3 Database. If the build includes encryption, then it will attempt to use the key.";}
a:4:{i:0;s:16:"SQLite3::prepare";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public SQLite3Stmt SQLite3::prepare ( string $query )";i:3;s:62:"Prepares an SQL statement for execution and returns an object.";}
a:4:{i:0;s:14:"SQLite3::query";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public SQLite3Result SQLite3::query ( string $query )";i:3;s:72:"Executes an SQL query, returning an object if the query returns results.";}
a:4:{i:0;s:20:"SQLite3::querySingle";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:81:"public mixed SQLite3::querySingle ( string $query [, bool $entire_row = false ] )";i:3;s:45:"Executes a query and returns a single result.";}
a:4:{i:0;s:16:"SQLite3::version";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:45:"public static array SQLite3::version ( void )";i:3;s:73:"Returns the SQLite3 library version as a string constant and as a number.";}
a:4:{i:0;s:22:"SQLite3Stmt::bindParam";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:86:"public bool SQLite3Stmt::bindParam ( string $sql_param, mixed &$param [, int $type ] )";i:3;s:42:"Binds a parameter to a statement variable.";}
a:4:{i:0;s:22:"SQLite3Stmt::bindValue";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:85:"public bool SQLite3Stmt::bindValue ( string $sql_param, mixed $value [, int $type ] )";i:3;s:55:"Binds the value of a parameter to a statement variable.";}
a:4:{i:0;s:18:"SQLite3Stmt::clear";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:39:"public bool SQLite3Stmt::clear ( void )";i:3;s:36:"Clears all current bound parameters.";}
a:4:{i:0;s:18:"SQLite3Stmt::close";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:39:"public bool SQLite3Stmt::close ( void )";i:3;s:30:"Closes the prepared statement.";}
a:4:{i:0;s:20:"SQLite3Stmt::execute";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:50:"public SQLite3Result SQLite3Stmt::execute ( void )";i:3;s:62:"Executes a prepared statement and returns a result set object.";}
a:4:{i:0;s:23:"SQLite3Stmt::paramCount";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public int SQLite3Stmt::paramCount ( void )";i:3;s:63:"Returns the number of parameters within the prepared statement.";}
a:4:{i:0;s:18:"SQLite3Stmt::reset";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:39:"public bool SQLite3Stmt::reset ( void )";i:3;s:102:"Resets the prepared statement to its state prior to execution. All bindings remain intact after reset.";}
a:4:{i:0;s:25:"SQLite3Result::columnName";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:62:"public string SQLite3Result::columnName ( int $column_number )";i:3;s:49:"Returns the name of the column specified by the .";}
a:4:{i:0;s:25:"SQLite3Result::columnType";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:59:"public int SQLite3Result::columnType ( int $column_number )";i:3;s:46:"Returns the type of the column identified by .";}
a:4:{i:0;s:25:"SQLite3Result::fetchArray";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:70:"public array SQLite3Result::fetchArray ([ int $mode = SQLITE3_BOTH ] )";i:3;s:105:"Fetches a result row as an associative or numerically indexed array or both. By default, fetches as both.";}
a:4:{i:0;s:23:"SQLite3Result::finalize";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public bool SQLite3Result::finalize ( void )";i:3;s:22:"Closes the result set.";}
a:4:{i:0;s:25:"SQLite3Result::numColumns";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:45:"public int SQLite3Result::numColumns ( void )";i:3;s:48:"Returns the number of columns in the result set.";}
a:4:{i:0;s:20:"SQLite3Result::reset";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:41:"public bool SQLite3Result::reset ( void )";i:3;s:44:"Resets the result set back to the first row.";}
a:4:{i:0;s:24:"sqlsrv_begin_transaction";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:48:"bool sqlsrv_begin_transaction ( resource $conn )";i:3;s:312:"The transaction begun by includes all statements that were executed after the call to and before calls to or . Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see .";}
a:4:{i:0;s:13:"sqlsrv_cancel";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:37:"bool sqlsrv_cancel ( resource $stmt )";i:3;s:288:"Cancels a statement. Any results associated with the statement that have not been consumed are deleted. After has been called, the specified statement can be re-executed if it was created with . Calling is not necessary if all the results associated with the statement have been consumed.";}
a:4:{i:0;s:18:"sqlsrv_client_info";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:43:"array sqlsrv_client_info ( resource $conn )";i:3;s:61:"Returns information about the client and specified connection";}
a:4:{i:0;s:12:"sqlsrv_close";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:36:"bool sqlsrv_close ( resource $conn )";i:3;s:80:"Closes an open connection and releases resourses associated with the connection.";}
a:4:{i:0;s:13:"sqlsrv_commit";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:37:"bool sqlsrv_commit ( resource $conn )";i:3;s:406:"Commits a transaction that was begun with . The connection is returned to auto-commit mode after is called. The transaction that is committed includes all statements that were executed after the call to . Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see .";}
a:4:{i:0;s:16:"sqlsrv_configure";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:55:"bool sqlsrv_configure ( string $setting, mixed $value )";i:3;s:61:"Changes the driver error handling and logging configurations.";}
a:4:{i:0;s:14:"sqlsrv_connect";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:73:"resource sqlsrv_connect ( string $serverName [, array $connectionInfo ] )";i:3;s:225:"Opens a connection to a Microsoft SQL Server database. By default, the connection is attempted using Windows Authentication. To connect using SQL Server Authentication, include "UID" and "PWD" in the connection options array.";}
a:4:{i:0;s:13:"sqlsrv_errors";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:48:"mixed sqlsrv_errors ([ int $errorsOrWarnings ] )";i:3;s:80:"Returns error and warning information about the last SQLSRV operation performed.";}
a:4:{i:0;s:14:"sqlsrv_execute";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:38:"bool sqlsrv_execute ( resource $stmt )";i:3;s:142:"Executes a statement prepared with . This function is ideal for executing a prepared statement multiple times with different parameter values.";}
a:4:{i:0;s:18:"sqlsrv_fetch_array";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:92:"array sqlsrv_fetch_array ( resource $stmt [, int $fetchType [, int $row [, int $offset ]]] )";i:3;s:103:"Returns the next available row of data as an associative array, a numeric array, or both (the default).";}
a:4:{i:0;s:19:"sqlsrv_fetch_object";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:118:"mixed sqlsrv_fetch_object ( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]] )";i:3;s:183:"Retrieves the next row of data in a result set as an instance of the specified class with properties that match the row field names and values that correspond to the row field values.";}
a:4:{i:0;s:12:"sqlsrv_fetch";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:67:"mixed sqlsrv_fetch ( resource $stmt [, int $row [, int $offset ]] )";i:3;s:92:"Makes the next row in a result set available for reading. Use to read the fields of the row.";}
a:4:{i:0;s:21:"sqlsrv_field_metadata";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:46:"mixed sqlsrv_field_metadata ( resource $stmt )";i:3;s:131:"Retrieves metadata for the fields of a statement prepared by or . can be called on a statement before or after statement execution.";}
a:4:{i:0;s:16:"sqlsrv_free_stmt";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:40:"bool sqlsrv_free_stmt ( resource $stmt )";i:3;s:241:"Frees all resources for the specified statement. The statement cannot be used after has been called on it. If is called on an in-progress statement that alters server state, statement execution is terminated and the statement is rolled back.";}
a:4:{i:0;s:17:"sqlsrv_get_config";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:43:"mixed sqlsrv_get_config ( string $setting )";i:3;s:57:"Returns the value of the specified configuration setting.";}
a:4:{i:0;s:16:"sqlsrv_get_field";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:78:"mixed sqlsrv_get_field ( resource $stmt, int $fieldIndex [, int $getAsType ] )";i:3;s:108:"Gets field data from the currently selected row. Fields must be accessed in order. Field indices start at 0.";}
a:4:{i:0;s:15:"sqlsrv_has_rows";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:39:"bool sqlsrv_has_rows ( resource $stmt )";i:3;s:51:"Indicates whether the specified statement has rows.";}
a:4:{i:0;s:18:"sqlsrv_next_result";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:43:"mixed sqlsrv_next_result ( resource $stmt )";i:3;s:120:"Makes the next result of the specified statement active. Results include result sets, row counts, and output parameters.";}
a:4:{i:0;s:17:"sqlsrv_num_fields";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:42:"mixed sqlsrv_num_fields ( resource $stmt )";i:3;s:56:"Retrieves the number of fields (columns) on a statement.";}
a:4:{i:0;s:15:"sqlsrv_num_rows";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:40:"mixed sqlsrv_num_rows ( resource $stmt )";i:3;s:209:"Retrieves the number of rows in a result set. This function requires that the statment resource be created with a static or keyset cursor. For more information, see, , or in the Microsoft SQLSRV documentation.";}
a:4:{i:0;s:14:"sqlsrv_prepare";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:90:"mixed sqlsrv_prepare ( resource $conn, string $sql [, array $params [, array $options ]] )";i:3;s:146:"Prepares a query for execution. This function is ideal for preparing a query that will be executed multiple times with different parameter values.";}
a:4:{i:0;s:12:"sqlsrv_query";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:88:"mixed sqlsrv_query ( resource $conn, string $sql [, array $params [, array $options ]] )";i:3;s:30:"Prepares and executes a query.";}
a:4:{i:0;s:15:"sqlsrv_rollback";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:39:"bool sqlsrv_rollback ( resource $conn )";i:3;s:92:"Rolls back a transaction that was begun with and returns the connection to auto-commit mode.";}
a:4:{i:0;s:20:"sqlsrv_rows_affected";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:43:"int sqlsrv_rows_affected ( resource $stmt )";i:3;s:164:"Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed. For information about the number of rows returned by a SELECT query, see .";}
a:4:{i:0;s:23:"sqlsrv_send_stream_data";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:47:"bool sqlsrv_send_stream_data ( resource $stmt )";i:3;s:90:"Send data from parameter streams to the server. Up to 8 KB of data is sent with each call.";}
a:4:{i:0;s:18:"sqlsrv_server_info";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:43:"array sqlsrv_server_info ( resource $conn )";i:3;s:37:"Returns information about the server.";}
a:4:{i:0;s:20:"sybase_affected_rows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"int sybase_affected_rows ([ resource $link_identifier ] )";i:3;s:139:"returns the number of rows affected by the last INSERT, UPDATE or DELETE query on the server associated with the specified link identifier.";}
a:4:{i:0;s:12:"sybase_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"bool sybase_close ([ resource $link_identifier ] )";i:3;s:80:"closes the link to a Sybase database that's associated with the specified link .";}
a:4:{i:0;s:14:"sybase_connect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:153:"resource sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = false ]]]]]] )";i:3;s:44:"establishes a connection to a Sybase server.";}
a:4:{i:0;s:16:"sybase_data_seek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:70:"bool sybase_data_seek ( resource $result_identifier, int $row_number )";i:3;s:179:"moves the internal row pointer of the Sybase result associated with the specified result identifier to pointer to the specified row number. The next call to would return that row.";}
a:4:{i:0;s:27:"sybase_deadlock_retry_count";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:53:"void sybase_deadlock_retry_count ( int $retry_count )";i:3;s:248:"Using, the number of retries can be defined in cases of deadlocks. By default, every deadlock is retried an infinite number of times or until the process is killed by Sybase, the executing script is killed (for instance, by ) or the query succeeds.";}
a:4:{i:0;s:18:"sybase_fetch_array";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"array sybase_fetch_array ( resource $result )";i:3;s:182:"is an extended version of . In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.";}
a:4:{i:0;s:18:"sybase_fetch_assoc";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:45:"array sybase_fetch_assoc ( resource $result )";i:3;s:189:"is a version of that uses column names instead of integers for indices in the result array. Columns from different tables with the same names are returned as name, name1, name2, ..., nameN.";}
a:4:{i:0;s:18:"sybase_fetch_field";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"object sybase_fetch_field ( resource $result [, int $field_offset = -1 ] )";i:3;s:82:"can be used in order to obtain information about fields in a certain query result.";}
a:4:{i:0;s:19:"sybase_fetch_object";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:66:"object sybase_fetch_object ( resource $result [, mixed $object ] )";i:3;s:80:"is similar to, with one difference - an object is returned, instead of an array.";}
a:4:{i:0;s:16:"sybase_fetch_row";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"array sybase_fetch_row ( resource $result )";i:3;s:88:"fetches one row of data from the result associated with the specified result identifier.";}
a:4:{i:0;s:17:"sybase_field_seek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"bool sybase_field_seek ( resource $result, int $field_offset )";i:3;s:116:"Seeks to the specified field offset. If the next call to won't include a field offset, this field would be returned.";}
a:4:{i:0;s:18:"sybase_free_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"bool sybase_free_result ( resource $result )";i:3;s:271:"only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call with the result identifier as an argument and the associated result memory will be freed.";}
a:4:{i:0;s:23:"sybase_get_last_message";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"string sybase_get_last_message ( void )";i:3;s:48:"returns the last message reported by the server.";}
a:4:{i:0;s:26:"sybase_min_client_severity";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"void sybase_min_client_severity ( int $severity )";i:3;s:39:"sets the minimum client severity level.";}
a:4:{i:0;s:25:"sybase_min_error_severity";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"void sybase_min_error_severity ( int $severity )";i:3;s:38:"sets the minimum error severity level.";}
a:4:{i:0;s:27:"sybase_min_message_severity";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"void sybase_min_message_severity ( int $severity )";i:3;s:40:"sets the minimum message severity level.";}
a:4:{i:0;s:26:"sybase_min_server_severity";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"void sybase_min_server_severity ( int $severity )";i:3;s:39:"sets the minimum server severity level.";}
a:4:{i:0;s:17:"sybase_num_fields";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"int sybase_num_fields ( resource $result )";i:3;s:45:"returns the number of fields in a result set.";}
a:4:{i:0;s:15:"sybase_num_rows";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"int sybase_num_rows ( resource $result )";i:3;s:43:"returns the number of rows in a result set.";}
a:4:{i:0;s:15:"sybase_pconnect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:132:"resource sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )";i:3;s:47:"acts very much like with two major differences.";}
a:4:{i:0;s:12:"sybase_query";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"mixed sybase_query ( string $query [, resource $link_identifier ] )";i:3;s:114:"sends a query to the currently active database on the server that's associated with the specified link identifier.";}
a:4:{i:0;s:13:"sybase_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"string sybase_result ( resource $result, int $row, mixed $field )";i:3;s:90:"Returns the contents of the cell at the row and offset in the specified Sybase result set.";}
a:4:{i:0;s:16:"sybase_select_db";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:78:"bool sybase_select_db ( string $database_name [, resource $link_identifier ] )";i:3;s:100:"sets the current active database on the server that's associated with the specified link identifier.";}
a:4:{i:0;s:26:"sybase_set_message_handler";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:84:"bool sybase_set_message_handler ( callable $handler [, resource $link_identifier ] )";i:3;s:177:"sets a user function to handle messages generated by the server. You may specify the name of a global function, or use an array to specify an object reference and a method name.";}
a:4:{i:0;s:23:"sybase_unbuffered_query";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:101:"resource sybase_unbuffered_query ( string $query, resource $link_identifier [, bool $store_result ] )";i:3;s:276:"sends a query to the currently active database on the server that's associated with the specified link identifier. If the link identifier isn't specified, the last opened link is assumed. If no link is open, the function tries to establish a link as if was called, and use it.";}
a:4:{i:0;s:16:"TokyoTyrant::add";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:84:"public number TokyoTyrant::add ( string $key, number $increment [, int $type = 0 ] )";i:3;s:198:"Adds to an int or double value. This increments the value by the given amount and returns the new value. If the key does not exist a new key is created with initial value of the increment parameter.";}
a:4:{i:0;s:20:"TokyoTyrant::connect";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:117:"public TokyoTyrant TokyoTyrant::connect ( string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]] )";i:3;s:29:"Connects to a remote database";}
a:4:{i:0;s:23:"TokyoTyrant::connectUri";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:58:"public TokyoTyrant TokyoTyrant::connectUri ( string $uri )";i:3;s:35:"Connects to a database using an uri";}
a:4:{i:0;s:24:"TokyoTyrant::__construct";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:111:"public TokyoTyrant::__construct ([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]] )";i:3;s:75:"Constructs a new TokyoTyrant object and optionally connects to the database";}
a:4:{i:0;s:17:"TokyoTyrant::copy";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:53:"public TokyoTyrant TokyoTyrant::copy ( string $path )";i:3;s:36:"Makes a copy of the current database";}
a:4:{i:0;s:16:"TokyoTyrant::ext";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:89:"public string TokyoTyrant::ext ( string $name, int $options, string $key, string $value )";i:3;s:35:"Executes a remote script extension.";}
a:4:{i:0;s:20:"TokyoTyrant::fwmKeys";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:67:"public array TokyoTyrant::fwmKeys ( string $prefix, int $max_recs )";i:3;s:51:"Returns the forward matching keys from the database";}
a:4:{i:0;s:16:"TokyoTyrant::get";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:45:"public mixed TokyoTyrant::get ( mixed $keys )";i:3;s:97:"This method is used to return a value or multiple values. This method accepts a or an as a value.";}
a:4:{i:0;s:24:"TokyoTyrant::getIterator";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:60:"public TokyoTyrantIterator TokyoTyrant::getIterator ( void )";i:3;s:65:"Gets an iterator for iterating all keys / values in the database.";}
a:4:{i:0;s:16:"TokyoTyrant::num";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:36:"public int TokyoTyrant::num ( void )";i:3;s:45:"Returns the number of records in the database";}
a:4:{i:0;s:16:"TokyoTyrant::out";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:51:"public TokyoTyrant TokyoTyrant::out ( mixed $keys )";i:3;s:118:"Removes a record or multiple records. This method accepts a for a single key or an array of keys for multiple records.";}
a:4:{i:0;s:16:"TokyoTyrant::put";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:77:"public TokyoTyrant TokyoTyrant::put ( mixed $keys [, string $value = NULL ] )";i:3;s:243:"Puts a key-value pair into the database or multiple key-value pairs. If is string then the second parameter value defines the value. The second parameter is mandatory if is a string. If the key exists the value will be replaced with new value.";}
a:4:{i:0;s:19:"TokyoTyrant::putCat";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:73:"public TokyoTyrant TokyoTyrant::putCat ( mixed $keys [, string $value ] )";i:3;s:172:"Appends a value into existing key or multiple values if is an array. The second parameter is mandatory if is a string. If the record does not exist a new record is created.";}
a:4:{i:0;s:20:"TokyoTyrant::putKeep";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:74:"public TokyoTyrant TokyoTyrant::putKeep ( mixed $keys [, string $value ] )";i:3;s:276:"Puts a key-value pair into the database or multiple key-value pairs. If is string then the second parameter value defines the value. The second parameter is mandatory if is a string. If the key already exists this method throws an exception indicating that the records exists.";}
a:4:{i:0;s:18:"TokyoTyrant::putNr";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:79:"public TokyoTyrant TokyoTyrant::putNr ( mixed $keys [, string $value = NULL ] )";i:3;s:242:"Puts a key-value pair into the database or multiple key-value pairs. If is string then the second parameter value defines the value. The second parameter is mandatory if is a string. This method does not wait for the response from the server.";}
a:4:{i:0;s:19:"TokyoTyrant::putShl";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:75:"public mixed TokyoTyrant::putShl ( string $key, string $value, int $width )";i:3;s:42:"Concatenate to a record and shift to left.";}
a:4:{i:0;s:20:"TokyoTyrant::restore";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:105:"public mixed TokyoTyrant::restore ( string $log_dir, int $timestamp [, bool $check_consistency = true ] )";i:3;s:41:"Restore the database from the update log.";}
a:4:{i:0;s:22:"TokyoTyrant::setMaster";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:115:"public mixed TokyoTyrant::setMaster ( string $host, int $port, int $timestamp [, bool $check_consistency = true ] )";i:3;s:43:"Sets the replication master of the database";}
a:4:{i:0;s:17:"TokyoTyrant::size";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:44:"public int TokyoTyrant::size ( string $key )";i:3;s:34:"Returns the size of a value by key";}
a:4:{i:0;s:17:"TokyoTyrant::stat";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:39:"public array TokyoTyrant::stat ( void )";i:3;s:41:"Returns statistics of the remote database";}
a:4:{i:0;s:17:"TokyoTyrant::sync";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:39:"public mixed TokyoTyrant::sync ( void )";i:3;s:51:"Synchronizes the database on to the physical device";}
a:4:{i:0;s:17:"TokyoTyrant::tune";i:1;s:28:"(PECL tokyo_tyrant >= 0.2.0)";i:2;s:99:"public TokyoTyrant TokyoTyrant::tune ( float $timeout [, int $options = TokyoTyrant::RDBT_RECON ] )";i:3;s:34:"Tunes database connection options.";}
a:4:{i:0;s:19:"TokyoTyrant::vanish";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:41:"public mixed TokyoTyrant::vanish ( void )";i:3;s:25:"Empties a remote database";}
a:4:{i:0;s:21:"TokyoTyrantTable::add";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:85:"public void TokyoTyrantTable::add ( string $key, mixed $increment [, string $type ] )";i:3;s:50:"This method is not supported with table databases.";}
a:4:{i:0;s:24:"TokyoTyrantTable::genUid";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:44:"public int TokyoTyrantTable::genUid ( void )";i:3;s:117:"Generates an unique id inside the table database. In table databases rows are referenced using a numeric primary key.";}
a:4:{i:0;s:21:"TokyoTyrantTable::get";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:49:"public void TokyoTyrantTable::get ( mixed $keys )";i:3;s:125:"Gets a row from table database. is a single integer for the primary key of the row or an array of integers for multiple rows.";}
a:4:{i:0;s:29:"TokyoTyrantTable::getIterator";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:65:"public TokyoTyrantIterator TokyoTyrantTable::getIterator ( void )";i:3;s:65:"Gets an iterator for iterating all keys / values in the database.";}
a:4:{i:0;s:26:"TokyoTyrantTable::getQuery";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:59:"public TokyoTyrantQuery TokyoTyrantTable::getQuery ( void )";i:3;s:54:"Get a query object to execute searches on the database";}
a:4:{i:0;s:21:"TokyoTyrantTable::out";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:49:"public void TokyoTyrantTable::out ( mixed $keys )";i:3;s:38:"Removes records from a table database.";}
a:4:{i:0;s:21:"TokyoTyrantTable::put";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:64:"public int TokyoTyrantTable::put ( string $key, array $columns )";i:3;s:210:"Puts a new row into the database. This method parameters are which is the primary key of the row, passing will generate a new unique id. is an array containing the row contents which is usually key value pairs.";}
a:4:{i:0;s:24:"TokyoTyrantTable::putCat";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:68:"public void TokyoTyrantTable::putCat ( string $key, array $columns )";i:3;s:195:"This method can be used to add new columns to existing records. Existing keys will be left unmodified but any new columns will be appended to the row. Passing null as key will generate a new row.";}
a:4:{i:0;s:25:"TokyoTyrantTable::putKeep";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:69:"public void TokyoTyrantTable::putKeep ( string $key, array $columns )";i:3;s:130:"Puts a new record into the database. If the key already exists this method throws an exception indicating that the records exists.";}
a:4:{i:0;s:23:"TokyoTyrantTable::putNr";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:70:"public void TokyoTyrantTable::putNr ( mixed $keys [, string $value ] )";i:3;s:160:"This method is not supported on table databases. Calling this method through TokyoTyrantTable is considered an error and an TokyoTyrantException will be thrown.";}
a:4:{i:0;s:24:"TokyoTyrantTable::putShl";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:79:"public void TokyoTyrantTable::putShl ( string $key, string $value, int $width )";i:3;s:160:"This method is not supported on table databases. Calling this method through TokyoTyrantTable is considered an error and an TokyoTyrantException will be thrown.";}
a:4:{i:0;s:26:"TokyoTyrantTable::setIndex";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:69:"public mixed TokyoTyrantTable::setIndex ( string $column, int $type )";i:3;s:103:"Sets an index on a specified column. The index type is one of the constants. Passing removes the index.";}
a:4:{i:0;s:25:"TokyoTyrantQuery::addCond";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:78:"public mixed TokyoTyrantQuery::addCond ( string $name, int $op, string $expr )";i:3;s:102:"Adds a condition to the query. Condition can be something like: get all keys which value matches expr.";}
a:4:{i:0;s:29:"TokyoTyrantQuery::__construct";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:64:"public TokyoTyrantQuery::__construct ( TokyoTyrantTable $table )";i:3;s:28:"Construct a new query object";}
a:4:{i:0;s:23:"TokyoTyrantQuery::count";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:43:"public int TokyoTyrantQuery::count ( void )";i:3;s:52:"Returns a count of how many records a query returns.";}
a:4:{i:0;s:25:"TokyoTyrantQuery::current";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:47:"public array TokyoTyrantQuery::current ( void )";i:3;s:55:"Returns the current element. Part of Iterator interface";}
a:4:{i:0;s:22:"TokyoTyrantQuery::hint";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:45:"public string TokyoTyrantQuery::hint ( void )";i:3;s:159:"Get the hint string of the query. The hint string contains information about an executed query and it could be compared to for example MySQL EXPLAIN statement.";}
a:4:{i:0;s:21:"TokyoTyrantQuery::key";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:44:"public string TokyoTyrantQuery::key ( void )";i:3;s:55:"Returns the current key. Part of the Iterator interface";}
a:4:{i:0;s:28:"TokyoTyrantQuery::metaSearch";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:71:"public array TokyoTyrantQuery::metaSearch ( array $queries, int $type )";i:3;s:134:"Executes multiple queries on a database and returns matching records. The current object is always the left most object in the search.";}
a:4:{i:0;s:22:"TokyoTyrantQuery::next";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:44:"public array TokyoTyrantQuery::next ( void )";i:3;s:73:"Returns the next result in the resultset. Part of the Iterator interface.";}
a:4:{i:0;s:21:"TokyoTyrantQuery::out";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:54:"public TokyoTyrantQuery TokyoTyrantQuery::out ( void )";i:3;s:118:"Removes all records that match the query. Works exactly like search but removes the records instead of returning them.";}
a:4:{i:0;s:24:"TokyoTyrantQuery::rewind";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:45:"public bool TokyoTyrantQuery::rewind ( void )";i:3;s:104:"Rewind the resultset and executes the query if it has not been executed. Part of the Iterator interface.";}
a:4:{i:0;s:24:"TokyoTyrantQuery::search";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:46:"public array TokyoTyrantQuery::search ( void )";i:3;s:207:"Executes a search on the table database. Returns an array of arrays containing the matching records. In the returned array the first level is the primary key of the data and the second level is the row data.";}
a:4:{i:0;s:26:"TokyoTyrantQuery::setLimit";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:69:"public mixed TokyoTyrantQuery::setLimit ([ int $max [, int $skip ]] )";i:3;s:55:"Set the maximum amount of records to return on a query.";}
a:4:{i:0;s:26:"TokyoTyrantQuery::setOrder";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:67:"public mixed TokyoTyrantQuery::setOrder ( string $name, int $type )";i:3;s:25:"Sets the order of a query";}
a:4:{i:0;s:23:"TokyoTyrantQuery::valid";i:1;s:28:"(PECL tokyo_tyrant >= 0.1.0)";i:2;s:44:"public bool TokyoTyrantQuery::valid ( void )";i:3;s:67:"Checks if the current item is valid. Part of the Iterator interface";}
a:4:{i:0;s:32:"TokyoTyrantIterator::__construct";i:1;s:28:"(PECL tokyo_tyrant >= 0.2.0)";i:2;s:57:"public TokyoTyrantIterator::__construct ( mixed $object )";i:3;s:226:"Construct a new TokyoTyrantIterator object. One connection can have multiple iterators but it is not quaranteed that all items are traversed in that case. parameter can be either an of instance TokyoTyrant or TokyoTyrantTable.";}
a:4:{i:0;s:28:"TokyoTyrantIterator::current";i:1;s:28:"(PECL tokyo_tyrant >= 0.2.0)";i:2;s:50:"public mixed TokyoTyrantIterator::current ( void )";i:3;s:43:"Returns the current value during iteration.";}
a:4:{i:0;s:24:"TokyoTyrantIterator::key";i:1;s:28:"(PECL tokyo_tyrant >= 0.2.0)";i:2;s:46:"public mixed TokyoTyrantIterator::key ( void )";i:3;s:24:"Returns the current key.";}
a:4:{i:0;s:25:"TokyoTyrantIterator::next";i:1;s:28:"(PECL tokyo_tyrant >= 0.2.0)";i:2;s:47:"public mixed TokyoTyrantIterator::next ( void )";i:3;s:56:"Move to next key during iteration and return it's value.";}
a:4:{i:0;s:27:"TokyoTyrantIterator::rewind";i:1;s:28:"(PECL tokyo_tyrant >= 0.2.0)";i:2;s:48:"public void TokyoTyrantIterator::rewind ( void )";i:3;s:89:"Rewinds the iterator for new iteration. Called automatically at the beginning of foreach.";}
a:4:{i:0;s:26:"TokyoTyrantIterator::valid";i:1;s:28:"(PECL tokyo_tyrant >= 0.2.0)";i:2;s:47:"public bool TokyoTyrantIterator::valid ( void )";i:3;s:60:"Checks whether the internal pointer points to valid element.";}
a:4:{i:0;s:9:"dio_close";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:31:"void dio_close ( resource $fd )";i:3;s:41:"The function closes the file descriptor .";}
a:4:{i:0;s:9:"dio_fcntl";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:59:"mixed dio_fcntl ( resource $fd, int $cmd [, mixed $args ] )";i:3;s:132:"The function performs the operation specified by on the file descriptor . Some commands require additional arguments to be supplied.";}
a:4:{i:0;s:8:"dio_open";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:69:"resource dio_open ( string $filename, int $flags [, int $mode = 0 ] )";i:3;s:54:"opens a file and returns a new file descriptor for it.";}
a:4:{i:0;s:8:"dio_read";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:53:"string dio_read ( resource $fd [, int $len = 1024 ] )";i:3;s:64:"The function reads and returns bytes from file with descriptor .";}
a:4:{i:0;s:8:"dio_seek";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:67:"int dio_seek ( resource $fd, int $pos [, int $whence = SEEK_SET ] )";i:3;s:78:"The function is used to change the file position of the given file descriptor.";}
a:4:{i:0;s:8:"dio_stat";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:31:"array dio_stat ( resource $fd )";i:3;s:52:"returns information about the given file descriptor.";}
a:4:{i:0;s:13:"dio_tcsetattr";i:1;s:32:"(PHP 4 >= 4.3.0, PHP 5 <= 5.0.5)";i:2;s:51:"bool dio_tcsetattr ( resource $fd, array $options )";i:3;s:56:"sets the terminal attributes and baud rate of the open .";}
a:4:{i:0;s:12:"dio_truncate";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:47:"bool dio_truncate ( resource $fd, int $offset )";i:3;s:42:"truncates a file to at most bytes in size.";}
a:4:{i:0;s:9:"dio_write";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5)";i:2;s:62:"int dio_write ( resource $fd, string $data [, int $len = 0 ] )";i:3;s:33:"writes up to bytes from to file .";}
a:4:{i:0;s:16:"Directory::close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:56:"public void Directory::close ([ resource $dir_handle ] )";i:3;s:27:"Same as, only defaults to .";}
a:4:{i:0;s:15:"Directory::read";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"public string Directory::read ([ resource $dir_handle ] )";i:3;s:27:"Same as, only defaults to .";}
a:4:{i:0;s:17:"Directory::rewind";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"public void Directory::rewind ([ resource $dir_handle ] )";i:3;s:27:"Same as, only defaults to .";}
a:4:{i:0;s:5:"chdir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"bool chdir ( string $directory )";i:3;s:36:"Changes PHP's current directory to .";}
a:4:{i:0;s:6:"chroot";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:33:"bool chroot ( string $directory )";i:3;s:103:"Changes the root directory of the current process to, and changes the current working directory to "/".";}
a:4:{i:0;s:8:"closedir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"void closedir ([ resource $dir_handle ] )";i:3;s:91:"Closes the directory stream indicated by . The stream must have previously been opened by .";}
a:4:{i:0;s:3:"dir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"Directory dir ( string $directory [, resource $context ] )";i:3;s:80:"A pseudo-object oriented mechanism for reading a directory. The given is opened.";}
a:4:{i:0;s:6:"getcwd";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:22:"string getcwd ( void )";i:3;s:35:"Gets the current working directory.";}
a:4:{i:0;s:7:"opendir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:56:"resource opendir ( string $path [, resource $context ] )";i:3;s:66:"Opens up a directory handle to be used in subsequent, , and calls.";}
a:4:{i:0;s:7:"readdir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"string readdir ([ resource $dir_handle ] )";i:3;s:134:"Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem.";}
a:4:{i:0;s:9:"rewinddir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"void rewinddir ([ resource $dir_handle ] )";i:3;s:75:"Resets the directory stream indicated by to the beginning of the directory.";}
a:4:{i:0;s:7:"scandir";i:1;s:7:"(PHP 5)";i:2;s:106:"array scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] )";i:3;s:46:"Returns an of files and directories from the .";}
a:4:{i:0;s:12:"finfo_buffer";i:1;s:40:"(PHP 5 >= 5.3.0, PECL fileinfo >=
0.1.0)";i:2;s:125:"string finfo_buffer ( resource $finfo, string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:11:"finfo_close";i:1;s:38:"(PHP >= 5.3.0, PECL fileinfo >= 0.1.0)";i:2;s:36:"bool finfo_close ( resource $finfo )";i:3;s:45:"This function closes the resource opened by .";}
a:4:{i:0;s:10:"finfo_file";i:1;s:38:"(PHP >= 5.3.0, PECL fileinfo >= 0.1.0)";i:2;s:126:"string finfo_file ( resource $finfo, string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:10:"finfo_open";i:1;s:38:"(PHP >= 5.3.0, PECL fileinfo >= 0.1.0)";i:2;s:85:"resource finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"finfo_set_flags";i:1;s:38:"(PHP >= 5.3.0, PECL fileinfo >= 0.1.0)";i:2;s:54:"bool finfo_set_flags ( resource $finfo, int $options )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"mime_content_type";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:45:"string mime_content_type ( string $filename )";i:3;s:90:"Returns the MIME content type for a file as determined by using information from the file.";}
a:4:{i:0;s:8:"basename";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"string basename ( string $path [, string $suffix ] )";i:3;s:113:"Given a string containing the path to a file or directory, this function will return the trailing name component.";}
a:4:{i:0;s:5:"chgrp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"bool chgrp ( string $filename, mixed $group )";i:3;s:45:"Attempts to change the group of the file to .";}
a:4:{i:0;s:5:"chmod";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"bool chmod ( string $filename, int $mode )";i:3;s:68:"Attempts to change the mode of the specified file to that given in .";}
a:4:{i:0;s:5:"chown";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"bool chown ( string $filename, mixed $user )";i:3;s:101:"Attempts to change the owner of the file to user . Only the superuser may change the owner of a file.";}
a:4:{i:0;s:14:"clearstatcache";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:82:"void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]] )";i:3;s:566:"When you use, , or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script's operation, you may elect to clear the status cache. In these cases, you can use the function to clear the information that PHP caches about a file.";}
a:4:{i:0;s:4:"copy";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"bool copy ( string $source, string $dest [, resource $context ] )";i:3;s:29:"Makes a copy of the file to .";}
a:4:{i:0;s:6:"delete";i:1;s:5:" â€”
";i:2;s:0:"";i:3;s:95:"This is a dummy manual entry to satisfy those people who are looking for or in the wrong place.";}
a:4:{i:0;s:7:"dirname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"string dirname ( string $path )";i:3;s:113:"Given a string containing the path of a file or directory, this function will return the parent directory's path.";}
a:4:{i:0;s:15:"disk_free_space";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:43:"float disk_free_space ( string $directory )";i:3;s:145:"Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.";}
a:4:{i:0;s:16:"disk_total_space";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:44:"float disk_total_space ( string $directory )";i:3;s:141:"Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.";}
a:4:{i:0;s:13:"diskfreespace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:6:"fclose";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"bool fclose ( resource $handle )";i:3;s:33:"The file pointed to by is closed.";}
a:4:{i:0;s:4:"feof";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"bool feof ( resource $handle )";i:3;s:40:"Tests for end-of-file on a file pointer.";}
a:4:{i:0;s:6:"fflush";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:32:"bool fflush ( resource $handle )";i:3;s:92:"This function forces a write of all buffered output to the resource pointed to by the file .";}
a:4:{i:0;s:5:"fgetc";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"string fgetc ( resource $handle )";i:3;s:45:"Gets a character from the given file pointer.";}
a:4:{i:0;s:7:"fgetcsv";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:137:"array fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]]] )";i:3;s:117:"Similar to except that parses the line it reads for fields in format and returns an array containing the fields read.";}
a:4:{i:0;s:5:"fgets";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"string fgets ( resource $handle [, int $length ] )";i:3;s:30:"Gets a line from file pointer.";}
a:4:{i:0;s:6:"fgetss";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:78:"string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )";i:3;s:100:"Identical to, except that attempts to strip any NUL bytes, HTML and PHP tags from the text it reads.";}
a:4:{i:0;s:11:"file_exists";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"bool file_exists ( string $filename )";i:3;s:42:"Checks whether a file or directory exists.";}
a:4:{i:0;s:17:"file_get_contents";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:140:"string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] )";i:3;s:128:"This function is similar to, except that returns the file in a, starting at the specified up to bytes. On failure, will return .";}
a:4:{i:0;s:17:"file_put_contents";i:1;s:7:"(PHP 5)";i:2;s:97:"int file_put_contents ( string $filename, mixed $data [, int $flags = 0 [, resource $context ]] )";i:3;s:80:"This function is identical to calling, and successively to write data to a file.";}
a:4:{i:0;s:4:"file";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:73:"array file ( string $filename [, int $flags = 0 [, resource $context ]] )";i:3;s:35:"Reads an entire file into an array.";}
a:4:{i:0;s:9:"fileatime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int fileatime ( string $filename )";i:3;s:44:"Gets the last access time of the given file.";}
a:4:{i:0;s:9:"filectime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int filectime ( string $filename )";i:3;s:37:"Gets the inode change time of a file.";}
a:4:{i:0;s:9:"filegroup";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int filegroup ( string $filename )";i:3;s:101:"Gets the file group. The group ID is returned in numerical format, use to resolve it to a group name.";}
a:4:{i:0;s:9:"fileinode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int fileinode ( string $filename )";i:3;s:20:"Gets the file inode.";}
a:4:{i:0;s:9:"filemtime";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int filemtime ( string $filename )";i:3;s:144:"This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.";}
a:4:{i:0;s:9:"fileowner";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int fileowner ( string $filename )";i:3;s:20:"Gets the file owner.";}
a:4:{i:0;s:9:"fileperms";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int fileperms ( string $filename )";i:3;s:36:"Gets permissions for the given file.";}
a:4:{i:0;s:8:"filesize";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"int filesize ( string $filename )";i:3;s:33:"Gets the size for the given file.";}
a:4:{i:0;s:8:"filetype";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"string filetype ( string $filename )";i:3;s:35:"Returns the type of the given file.";}
a:4:{i:0;s:5:"flock";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"bool flock ( resource $handle, int $operation [, int &$wouldblock ] )";i:3;s:148:"allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).";}
a:4:{i:0;s:7:"fnmatch";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:68:"bool fnmatch ( string $pattern, string $string [, int $flags = 0 ] )";i:3;s:59:"checks if the passed would match the given shell wildcard .";}
a:4:{i:0;s:5:"fopen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:107:"resource fopen ( string $filename, string $mode [, bool $use_include_path = false [, resource $context ]] )";i:3;s:50:"binds a named resource, specified by, to a stream.";}
a:4:{i:0;s:9:"fpassthru";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int fpassthru ( resource $handle )";i:3;s:109:"Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.";}
a:4:{i:0;s:7:"fputcsv";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:104:"int fputcsv ( resource $handle, array $fields [, string $delimiter = ',' [, string $enclosure = '"' ]] )";i:3;s:104:"formats a line (passed as a array) as CSV and write it (terminated by a newline) to the specified file .";}
a:4:{i:0;s:5:"fputs";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:5:"fread";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string fread ( resource $handle, int $length )";i:3;s:120:"reads up to bytes from the file pointer referenced by . Reading stops as soon as one of the following conditions is met:";}
a:4:{i:0;s:6:"fscanf";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:66:"mixed fscanf ( resource $handle, string $format [, mixed &$... ] )";i:3;s:177:"The function is similar to, but it takes its input from a file associated with and interprets the input according to the specified, which is described in the documentation for .";}
a:4:{i:0;s:5:"fseek";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"int fseek ( resource $handle, int $offset [, int $whence = SEEK_SET ] )";i:3;s:182:"Sets the file position indicator for the file referenced by . The new position, measured in bytes from the beginning of the file, is obtained by adding to the position specified by .";}
a:4:{i:0;s:5:"fstat";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"array fstat ( resource $handle )";i:3;s:175:"Gathers the statistics of the file opened by the file pointer . This function is similar to the function except that it operates on an open file pointer instead of a filename.";}
a:4:{i:0;s:5:"ftell";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"int ftell ( resource $handle )";i:3;s:56:"Returns the position of the file pointer referenced by .";}
a:4:{i:0;s:9:"ftruncate";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"bool ftruncate ( resource $handle, int $size )";i:3;s:59:"Takes the filepointer,, and truncates the file to length, .";}
a:4:{i:0;s:6:"fwrite";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"int fwrite ( resource $handle, string $string [, int $length ] )";i:3;s:57:"writes the contents of to the file stream pointed to by .";}
a:4:{i:0;s:4:"glob";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:50:"array glob ( string $pattern [, int $flags = 0 ] )";i:3;s:162:"The function searches for all the pathnames matching according to the rules used by the libc glob() function, which is similar to the rules used by common shells.";}
a:4:{i:0;s:6:"is_dir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"bool is_dir ( string $filename )";i:3;s:48:"Tells whether the given filename is a directory.";}
a:4:{i:0;s:13:"is_executable";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"bool is_executable ( string $filename )";i:3;s:41:"Tells whether the filename is executable.";}
a:4:{i:0;s:7:"is_file";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"bool is_file ( string $filename )";i:3;s:47:"Tells whether the given file is a regular file.";}
a:4:{i:0;s:7:"is_link";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"bool is_link ( string $filename )";i:3;s:48:"Tells whether the given file is a symbolic link.";}
a:4:{i:0;s:11:"is_readable";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"bool is_readable ( string $filename )";i:3;s:44:"Tells whether a file exists and is readable.";}
a:4:{i:0;s:16:"is_uploaded_file";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:42:"bool is_uploaded_file ( string $filename )";i:3;s:216:"Returns if the file named by was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, .";}
a:4:{i:0;s:11:"is_writable";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"bool is_writable ( string $filename )";i:3;s:134:"Returns if the exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable.";}
a:4:{i:0;s:12:"is_writeable";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:6:"lchgrp";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:46:"bool lchgrp ( string $filename, mixed $group )";i:3;s:48:"Attempts to change the group of the symlink to .";}
a:4:{i:0;s:6:"lchown";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:45:"bool lchown ( string $filename, mixed $user )";i:3;s:53:"Attempts to change the owner of the symlink to user .";}
a:4:{i:0;s:4:"link";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"bool link ( string $target, string $link )";i:3;s:20:"creates a hard link.";}
a:4:{i:0;s:8:"linkinfo";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"int linkinfo ( string $path )";i:3;s:30:"Gets information about a link.";}
a:4:{i:0;s:5:"lstat";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"array lstat ( string $filename )";i:3;s:62:"Gathers the statistics of the file or symbolic link named by .";}
a:4:{i:0;s:5:"mkdir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:103:"bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )";i:3;s:55:"Attempts to create the directory specified by pathname.";}
a:4:{i:0;s:18:"move_uploaded_file";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:65:"bool move_uploaded_file ( string $filename, string $destination )";i:3;s:216:"This function checks to ensure that the file designated by is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by .";}
a:4:{i:0;s:14:"parse_ini_file";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:120:"array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )";i:3;s:91:"loads in the ini file specified in, and returns the settings in it in an associative array.";}
a:4:{i:0;s:16:"parse_ini_string";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:117:"array parse_ini_string ( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )";i:3;s:55:"returns the settings in string in an associative array.";}
a:4:{i:0;s:8:"pathinfo";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:129:"mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )";i:3;s:83:"returns information about : either an associative array or a string, depending on .";}
a:4:{i:0;s:6:"pclose";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"int pclose ( resource $handle )";i:3;s:43:"Closes a file pointer to a pipe opened by .";}
a:4:{i:0;s:5:"popen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"resource popen ( string $command, string $mode )";i:3;s:75:"Opens a pipe to a process executed by forking the command given by command.";}
a:4:{i:0;s:8:"readfile";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"int readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] )";i:3;s:48:"Reads a file and writes it to the output buffer.";}
a:4:{i:0;s:8:"readlink";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string readlink ( string $path )";i:3;s:41:"does the same as the readlink C function.";}
a:4:{i:0;s:18:"realpath_cache_get";i:1;s:16:"(PHP 5 >= 5.3.2)";i:2;s:33:"array realpath_cache_get ( void )";i:3;s:39:"Get the contents of the realpath cache.";}
a:4:{i:0;s:19:"realpath_cache_size";i:1;s:16:"(PHP 5 >= 5.3.2)";i:2;s:32:"int realpath_cache_size ( void )";i:3;s:52:"Get the amount of memory used by the realpath cache.";}
a:4:{i:0;s:8:"realpath";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string realpath ( string $path )";i:3;s:154:"expands all symbolic links and resolves references to '/./', '/../' and extra '/' characters in the input and returns the canonicalized absolute pathname.";}
a:4:{i:0;s:6:"rename";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"bool rename ( string $oldname, string $newname [, resource $context ] )";i:3;s:101:"Attempts to rename to, moving it between directories if necessary. If exists, it will be overwritten.";}
a:4:{i:0;s:6:"rewind";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"bool rewind ( resource $handle )";i:3;s:73:"Sets the file position indicator for to the beginning of the file stream.";}
a:4:{i:0;s:5:"rmdir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"bool rmdir ( string $dirname [, resource $context ] )";i:3;s:163:"Attempts to remove the directory named by . The directory must be empty, and the relevant permissions must permit this. A level error will be generated on failure.";}
a:4:{i:0;s:15:"set_file_buffer";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:4:"stat";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"array stat ( string $filename )";i:3;s:122:"Gathers the statistics of the file named by . If is a symbolic link, statistics are from the file itself, not the symlink.";}
a:4:{i:0;s:7:"symlink";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"bool symlink ( string $target, string $link )";i:3;s:65:"creates a symbolic link to the existing with the specified name .";}
a:4:{i:0;s:7:"tempnam";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string tempnam ( string $dir, string $prefix )";i:3;s:221:"Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist, may generate a file in the system's temporary directory, and return the name of that.";}
a:4:{i:0;s:7:"tmpfile";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"resource tmpfile ( void )";i:3;s:95:"Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle .";}
a:4:{i:0;s:5:"touch";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:70:"bool touch ( string $filename [, int $time = time() [, int $atime ]] )";i:3;s:194:"Attempts to set the access and modification times of the file named in the parameter to the value given in . Note that the access time is always modified, regardless of the number of parameters.";}
a:4:{i:0;s:5:"umask";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int umask ([ int $mask ] )";i:3;s:149:"sets PHP's umask to & 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.";}
a:4:{i:0;s:6:"unlink";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"bool unlink ( string $filename [, resource $context ] )";i:3;s:94:"Deletes . Similar to the Unix C unlink() function. A level error will be generated on failure.";}
a:4:{i:0;s:17:"inotify_add_watch";i:1;s:23:"(PECL inotify >= 0.1.2)";i:2;s:81:"int inotify_add_watch ( resource $inotify_instance, string $pathname, int $mask )";i:3;s:85:"adds a new watch or modify an existing watch for the file or directory specified in .";}
a:4:{i:0;s:12:"inotify_init";i:1;s:23:"(PECL inotify >= 0.1.2)";i:2;s:30:"resource inotify_init ( void )";i:3;s:43:"Initialize an inotify instance for use with";}
a:4:{i:0;s:17:"inotify_queue_len";i:1;s:23:"(PECL inotify >= 0.1.2)";i:2;s:52:"int inotify_queue_len ( resource $inotify_instance )";i:3;s:136:"This function allows to know if will block or not. If a number upper than zero is returned, there are pending events and will not block.";}
a:4:{i:0;s:12:"inotify_read";i:1;s:23:"(PECL inotify >= 0.1.2)";i:2;s:49:"array inotify_read ( resource $inotify_instance )";i:3;s:45:"Read inotify events from an inotify instance.";}
a:4:{i:0;s:16:"inotify_rm_watch";i:1;s:23:"(PECL inotify >= 0.1.2)";i:2;s:75:"bool inotify_rm_watch ( resource $inotify_instance, int $watch_descriptor )";i:3;s:45:"removes the watch from the inotify instance .";}
a:4:{i:0;s:12:"setproctitle";i:1;s:25:"(PECL proctitle >= 0.1.0)";i:2;s:35:"void setproctitle ( string $title )";i:3;s:46:"Sets the process title of the current process.";}
a:4:{i:0;s:14:"setthreadtitle";i:1;s:25:"(PECL proctitle >= 0.1.2)";i:2;s:37:"bool setthreadtitle ( string $title )";i:3;s:22:"Sets the thread title.";}
a:4:{i:0;s:9:"xattr_get";i:1;s:21:"(PECL xattr >= 0.9.0)";i:2;s:71:"string xattr_get ( string $filename, string $name [, int $flags = 0 ] )";i:3;s:64:"This function gets the value of an extended attribute of a file.";}
a:4:{i:0;s:10:"xattr_list";i:1;s:21:"(PECL xattr >= 0.9.0)";i:2;s:57:"array xattr_list ( string $filename [, int $flags = 0 ] )";i:3;s:69:"This functions gets a list of names of extended attributes of a file.";}
a:4:{i:0;s:12:"xattr_remove";i:1;s:21:"(PECL xattr >= 0.9.0)";i:2;s:72:"bool xattr_remove ( string $filename, string $name [, int $flags = 0 ] )";i:3;s:54:"This function removes an extended attribute of a file.";}
a:4:{i:0;s:9:"xattr_set";i:1;s:21:"(PECL xattr >= 0.9.0)";i:2;s:84:"bool xattr_set ( string $filename, string $name, string $value [, int $flags = 0 ] )";i:3;s:64:"This function sets the value of an extended attribute of a file.";}
a:4:{i:0;s:15:"xattr_supported";i:1;s:21:"(PECL xattr >= 1.0.0)";i:2;s:61:"bool xattr_supported ( string $filename [, int $flags = 0 ] )";i:3;s:129:"This functions checks if the filesystem holding the given file supports extended attributes. Read access to the file is required.";}
a:4:{i:0;s:21:"xdiff_file_bdiff_size";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:42:"int xdiff_file_bdiff_size ( string $file )";i:3;s:113:"Returns a size of a result file that would be created after applying binary patch from file to the original file.";}
a:4:{i:0;s:16:"xdiff_file_bdiff";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:74:"bool xdiff_file_bdiff ( string $old_file, string $new_file, string $dest )";i:3;s:176:"Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using / .";}
a:4:{i:0;s:17:"xdiff_file_bpatch";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:68:"bool xdiff_file_bpatch ( string $file, string $patch, string $dest )";i:3;s:148:"Patches a with a binary and stores the result in a file . This function accepts patches created both via and functions or their string counterparts.";}
a:4:{i:0;s:22:"xdiff_file_diff_binary";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:80:"bool xdiff_file_diff_binary ( string $old_file, string $new_file, string $dest )";i:3;s:174:"Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using .";}
a:4:{i:0;s:15:"xdiff_file_diff";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:121:"bool xdiff_file_diff ( string $old_file, string $new_file, string $dest [, int $context = 3 [, bool $minimal = false ]] )";i:3;s:320:"Makes an unified diff containing differences between and and stores it in file. The resulting file is human-readable. An optional parameter specifies how many lines of context should be added around each change. Setting parameter to true will result in outputting the shortest patch file possible (can take a long time).";}
a:4:{i:0;s:17:"xdiff_file_merge3";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:96:"mixed xdiff_file_merge3 ( string $old_file, string $new_file1, string $new_file2, string $dest )";i:3;s:136:"Merges three files into one and stores the result in a file . The is an original version while and are modified versions of an original.";}
a:4:{i:0;s:23:"xdiff_file_patch_binary";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:74:"bool xdiff_file_patch_binary ( string $file, string $patch, string $dest )";i:3;s:147:"Patches a with a binary and stores the result in a file . This function accepts patches created both via or functions or their string counterparts.";}
a:4:{i:0;s:16:"xdiff_file_patch";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:104:"mixed xdiff_file_patch ( string $file, string $patch, string $dest [, int $flags = DIFF_PATCH_NORMAL ] )";i:3;s:149:"Patches a with a and stores the result in a file. has to be an unified diff created by / function. An optional parameter specifies mode of operation.";}
a:4:{i:0;s:18:"xdiff_file_rabdiff";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:76:"bool xdiff_file_rabdiff ( string $old_file, string $new_file, string $dest )";i:3;s:312:"Makes a binary diff of two files and stores the result in a patch file. The difference between this function and is different algorithm used which should result in faster execution and smaller diff produced. This function works with both text and binary files. Resulting patch file can be later applied using / .";}
a:4:{i:0;s:23:"xdiff_string_bdiff_size";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:45:"int xdiff_string_bdiff_size ( string $patch )";i:3;s:97:"Returns a size of a result file that would be created after applying binary to the original file.";}
a:4:{i:0;s:18:"xdiff_string_bdiff";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:64:"string xdiff_string_bdiff ( string $old_data, string $new_data )";i:3;s:157:"Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using / .";}
a:4:{i:0;s:19:"xdiff_string_bpatch";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:57:"string xdiff_string_bpatch ( string $str, string $patch )";i:3;s:121:"Patches a string with a binary . This function accepts patches created both via and functions or their file counterparts.";}
a:4:{i:0;s:24:"xdiff_string_diff_binary";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:64:"string xdiff_string_bdiff ( string $old_data, string $new_data )";i:3;s:157:"Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using / .";}
a:4:{i:0;s:17:"xdiff_string_diff";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:111:"string xdiff_string_diff ( string $old_data, string $new_data [, int $context = 3 [, bool $minimal = false ]] )";i:3;s:327:"Makes an unified diff containing differences between string and string and returns it. The resulting diff is human-readable. An optional parameter specifies how many lines of context should be added around each change. Setting parameter to true will result in outputting the shortest patch file possible (can take a long time).";}
a:4:{i:0;s:19:"xdiff_string_merge3";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:104:"mixed xdiff_string_merge3 ( string $old_data, string $new_data1, string $new_data2 [, string &$error ] )";i:3;s:207:"Merges three strings into one and returns the result. The is an original version of data while and are modified versions of an original. An optional is used to pass any rejected parts during merging process.";}
a:4:{i:0;s:25:"xdiff_string_patch_binary";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:63:"string xdiff_string_patch_binary ( string $str, string $patch )";i:3;s:121:"Patches a string with a binary . This function accepts patches created both via and functions or their file counterparts.";}
a:4:{i:0;s:18:"xdiff_string_patch";i:1;s:21:"(PECL xdiff >= 0.2.0)";i:2;s:91:"string xdiff_string_patch ( string $str, string $patch [, int $flags [, string &$error ]] )";i:3;s:257:"Patches a string with an unified patch in parameter and returns the result. has to be an unified diff created by / function. An optional parameter specifies mode of operation. Any rejected parts of the patch will be stored inside variable if it is provided.";}
a:4:{i:0;s:20:"xdiff_string_rabdiff";i:1;s:21:"(PECL xdiff >= 1.5.0)";i:2;s:64:"string xdiff_string_bdiff ( string $old_data, string $new_data )";i:3;s:293:"Makes a binary diff of two strings and returns the result. The difference between this function and is different algorithm used which should result in faster execution and smaller diff produced. This function works with both text and binary data. Resulting patch can be later applied using / .";}
a:4:{i:0;s:23:"enchant_broker_describe";i:1;s:39:"(PHP 5 >= 5.3.0, PECL enchant >=
0.1.0)";i:2;s:50:"array enchant_broker_describe ( resource $broker )";i:3;s:132:"Enumerates the Enchant providers and tells you some rudimentary information about them. The same info is provided through phpinfo().";}
a:4:{i:0;s:26:"enchant_broker_dict_exists";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:65:"bool enchant_broker_dict_exists ( resource $broker, string $tag )";i:3;s:59:"Tells if a dictionary exists or not, using a non-empty tags";}
a:4:{i:0;s:24:"enchant_broker_free_dict";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:48:"bool enchant_broker_free_dict ( resource $dict )";i:3;s:27:"Free a dictionary resource.";}
a:4:{i:0;s:19:"enchant_broker_free";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:45:"bool enchant_broker_free ( resource $broker )";i:3;s:49:"Free a broker resource with all its dictionaries.";}
a:4:{i:0;s:24:"enchant_broker_get_error";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:52:"string enchant_broker_get_error ( resource $broker )";i:3;s:53:"Returns the last error which occurred in this broker.";}
a:4:{i:0;s:19:"enchant_broker_init";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:37:"resource enchant_broker_init ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"enchant_broker_list_dicts";i:1;s:39:"(PHP 5 >= 5.3.0, PECL enchant >=
1.0.1)";i:2;s:52:"mixed enchant_broker_list_dicts ( resource $broker )";i:3;s:60:"Returns a list of available dictionaries with their details.";}
a:4:{i:0;s:27:"enchant_broker_request_dict";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:70:"resource enchant_broker_request_dict ( resource $broker, string $tag )";i:3;s:122:"create a new dictionary using tag, the non-empty language tag you wish to request a dictionary for ("en_US", "de_DE", ...)";}
a:4:{i:0;s:31:"enchant_broker_request_pwl_dict";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:79:"resource enchant_broker_request_pwl_dict ( resource $broker, string $filename )";i:3;s:90:"Creates a dictionary using a PWL file. A PWL file is personal word file one word per line.";}
a:4:{i:0;s:27:"enchant_broker_set_ordering";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:84:"bool enchant_broker_set_ordering ( resource $broker, string $tag, string $ordering )";i:3;s:310:"Declares a preference of dictionaries to use for the language described/referred to by 'tag'. The ordering is a comma delimited list of provider names. As a special exception, the "*" tag can be used as a language tag to declare a default ordering for any language that does not explicitly declare an ordering.";}
a:4:{i:0;s:28:"enchant_dict_add_to_personal";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:66:"void enchant_dict_add_to_personal ( resource $dict, string $word )";i:3;s:57:"Add a word to personal word list of the given dictionary.";}
a:4:{i:0;s:27:"enchant_dict_add_to_session";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:65:"void enchant_dict_add_to_session ( resource $dict, string $word )";i:3;s:96:"Add a word to the given dictionary. It will be added only for the active spell-checking session.";}
a:4:{i:0;s:18:"enchant_dict_check";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:56:"bool enchant_dict_check ( resource $dict, string $word )";i:3;s:57:"If the word is correctly spelled return, otherwise return";}
a:4:{i:0;s:21:"enchant_dict_describe";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:46:"mixed enchant_dict_describe ( resource $dict )";i:3;s:38:"Returns the details of the dictionary.";}
a:4:{i:0;s:22:"enchant_dict_get_error";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:48:"string enchant_dict_get_error ( resource $dict )";i:3;s:54:"Returns the last error of the current spelling-session";}
a:4:{i:0;s:26:"enchant_dict_is_in_session";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:64:"bool enchant_dict_is_in_session ( resource $dict, string $word )";i:3;s:66:"Tells whether or not a word already exists in the current session.";}
a:4:{i:0;s:24:"enchant_dict_quick_check";i:1;s:42:"(PHP 5 >= 5.3.0, PECL
enchant:0.2.0-1.0.1)";i:2;s:87:"bool enchant_dict_quick_check ( resource $dict, string $word [, array &$suggestions ] )";i:3;s:131:"If the word is correctly spelled return, otherwise return, if suggestions variable is provided, fill it with spelling alternatives.";}
a:4:{i:0;s:30:"enchant_dict_store_replacement";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:80:"void enchant_dict_store_replacement ( resource $dict, string $mis, string $cor )";i:3;s:217:"Add a correction for 'mis' using 'cor'. Notes that you replaced @mis with @cor, so it's possibly more likely that future occurrences of @mis will be replaced with @cor. So it might bump @cor up in the suggestion list.";}
a:4:{i:0;s:20:"enchant_dict_suggest";i:1;s:40:"(PHP 5 >= 5.3.0, PECL enchant >= 0.1.0
)";i:2;s:59:"array enchant_dict_suggest ( resource $dict, string $word )";i:3;s:0:"";}
a:4:{i:0;s:15:"fribidi_log2vis";i:1;s:56:"(PHP 4 >= 4.0.4 and PHP 4 <= 4.1.0, PECL
fribidi >= 1.0)";i:2;s:71:"string fribidi_log2vis ( string $str, string $direction, int $charset )";i:3;s:42:"Converts a logical string to a visual one.";}
a:4:{i:0;s:22:"Gender\Gender::connect";i:1;s:22:"(PECL gender >= 0.6.0)";i:2;s:53:"public boolean Gender\Gender::connect ( string $dsn )";i:3;s:77:"Connect to an external name dictionary. Currently only streams are supported.";}
a:4:{i:0;s:26:"Gender\Gender::__construct";i:1;s:22:"(PECL gender >= 0.6.0)";i:2;s:52:"public Gender\Gender::__construct ([ string $dsn ] )";i:3;s:144:"Create a Gender object optionally connecting to an external name dictionary. When no external database was given, compiled in data will be used.";}
a:4:{i:0;s:22:"Gender\Gender::country";i:1;s:22:"(PECL gender >= 0.8.0)";i:2;s:56:"public array Gender\Gender::country ( integer $country )";i:3;s:77:"Returns the textual representation of a country from a Gender class constant.";}
a:4:{i:0;s:18:"Gender\Gender::get";i:1;s:22:"(PECL gender >= 0.6.0)";i:2;s:72:"public integer Gender\Gender::get ( string $name [, integer $country ] )";i:3;s:51:"Get the gender of the name in a particular country.";}
a:4:{i:0;s:21:"Gender\Gender::isNick";i:1;s:22:"(PECL gender >= 0.9.0)";i:2;s:89:"public array Gender\Gender::isNick ( string $name0, string $name1 [, integer $country ] )";i:3;s:47:"Check whether the name0 is a nick of the name1.";}
a:4:{i:0;s:27:"Gender\Gender::similarNames";i:1;s:22:"(PECL gender >= 0.9.0)";i:2;s:79:"public array Gender\Gender::similarNames ( string $name [, integer $country ] )";i:3;s:49:"Get similar names for the given name and country.";}
a:4:{i:0;s:23:"bind_textdomain_codeset";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:66:"string bind_textdomain_codeset ( string $domain, string $codeset )";i:3;s:92:"With, you can set in which encoding will be messages from returned by and similar functions.";}
a:4:{i:0;s:14:"bindtextdomain";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:59:"string bindtextdomain ( string $domain, string $directory )";i:3;s:40:"The function sets the path for a domain.";}
a:4:{i:0;s:9:"dcgettext";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"string dcgettext ( string $domain, string $message, int $category )";i:3;s:84:"This function allows you to override the current domain for a single message lookup.";}
a:4:{i:0;s:10:"dcngettext";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:91:"string dcngettext ( string $domain, string $msgid1, string $msgid2, int $n, int $category )";i:3;s:91:"This function allows you to override the current domain for a single plural message lookup.";}
a:4:{i:0;s:8:"dgettext";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:51:"string dgettext ( string $domain, string $message )";i:3;s:76:"The function allows you to override the current for a single message lookup.";}
a:4:{i:0;s:9:"dngettext";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:75:"string dngettext ( string $domain, string $msgid1, string $msgid2, int $n )";i:3;s:83:"The function allows you to override the current for a single plural message lookup.";}
a:4:{i:0;s:7:"gettext";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"string gettext ( string $message )";i:3;s:41:"Looks up a message in the current domain.";}
a:4:{i:0;s:8:"ngettext";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:58:"string ngettext ( string $msgid1, string $msgid2, int $n )";i:3;s:106:"The plural version of . Some languages have more than one form for plural messages dependent on the count.";}
a:4:{i:0;s:10:"textdomain";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"string textdomain ( string $text_domain )";i:3;s:110:"This function sets the domain to search within when calls are made to, usually the named after an application.";}
a:4:{i:0;s:18:"iconv_get_encoding";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:52:"mixed iconv_get_encoding ([ string $type = "all" ] )";i:3;s:61:"Retrieve internal configuration variables of iconv extension.";}
a:4:{i:0;s:25:"iconv_mime_decode_headers";i:1;s:7:"(PHP 5)";i:2;s:135:"array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )";i:3;s:39:"Decodes multiple header fields at once.";}
a:4:{i:0;s:17:"iconv_mime_decode";i:1;s:7:"(PHP 5)";i:2;s:127:"string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )";i:3;s:23:"Decodes a header field.";}
a:4:{i:0;s:17:"iconv_mime_encode";i:1;s:7:"(PHP 5)";i:2;s:99:"string iconv_mime_encode ( string $field_name, string $field_value [, array $preferences = NULL ] )";i:3;s:99:"Composes and returns a string that represents a valid header field, which looks like the following:";}
a:4:{i:0;s:18:"iconv_set_encoding";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:57:"bool iconv_set_encoding ( string $type, string $charset )";i:3;s:74:"Changes the value of the internal configuration variable specified by to .";}
a:4:{i:0;s:12:"iconv_strlen";i:1;s:7:"(PHP 5)";i:2;s:90:"int iconv_strlen ( string $str [, string $charset = ini_get("iconv.internal_encoding") ] )";i:3;s:210:"In contrast to, counts the occurrences of characters in the given byte sequence on the basis of the specified character set, the result of which is not necessarily identical to the length of the string in byte.";}
a:4:{i:0;s:12:"iconv_strpos";i:1;s:7:"(PHP 5)";i:2;s:131:"int iconv_strpos ( string $haystack, string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )";i:3;s:50:"Finds position of first occurrence of a within a .";}
a:4:{i:0;s:13:"iconv_strrpos";i:1;s:7:"(PHP 5)";i:2;s:112:"int iconv_strrpos ( string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding") ] )";i:3;s:41:"Finds the last occurrence of a within a .";}
a:4:{i:0;s:12:"iconv_substr";i:1;s:7:"(PHP 5)";i:2;s:153:"string iconv_substr ( string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding") ]] )";i:3;s:50:"Cuts a portion of specified by the and parameters.";}
a:4:{i:0;s:5:"iconv";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:69:"string iconv ( string $in_charset, string $out_charset, string $str )";i:3;s:59:"Performs a character set conversion on the string from to .";}
a:4:{i:0;s:16:"ob_iconv_handler";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:57:"string ob_iconv_handler ( string $contents, int $status )";i:3;s:35:"Converts the string encoded in to .";}
a:4:{i:0;s:15:"Collator::asort";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:63:"public bool Collator::asort ( array &$arr [, int $sort_flag ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"Collator::compare";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:59:"public int Collator::compare ( string $str1, string $str2 )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"Collator::__construct";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:49:"public Collator::__construct() ( string $locale )";i:3;s:35:"Creates a new instance of Collator.";}
a:4:{i:0;s:16:"Collator::create";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:58:"public static Collator Collator::create ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"Collator::getAttribute";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:47:"public int Collator::getAttribute ( int $attr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"Collator::getErrorCode";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:42:"public int Collator::getErrorCode ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"Collator::getErrorMessage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:48:"public string Collator::getErrorMessage ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"Collator::getLocale";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:47:"public string Collator::getLocale ( int $type )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"Collator::getSortKey";i:1;s:37:"(PHP 5 >= 5.3.11, PECL intl >= 1.0.3)";i:2;s:50:"public string Collator::getSortKey ( string $str )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"Collator::getStrength";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:41:"public int Collator::getStrength ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"Collator::setAttribute";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:58:"public bool Collator::setAttribute ( int $attr, int $val )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"Collator::setStrength";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:51:"public bool Collator::setStrength ( int $strength )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"Collator::sortWithSortKeys";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:54:"public bool Collator::sortWithSortKeys ( array &$arr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:14:"Collator::sort";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:62:"public bool Collator::sort ( array &$arr [, int $sort_flag ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"NumberFormatter::create";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:105:"public static NumberFormatter NumberFormatter::create ( string $locale, int $style [, string $pattern ] )";i:3;s:30:"Object oriented style (method)";}
a:4:{i:0;s:31:"NumberFormatter::formatCurrency";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:80:"public string NumberFormatter::formatCurrency ( float $value, string $currency )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"NumberFormatter::format";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:70:"public string NumberFormatter::format ( number $value [, int $type ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"NumberFormatter::getAttribute";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:54:"public int NumberFormatter::getAttribute ( int $attr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"NumberFormatter::getErrorCode";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:49:"public int NumberFormatter::getErrorCode ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:32:"NumberFormatter::getErrorMessage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:55:"public string NumberFormatter::getErrorMessage ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"NumberFormatter::getLocale";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:57:"public string NumberFormatter::getLocale ([ int $type ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"NumberFormatter::getPattern";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:50:"public string NumberFormatter::getPattern ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"NumberFormatter::getSymbol";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:54:"public string NumberFormatter::getSymbol ( int $attr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:33:"NumberFormatter::getTextAttribute";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:61:"public string NumberFormatter::getTextAttribute ( int $attr )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"NumberFormatter::parseCurrency";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:100:"public float NumberFormatter::parseCurrency ( string $value, string &$currency [, int &$position ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"NumberFormatter::parse";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:87:"public mixed NumberFormatter::parse ( string $value [, int $type [, int &$position ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"NumberFormatter::setAttribute";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:67:"public bool NumberFormatter::setAttribute ( int $attr, int $value )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"NumberFormatter::setPattern";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:59:"public bool NumberFormatter::setPattern ( string $pattern )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"NumberFormatter::setSymbol";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:67:"public bool NumberFormatter::setSymbol ( int $attr, string $value )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:33:"NumberFormatter::setTextAttribute";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:74:"public bool NumberFormatter::setTextAttribute ( int $attr, string $value )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"Locale::acceptFromHttp";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:62:"public static string Locale::acceptFromHttp ( string $header )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"Locale::canonicalize";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:60:"public static string Locale::canonicalize ( string $locale )";i:3;s:0:"";}
a:4:{i:0;s:21:"Locale::composeLocale";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:61:"public static string Locale::composeLocale ( array $subtags )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"Locale::filterMatches";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:108:"public static bool Locale::filterMatches ( string $langtag, string $locale [, bool $canonicalize = false ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"Locale::getAllVariants";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:61:"public static array Locale::getAllVariants ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"Locale::getDefault";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:48:"public static string Locale::getDefault ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"Locale::getDisplayLanguage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:89:"public static string Locale::getDisplayLanguage ( string $locale [, string $in_locale ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"Locale::getDisplayName";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:85:"public static string Locale::getDisplayName ( string $locale [, string $in_locale ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"Locale::getDisplayRegion";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:87:"public static string Locale::getDisplayRegion ( string $locale [, string $in_locale ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"Locale::getDisplayScript";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:87:"public static string Locale::getDisplayScript ( string $locale [, string $in_locale ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"Locale::getDisplayVariant";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:88:"public static string Locale::getDisplayVariant ( string $locale [, string $in_locale ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"Locale::getKeywords";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:58:"public static array Locale::getKeywords ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"Locale::getPrimaryLanguage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:66:"public static string Locale::getPrimaryLanguage ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"Locale::getRegion";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:57:"public static string Locale::getRegion ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"Locale::getScript";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:57:"public static string Locale::getScript ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:14:"Locale::lookup";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:122:"public static string Locale::lookup ( array $langtag, string $locale [, bool $canonicalize = false [, string $default ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"Locale::parseLocale";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:58:"public static array Locale::parseLocale ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"Locale::setDefault";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:56:"public static bool Locale::setDefault ( string $locale )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"Normalizer::isNormalized";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:100:"public static bool Normalizer::isNormalized ( string $input [, string $form = Normalizer::FORM_C ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"Normalizer::normalize";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:99:"public static string Normalizer::normalize ( string $input [, string $form = Normalizer::FORM_C ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"MessageFormatter::create";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:91:"public static MessageFormatter MessageFormatter::create ( string $locale, string $pattern )";i:3;s:30:"Object oriented style (method)";}
a:4:{i:0;s:31:"MessageFormatter::formatMessage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:101:"public static string MessageFormatter::formatMessage ( string $locale, string $pattern, array $args )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"MessageFormatter::format";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:54:"public string MessageFormatter::format ( array $args )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"MessageFormatter::getErrorCode";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:50:"public int MessageFormatter::getErrorCode ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:33:"MessageFormatter::getErrorMessage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:56:"public string MessageFormatter::getErrorMessage ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"MessageFormatter::getLocale";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:50:"public string MessageFormatter::getLocale ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"MessageFormatter::getPattern";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:51:"public string MessageFormatter::getPattern ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"MessageFormatter::parseMessage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:102:"public static array MessageFormatter::parseMessage ( string $locale, string $pattern, string $source )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"MessageFormatter::parse";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:54:"public array MessageFormatter::parse ( string $value )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"MessageFormatter::setPattern";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:60:"public bool MessageFormatter::setPattern ( string $pattern )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"IntlCalendar::add";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:57:"public bool IntlCalendar::add ( int $field, int $amount )";i:3;s:174:"Add a signed amount to a field. Adding a positive amount allows advances in time, even if the numeric value of the field decreases (e.g. when working with years in BC dates).";}
a:4:{i:0;s:19:"IntlCalendar::after";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:58:"public bool IntlCalendar::after ( IntlCalendar $calendar )";i:3;s:70:"Returns whether this objectÃŠÂ¼s time succeeds the argumentÃŠÂ¼s time.";}
a:4:{i:0;s:20:"IntlCalendar::before";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:59:"public bool IntlCalendar::before ( IntlCalendar $calendar )";i:3;s:70:"Returns whether this objectÃŠÂ¼s time precedes the argumentÃŠÂ¼s time.";}
a:4:{i:0;s:19:"IntlCalendar::clear";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:56:"public bool IntlCalendar::clear ([ int $field = NULL ] )";i:3;s:377:"Clears either all of the fields or a specific field. A cleared field is marked as unset, giving it the lowest priority against overlapping fields or even default values when calculating the time. Additionally, its value is set to, though given the fieldÃŠÂ¼s low priority, its value may have been internally set to another value by the time the field has finished been queried.";}
a:4:{i:0;s:25:"IntlCalendar::__construct";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:42:"private IntlCalendar::__construct ( void )";i:3;s:70:"A private constructor for disallowing instantiation with the operator.";}
a:4:{i:0;s:28:"IntlCalendar::createInstance";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:111:"public static IntlCalendar IntlCalendar::createInstance ([ mixed $timeZone = NULL [, string $locale = NULL ]] )";i:3;s:106:"Given a timezone and locale, this method creates an object. This factory method may return a subclass of .";}
a:4:{i:0;s:20:"IntlCalendar::equals";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:59:"public bool IntlCalendar::equals ( IntlCalendar $calendar )";i:3;s:146:"Returns true if this calendar and the given calendar have the same time. The settings, calendar types and field states do not have to be the same.";}
a:4:{i:0;s:29:"IntlCalendar::fieldDifference";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:68:"public int IntlCalendar::fieldDifference ( float $when, int $field )";i:3;s:134:"Return the difference between the given time and the time this object is set to, with respect to the quantity specified the parameter.";}
a:4:{i:0;s:26:"IntlCalendar::fromDateTime";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a2)";i:2;s:73:"public static IntlCalendar IntlCalendar::fromDateTime ( mixed $dateTime )";i:3;s:89:"Creates an object either from a object or from a string from which a object can be built.";}
a:4:{i:0;s:17:"IntlCalendar::get";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:43:"public int IntlCalendar::get ( int $field )";i:3;s:36:"Gets the value for a specific field.";}
a:4:{i:0;s:30:"IntlCalendar::getActualMaximum";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:56:"public int IntlCalendar::getActualMaximum ( int $field )";i:3;s:403:"Returns a fieldÃŠÂ¼s relative maximum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the for the field and would increment it until reaching the or the field value wraps around, in which the value returned would be the global maximum or the value before the wrapping, respectively.";}
a:4:{i:0;s:30:"IntlCalendar::getActualMinimum";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:56:"public int IntlCalendar::getActualMinimum ( int $field )";i:3;s:403:"Returns a fieldÃŠÂ¼s relative minimum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the for the field and would decrement it until reaching the or the field value wraps around, in which the value returned would be the global minimum or the value before the wrapping, respectively.";}
a:4:{i:0;s:33:"IntlCalendar::getAvailableLocales";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:62:"public static array IntlCalendar::getAvailableLocales ( void )";i:3;s:121:"Gives the list of locales for which calendars are installed. As of ICU 51, this is the list of all installed ICU locales.";}
a:4:{i:0;s:30:"IntlCalendar::getDayOfWeekType";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:60:"public int IntlCalendar::getDayOfWeekType ( int $dayOfWeek )";i:3;s:169:"Returns whether the passed day is a weekday (), a weekend day (), a day during which a transition occurs into the weekend () or a day during which the weekend ceases ().";}
a:4:{i:0;s:26:"IntlCalendar::getErrorCode";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:46:"public int IntlCalendar::getErrorCode ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:29:"IntlCalendar::getErrorMessage";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:52:"public string IntlCalendar::getErrorMessage ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:31:"IntlCalendar::getFirstDayOfWeek";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:51:"public int IntlCalendar::getFirstDayOfWeek ( void )";i:3;s:101:"The week day deemed to start a week, either the default value for this locale or the value set with .";}
a:4:{i:0;s:32:"IntlCalendar::getGreatestMinimum";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:58:"public int IntlCalendar::getGreatestMinimum ( int $field )";i:3;s:241:"Returns the largest local minimum for a field. This should be a value larger or equal to that returned by, which is in its turn larger or equal to that returned by . All these three functions return the same value for the Gregorian calendar.";}
a:4:{i:0;s:39:"IntlCalendar::getKeywordValuesForLocale";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:117:"public static Iterator IntlCalendar::getKeywordValuesForLocale ( string $key, string $locale, boolean $commonlyUsed )";i:3;s:141:"For a given locale key, get the set of values for that key that would result in a different behavior. For now, only the keyword is supported.";}
a:4:{i:0;s:29:"IntlCalendar::getLeastMaximum";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:55:"public int IntlCalendar::getLeastMaximum ( int $field )";i:3;s:169:"Returns the smallest local maximumw for a field. This should be a value smaller or equal to that returned by, which is in its turn smaller or equal to that returned by .";}
a:4:{i:0;s:23:"IntlCalendar::getLocale";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:57:"public string IntlCalendar::getLocale ( int $localeType )";i:3;s:48:"Returns the locale used by this calendar object.";}
a:4:{i:0;s:24:"IntlCalendar::getMaximum";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:50:"public int IntlCalendar::getMaximum ( int $field )";i:3;s:173:"Gets the global maximum for a field, in this specific calendar. This value is larger or equal to that returned by, which is in its turn larger or equal to that returned by .";}
a:4:{i:0;s:39:"IntlCalendar::getMinimalDaysInFirstWeek";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:59:"public int IntlCalendar::getMinimalDaysInFirstWeek ( void )";i:3;s:469:"Returns the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by ; otherwise it will be the previous yearÃŠÂ¼s last week.";}
a:4:{i:0;s:24:"IntlCalendar::getMinimum";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:50:"public int IntlCalendar::getMinimum ( int $field )";i:3;s:272:"Gets the global minimum for a field, in this specific calendar. This value is smaller or equal to that returned by, which is in its turn smaller or equal to that returned by . For the Gregorian calendar, these three functions always return the same value (for each field).";}
a:4:{i:0;s:20:"IntlCalendar::getNow";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:49:"public static float IntlCalendar::getNow ( void )";i:3;s:114:"The number of milliseconds that have passed since the reference date. This number is derived from the system time.";}
a:4:{i:0;s:39:"IntlCalendar::getRepeatedWallTimeOption";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:59:"public int IntlCalendar::getRepeatedWallTimeOption ( void )";i:3;s:170:"Gets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is .";}
a:4:{i:0;s:38:"IntlCalendar::getSkippedWallTimeOption";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:58:"public int IntlCalendar::getSkippedWallTimeOption ( void )";i:3;s:172:"Gets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is .";}
a:4:{i:0;s:21:"IntlCalendar::getTime";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:43:"public float IntlCalendar::getTime ( void )";i:3;s:102:"Returns the time associated with this object, expressed as the number of milliseconds since the epoch.";}
a:4:{i:0;s:25:"IntlCalendar::getTimeZone";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:54:"public IntlTimeZone IntlCalendar::getTimeZone ( void )";i:3;s:49:"Returns the object associated with this calendar.";}
a:4:{i:0;s:21:"IntlCalendar::getType";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:44:"public string IntlCalendar::getType ( void )";i:3;s:98:"A string describing the type of this calendar. This is one of the for the calendar keyword value .";}
a:4:{i:0;s:34:"IntlCalendar::getWeekendTransition";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:67:"public int IntlCalendar::getWeekendTransition ( string $dayOfWeek )";i:3;s:86:"Returns the number of milliseconds after midnight at which the weekend begins or ends.";}
a:4:{i:0;s:28:"IntlCalendar::inDaylightTime";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:49:"public bool IntlCalendar::inDaylightTime ( void )";i:3;s:120:"Whether, for the instant represented by this object and for this objectÃŠÂ¼s timezone, daylight saving time is in place.";}
a:4:{i:0;s:28:"IntlCalendar::isEquivalentTo";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:67:"public bool IntlCalendar::isEquivalentTo ( IntlCalendar $calendar )";i:3;s:389:"Returns whether this and the given object are equivalent for all purposes except as to the time they have set. The locales do not have to match, as long as no change in behavior results from such mismatch. This includes the, whether the is set, the and wall time settings, the and the . It may also include other calendar specific settings, such as the Gregorian/Julian transition instant.";}
a:4:{i:0;s:23:"IntlCalendar::isLenient";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:44:"public bool IntlCalendar::isLenient ( void )";i:3;s:178:"Returns whether the current date/time interpretations is lenient (the default). If that is case, some out of range values for fields will be accepted instead of raising an error.";}
a:4:{i:0;s:19:"IntlCalendar::isSet";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:46:"public bool IntlCalendar::isSet ( int $field )";i:3;s:212:"Returns whether a field is set (as opposed to ). Set fields take priority over unset fields and their default values when the date/time is being calculated. Fields set later take priority over fields set earlier.";}
a:4:{i:0;s:23:"IntlCalendar::isWeekend";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:61:"public bool IntlCalendar::isWeekend ([ float $date = NULL ] )";i:3;s:137:"Returns whether either the obejctÃŠÂ¼s current time or the provided timestamp occur during a weekend in this objectÃŠÂ¼s calendar system.";}
a:4:{i:0;s:18:"IntlCalendar::roll";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:70:"public bool IntlCalendar::roll ( int $field, mixed $amountOrUpOrDown )";i:3;s:153:"Adds a (signed) amount to a field. The difference with respect to is that when the field value overflows, it does not carry into more significant fields.";}
a:4:{i:0;s:17:"IntlCalendar::set";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:56:"public bool IntlCalendar::set ( int $field, int $value )";i:3;s:171:"Sets either a specific field to the given value, or sets at once several common fields. The range of values that are accepted depend on whether the calendar is using the .";}
a:4:{i:0;s:31:"IntlCalendar::setFirstDayOfWeek";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:62:"public bool IntlCalendar::setFirstDayOfWeek ( int $dayOfWeek )";i:3;s:148:"Defines the day of week deemed to start the week. This affects the behavior of fields that depend on the concept of week start and end such as and .";}
a:4:{i:0;s:24:"IntlCalendar::setLenient";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:64:"public ReturnType IntlCalendar::setLenient ( string $isLenient )";i:3;s:323:"Defines whether the calendar is Ã¢â‚¬Ëœlenient modeÃ¢â‚¬â„¢. In such a mode, some of out-of-bounds values for some fields are accepted, the behavior being similar to that of (i.e., the value wraps around, carrying into more significant fields each time). If the lenient mode is off, then such values will generate an error.";}
a:4:{i:0;s:39:"IntlCalendar::setRepeatedWallTimeOption";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:75:"public bool IntlCalendar::setRepeatedWallTimeOption ( int $wallTimeOption )";i:3;s:268:"Sets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is (take the post-DST instant). The other possible value is (take the instant that occurs during DST).";}
a:4:{i:0;s:38:"IntlCalendar::setSkippedWallTimeOption";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:74:"public bool IntlCalendar::setSkippedWallTimeOption ( int $wallTimeOption )";i:3;s:376:"Sets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is (take it as being the same instant as the one when the wall time is one hour more). Alternative values are (same instant as the one with a wall time of one hour less) and (same instant as when DST begins).";}
a:4:{i:0;s:21:"IntlCalendar::setTime";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:49:"public bool IntlCalendar::setTime ( float $date )";i:3;s:257:"Sets the instant represented by this object. The instant is represented by a whose value should be an integer number of milliseconds since the epoch (1 Jan 1970 00:00:00.000 UTC), ignoring leap seconds. All the field values will be recalculated accordingly.";}
a:4:{i:0;s:25:"IntlCalendar::setTimeZone";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:57:"public bool IntlCalendar::setTimeZone ( mixed $timeZone )";i:3;s:127:"Defines a new timezone for this calendar. The time represented by the object is preserved to the detriment of the field values.";}
a:4:{i:0;s:24:"IntlCalendar::toDateTime";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a2)";i:2;s:49:"public DateTime IntlCalendar::toDateTime ( void )";i:3;s:278:"Create a object that represents the same instant (up to second precision, with a rounding error of less than 1 second) and has an analog timezone to this object (the difference being ÃŠÂ¼s timezone will be backed by PHPÃŠÂ¼s timezone while ÃŠÂ¼s timezone is backed by ICUÃŠÂ¼s).";}
a:4:{i:0;s:32:"IntlTimeZone::countEquivalentIDs";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:73:"public static integer IntlTimeZone::countEquivalentIDs ( string $zoneId )";i:3;s:0:"";}
a:4:{i:0;s:27:"IntlTimeZone::createDefault";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:63:"public static IntlTimeZone IntlTimeZone::createDefault ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"IntlTimeZone::createEnumeration";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:91:"public static IntlIterator IntlTimeZone::createEnumeration ([ mixed $countryOrRawOffset ] )";i:3;s:0:"";}
a:4:{i:0;s:28:"IntlTimeZone::createTimeZone";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:74:"public static IntlTimeZone IntlTimeZone::createTimeZone ( string $zoneId )";i:3;s:0:"";}
a:4:{i:0;s:30:"IntlTimeZone::fromDateTimeZone";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:82:"public static IntlTimeZone IntlTimeZone::fromDateTimeZone ( DateTimeZone $zoneId )";i:3;s:0:"";}
a:4:{i:0;s:28:"IntlTimeZone::getCanonicalID";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:91:"public static string IntlTimeZone::getCanonicalID ( string $zoneId [, bool &$isSystemID ] )";i:3;s:0:"";}
a:4:{i:0;s:28:"IntlTimeZone::getDisplayName";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:104:"public string IntlTimeZone::getDisplayName ([ bool $isDaylight [, integer $style [, string $locale ]]] )";i:3;s:0:"";}
a:4:{i:0;s:27:"IntlTimeZone::getDSTSavings";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:51:"public integer IntlTimeZone::getDSTSavings ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"IntlTimeZone::getEquivalentID";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:85:"public static string IntlTimeZone::getEquivalentID ( string $zoneId, integer $index )";i:3;s:0:"";}
a:4:{i:0;s:26:"IntlTimeZone::getErrorCode";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:50:"public integer IntlTimeZone::getErrorCode ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:29:"IntlTimeZone::getErrorMessage";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:52:"public string IntlTimeZone::getErrorMessage ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"IntlTimeZone::getGMT";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:56:"public static IntlTimeZone IntlTimeZone::getGMT ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"IntlTimeZone::getID";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:42:"public string IntlTimeZone::getID ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"IntlTimeZone::getOffset";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:109:"public integer IntlTimeZone::getOffset ( float $date, bool $local, integer &$rawOffset, integer &$dstOffset )";i:3;s:0:"";}
a:4:{i:0;s:26:"IntlTimeZone::getRawOffset";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:50:"public integer IntlTimeZone::getRawOffset ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"IntlTimeZone::getTZDataVersion";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:60:"public static string IntlTimeZone::getTZDataVersion ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"IntlTimeZone::hasSameRules";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:70:"public bool IntlTimeZone::hasSameRules ( IntlTimeZone $otherTimeZone )";i:3;s:0:"";}
a:4:{i:0;s:28:"IntlTimeZone::toDateTimeZone";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:57:"public DateTimeZone IntlTimeZone::toDateTimeZone ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"IntlTimeZone::useDaylightTime";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:50:"public bool IntlTimeZone::useDaylightTime ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"IntlDateFormatter::create";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:186:"public static IntlDateFormatter IntlDateFormatter::create ( string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = '' ]]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"IntlDateFormatter::format";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:56:"public string IntlDateFormatter::format ( mixed $value )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:31:"IntlDateFormatter::formatObject";i:1;s:36:"(PHP 5 >= 5.5.0, PECL intl >= 3.0.0)";i:2;s:123:"public static string IntlDateFormatter::formatObject ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"IntlDateFormatter::getCalendar";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:43:"int IntlDateFormatter::getCalendar ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"IntlDateFormatter::getDateType";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:50:"public int IntlDateFormatter::getDateType ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:31:"IntlDateFormatter::getErrorCode";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:51:"public int IntlDateFormatter::getErrorCode ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:34:"IntlDateFormatter::getErrorMessage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:57:"public string IntlDateFormatter::getErrorMessage ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"IntlDateFormatter::getLocale";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:60:"public string IntlDateFormatter::getLocale ([ int $which ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"IntlDateFormatter::getPattern";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:52:"public string IntlDateFormatter::getPattern ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"IntlDateFormatter::getTimeType";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:50:"public int IntlDateFormatter::getTimeType ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:32:"IntlDateFormatter::getTimeZoneId";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:55:"public string IntlDateFormatter::getTimeZoneId ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:36:"IntlDateFormatter::getCalendarObject";i:1;s:36:"(PHP 5 >= 5.5.0, PECL intl >= 3.0.0)";i:2;s:65:"public IntlCalendar IntlDateFormatter::getCalendarObject ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"IntlDateFormatter::getTimeZone";i:1;s:36:"(PHP 5 >= 5.5.0, PECL intl >= 3.0.0)";i:2;s:59:"public IntlTimeZone IntlDateFormatter::getTimeZone ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"IntlDateFormatter::isLenient";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:49:"public bool IntlDateFormatter::isLenient ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"IntlDateFormatter::localtime";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:79:"public array IntlDateFormatter::localtime ( string $value [, int &$position ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"IntlDateFormatter::parse";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:73:"public int IntlDateFormatter::parse ( string $value [, int &$position ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"IntlDateFormatter::setCalendar";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:52:"bool IntlDateFormatter::setCalendar ( mixed $which )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"IntlDateFormatter::setLenient";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:59:"public bool IntlDateFormatter::setLenient ( bool $lenient )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"IntlDateFormatter::setPattern";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:61:"public bool IntlDateFormatter::setPattern ( string $pattern )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:32:"IntlDateFormatter::setTimeZoneId";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:61:"public bool IntlDateFormatter::setTimeZoneId ( string $zone )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"IntlDateFormatter::setTimeZone";i:1;s:36:"(PHP 5 >= 5.5.0, PECL intl >= 3.0.0)";i:2;s:61:"public boolean IntlDateFormatter::setTimeZone ( mixed $zone )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"ResourceBundle::count";i:1;s:34:"(PHP >= 5.3.2, PECL intl >= 2.0.0)";i:2;s:41:"public int ResourceBundle::count ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"ResourceBundle::create";i:1;s:34:"(PHP >= 5.3.2, PECL intl >= 2.0.0)";i:2;s:110:"public static ResourceBundle ResourceBundle::create ( string $locale, string $bundlename [, bool $fallback ] )";i:3;s:30:"Object oriented style (method)";}
a:4:{i:0;s:28:"ResourceBundle::getErrorCode";i:1;s:34:"(PHP >= 5.3.2, PECL intl >= 2.0.0)";i:2;s:48:"public int ResourceBundle::getErrorCode ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:31:"ResourceBundle::getErrorMessage";i:1;s:34:"(PHP >= 5.3.2, PECL intl >= 2.0.0)";i:2;s:54:"public string ResourceBundle::getErrorMessage ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"ResourceBundle::get";i:1;s:34:"(PHP >= 5.3.2, PECL intl >= 2.0.0)";i:2;s:54:"public mixed ResourceBundle::get ( string|int $index )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"ResourceBundle::getLocales";i:1;s:34:"(PHP >= 5.3.2, PECL intl >= 2.0.0)";i:2;s:62:"public array ResourceBundle::getLocales ( string $bundlename )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"Spoofchecker::areConfusable";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:86:"public bool Spoofchecker::areConfusable ( string $s1, string $s2 [, string &$error ] )";i:3;s:0:"";}
a:4:{i:0;s:25:"Spoofchecker::__construct";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:41:"public Spoofchecker::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Spoofchecker::isSuspicious";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:75:"public bool Spoofchecker::isSuspicious ( string $text [, string &$error ] )";i:3;s:0:"";}
a:4:{i:0;s:31:"Spoofchecker::setAllowedLocales";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:67:"public void Spoofchecker::setAllowedLocales ( string $locale_list )";i:3;s:0:"";}
a:4:{i:0;s:23:"Spoofchecker::setChecks";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:54:"public void Spoofchecker::setChecks ( string $checks )";i:3;s:0:"";}
a:4:{i:0;s:27:"Transliterator::__construct";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:38:"Transliterator::__construct() ( void )";i:3;s:94:"This method should not be called. Its only purpose is to deny instantiation with the operator.";}
a:4:{i:0;s:22:"Transliterator::create";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:86:"public static Transliterator Transliterator::create ( string $id [, int $direction ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:31:"Transliterator::createFromRules";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:101:"public static Transliterator Transliterator::createFromRules ( string $rules [, string $direction ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"Transliterator::createInverse";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:60:"public Transliterator Transliterator::createInverse ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:28:"Transliterator::getErrorCode";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:48:"public int Transliterator::getErrorCode ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:31:"Transliterator::getErrorMessage";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:54:"public string Transliterator::getErrorMessage ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"Transliterator::listIDs";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:52:"public static array Transliterator::listIDs ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"Transliterator::transliterate";i:1;s:34:"(PHP >= 5.4.0, PECL intl >= 2.0.0)";i:2;s:92:"public string Transliterator::transliterate ( string $subject [, int $start [, int $end ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:30:"IntlBreakIterator::__construct";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:47:"private IntlBreakIterator::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:42:"IntlBreakIterator::createCharacterInstance";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:91:"public static ReturnType IntlBreakIterator::createCharacterInstance ([ string $"locale" ] )";i:3;s:0:"";}
a:4:{i:0;s:42:"IntlBreakIterator::createCodePointInstance";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:76:"public static ReturnType IntlBreakIterator::createCodePointInstance ( void )";i:3;s:0:"";}
a:4:{i:0;s:37:"IntlBreakIterator::createLineInstance";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:86:"public static ReturnType IntlBreakIterator::createLineInstance ([ string $"locale" ] )";i:3;s:0:"";}
a:4:{i:0;s:41:"IntlBreakIterator::createSentenceInstance";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:90:"public static ReturnType IntlBreakIterator::createSentenceInstance ([ string $"locale" ] )";i:3;s:0:"";}
a:4:{i:0;s:38:"IntlBreakIterator::createTitleInstance";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:87:"public static ReturnType IntlBreakIterator::createTitleInstance ([ string $"locale" ] )";i:3;s:0:"";}
a:4:{i:0;s:37:"IntlBreakIterator::createWordInstance";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:86:"public static ReturnType IntlBreakIterator::createWordInstance ([ string $"locale" ] )";i:3;s:0:"";}
a:4:{i:0;s:26:"IntlBreakIterator::current";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"public ReturnType IntlBreakIterator::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"IntlBreakIterator::first";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:51:"public ReturnType IntlBreakIterator::first ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"IntlBreakIterator::following";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:67:"public ReturnType IntlBreakIterator::following ( string $"offset" )";i:3;s:0:"";}
a:4:{i:0;s:31:"IntlBreakIterator::getErrorCode";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:58:"public ReturnType IntlBreakIterator::getErrorCode ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:34:"IntlBreakIterator::getErrorMessage";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:61:"public ReturnType IntlBreakIterator::getErrorMessage ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"IntlBreakIterator::getLocale";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:72:"public ReturnType IntlBreakIterator::getLocale ( string $"locale_type" )";i:3;s:0:"";}
a:4:{i:0;s:35:"IntlBreakIterator::getPartsIterator";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:79:"public ReturnType IntlBreakIterator::getPartsIterator ([ string $"key_type" ] )";i:3;s:0:"";}
a:4:{i:0;s:26:"IntlBreakIterator::getText";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"public ReturnType IntlBreakIterator::getText ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"IntlBreakIterator::isBoundary";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:68:"public ReturnType IntlBreakIterator::isBoundary ( string $"offset" )";i:3;s:0:"";}
a:4:{i:0;s:23:"IntlBreakIterator::last";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:50:"public ReturnType IntlBreakIterator::last ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"IntlBreakIterator::next";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:65:"public ReturnType IntlBreakIterator::next ([ string $"offset" ] )";i:3;s:0:"";}
a:4:{i:0;s:28:"IntlBreakIterator::preceding";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:67:"public ReturnType IntlBreakIterator::preceding ( string $"offset" )";i:3;s:0:"";}
a:4:{i:0;s:27:"IntlBreakIterator::previous";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:54:"public ReturnType IntlBreakIterator::previous ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"IntlBreakIterator::setText";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:63:"public ReturnType IntlBreakIterator::setText ( string $"text" )";i:3;s:0:"";}
a:4:{i:0;s:39:"IntlRuleBasedBreakIterator::__construct";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:89:"public IntlRuleBasedBreakIterator::__construct ( string $rules [, string $areCompiled ] )";i:3;s:0:"";}
a:4:{i:0;s:42:"IntlRuleBasedBreakIterator::getBinaryRules";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:69:"public ReturnType IntlRuleBasedBreakIterator::getBinaryRules ( void )";i:3;s:0:"";}
a:4:{i:0;s:36:"IntlRuleBasedBreakIterator::getRules";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:63:"public ReturnType IntlRuleBasedBreakIterator::getRules ( void )";i:3;s:0:"";}
a:4:{i:0;s:41:"IntlRuleBasedBreakIterator::getRuleStatus";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:68:"public ReturnType IntlRuleBasedBreakIterator::getRuleStatus ( void )";i:3;s:0:"";}
a:4:{i:0;s:45:"
IntlRuleBasedBreakIterator::getRuleStatusVec";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:71:"public ReturnType IntlRuleBasedBreakIterator::getRuleStatusVec ( void )";i:3;s:0:"";}
a:4:{i:0;s:45:"
IntlCodePointBreakIterator::getLastCodePoint";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:71:"public ReturnType IntlCodePointBreakIterator::getLastCodePoint ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"IntlPartsIterator::getBreakIterator";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:62:"public ReturnType IntlPartsIterator::getBreakIterator ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"UConverter::__construct";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:94:"public UConverter::__construct ([ string $destination_encoding [, string $source_encoding ]] )";i:3;s:0:"";}
a:4:{i:0;s:19:"UConverter::convert";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:68:"public string UConverter::convert ( string $str [, bool $reverse ] )";i:3;s:0:"";}
a:4:{i:0;s:25:"UConverter::fromUCallback";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:110:"public mixed UConverter::fromUCallback ( integer $reason, string $source, string $codePoint, integer &$error )";i:3;s:0:"";}
a:4:{i:0;s:22:"UConverter::getAliases";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:62:"public static array UConverter::getAliases ([ string $name ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"UConverter::getAvailable";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:53:"public static array UConverter::getAvailable ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"UConverter::getDestinationEncoding";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:57:"public string UConverter::getDestinationEncoding ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"UConverter::getDestinationType";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:54:"public integer UConverter::getDestinationType ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"UConverter::getErrorCode";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:48:"public integer UConverter::getErrorCode ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"UConverter::getErrorMessage";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:50:"public string UConverter::getErrorMessage ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"UConverter::getSourceEncoding";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:52:"public string UConverter::getSourceEncoding ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"UConverter::getSourceType";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:49:"public integer UConverter::getSourceType ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"UConverter::getStandards";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:53:"public static array UConverter::getStandards ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"UConverter::getSubstChars";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:48:"public string UConverter::getSubstChars ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"UConverter::reasonText";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:66:"public static string UConverter::reasonText ([ integer $reason ] )";i:3;s:0:"";}
a:4:{i:0;s:34:"UConverter::setDestinationEncoding";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:67:"public void UConverter::setDestinationEncoding ( string $encoding )";i:3;s:0:"";}
a:4:{i:0;s:29:"UConverter::setSourceEncoding";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:62:"public void UConverter::setSourceEncoding ( string $encoding )";i:3;s:0:"";}
a:4:{i:0;s:25:"UConverter::setSubstChars";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:55:"public void UConverter::setSubstChars ( string $chars )";i:3;s:0:"";}
a:4:{i:0;s:23:"UConverter::toUCallback";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:108:"public mixed UConverter::toUCallback ( integer $reason, string $source, string $codeUnits, integer &$error )";i:3;s:0:"";}
a:4:{i:0;s:21:"UConverter::transcode";i:1;s:28:"(PHP 5.5.0, PECL >= 3.0.0a1)";i:2;s:120:"public static string UConverter::transcode ( string $str, string $toEncoding, string $fromEncoding [, array $options ] )";i:3;s:0:"";}
a:4:{i:0;s:16:"grapheme_extract";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:112:"string grapheme_extract ( string $haystack, int $size [, int $extract_type [, int $start = 0 [, int &$next ]]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"grapheme_stripos";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:78:"int grapheme_stripos ( string $haystack, string $needle [, int $offset = 0 ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"grapheme_stristr";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:93:"string grapheme_stristr ( string $haystack, string $needle [, bool $before_needle = false ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"grapheme_strlen";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:37:"int grapheme_strlen ( string $input )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"grapheme_strpos";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:77:"int grapheme_strpos ( string $haystack, string $needle [, int $offset = 0 ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:17:"grapheme_strripos";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:79:"int grapheme_strripos ( string $haystack, string $needle [, int $offset = 0 ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:16:"grapheme_strrpos";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:78:"int grapheme_strrpos ( string $haystack, string $needle [, int $offset = 0 ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"grapheme_strstr";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:92:"string grapheme_strstr ( string $haystack, string $needle [, bool $before_needle = false ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:15:"grapheme_substr";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:67:"int grapheme_substr ( string $string, int $start [, int $length ] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:12:"idn_to_ascii";i:1;s:53:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.2, PECL
idn >= 0.1)";i:2;s:124:"string idn_to_ascii ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:14:"idn_to_unicode";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"idn_to_utf8";i:1;s:53:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.2, PECL
idn >= 0.1)";i:2;s:123:"string idn_to_utf8 ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )";i:3;s:16:"Procedural style";}
a:4:{i:0;s:21:"IntlIterator::current";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:48:"public ReturnType IntlIterator::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"IntlIterator::key";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:44:"public ReturnType IntlIterator::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"IntlIterator::next";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:45:"public ReturnType IntlIterator::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"IntlIterator::rewind";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:47:"public ReturnType IntlIterator::rewind ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"IntlIterator::valid";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:46:"public ReturnType IntlIterator::valid ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"intl_error_name";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:42:"string intl_error_name ( int $error_code )";i:3;s:27:"Return ICU error code name.";}
a:4:{i:0;s:19:"intl_get_error_code";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:32:"int intl_get_error_code ( void )";i:3;s:97:"Useful to handle errors occurred in static methods when there's no object to get error code from.";}
a:4:{i:0;s:22:"intl_get_error_message";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:38:"string intl_get_error_message ( void )";i:3;s:65:"Get error message from last internationalization function called.";}
a:4:{i:0;s:15:"intl_is_failure";i:1;s:36:"(PHP 5 >= 5.3.0, PECL intl >= 1.0.0)";i:2;s:40:"bool intl_is_failure ( int $error_code )";i:3;s:0:"";}
a:4:{i:0;s:17:"mb_check_encoding";i:1;s:32:"(PHP 4 >= 4.4.3, PHP 5 >= 5.1.3)";i:2;s:94:"bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )";i:3;s:133:"Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called "Invalid Encoding Attack".";}
a:4:{i:0;s:15:"mb_convert_case";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:96:"string mb_convert_case ( string $str, int $mode [, string $encoding = mb_internal_encoding() ] )";i:3;s:63:"Performs case folding on a, converted in the way specified by .";}
a:4:{i:0;s:19:"mb_convert_encoding";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:114:"string mb_convert_encoding ( string $str, string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )";i:3;s:55:"Converts the character encoding of to from optionally .";}
a:4:{i:0;s:15:"mb_convert_kana";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:111:"string mb_convert_kana ( string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding() ]] )";i:3;s:94:"Performs a "han-kaku" - "zen-kaku" conversion for . This function is only useful for Japanese.";}
a:4:{i:0;s:20:"mb_convert_variables";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:104:"string mb_convert_variables ( string $to_encoding, mixed $from_encoding, mixed &$vars [, mixed &$... ] )";i:3;s:66:"Converts character encoding of variables in encoding to encoding .";}
a:4:{i:0;s:20:"mb_decode_mimeheader";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:43:"string mb_decode_mimeheader ( string $str )";i:3;s:36:"Decodes encoded-word in MIME header.";}
a:4:{i:0;s:23:"mb_decode_numericentity";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:109:"string mb_decode_numericentity ( string $str, array $convmap [, string $encoding = mb_internal_encoding() ] )";i:3;s:70:"Convert numeric string reference of in a specified block to character.";}
a:4:{i:0;s:18:"mb_detect_encoding";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:112:"string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )";i:3;s:31:"Detects character encoding in .";}
a:4:{i:0;s:15:"mb_detect_order";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:69:"mixed mb_detect_order ([ mixed $encoding_list = mb_detect_order() ] )";i:3;s:58:"Sets the automatic character encoding detection order to .";}
a:4:{i:0;s:20:"mb_encode_mimeheader";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:175:"string mb_encode_mimeheader ( string $str [, string $charset = mb_internal_encoding() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0 ]]]] )";i:3;s:51:"Encodes a given by the MIME header encoding scheme.";}
a:4:{i:0;s:23:"mb_encode_numericentity";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:134:"string mb_encode_numericentity ( string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )";i:3;s:94:"Converts specified character codes in from HTML numeric character reference to character code.";}
a:4:{i:0;s:19:"mb_encoding_aliases";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"array mb_encoding_aliases ( string $encoding )";i:3;s:45:"Returns an array of aliases for a known type.";}
a:4:{i:0;s:13:"mb_ereg_match";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:82:"bool mb_ereg_match ( string $pattern, string $string [, string $option = "msr" ] )";i:3;s:49:"A regular expression match for a multibyte string";}
a:4:{i:0;s:24:"mb_ereg_replace_callback";i:1;s:16:"(PHP 5 >= 5.4.1)";i:2;s:115:"string mb_ereg_replace_callback ( string $pattern, callable $callback, string $string [, string $option = "msr" ] )";i:3;s:81:"Scans for matches to, then replaces the matched text with the output of function.";}
a:4:{i:0;s:15:"mb_ereg_replace";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:107:"string mb_ereg_replace ( string $pattern, string $replacement, string $string [, string $option = "msr" ] )";i:3;s:57:"Scans for matches to, then replaces the matched text with";}
a:4:{i:0;s:21:"mb_ereg_search_getpos";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:34:"int mb_ereg_search_getpos ( void )";i:3;s:62:"Returns the start point for the next regular expression match.";}
a:4:{i:0;s:22:"mb_ereg_search_getregs";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:37:"array mb_ereg_search_getregs ( void )";i:3;s:68:"Retrieve the result from the last multibyte regular expression match";}
a:4:{i:0;s:19:"mb_ereg_search_init";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:91:"bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] )";i:3;s:79:"sets and for a multibyte regular expression. These values are used for, , and .";}
a:4:{i:0;s:18:"mb_ereg_search_pos";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:73:"array mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] )";i:3;s:115:"Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string";}
a:4:{i:0;s:19:"mb_ereg_search_regs";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:74:"array mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] )";i:3;s:59:"Returns the matched part of a multibyte regular expression.";}
a:4:{i:0;s:21:"mb_ereg_search_setpos";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:44:"bool mb_ereg_search_setpos ( int $position )";i:3;s:40:"sets the starting point of a match for .";}
a:4:{i:0;s:14:"mb_ereg_search";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:68:"bool mb_ereg_search ([ string $pattern [, string $option = "ms" ]] )";i:3;s:80:"Performs a multibyte regular expression match for a predefined multibyte string.";}
a:4:{i:0;s:7:"mb_ereg";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:64:"int mb_ereg ( string $pattern, string $string [, array $regs ] )";i:3;s:61:"Executes the regular expression match with multibyte support.";}
a:4:{i:0;s:16:"mb_eregi_replace";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:105:"string mb_eregi_replace ( string $pattern, string $replace, string $string [, string $option = "msri" ] )";i:3;s:59:"Scans for matches to, then replaces the matched text with .";}
a:4:{i:0;s:8:"mb_eregi";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:65:"int mb_eregi ( string $pattern, string $string [, array $regs ] )";i:3;s:78:"Executes the case insensitive regular expression match with multibyte support.";}
a:4:{i:0;s:11:"mb_get_info";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:45:"mixed mb_get_info ([ string $type = "all" ] )";i:3;s:52:"returns the internal setting parameters of mbstring.";}
a:4:{i:0;s:13:"mb_http_input";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:44:"mixed mb_http_input ([ string $type = "" ] )";i:3;s:42:"Detects the HTTP input character encoding.";}
a:4:{i:0;s:14:"mb_http_output";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:63:"mixed mb_http_output ([ string $encoding = mb_http_output() ] )";i:3;s:88:"Set/Get the HTTP output character encoding. Output after this function is converted to .";}
a:4:{i:0;s:20:"mb_internal_encoding";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:75:"mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )";i:3;s:39:"Set/Get the internal character encoding";}
a:4:{i:0;s:11:"mb_language";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:57:"mixed mb_language ([ string $language = mb_language() ] )";i:3;s:29:"Set/Get the current language.";}
a:4:{i:0;s:17:"mb_list_encodings";i:1;s:7:"(PHP 5)";i:2;s:32:"array mb_list_encodings ( void )";i:3;s:52:"Returns an array containing all supported encodings.";}
a:4:{i:0;s:17:"mb_output_handler";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:58:"string mb_output_handler ( string $contents, int $status )";i:3;s:130:"is callback function. converts characters in the output buffer from internal character encoding to HTTP output character encoding.";}
a:4:{i:0;s:12:"mb_parse_str";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:64:"bool mb_parse_str ( string $encoded_string [, array &$result ] )";i:3;s:271:"Parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding to internal encoding and set values to the or global variables.";}
a:4:{i:0;s:22:"mb_preferred_mime_name";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:50:"string mb_preferred_mime_name ( string $encoding )";i:3;s:43:"Get a MIME charset for a specific encoding.";}
a:4:{i:0;s:17:"mb_regex_encoding";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:69:"mixed mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] )";i:3;s:49:"Set/Get character encoding for a multibyte regex.";}
a:4:{i:0;s:20:"mb_regex_set_options";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:75:"string mb_regex_set_options ([ string $options = mb_regex_set_options() ] )";i:3;s:68:"Sets the default options described by for multibyte regex functions.";}
a:4:{i:0;s:12:"mb_send_mail";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:145:"bool mb_send_mail ( string $to, string $subject, string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )";i:3;s:139:"Sends email. Headers and messages are converted and encoded according to the setting. It's a wrapper function for, so see also for details.";}
a:4:{i:0;s:8:"mb_split";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:71:"array mb_split ( string $pattern, string $string [, int $limit = -1 ] )";i:3;s:73:"Split a multibyte using regular expression and returns the result as an .";}
a:4:{i:0;s:9:"mb_strcut";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:114:"string mb_strcut ( string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )";i:3;s:384:"extracts a substring from a string similarly to, but operates on bytes instead of characters. If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from the first byte of that character. This is also the difference to the function, which would simply cut the string between the bytes and thus result in a malformed byte sequence.";}
a:4:{i:0;s:13:"mb_strimwidth";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:135:"string mb_strimwidth ( string $str, int $start, int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding() ]] )";i:3;s:24:"Truncates to specified .";}
a:4:{i:0;s:10:"mb_stripos";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:118:"int mb_stripos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )";i:3;s:129:"returns the numeric position of the first occurrence of in the string. Unlike, is case-insensitive. If is not found, it returns .";}
a:4:{i:0;s:10:"mb_stristr";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:133:"string mb_stristr ( string $haystack, string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )";i:3;s:120:"finds the first occurrence of in and returns the portion of . Unlike, is case-insensitive. If is not found, it returns .";}
a:4:{i:0;s:9:"mb_strlen";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:76:"int mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )";i:3;s:22:"Gets the length of a .";}
a:4:{i:0;s:9:"mb_strpos";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:117:"int mb_strpos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )";i:3;s:50:"Finds position of the first occurrence of a in a .";}
a:4:{i:0;s:10:"mb_strrchr";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:124:"string mb_strrchr ( string $haystack, string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )";i:3;s:90:"finds the last occurrence of in and returns the portion of . If is not found, it returns .";}
a:4:{i:0;s:11:"mb_strrichr";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:125:"string mb_strrichr ( string $haystack, string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )";i:3;s:119:"finds the last occurrence of in and returns the portion of . Unlike, is case-insensitive. If is not found, it returns .";}
a:4:{i:0;s:11:"mb_strripos";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:119:"int mb_strripos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )";i:3;s:203:"performs multi-byte safe operation based on number of characters. position is counted from the beginning of . First character's position is 0. Second character position is 1. Unlike, is case-insensitive.";}
a:4:{i:0;s:10:"mb_strrpos";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:118:"int mb_strrpos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )";i:3;s:179:"Performs a multibyte safe operation based on the number of characters. position is counted from the beginning of . First character's position is 0. Second character position is 1.";}
a:4:{i:0;s:9:"mb_strstr";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:132:"string mb_strstr ( string $haystack, string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )";i:3;s:91:"finds the first occurrence of in and returns the portion of . If is not found, it returns .";}
a:4:{i:0;s:13:"mb_strtolower";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:83:"string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )";i:3;s:62:"Returns with all alphabetic characters converted to lowercase.";}
a:4:{i:0;s:13:"mb_strtoupper";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:83:"string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )";i:3;s:62:"Returns with all alphabetic characters converted to uppercase.";}
a:4:{i:0;s:11:"mb_strwidth";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:78:"int mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] )";i:3;s:22:"Returns the width of .";}
a:4:{i:0;s:23:"mb_substitute_character";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:82:"mixed mb_substitute_character ([ mixed $substrchar = mb_substitute_character() ] )";i:3;s:230:"Specifies a substitution character when input character encoding is invalid or character code does not exist in output character encoding. Invalid characters may be substituted (no output), or value (Unicode character code value).";}
a:4:{i:0;s:15:"mb_substr_count";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:103:"int mb_substr_count ( string $haystack, string $needle [, string $encoding = mb_internal_encoding() ] )";i:3;s:56:"Counts the number of times the substring occurs in the .";}
a:4:{i:0;s:9:"mb_substr";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:114:"string mb_substr ( string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )";i:3;s:187:"Performs a multi-byte safe operation based on number of characters. Position is counted from the beginning of . First character's position is 0. Second character position is 1, and so on.";}
a:4:{i:0;s:22:"pspell_add_to_personal";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:66:"bool pspell_add_to_personal ( int $dictionary_link, string $word )";i:3;s:117:"adds a word to the personal wordlist. If you used with to open the dictionary, you can save the wordlist later with .";}
a:4:{i:0;s:21:"pspell_add_to_session";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:65:"bool pspell_add_to_session ( int $dictionary_link, string $word )";i:3;s:86:"adds a word to the wordlist associated with the current session. It is very similar to";}
a:4:{i:0;s:12:"pspell_check";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:56:"bool pspell_check ( int $dictionary_link, string $word )";i:3;s:30:"checks the spelling of a word.";}
a:4:{i:0;s:20:"pspell_clear_session";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:50:"bool pspell_clear_session ( int $dictionary_link )";i:3;s:126:"clears the current session. The current wordlist becomes blank, and, for example, if you try to save it with, nothing happens.";}
a:4:{i:0;s:20:"pspell_config_create";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:107:"int pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] )";i:3;s:42:"Create a config used to open a dictionary.";}
a:4:{i:0;s:22:"pspell_config_data_dir";i:1;s:7:"(PHP 5)";i:2;s:60:"bool pspell_config_data_dir ( int $conf, string $directory )";i:3;s:0:"";}
a:4:{i:0;s:22:"pspell_config_dict_dir";i:1;s:7:"(PHP 5)";i:2;s:60:"bool pspell_config_dict_dir ( int $conf, string $directory )";i:3;s:0:"";}
a:4:{i:0;s:20:"pspell_config_ignore";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:58:"bool pspell_config_ignore ( int $dictionary_link, int $n )";i:3;s:112:"should be used on a config before calling . This function allows short words to be skipped by the spell checker.";}
a:4:{i:0;s:18:"pspell_config_mode";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:59:"bool pspell_config_mode ( int $dictionary_link, int $mode )";i:3;s:111:"should be used on a config before calling . This function determines how many suggestions will be returned by .";}
a:4:{i:0;s:22:"pspell_config_personal";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:66:"bool pspell_config_personal ( int $dictionary_link, string $file )";i:3;s:202:"Set a file that contains personal wordlist. The personal wordlist will be loaded and used in addition to the standard one after you call . The file is also the file where will save personal wordlist to.";}
a:4:{i:0;s:18:"pspell_config_repl";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:62:"bool pspell_config_repl ( int $dictionary_link, string $file )";i:3;s:43:"Set a file that contains replacement pairs.";}
a:4:{i:0;s:25:"pspell_config_runtogether";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:67:"bool pspell_config_runtogether ( int $dictionary_link, bool $flag )";i:3;s:279:"This function determines whether run-together words will be treated as legal compounds. That is, "thecat" will be a legal compound, although there should be a space between the two words. Changing this setting only affects the results returned by ; will still return suggestions.";}
a:4:{i:0;s:23:"pspell_config_save_repl";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:65:"bool pspell_config_save_repl ( int $dictionary_link, bool $flag )";i:3;s:247:"determines whether will save the replacement pairs along with the wordlist. Usually there is no need to use this function because if is used, the replacement pairs will be saved by anyway, and if it is not, the replacement pairs will not be saved.";}
a:4:{i:0;s:17:"pspell_new_config";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:37:"int pspell_new_config ( int $config )";i:3;s:203:"opens up a new dictionary with settings specified in a config, created with and modified with functions. This method provides you with the most flexibility and has all the functionality provided by and .";}
a:4:{i:0;s:19:"pspell_new_personal";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:142:"int pspell_new_personal ( string $personal, string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )";i:3;s:335:"opens up a new dictionary with a personal wordlist. The wordlist can be modified and saved with, if desired. However, the replacement pairs are not saved. In order to save replacement pairs, you should create a config using, set the personal wordlist file with, set the file for replacement pairs with, and open a new dictionary with .";}
a:4:{i:0;s:10:"pspell_new";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:115:"int pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )";i:3;s:103:"opens up a new dictionary and returns the dictionary link identifier for use in other pspell functions.";}
a:4:{i:0;s:20:"pspell_save_wordlist";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:50:"bool pspell_save_wordlist ( int $dictionary_link )";i:3;s:121:"saves the personal wordlist from the current session. The location of files to be saved specified with and (optionally) .";}
a:4:{i:0;s:24:"pspell_store_replacement";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:91:"bool pspell_store_replacement ( int $dictionary_link, string $misspelled, string $correct )";i:3;s:355:"stores a replacement pair for a word, so that replacement can be returned by later. In order to be able to take advantage of this function, you have to use to open the dictionary. In order to permanently save the replacement pair, you have to use and to set the path where to save your custom wordlists, and then use for the changes to be written to disk.";}
a:4:{i:0;s:14:"pspell_suggest";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:59:"array pspell_suggest ( int $dictionary_link, string $word )";i:3;s:58:"returns an array of possible spellings for the given word.";}
a:4:{i:0;s:11:"recode_file";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"bool recode_file ( string $request, resource $input, resource $output )";i:3;s:107:"Recode the file referenced by file handle into the file referenced by file handle according to the recode .";}
a:4:{i:0;s:13:"recode_string";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:56:"string recode_string ( string $request, string $string )";i:3;s:51:"Recode the string according to the recode request .";}
a:4:{i:0;s:6:"recode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:12:"cairo_create";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"CairoContext cairo_create ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_font_face_get_type";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:56:"int cairo_font_face_get_type ( CairoFontFace $fontface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:22:"cairo_font_face_status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"int cairo_font_face_status ( CairoFontFace $fontface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_font_options_create";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"CairoFontOptions cairo_font_options_create ( void )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_font_options_equal";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:84:"bool cairo_font_options_equal ( CairoFontOptions $options, CairoFontOptions $other )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:32:"cairo_font_options_get_antialias";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:66:"int cairo_font_options_get_antialias ( CairoFontOptions $options )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:35:"cairo_font_options_get_hint_metrics";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:69:"int cairo_font_options_get_hint_metrics ( CairoFontOptions $options )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:33:"cairo_font_options_get_hint_style";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:67:"int cairo_font_options_get_hint_style ( CairoFontOptions $options )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:37:"cairo_font_options_get_subpixel_order";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:71:"int cairo_font_options_get_subpixel_order ( CairoFontOptions $options )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:23:"cairo_font_options_hash";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"int cairo_font_options_hash ( CairoFontOptions $options )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_font_options_merge";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:84:"void cairo_font_options_merge ( CairoFontOptions $options, CairoFontOptions $other )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:32:"cairo_font_options_set_antialias";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:83:"void cairo_font_options_set_antialias ( CairoFontOptions $options, int $antialias )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:35:"cairo_font_options_set_hint_metrics";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:89:"void cairo_font_options_set_hint_metrics ( CairoFontOptions $options, int $hint_metrics )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:33:"cairo_font_options_set_hint_style";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:85:"void cairo_font_options_set_hint_style ( CairoFontOptions $options, int $hint_style )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:37:"cairo_font_options_set_subpixel_order";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:93:"void cairo_font_options_set_subpixel_order ( CairoFontOptions $options, int $subpixel_order )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_font_options_status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:59:"int cairo_font_options_status ( CairoFontOptions $options )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:29:"cairo_format_stride_for_width";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:61:"int cairo_format_stride_for_width ( int $format, int $width )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:35:"cairo_image_surface_create_for_data";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:130:"CairoImageSurface cairo_image_surface_create_for_data ( string $data, int $format, int $width, int $height [, int $stride = -1 ] )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:35:"cairo_image_surface_create_from_png";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"CairoImageSurface cairo_image_surface_create_from_png ( string $file )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:26:"cairo_image_surface_create";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:85:"CairoImageSurface cairo_image_surface_create ( int $format, int $width, int $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:28:"cairo_image_surface_get_data";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:66:"string cairo_image_surface_get_data ( CairoImageSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:30:"cairo_image_surface_get_format";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"int cairo_image_surface_get_format ( CairoImageSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:30:"cairo_image_surface_get_height";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"int cairo_image_surface_get_height ( CairoImageSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:30:"cairo_image_surface_get_stride";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"int cairo_image_surface_get_stride ( CairoImageSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:29:"cairo_image_surface_get_width";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:64:"int cairo_image_surface_get_width ( CairoImageSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_matrix_create_scale";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:29:"cairo_matrix_create_translate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:19:"cairo_matrix_invert";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"void cairo_matrix_invert ( CairoMatrix $matrix )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:21:"cairo_matrix_multiply";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:80:"CairoMatrix cairo_matrix_multiply ( CairoMatrix $matrix1, CairoMatrix $matrix2 )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:19:"cairo_matrix_rotate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:64:"void cairo_matrix_rotate ( CairoMatrix $matrix, float $radians )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:31:"cairo_matrix_transform_distance";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:83:"array cairo_matrix_transform_distance ( CairoMatrix $matrix, float $dx, float $dy )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:28:"cairo_matrix_transform_point";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:80:"array cairo_matrix_transform_point ( CairoMatrix $matrix, float $dx, float $dy )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:22:"cairo_matrix_translate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:73:"void cairo_matrix_translate ( CairoMatrix $matrix, float $tx, float $ty )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:32:"cairo_pattern_add_color_stop_rgb";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:125:"void cairo_pattern_add_color_stop_rgb ( CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:33:"cairo_pattern_add_color_stop_rgba";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:140:"void cairo_pattern_add_color_stop_rgba ( CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue, float $alpha )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:32:"cairo_pattern_create_for_surface";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:71:"CairoPattern cairo_pattern_create_for_surface ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:27:"cairo_pattern_create_linear";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:87:"CairoPattern cairo_pattern_create_linear ( float $x0, float $y0, float $x1, float $y1 )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:27:"cairo_pattern_create_radial";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:109:"CairoPattern cairo_pattern_create_radial ( float $x0, float $y0, float $r0, float $x1, float $y1, float $r1 )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pattern_create_rgb";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:79:"CairoPattern cairo_pattern_create_rgb ( float $red, float $green, float $blue )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_pattern_create_rgba";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:94:"CairoPattern cairo_pattern_create_rgba ( float $red, float $green, float $blue, float $alpha )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:34:"cairo_pattern_get_color_stop_count";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:72:"int cairo_pattern_get_color_stop_count ( CairoGradientPattern $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:33:"cairo_pattern_get_color_stop_rgba";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:85:"array cairo_pattern_get_color_stop_rgba ( CairoGradientPattern $pattern, int $index )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pattern_get_extend";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"int cairo_pattern_get_extend ( string $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pattern_get_filter";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:61:"int cairo_pattern_get_filter ( CairoSurfacePattern $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:31:"cairo_pattern_get_linear_points";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"array cairo_pattern_get_linear_points ( CairoLinearGradient $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pattern_get_matrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:62:"CairoMatrix cairo_pattern_get_matrix ( CairoPattern $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:32:"cairo_pattern_get_radial_circles";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:71:"array cairo_pattern_get_radial_circles ( CairoRadialGradient $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:22:"cairo_pattern_get_rgba";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:59:"array cairo_pattern_get_rgba ( CairoSolidPattern $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_pattern_get_surface";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:71:"CairoSurface cairo_pattern_get_surface ( CairoSurfacePattern $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:22:"cairo_pattern_get_type";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"int cairo_pattern_get_type ( CairoPattern $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pattern_set_extend";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"void cairo_pattern_set_extend ( string $pattern, string $extend )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pattern_set_filter";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:75:"void cairo_pattern_set_filter ( CairoSurfacePattern $pattern, int $filter )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pattern_set_matrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:76:"void cairo_pattern_set_matrix ( CairoPattern $pattern, CairoMatrix $matrix )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:20:"cairo_pattern_status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"int cairo_pattern_status ( CairoPattern $pattern )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_pdf_surface_create";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:86:"CairoPdfSurface cairo_pdf_surface_create ( string $file, float $width, float $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:26:"cairo_pdf_surface_set_size";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:89:"void cairo_pdf_surface_set_size ( CairoPdfSurface $surface, float $width, float $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:19:"cairo_ps_get_levels";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:34:"array cairo_ps_get_levels ( void )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_ps_level_to_string";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:46:"string cairo_ps_level_to_string ( int $level )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:23:"cairo_ps_surface_create";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:84:"CairoPsSurface cairo_ps_surface_create ( string $file, float $width, float $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:37:"cairo_ps_surface_dsc_begin_page_setup";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"void cairo_ps_surface_dsc_begin_page_setup ( CairoPsSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:32:"cairo_ps_surface_dsc_begin_setup";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"void cairo_ps_surface_dsc_begin_setup ( CairoPsSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:28:"cairo_ps_surface_dsc_comment";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:78:"void cairo_ps_surface_dsc_comment ( CairoPsSurface $surface, string $comment )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_ps_surface_get_eps";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"bool cairo_ps_surface_get_eps ( CairoPsSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:34:"cairo_ps_surface_restrict_to_level";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:79:"void cairo_ps_surface_restrict_to_level ( CairoPsSurface $surface, int $level )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_ps_surface_set_eps";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"void cairo_ps_surface_set_eps ( CairoPsSurface $surface, bool $level )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_ps_surface_set_size";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:87:"void cairo_ps_surface_set_size ( CairoPsSurface $surface, float $width, float $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_scaled_font_create";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:138:"CairoScaledFont cairo_scaled_font_create ( CairoFontFace $fontface, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $fontoptions )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_scaled_font_extents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:63:"array cairo_scaled_font_extents ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_scaled_font_get_ctm";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:69:"CairoMatrix cairo_scaled_font_get_ctm ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:31:"cairo_scaled_font_get_font_face";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:77:"CairoFontFace cairo_scaled_font_get_font_face ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:33:"cairo_scaled_font_get_font_matrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:82:"CairoFontOptions cairo_scaled_font_get_font_matrix ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:34:"cairo_scaled_font_get_font_options";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:83:"CairoFontOptions cairo_scaled_font_get_font_options ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:34:"cairo_scaled_font_get_scale_matrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:78:"CairoMatrix cairo_scaled_font_get_scale_matrix ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:26:"cairo_scaled_font_get_type";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:62:"int cairo_scaled_font_get_type ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:31:"cairo_scaled_font_glyph_extents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:84:"array cairo_scaled_font_glyph_extents ( CairoScaledFont $scaledfont, array $glyphs )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_scaled_font_status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:60:"int cairo_scaled_font_status ( CairoScaledFont $scaledfont )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:30:"cairo_scaled_font_text_extents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:82:"array cairo_scaled_font_text_extents ( CairoScaledFont $scaledfont, string $text )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:23:"cairo_surface_copy_page";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"void cairo_surface_copy_page ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:28:"cairo_surface_create_similar";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:110:"CairoSurface cairo_surface_create_similar ( CairoSurface $surface, int $content, float $width, float $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:20:"cairo_surface_finish";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"void cairo_surface_finish ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:19:"cairo_surface_flush";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"void cairo_surface_flush ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:25:"cairo_surface_get_content";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:55:"int cairo_surface_get_content ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:31:"cairo_surface_get_device_offset";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:63:"array cairo_surface_get_device_offset ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:30:"cairo_surface_get_font_options";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:73:"CairoFontOptions cairo_surface_get_font_options ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:22:"cairo_surface_get_type";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"int cairo_surface_get_type ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:34:"cairo_surface_mark_dirty_rectangle";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:114:"void cairo_surface_mark_dirty_rectangle ( CairoSurface $surface, float $x, float $y, float $width, float $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_surface_mark_dirty";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:55:"void cairo_surface_mark_dirty ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:31:"cairo_surface_set_device_offset";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:82:"void cairo_surface_set_device_offset ( CairoSurface $surface, float $x, float $y )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:37:"cairo_surface_set_fallback_resolution";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:88:"void cairo_surface_set_fallback_resolution ( CairoSurface $surface, float $x, float $y )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:23:"cairo_surface_show_page";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"void cairo_surface_show_page ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:20:"cairo_surface_status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"int cairo_surface_status ( CairoSurface $surface )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:26:"cairo_surface_write_to_png";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:75:"void cairo_surface_write_to_png ( CairoSurface $surface, resource $stream )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:24:"cairo_svg_surface_create";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:86:"CairoSvgSurface cairo_svg_surface_create ( string $file, float $width, float $height )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:37:"cairo_svg_surface_restrict_to_version";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:85:"void cairo_svg_surface_restrict_to_version ( CairoSvgSurface $surface, int $version )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:27:"cairo_svg_version_to_string";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"string cairo_svg_version_to_string ( int $version )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:21:"Cairo::availableFonts";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public static array Cairo::availableFonts ( void )";i:3;s:22:"Object oriented style:";}
a:4:{i:0;s:24:"Cairo::availableSurfaces";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public static array Cairo::availableSurfaces ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"Cairo::statusToString";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public static string Cairo::statusToString ( int $status )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:14:"Cairo::version";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public static int Cairo::version ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"Cairo::versionString";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public static string Cairo::versionString ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"CairoContext::appendPath";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:56:"public void CairoContext::appendPath ( CairoPath $path )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:17:"CairoContext::arc";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:97:"public void CairoContext::arc ( float $x, float $y, float $radius, float $angle1, float $angle2 )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::arcNegative";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:105:"public void CairoContext::arcNegative ( float $x, float $y, float $radius, float $angle1, float $angle2 )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"CairoContext::clip";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:39:"public void CairoContext::clip ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::clipExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:47:"public array CairoContext::clipExtents ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::clipPreserve";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:47:"public void CairoContext::clipPreserve ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:31:"CairoContext::clipRectangleList";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public array CairoContext::clipRectangleList ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::closePath";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoContext::closePath ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public CairoContext::__construct ( CairoSurface $surface )";i:3;s:41:"Creates a new CairoContext object to draw";}
a:4:{i:0;s:22:"CairoContext::copyPage";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public void CairoContext::copyPage ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"CairoContext::copyPath";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public CairoPath CairoContext::copyPath ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::copyPathFlat";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"public CairoPath CairoContext::copyPathFlat ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"CairoContext::curveTo";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:102:"public void CairoContext::curveTo ( float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::deviceToUser";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:62:"public array CairoContext::deviceToUser ( float $x, float $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:34:"CairoContext::deviceToUserDistance";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"public array CairoContext::deviceToUserDistance ( float $x, float $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"CairoContext::fill";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:39:"public void CairoContext::fill ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::fillExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:47:"public array CairoContext::fillExtents ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::fillPreserve";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:47:"public void CairoContext::fillPreserve ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::fontExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:47:"public array CairoContext::fontExtents ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::getAntialias";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:46:"public int CairoContext::getAntialias ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:29:"CairoContext::getCurrentPoint";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"public array CairoContext::getCurrentPoint ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"CairoContext::getDash";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public array CairoContext::getDash ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::getDashCount";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:46:"public int CairoContext::getDashCount ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::getFillRule";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:45:"public int CairoContext::getFillRule ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::getFontFace";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:46:"public void CairoContext::getFontFace ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::getFontMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public void CairoContext::getFontMatrix ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoContext::getFontOptions";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public void CairoContext::getFontOptions ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoContext::getGroupTarget";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public void CairoContext::getGroupTarget ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"CairoContext::getLineCap";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public int CairoContext::getLineCap ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::getLineJoin";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:45:"public int CairoContext::getLineJoin ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::getLineWidth";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public float CairoContext::getLineWidth ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::getMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoContext::getMatrix ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::getMiterLimit";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public float CairoContext::getMiterLimit ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::getOperator";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:45:"public int CairoContext::getOperator ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::getScaledFont";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public void CairoContext::getScaledFont ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::getSource";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoContext::getSource ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::getTarget";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoContext::getTarget ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::getTolerance";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public float CairoContext::getTolerance ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::glyphPath";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public void CairoContext::glyphPath ( array $glyphs )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:29:"CairoContext::hasCurrentPoint";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public bool CairoContext::hasCurrentPoint ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoContext::identityMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public void CairoContext::identityMatrix ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoContext::inFill";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public bool CairoContext::inFill ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"CairoContext::inStroke";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:59:"public bool CairoContext::inStroke ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoContext::lineTo";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public void CairoContext::lineTo ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"CairoContext::mask";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public void CairoContext::mask ( string $pattern )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::maskSurface";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:86:"public void CairoContext::maskSurface ( string $surface [, string $x [, string $y ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoContext::moveTo";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public void CairoContext::moveTo ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"CairoContext::newPath";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:42:"public void CairoContext::newPath ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"CairoContext::newSubPath";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:45:"public void CairoContext::newSubPath ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"CairoContext::paint";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:40:"public void CairoContext::paint ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoContext::paintWithAlpha";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public void CairoContext::paintWithAlpha ( string $alpha )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::pathExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:47:"public array CairoContext::pathExtents ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"CairoContext::popGroup";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public void CairoContext::popGroup ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:30:"CairoContext::popGroupToSource";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"public void CairoContext::popGroupToSource ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::pushGroup";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoContext::pushGroup ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:34:"CairoContext::pushGroupWithContent";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:66:"public void CairoContext::pushGroupWithContent ( string $content )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::rectangle";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:91:"public void CairoContext::rectangle ( string $x, string $y, string $width, string $height )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"CairoContext::relCurveTo";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:111:"public void CairoContext::relCurveTo ( string $x1, string $y1, string $x2, string $y2, string $x3, string $y3 )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::relLineTo";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:60:"public void CairoContext::relLineTo ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::relMoveTo";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:60:"public void CairoContext::relMoveTo ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::resetClip";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoContext::resetClip ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"CairoContext::restore";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:42:"public void CairoContext::restore ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoContext::rotate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public void CairoContext::rotate ( string $angle )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"CairoContext::save";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:39:"public void CairoContext::save ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"CairoContext::scale";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:56:"public void CairoContext::scale ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoContext::selectFontFace";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:97:"public void CairoContext::selectFontFace ( string $family [, string $slant [, string $weight ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::setAntialias";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:63:"public void CairoContext::setAntialias ([ string $antialias ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"CairoContext::setDash";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:72:"public void CairoContext::setDash ( string $dashes [, string $offset ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::setFillRule";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public void CairoContext::setFillRule ( string $setting )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::setFontFace";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"public void CairoContext::setFontFace ( CairoFontFace $fontface )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::setFontMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public void CairoContext::setFontMatrix ( string $matrix )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoContext::setFontOptions";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:64:"public void CairoContext::setFontOptions ( string $fontoptions )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::setFontSize";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"public void CairoContext::setFontSize ( string $size )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"CairoContext::setLineCap";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:56:"public void CairoContext::setLineCap ( string $setting )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::setLineJoin";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public void CairoContext::setLineJoin ( string $setting )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::setLineWidth";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:56:"public void CairoContext::setLineWidth ( string $width )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::setMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"public void CairoContext::setMatrix ( string $matrix )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::setMiterLimit";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public void CairoContext::setMiterLimit ( string $limit )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::setOperator";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public void CairoContext::setOperator ( string $setting )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::setScaledFont";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:62:"public void CairoContext::setScaledFont ( string $scaledfont )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::setSource";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:55:"public void CairoContext::setSource ( string $pattern )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::setSourceRGB";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:83:"public void CairoContext::setSourceRGB ( string $red, string $green, string $blue )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::setSourceRGBA";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:99:"public void CairoContext::setSourceRGBA ( string $red, string $green, string $blue, string $alpha )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:30:"CairoContext::setSourceSurface";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:91:"public void CairoContext::setSourceSurface ( string $surface [, string $x [, string $y ]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::setTolerance";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:60:"public void CairoContext::setTolerance ( string $tolerance )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"CairoContext::showPage";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public void CairoContext::showPage ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"CairoContext::showText";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"public void CairoContext::showText ( string $text )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoContext::status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:40:"public int CairoContext::status ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoContext::stroke";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public void CairoContext::stroke ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoContext::strokeExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public array CairoContext::strokeExtents ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoContext::strokePreserve";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public void CairoContext::strokePreserve ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoContext::textExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:55:"public array CairoContext::textExtents ( string $text )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"CairoContext::textPath";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public void CairoContext::textPath ( string $string )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"CairoContext::transform";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"public void CairoContext::transform ( string $matrix )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoContext::translate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:60:"public void CairoContext::translate ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoContext::userToDevice";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:64:"public array CairoContext::userToDevice ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:34:"CairoContext::userToDeviceDistance";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:72:"public array CairoContext::userToDeviceDistance ( string $x, string $y )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoSurface::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public CairoSurface::__construct ( void )";i:3;s:94:"CairoSurface is an abstract type and, as such, should not be instantiated in your PHP scripts.";}
a:4:{i:0;s:22:"CairoSurface::copyPage";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public void CairoSurface::copyPage ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:27:"CairoSurface::createSimilar";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:108:"public void CairoSurface::createSimilar ( CairoSurface $other, int $content, string $width, string $height )";i:3;s:469:"Create a new surface that is as compatible as possible with an existing surface. For example the new surface will have the same fallback resolution and font options as other. Generally, the new surface will also use the same backend as other, unless that is not possible for some reason. The type of the returned surface may be examined with CairoSurface::getType(). Initially the surface contents are all 0 (transparent if contents have transparency, black otherwise.)";}
a:4:{i:0;s:20:"CairoSurface::finish";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public void CairoSurface::finish ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:19:"CairoSurface::flush";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:40:"public void CairoSurface::flush ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:24:"CairoSurface::getContent";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public int CairoSurface::getContent ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:29:"CairoSurface::getDeviceOffset";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"public array CairoSurface::getDeviceOffset ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:28:"CairoSurface::getFontOptions";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public void CairoSurface::getFontOptions ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"CairoSurface::getType";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public int CairoSurface::getType ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoSurface::markDirty";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoSurface::markDirty ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:32:"CairoSurface::markDirtyRectangle";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:100:"public void CairoSurface::markDirtyRectangle ( string $x, string $y, string $width, string $height )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:29:"CairoSurface::setDeviceOffset";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:66:"public void CairoSurface::setDeviceOffset ( string $x, string $y )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:35:"CairoSurface::setFallbackResolution";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:72:"public void CairoSurface::setFallbackResolution ( string $x, string $y )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:22:"CairoSurface::showPage";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public void CairoSurface::showPage ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoSurface::status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:40:"public int CairoSurface::status ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:24:"CairoSurface::writeToPng";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public void CairoSurface::writeToPng ( string $file )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:28:"CairoSvgSurface::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:81:"public CairoSvgSurface::__construct ( string $file, float $width, float $height )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:28:"CairoSvgSurface::getVersions";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:57:"public static array CairoSvgSurface::getVersions ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:34:"CairoSvgSurface::restrictToVersion";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:66:"public void CairoSvgSurface::restrictToVersion ( string $version )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:32:"CairoSvgSurface::versionToString";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"public static string CairoSvgSurface::versionToString ( int $version )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoImageSurface::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:78:"public CairoImageSurface::__construct ( int $format, int $width, int $height )";i:3;s:45:"Creates a new CairoImageSuface object of type";}
a:4:{i:0;s:32:"CairoImageSurface::createForData";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:128:"public static void CairoImageSurface::createForData ( string $data, int $format, int $width, int $height [, int $stride = -1 ] )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:32:"CairoImageSurface::createFromPng";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:81:"public static CairoImageSurface CairoImageSurface::createFromPng ( string $file )";i:3;s:53:"Creates a new CairoImageSurface form a png image file";}
a:4:{i:0;s:26:"CairoImageSurface::getData";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public string CairoImageSurface::getData ( void )";i:3;s:123:"ReturnsÃ‚Â the image data of this surface or NULL if surface is not an image surface, or if, procedural :, has been called.";}
a:4:{i:0;s:28:"CairoImageSurface::getFormat";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public int CairoImageSurface::getFormat ( void )";i:3;s:49:"Retrieves the image format, as one of the defined";}
a:4:{i:0;s:28:"CairoImageSurface::getHeight";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public int CairoImageSurface::getHeight ( void )";i:3;s:32:"This methods returns the height.";}
a:4:{i:0;s:28:"CairoImageSurface::getStride";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public int CairoImageSurface::getStride ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:27:"CairoImageSurface::getWidth";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:47:"public int CairoImageSurface::getWidth ( void )";i:3;s:21:"Gets the width of the";}
a:4:{i:0;s:28:"CairoPdfSurface::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:81:"public CairoPdfSurface::__construct ( string $file, float $width, float $height )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:24:"CairoPdfSurface::setSize";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"public void CairoPdfSurface::setSize ( string $width, string $height )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:27:"CairoPsSurface::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:80:"public CairoPsSurface::__construct ( string $file, float $width, float $height )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:33:"CairoPsSurface::dscBeginPageSetup";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"public void CairoPsSurface::dscBeginPageSetup ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:29:"CairoPsSurface::dscBeginSetup";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public void CairoPsSurface::dscBeginSetup ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:26:"CairoPsSurface::dscComment";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public void CairoPsSurface::dscComment ( string $comment )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:22:"CairoPsSurface::getEps";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public bool CairoPsSurface::getEps ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:25:"CairoPsSurface::getLevels";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"public static array CairoPsSurface::getLevels ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:29:"CairoPsSurface::levelToString";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"public static string CairoPsSurface::levelToString ( int $level )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:31:"CairoPsSurface::restrictToLevel";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:61:"public void CairoPsSurface::restrictToLevel ( string $level )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:22:"CairoPsSurface::setEps";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"public void CairoPsSurface::setEps ( string $level )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoPsSurface::setSize";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:69:"public void CairoPsSurface::setSize ( string $width, string $height )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:26:"CairoFontFace::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:42:"public CairoFontFace::__construct ( void )";i:3;s:135:"CairoFontFace class represents a particular font at a particular weight, slant, and other characteristic but no transformation or size.";}
a:4:{i:0;s:22:"CairoFontFace::getType";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:42:"public int CairoFontFace::getType ( void )";i:3;s:114:"This function returns the type of the backend used to create a font face. See class constants for available types.";}
a:4:{i:0;s:21:"CairoFontFace::status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public int CairoFontFace::status ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:29:"CairoFontOptions::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:45:"public CairoFontOptions::__construct ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoFontOptions::equal";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public bool CairoFontOptions::equal ( string $other )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoFontOptions::getAntialias";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public int CairoFontOptions::getAntialias ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:32:"CairoFontOptions::getHintMetrics";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"public int CairoFontOptions::getHintMetrics ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoFontOptions::getHintStyle";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public int CairoFontOptions::getHintStyle ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:34:"CairoFontOptions::getSubpixelOrder";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"public int CairoFontOptions::getSubpixelOrder ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:22:"CairoFontOptions::hash";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:42:"public int CairoFontOptions::hash ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoFontOptions::merge";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public void CairoFontOptions::merge ( string $other )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoFontOptions::setAntialias";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:64:"public void CairoFontOptions::setAntialias ( string $antialias )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:32:"CairoFontOptions::setHintMetrics";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:69:"public void CairoFontOptions::setHintMetrics ( string $hint_metrics )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoFontOptions::setHintStyle";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"public void CairoFontOptions::setHintStyle ( string $hint_style )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:34:"CairoFontOptions::setSubpixelOrder";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:73:"public void CairoFontOptions::setSubpixelOrder ( string $subpixel_order )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:24:"CairoFontOptions::status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public int CairoFontOptions::status ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoScaledFont::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:130:"public CairoScaledFont::__construct ( CairoFontFace $font_face, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $options )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:24:"CairoScaledFont::extents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:46:"public array CairoScaledFont::extents ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoScaledFont::getCtm";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"public CairoMatrix CairoScaledFont::getCtm ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:28:"CairoScaledFont::getFontFace";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:49:"public void CairoScaledFont::getFontFace ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:30:"CairoScaledFont::getFontMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"public void CairoScaledFont::getFontMatrix ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:31:"CairoScaledFont::getFontOptions";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"public void CairoScaledFont::getFontOptions ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:31:"CairoScaledFont::getScaleMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"public void CairoScaledFont::getScaleMatrix ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:24:"CairoScaledFont::getType";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public int CairoScaledFont::getType ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:29:"CairoScaledFont::glyphExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:61:"public array CairoScaledFont::glyphExtents ( string $glyphs )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoScaledFont::status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:43:"public int CairoScaledFont::status ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:28:"CairoScaledFont::textExtents";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public array CairoScaledFont::textExtents ( string $text )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoPattern::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public CairoPattern::__construct ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoPattern::getMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:44:"public void CairoPattern::getMatrix ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"CairoPattern::getType";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:41:"public int CairoPattern::getType ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:23:"CairoPattern::setMatrix";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:54:"public void CairoPattern::setMatrix ( string $matrix )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:20:"CairoPattern::status";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:40:"public int CairoPattern::status ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:37:"CairoGradientPattern::addColorStopRgb";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:110:"public void CairoGradientPattern::addColorStopRgb ( string $offset, string $red, string $green, string $blue )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:38:"CairoGradientPattern::addColorStopRgba";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:126:"public void CairoGradientPattern::addColorStopRgba ( string $offset, string $red, string $green, string $blue, string $alpha )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:39:"CairoGradientPattern::getColorStopCount";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:59:"public int CairoGradientPattern::getColorStopCount ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:38:"CairoGradientPattern::getColorStopRgba";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:69:"public array CairoGradientPattern::getColorStopRgba ( string $index )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:31:"CairoGradientPattern::getExtend";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:51:"public int CairoGradientPattern::getExtend ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:31:"CairoGradientPattern::setExtend";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:59:"public void CairoGradientPattern::setExtend ( int $extend )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoSolidPattern::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:101:"public CairoSolidPattern::__construct ( float $red, float $green, float $blue [, float $alpha = 0 ] )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:26:"CairoSolidPattern::getRgba";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:48:"public array CairoSolidPattern::getRgba ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:32:"CairoSurfacePattern::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:65:"public CairoSurfacePattern::__construct ( CairoSurface $surface )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoSurfacePattern::getExtend";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public int CairoSurfacePattern::getExtend ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoSurfacePattern::getFilter";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:50:"public int CairoSurfacePattern::getFilter ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:31:"CairoSurfacePattern::getSurface";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"public void CairoSurfacePattern::getSurface ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoSurfacePattern::setExtend";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public void CairoSurfacePattern::setExtend ( int $extend )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoSurfacePattern::setFilter";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:61:"public void CairoSurfacePattern::setFilter ( string $filter )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:32:"CairoLinearGradient::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:86:"public CairoLinearGradient::__construct ( float $x0, float $y0, float $x1, float $y1 )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:30:"CairoLinearGradient::getPoints";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:52:"public array CairoLinearGradient::getPoints ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:32:"CairoRadialGradient::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:108:"public CairoRadialGradient::__construct ( float $x0, float $y0, float $r0, float $x1, float $y1, float $r1 )";i:3;s:22:"Object oriented style:";}
a:4:{i:0;s:31:"CairoRadialGradient::getCircles";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public array CairoRadialGradient::getCircles ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:27:"CairoFormat::strideForWidth";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:73:"public static int CairoFormat::strideForWidth ( int $format, int $width )";i:3;s:134:"This method provides a stride value that will respect all alignment requirements of the accelerated image-rendering code within cairo.";}
a:4:{i:0;s:24:"CairoMatrix::__construct";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:154:"public CairoMatrix::__construct ([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:25:"CairoMatrix::initIdentity";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:53:"public static void CairoMatrix::initIdentity ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"CairoMatrix::initRotate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:61:"public static void CairoMatrix::initRotate ( float $radians )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:22:"CairoMatrix::initScale";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:66:"public static void CairoMatrix::initScale ( float $sx, float $sy )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:26:"CairoMatrix::initTranslate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"public static void CairoMatrix::initTranslate ( float $tx, float $ty )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"CairoMatrix::invert";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:40:"public void CairoMatrix::invert ( void )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:21:"CairoMatrix::multiply";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:94:"public static CairoMatrix CairoMatrix::multiply ( CairoMatrix $matrix1, CairoMatrix $matrix2 )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:19:"CairoMatrix::rotate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:58:"public void CairoMatrix::rotate ( string $sx, string $sy )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"CairoMatrix::scale";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:55:"public void CairoMatrix::scale ( float $sx, float $sy )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:30:"CairoMatrix::transformDistance";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:70:"public array CairoMatrix::transformDistance ( string $dx, string $dy )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:27:"CairoMatrix::transformPoint";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:67:"public array CairoMatrix::transformPoint ( string $dx, string $dy )";i:3;s:33:"The method description goes here.";}
a:4:{i:0;s:22:"CairoMatrix::translate";i:1;s:21:"(PECL cairo >= 0.1.0)";i:2;s:61:"public void CairoMatrix::translate ( string $tx, string $ty )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:14:"exif_imagetype";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:39:"int exif_imagetype ( string $filename )";i:3;s:59:"reads the first bytes of an image and checks its signature.";}
a:4:{i:0;s:14:"exif_read_data";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:123:"array exif_read_data ( string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false ]]] )";i:3;s:101:"reads the headers from a or image file. This way you can read meta data generated by digital cameras.";}
a:4:{i:0;s:12:"exif_tagname";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:34:"string exif_tagname ( int $index )";i:3;s:0:"";}
a:4:{i:0;s:14:"exif_thumbnail";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:96:"string exif_thumbnail ( string $filename [, int &$width [, int &$height [, int &$imagetype ]]] )";i:3;s:43:"reads the embedded thumbnail of a or image.";}
a:4:{i:0;s:14:"read_exif_data";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:7:"gd_info";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:22:"array gd_info ( void )";i:3;s:80:"Gets information about the version and capabilities of the installed GD library.";}
a:4:{i:0;s:12:"getimagesize";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"array getimagesize ( string $filename [, array &$imageinfo ] )";i:3;s:196:"The function will determine the size of any given image file and return the dimensions along with the file type and a text string to be used inside a normal tag and the correspondant content type.";}
a:4:{i:0;s:22:"getimagesizefromstring";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:73:"array getimagesizefromstring ( string $imagedata [, array &$imageinfo ] )";i:3;s:88:"Identical to except that accepts a string instead of a file name as the first parameter.";}
a:4:{i:0;s:23:"image_type_to_extension";i:1;s:7:"(PHP 5)";i:2;s:79:"string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )";i:3;s:45:"Returns the extension for the given constant.";}
a:4:{i:0;s:23:"image_type_to_mime_type";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:49:"string image_type_to_mime_type ( int $imagetype )";i:3;s:68:"The function will determine the Mime-Type for an IMAGETYPE constant.";}
a:4:{i:0;s:10:"image2wbmp";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:76:"bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )";i:3;s:40:"outputs or save a version of the given .";}
a:4:{i:0;s:11:"imageaffine";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:72:"resource imageaffine ( resource $image, array $affine [, array $clip ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"imageaffinematrixconcat";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:54:"array imageaffinematrixconcat ( array $m1, array $m2 )";i:3;s:0:"";}
a:4:{i:0;s:20:"imageaffinematrixget";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:60:"array imageaffinematrixget ( int $type [, mixed $options ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"imagealphablending";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:60:"bool imagealphablending ( resource $image, bool $blendmode )";i:3;s:596:"allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.";}
a:4:{i:0;s:14:"imageantialias";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:54:"bool imageantialias ( resource $image, bool $enabled )";i:3;s:191:"Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.";}
a:4:{i:0;s:8:"imagearc";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:110:"bool imagearc ( resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color )";i:3;s:57:"draws an arc of circle centered at the given coordinates.";}
a:4:{i:0;s:9:"imagechar";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"bool imagechar ( resource $image, int $font, int $x, int $y, string $c, int $color )";i:3;s:115:"draws the first character of in the image identified by with its upper-left at, (top left is 0, 0) with the color .";}
a:4:{i:0;s:11:"imagecharup";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:86:"bool imagecharup ( resource $image, int $font, int $x, int $y, string $c, int $color )";i:3;s:73:"Draws the character vertically at the specified coordinate on the given .";}
a:4:{i:0;s:18:"imagecolorallocate";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:75:"int imagecolorallocate ( resource $image, int $red, int $green, int $blue )";i:3;s:83:"Returns a color identifier representing the color composed of the given components.";}
a:4:{i:0;s:23:"imagecolorallocatealpha";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:92:"int imagecolorallocatealpha ( resource $image, int $red, int $green, int $blue, int $alpha )";i:3;s:72:"behaves identically to with the addition of the transparency parameter .";}
a:4:{i:0;s:12:"imagecolorat";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"int imagecolorat ( resource $image, int $x, int $y )";i:3;s:97:"Returns the index of the color of the pixel at the specified location in the image specified by .";}
a:4:{i:0;s:17:"imagecolorclosest";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"int imagecolorclosest ( resource $image, int $red, int $green, int $blue )";i:3;s:101:"Returns the index of the color in the palette of the image which is "closest" to the specified value.";}
a:4:{i:0;s:22:"imagecolorclosestalpha";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:91:"int imagecolorclosestalpha ( resource $image, int $red, int $green, int $blue, int $alpha )";i:3;s:111:"Returns the index of the color in the palette of the image which is "closest" to the specified value and level.";}
a:4:{i:0;s:20:"imagecolorclosesthwb";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:77:"int imagecolorclosesthwb ( resource $image, int $red, int $green, int $blue )";i:3;s:90:"Get the index of the color which has the hue, white and blackness nearest the given color.";}
a:4:{i:0;s:20:"imagecolordeallocate";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"bool imagecolordeallocate ( resource $image, int $color )";i:3;s:51:"De-allocates a color previously allocated with or .";}
a:4:{i:0;s:15:"imagecolorexact";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:72:"int imagecolorexact ( resource $image, int $red, int $green, int $blue )";i:3;s:69:"Returns the index of the specified color in the palette of the image.";}
a:4:{i:0;s:20:"imagecolorexactalpha";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:89:"int imagecolorexactalpha ( resource $image, int $red, int $green, int $blue, int $alpha )";i:3;s:75:"Returns the index of the specified color+alpha in the palette of the image.";}
a:4:{i:0;s:15:"imagecolormatch";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:59:"bool imagecolormatch ( resource $image1, resource $image2 )";i:3;s:94:"Makes the colors of the palette version of an image more closely match the true color version.";}
a:4:{i:0;s:17:"imagecolorresolve";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"int imagecolorresolve ( resource $image, int $red, int $green, int $blue )";i:3;s:134:"This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.";}
a:4:{i:0;s:22:"imagecolorresolvealpha";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:91:"int imagecolorresolvealpha ( resource $image, int $red, int $green, int $blue, int $alpha )";i:3;s:134:"This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.";}
a:4:{i:0;s:13:"imagecolorset";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:103:"void imagecolorset ( resource $image, int $index, int $red, int $green, int $blue [, int $alpha = 0 ] )";i:3;s:197:"This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.";}
a:4:{i:0;s:19:"imagecolorsforindex";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"array imagecolorsforindex ( resource $image, int $index )";i:3;s:37:"Gets the color for a specified index.";}
a:4:{i:0;s:16:"imagecolorstotal";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"int imagecolorstotal ( resource $image )";i:3;s:49:"Returns the number of colors in an image palette.";}
a:4:{i:0;s:21:"imagecolortransparent";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"int imagecolortransparent ( resource $image [, int $color ] )";i:3;s:41:"Sets the transparent color in the given .";}
a:4:{i:0;s:16:"imageconvolution";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:83:"bool imageconvolution ( resource $image, array $matrix, float $div, float $offset )";i:3;s:82:"Applies a convolution matrix on the image, using the given coefficient and offset.";}
a:4:{i:0;s:9:"imagecopy";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:125:"bool imagecopy ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h )";i:3;s:153:"Copy a part of onto starting at the x,y coordinates, with a width of and a height of . The portion defined will be copied onto the x,y coordinates, and .";}
a:4:{i:0;s:14:"imagecopymerge";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:140:"bool imagecopymerge ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )";i:3;s:153:"Copy a part of onto starting at the x,y coordinates, with a width of and a height of . The portion defined will be copied onto the x,y coordinates, and .";}
a:4:{i:0;s:18:"imagecopymergegray";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:144:"bool imagecopymergegray ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )";i:3;s:153:"copy a part of onto starting at the x,y coordinates, with a width of and a height of . The portion defined will be copied onto the x,y coordinates, and .";}
a:4:{i:0;s:18:"imagecopyresampled";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:164:"bool imagecopyresampled ( resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h )";i:3;s:188:"copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.";}
a:4:{i:0;s:16:"imagecopyresized";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:162:"bool imagecopyresized ( resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h )";i:3;s:117:"copies a rectangular portion of one image to another image. is the destination image, is the source image identifier.";}
a:4:{i:0;s:11:"imagecreate";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"resource imagecreate ( int $width, int $height )";i:3;s:73:"returns an image identifier representing a blank image of specified size.";}
a:4:{i:0;s:18:"imagecreatefromgd2";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:48:"resource imagecreatefromgd2 ( string $filename )";i:3;s:40:"Create a new image from GD2 file or URL.";}
a:4:{i:0;s:22:"imagecreatefromgd2part";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:99:"resource imagecreatefromgd2part ( string $filename, int $srcX, int $srcY, int $width, int $height )";i:3;s:56:"Create a new image from a given part of GD2 file or URL.";}
a:4:{i:0;s:17:"imagecreatefromgd";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:47:"resource imagecreatefromgd ( string $filename )";i:3;s:39:"Create a new image from GD file or URL.";}
a:4:{i:0;s:18:"imagecreatefromgif";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"resource imagecreatefromgif ( string $filename )";i:3;s:84:"returns an image identifier representing the image obtained from the given filename.";}
a:4:{i:0;s:19:"imagecreatefromjpeg";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"resource imagecreatefromjpeg ( string $filename )";i:3;s:84:"returns an image identifier representing the image obtained from the given filename.";}
a:4:{i:0;s:18:"imagecreatefrompng";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"resource imagecreatefrompng ( string $filename )";i:3;s:84:"returns an image identifier representing the image obtained from the given filename.";}
a:4:{i:0;s:21:"imagecreatefromstring";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:48:"resource imagecreatefromstring ( string $image )";i:3;s:186:"returns an image identifier representing the image obtained from the given . These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2.";}
a:4:{i:0;s:19:"imagecreatefromwbmp";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:49:"resource imagecreatefromwbmp ( string $filename )";i:3;s:84:"returns an image identifier representing the image obtained from the given filename.";}
a:4:{i:0;s:19:"imagecreatefromwebp";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:49:"resource imagecreatefromwebp ( string $filename )";i:3;s:84:"returns an image identifier representing the image obtained from the given filename.";}
a:4:{i:0;s:18:"imagecreatefromxbm";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:48:"resource imagecreatefromxbm ( string $filename )";i:3;s:84:"returns an image identifier representing the image obtained from the given filename.";}
a:4:{i:0;s:18:"imagecreatefromxpm";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:48:"resource imagecreatefromxpm ( string $filename )";i:3;s:84:"returns an image identifier representing the image obtained from the given filename.";}
a:4:{i:0;s:20:"imagecreatetruecolor";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:57:"resource imagecreatetruecolor ( int $width, int $height )";i:3;s:77:"returns an image identifier representing a black image of the specified size.";}
a:4:{i:0;s:9:"imagecrop";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:51:"resource imagecrop ( resource $image, array $rect )";i:3;s:0:"";}
a:4:{i:0;s:13:"imagecropauto";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:108:"resource imagecropauto ( resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]] )";i:3;s:0:"";}
a:4:{i:0;s:15:"imagedashedline";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:88:"bool imagedashedline ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )";i:3;s:60:"This function is deprecated. Use combination of and instead.";}
a:4:{i:0;s:12:"imagedestroy";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"bool imagedestroy ( resource $image )";i:3;s:40:"frees any memory associated with image .";}
a:4:{i:0;s:12:"imageellipse";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:92:"bool imageellipse ( resource $image, int $cx, int $cy, int $width, int $height, int $color )";i:3;s:55:"Draws an ellipse centered at the specified coordinates.";}
a:4:{i:0;s:9:"imagefill";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"bool imagefill ( resource $image, int $x, int $y, int $color )";i:3;s:97:"Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given in the .";}
a:4:{i:0;s:14:"imagefilledarc";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:128:"bool imagefilledarc ( resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style )";i:3;s:71:"Draws a partial arc centered at the specified coordinate in the given .";}
a:4:{i:0;s:18:"imagefilledellipse";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:98:"bool imagefilledellipse ( resource $image, int $cx, int $cy, int $width, int $height, int $color )";i:3;s:68:"Draws an ellipse centered at the specified coordinate on the given .";}
a:4:{i:0;s:18:"imagefilledpolygon";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:87:"bool imagefilledpolygon ( resource $image, array $points, int $num_points, int $color )";i:3;s:39:"creates a filled polygon in the given .";}
a:4:{i:0;s:20:"imagefilledrectangle";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:93:"bool imagefilledrectangle ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )";i:3;s:129:"Creates a rectangle filled with in the given starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.";}
a:4:{i:0;s:17:"imagefilltoborder";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"bool imagefilltoborder ( resource $image, int $x, int $y, int $border, int $color )";i:3;s:149:"performs a flood fill whose border color is defined by . The starting point for the fill is, (top left is 0, 0) and the region is filled with color .";}
a:4:{i:0;s:11:"imagefilter";i:1;s:7:"(PHP 5)";i:2;s:110:"bool imagefilter ( resource $image, int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )";i:3;s:33:"applies the given filter on the .";}
a:4:{i:0;s:9:"imageflip";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:45:"bool imageflip ( resource $image, int $mode )";i:3;s:33:"Flips the image using the given .";}
a:4:{i:0;s:15:"imagefontheight";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"int imagefontheight ( int $font )";i:3;s:62:"Returns the pixel height of a character in the specified font.";}
a:4:{i:0;s:14:"imagefontwidth";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"int imagefontwidth ( int $font )";i:3;s:47:"Returns the pixel width of a character in font.";}
a:4:{i:0;s:11:"imageftbbox";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:101:"array imageftbbox ( float $size, float $angle, string $fontfile, string $text [, array $extrainfo ] )";i:3;s:84:"This function calculates and returns the bounding box in pixels for a FreeType text.";}
a:4:{i:0;s:11:"imagefttext";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:146:"array imagefttext ( resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo ] )";i:3;s:0:"";}
a:4:{i:0;s:17:"imagegammacorrect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"bool imagegammacorrect ( resource $image, float $inputgamma, float $outputgamma )";i:3;s:76:"Applies gamma correction to the given gd given an input and an output gamma.";}
a:4:{i:0;s:8:"imagegd2";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:103:"bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]] )";i:3;s:34:"Outputs a GD2 image to the given .";}
a:4:{i:0;s:7:"imagegd";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:54:"bool imagegd ( resource $image [, string $filename ] )";i:3;s:33:"Outputs a GD image to the given .";}
a:4:{i:0;s:8:"imagegif";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"bool imagegif ( resource $image [, string $filename ] )";i:3;s:94:"creates the file in filename from the image . The argument is the return from the or function.";}
a:4:{i:0;s:15:"imagegrabscreen";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:33:"resource imagegrabscreen ( void )";i:3;s:39:"Grabs a screenshot of the whole screen.";}
a:4:{i:0;s:15:"imagegrabwindow";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:73:"resource imagegrabwindow ( int $window_handle [, int $client_area = 0 ] )";i:3;s:88:"Grabs a window or its client area using a windows handle (HWND property in COM instance)";}
a:4:{i:0;s:14:"imageinterlace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"int imageinterlace ( resource $image [, int $interlace = 0 ] )";i:3;s:34:"turns the interlace bit on or off.";}
a:4:{i:0;s:16:"imageistruecolor";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:41:"bool imageistruecolor ( resource $image )";i:3;s:45:"finds whether the image is a truecolor image.";}
a:4:{i:0;s:9:"imagejpeg";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:73:"bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )";i:3;s:31:"creates a file from the given .";}
a:4:{i:0;s:16:"imagelayereffect";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:54:"bool imagelayereffect ( resource $image, int $effect )";i:3;s:70:"Set the alpha blending flag to use the bundled libgd layering effects.";}
a:4:{i:0;s:9:"imageline";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:82:"bool imageline ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )";i:3;s:42:"Draws a line between the two given points.";}
a:4:{i:0;s:13:"imageloadfont";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int imageloadfont ( string $file )";i:3;s:55:"loads a user-defined bitmap and returns its identifier.";}
a:4:{i:0;s:16:"imagepalettecopy";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:65:"void imagepalettecopy ( resource $destination, resource $source )";i:3;s:47:"copies the palette from the image to the image.";}
a:4:{i:0;s:23:"imagepalettetotruecolor";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:46:"bool imagepalettetotruecolor ( resource $src )";i:3;s:87:"Converts a palette based image, created by functions like to a true color image, like .";}
a:4:{i:0;s:8:"imagepng";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:89:"bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )";i:3;s:41:"Outputs or saves a image from the given .";}
a:4:{i:0;s:12:"imagepolygon";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"bool imagepolygon ( resource $image, array $points, int $num_points, int $color )";i:3;s:32:"creates a polygon in the given .";}
a:4:{i:0;s:11:"imagepsbbox";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"array imagepsbbox ( string $text, resource $font, int $size )";i:3;s:72:"Gives the bounding box of a text rectangle using PostScript Type1 fonts.";}
a:4:{i:0;s:17:"imagepsencodefont";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"bool imagepsencodefont ( resource $font_index, string $encodingfile )";i:3;s:257:"Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you'll definitely want to change this if you use an other language than English.";}
a:4:{i:0;s:17:"imagepsextendfont";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"bool imagepsextendfont ( resource $font_index, float $extend )";i:3;s:109:"Extend or condense a font (), if the value of the parameter is less than one you will be condensing the font.";}
a:4:{i:0;s:15:"imagepsfreefont";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"bool imagepsfreefont ( resource $font_index )";i:3;s:46:"frees memory used by a PostScript Type 1 font.";}
a:4:{i:0;s:15:"imagepsloadfont";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"resource imagepsloadfont ( string $filename )";i:3;s:46:"Load a PostScript Type 1 font from the given .";}
a:4:{i:0;s:16:"imagepsslantfont";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:60:"bool imagepsslantfont ( resource $font_index, float $slant )";i:3;s:25:"Slant a given font given.";}
a:4:{i:0;s:11:"imagepstext";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:229:"array imagepstext ( resource $image, string $text, resource $font_index, int $size, int $foreground, int $background, int $x, int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] )";i:3;s:54:"Draws a text on an image using PostScript Type1 fonts.";}
a:4:{i:0;s:14:"imagerectangle";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:87:"bool imagerectangle ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )";i:3;s:58:"creates a rectangle starting at the specified coordinates.";}
a:4:{i:0;s:11:"imagerotate";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:103:"resource imagerotate ( resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0 ] )";i:3;s:45:"Rotates the image using the given in degrees.";}
a:4:{i:0;s:14:"imagesavealpha";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:55:"bool imagesavealpha ( resource $image, bool $saveflag )";i:3;s:129:"sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.";}
a:4:{i:0;s:10:"imagescale";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:116:"resource imagescale ( resource $image, int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]] )";i:3;s:0:"";}
a:4:{i:0;s:13:"imagesetbrush";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:55:"bool imagesetbrush ( resource $image, resource $brush )";i:3;s:118:"sets the brush image to be used by all line drawing functions (such as and ) when drawing with the special colors or .";}
a:4:{i:0;s:21:"imagesetinterpolation";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:84:"bool imagesetinterpolation ( resource $image [, int $method = IMG_BILINEAR_FIXED ] )";i:3;s:134:"Sets the interpolation method, setting an interpolation method affects the rendering of various functions in GD, such as the function.";}
a:4:{i:0;s:13:"imagesetpixel";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:66:"bool imagesetpixel ( resource $image, int $x, int $y, int $color )";i:3;s:42:"draws a pixel at the specified coordinate.";}
a:4:{i:0;s:13:"imagesetstyle";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:52:"bool imagesetstyle ( resource $image, array $style )";i:3;s:138:"sets the style to be used by all line drawing functions (such as and ) when drawing with the special color or lines of images with color .";}
a:4:{i:0;s:17:"imagesetthickness";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:58:"bool imagesetthickness ( resource $image, int $thickness )";i:3;s:102:"sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to pixels.";}
a:4:{i:0;s:12:"imagesettile";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:53:"bool imagesettile ( resource $image, resource $tile )";i:3;s:115:"sets the tile image to be used by all region filling functions (such as and ) when filling with the special color .";}
a:4:{i:0;s:11:"imagestring";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"bool imagestring ( resource $image, int $font, int $x, int $y, string $string, int $color )";i:3;s:33:"Draws a at the given coordinates.";}
a:4:{i:0;s:13:"imagestringup";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:93:"bool imagestringup ( resource $image, int $font, int $x, int $y, string $string, int $color )";i:3;s:44:"Draws a vertically at the given coordinates.";}
a:4:{i:0;s:7:"imagesx";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"int imagesx ( resource $image )";i:3;s:40:"Returns the width of the given resource.";}
a:4:{i:0;s:7:"imagesy";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"int imagesy ( resource $image )";i:3;s:41:"Returns the height of the given resource.";}
a:4:{i:0;s:23:"imagetruecolortopalette";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:76:"bool imagetruecolortopalette ( resource $image, bool $dither, int $ncolors )";i:3;s:487:"converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.";}
a:4:{i:0;s:12:"imagettfbbox";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:80:"array imagettfbbox ( float $size, float $angle, string $fontfile, string $text )";i:3;s:84:"This function calculates and returns the bounding box in pixels for a TrueType text.";}
a:4:{i:0;s:12:"imagettftext";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:125:"array imagettftext ( resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text )";i:3;s:53:"Writes the given into the image using TrueType fonts.";}
a:4:{i:0;s:10:"imagetypes";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:23:"int imagetypes ( void )";i:3;s:66:"Returns the image types supported by the current PHP installation.";}
a:4:{i:0;s:9:"imagewbmp";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:76:"bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )";i:3;s:40:"outputs or save a version of the given .";}
a:4:{i:0;s:9:"imagewebp";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:52:"bool imagewebp ( resource $image, string $filename )";i:3;s:46:"Outputs or save an WebP version of the given .";}
a:4:{i:0;s:8:"imagexbm";i:1;s:7:"(PHP 5)";i:2;s:72:"bool imagexbm ( resource $image, string $filename [, int $foreground ] )";i:3;s:41:"Outputs or save an version of the given .";}
a:4:{i:0;s:9:"iptcembed";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"mixed iptcembed ( string $iptcdata, string $jpeg_file_name [, int $spool ] )";i:3;s:42:"Embeds binary IPTC data into a JPEG image.";}
a:4:{i:0;s:9:"iptcparse";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"array iptcparse ( string $iptcblock )";i:3;s:37:"Parses an block into its single tags.";}
a:4:{i:0;s:9:"jpeg2wbmp";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:104:"bool jpeg2wbmp ( string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold )";i:3;s:38:"Converts a JPEG file into a WBMP file.";}
a:4:{i:0;s:8:"png2wbmp";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:102:"bool png2wbmp ( string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold )";i:3;s:37:"Converts a PNG file into a WBMP file.";}
a:4:{i:0;s:17:"Gmagick::addimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:53:"public Gmagick Gmagick::addimage ( Gmagick $Gmagick )";i:3;s:151:"Adds new image to Gmagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.";}
a:4:{i:0;s:22:"Gmagick::addnoiseimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public Gmagick Gmagick::addnoiseimage ( int $NOISE )";i:3;s:31:"Adds random noise to the image.";}
a:4:{i:0;s:22:"Gmagick::annotateimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:114:"public Gmagick Gmagick::annotateimage ( GmagickDraw $GmagickDraw, float $x, float $y, float $angle, string $text )";i:3;s:29:"Annotates an image with text.";}
a:4:{i:0;s:18:"Gmagick::blurimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:83:"public Gmagick Gmagick::blurimage ( float $radius, float $sigma [, int $channel ] )";i:3;s:26:"Adds blur filter to image.";}
a:4:{i:0;s:20:"Gmagick::borderimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:84:"public Gmagick Gmagick::borderimage ( GmagickPixel $color, int $width, int $height )";i:3;s:112:"Surrounds the image with a border of the color defined by the bordercolor GmagickPixel object or a color string.";}
a:4:{i:0;s:22:"Gmagick::charcoalimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:69:"public Gmagick Gmagick::charcoalimage ( float $radius, float $sigma )";i:3;s:29:"Simulates a charcoal drawing.";}
a:4:{i:0;s:18:"Gmagick::chopimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:77:"public Gmagick Gmagick::chopimage ( int $width, int $height, int $x, int $y )";i:3;s:83:"Removes a region of an image and collapses the image to occupy the removed portion.";}
a:4:{i:0;s:14:"Gmagick::clear";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:38:"public Gmagick Gmagick::clear ( void )";i:3;s:49:"Clears all resources associated to Gmagick object";}
a:4:{i:0;s:21:"Gmagick::commentimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:56:"public Gmagick Gmagick::commentimage ( string $comment )";i:3;s:29:"Adds a comment to your image.";}
a:4:{i:0;s:23:"Gmagick::compositeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:88:"public Gmagick Gmagick::compositeimage ( Gmagick $source, int $COMPOSE, int $x, int $y )";i:3;s:57:"Composite one image onto another at the specified offset.";}
a:4:{i:0;s:20:"Gmagick::__construct";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:51:"public Gmagick::__construct ([ string $filename ] )";i:3;s:24:"The Gmagick constructor.";}
a:4:{i:0;s:18:"Gmagick::cropimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:77:"public Gmagick Gmagick::cropimage ( int $width, int $height, int $x, int $y )";i:3;s:31:"Extracts a region of the image.";}
a:4:{i:0;s:27:"Gmagick::cropthumbnailimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:70:"public Gmagick Gmagick::cropthumbnailimage ( int $width, int $height )";i:3;s:109:"Creates a fixed size thumbnail by first scaling the image down and cropping a specified area from the center.";}
a:4:{i:0;s:16:"Gmagick::current";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:40:"public Gmagick Gmagick::current ( void )";i:3;s:91:"Returns reference to the current gmagick object with image pointer at the correct sequence.";}
a:4:{i:0;s:27:"Gmagick::cyclecolormapimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:60:"public Gmagick Gmagick::cyclecolormapimage ( int $displace )";i:3;s:143:"Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.";}
a:4:{i:0;s:26:"Gmagick::deconstructimages";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:47:"public void Gmagick::deconstructimages ( void )";i:3;s:126:"Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.";}
a:4:{i:0;s:23:"Gmagick::despeckleimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:47:"public Gmagick Gmagick::despeckleimage ( void )";i:3;s:87:"Reduces the speckle noise in an image while preserving the edges of the original image.";}
a:4:{i:0;s:16:"Gmagick::destroy";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:40:"public Gmagick Gmagick::destroy ( void )";i:3;s:70:"Destroys the Gmagick object and frees all resources associated with it";}
a:4:{i:0;s:18:"Gmagick::drawimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:62:"public Gmagick Gmagick::drawimage ( GmagickDraw $GmagickDraw )";i:3;s:51:"Renders the GmagickDraw object on the current image";}
a:4:{i:0;s:18:"Gmagick::edgeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:51:"public Gmagick Gmagick::edgeimage ( float $radius )";i:3;s:120:"Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.";}
a:4:{i:0;s:20:"Gmagick::embossimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:67:"public Gmagick Gmagick::embossimage ( float $radius, float $sigma )";i:3;s:281:"Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.";}
a:4:{i:0;s:21:"Gmagick::enhanceimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:45:"public Gmagick Gmagick::enhanceimage ( void )";i:3;s:68:"Applies a digital filter that improves the quality of a noisy image.";}
a:4:{i:0;s:22:"Gmagick::equalizeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public Gmagick Gmagick::equalizeimage ( void )";i:3;s:30:"Equalizes the image histogram.";}
a:4:{i:0;s:18:"Gmagick::flipimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public Gmagick Gmagick::flipimage ( void )";i:3;s:83:"Creates a vertical mirror image by reflecting the pixels around the central x-axis.";}
a:4:{i:0;s:18:"Gmagick::flopimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public Gmagick Gmagick::flopimage ( void )";i:3;s:85:"Creates a horizontal mirror image by reflecting the pixels around the central y-axis.";}
a:4:{i:0;s:19:"Gmagick::frameimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:119:"public Gmagick Gmagick::frameimage ( GmagickPixel $color, int $width, int $height, int $inner_bevel, int $outer_bevel )";i:3;s:247:"Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.";}
a:4:{i:0;s:19:"Gmagick::gammaimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:51:"public Gmagick Gmagick::gammaimage ( float $gamma )";i:3;s:323:"Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.";}
a:4:{i:0;s:21:"Gmagick::getcopyright";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:44:"public string Gmagick::getcopyright ( void )";i:3;s:53:"Returns the GraphicsMagick API copyright as a string.";}
a:4:{i:0;s:20:"Gmagick::getfilename";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public string Gmagick::getfilename ( void )";i:3;s:55:"Returns the filename associated with an image sequence.";}
a:4:{i:0;s:32:"Gmagick::getimagebackgroundcolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:53:"public void Gmagick::getimagebackgroundcolor ( void )";i:3;s:35:"Returns the image background color.";}
a:4:{i:0;s:28:"Gmagick::getimageblueprimary";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:50:"public array Gmagick::getimageblueprimary ( void )";i:3;s:58:"Returns the chromaticity blue primary point for the image.";}
a:4:{i:0;s:28:"Gmagick::getimagebordercolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public void Gmagick::getimagebordercolor ( void )";i:3;s:31:"Returns the image border color.";}
a:4:{i:0;s:29:"Gmagick::getimagechanneldepth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:62:"public int Gmagick::getimagechanneldepth ( int $channel_type )";i:3;s:46:"Gets the depth for a particular image channel.";}
a:4:{i:0;s:23:"Gmagick::getimagecolors";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public int Gmagick::getimagecolors ( void )";i:3;s:50:"Returns the color of the specified colormap index.";}
a:4:{i:0;s:27:"Gmagick::getimagecolorspace";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:47:"public int Gmagick::getimagecolorspace ( void )";i:3;s:26:"Gets the image colorspace.";}
a:4:{i:0;s:24:"Gmagick::getimagecompose";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:44:"public int Gmagick::getimagecompose ( void )";i:3;s:57:"Returns the composite operator associated with the image.";}
a:4:{i:0;s:22:"Gmagick::getimagedelay";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public int Gmagick::getimagedelay ( void )";i:3;s:20:"Gets the image delay";}
a:4:{i:0;s:22:"Gmagick::getimagedepth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public int Gmagick::getimagedepth ( void )";i:3;s:28:"Gets the depth of the image.";}
a:4:{i:0;s:24:"Gmagick::getimagedispose";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:44:"public int Gmagick::getimagedispose ( void )";i:3;s:30:"Gets the image disposal method";}
a:4:{i:0;s:24:"Gmagick::getimageextrema";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public array Gmagick::getimageextrema ( void )";i:3;s:79:"Returns an associative array with the keys "min" and "max". Throws an on error.";}
a:4:{i:0;s:25:"Gmagick::getimagefilename";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:48:"public string Gmagick::getimagefilename ( void )";i:3;s:56:"Returns the filename of a particular image in a sequence";}
a:4:{i:0;s:23:"Gmagick::getimageformat";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public string Gmagick::getimageformat ( void )";i:3;s:55:"Returns the format of a particular image in a sequence.";}
a:4:{i:0;s:22:"Gmagick::getimagegamma";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:44:"public float Gmagick::getimagegamma ( void )";i:3;s:20:"Gets the image gamma";}
a:4:{i:0;s:29:"Gmagick::getimagegreenprimary";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:51:"public array Gmagick::getimagegreenprimary ( void )";i:3;s:89:"Returns the chromaticity green primary point. Returns an array with the keys "x" and "y".";}
a:4:{i:0;s:23:"Gmagick::getimageheight";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public int Gmagick::getimageheight ( void )";i:3;s:24:"Returns the image height";}
a:4:{i:0;s:26:"Gmagick::getimagehistogram";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:48:"public array Gmagick::getimagehistogram ( void )";i:3;s:100:"Returns the image histogram as an array of GmagickPixel objects. Throw an GmagickException on error.";}
a:4:{i:0;s:22:"Gmagick::getimageindex";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public int Gmagick::getimageindex ( void )";i:3;s:72:"Returns the index of the current active image within the Gmagick object.";}
a:4:{i:0;s:32:"Gmagick::getimageinterlacescheme";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public int Gmagick::getimageinterlacescheme ( void )";i:3;s:32:"Gets the image interlace scheme.";}
a:4:{i:0;s:27:"Gmagick::getimageiterations";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:47:"public int Gmagick::getimageiterations ( void )";i:3;s:26:"Gets the image iterations.";}
a:4:{i:0;s:22:"Gmagick::getimagematte";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public int Gmagick::getimagematte ( void )";i:3;s:62:"Returns TRUE if the image has a matte channel otherwise false.";}
a:4:{i:0;s:27:"Gmagick::getimagemattecolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:48:"public void Gmagick::getimagemattecolor ( void )";i:3;s:75:"Returns GmagickPixel object on success. Throw an GmagickException on error.";}
a:4:{i:0;s:24:"Gmagick::getimageprofile";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:55:"public string Gmagick::getimageprofile ( string $name )";i:3;s:32:"Returns the named image profile.";}
a:4:{i:0;s:27:"Gmagick::getimageredprimary";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public array Gmagick::getimageredprimary ( void )";i:3;s:81:"Returns the chromaticity red primary point as an array with the keys "x" and "y".";}
a:4:{i:0;s:32:"Gmagick::getimagerenderingintent";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public int Gmagick::getimagerenderingintent ( void )";i:3;s:31:"Gets the image rendering intent";}
a:4:{i:0;s:27:"Gmagick::getimageresolution";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public array Gmagick::getimageresolution ( void )";i:3;s:35:"Returns the resolution as an array.";}
a:4:{i:0;s:22:"Gmagick::getimagescene";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public int Gmagick::getimagescene ( void )";i:3;s:21:"Gets the image scene.";}
a:4:{i:0;s:26:"Gmagick::getimagesignature";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public string Gmagick::getimagesignature ( void )";i:3;s:63:"Generates an SHA-256 message digest for the image pixel stream.";}
a:4:{i:0;s:21:"Gmagick::getimagetype";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:41:"public int Gmagick::getimagetype ( void )";i:3;s:30:"Gets the potential image type.";}
a:4:{i:0;s:22:"Gmagick::getimageunits";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public int Gmagick::getimageunits ( void )";i:3;s:35:"Gets the image units of resolution.";}
a:4:{i:0;s:27:"Gmagick::getimagewhitepoint";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public array Gmagick::getimagewhitepoint ( void )";i:3;s:87:"Returns the chromaticity white point as an associative array with the keys "x" and "y".";}
a:4:{i:0;s:22:"Gmagick::getimagewidth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:42:"public int Gmagick::getimagewidth ( void )";i:3;s:31:"Returns the width of the image.";}
a:4:{i:0;s:23:"Gmagick::getpackagename";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public string Gmagick::getpackagename ( void )";i:3;s:40:"Returns the GraphicsMagick package name.";}
a:4:{i:0;s:24:"Gmagick::getquantumdepth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public array Gmagick::getquantumdepth ( void )";i:3;s:46:"Returns the Gmagick quantum depth as a string.";}
a:4:{i:0;s:23:"Gmagick::getreleasedate";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public string Gmagick::getreleasedate ( void )";i:3;s:52:"Returns the GraphicsMagick release date as a string.";}
a:4:{i:0;s:27:"Gmagick::getsamplingfactors";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public array Gmagick::getsamplingfactors ( void )";i:3;s:49:"Gets the horizontal and vertical sampling factor.";}
a:4:{i:0;s:16:"Gmagick::getsize";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:38:"public array Gmagick::getsize ( void )";i:3;s:99:"Returns the size associated with the Gmagick object as an array with the keys "columns" and "rows".";}
a:4:{i:0;s:19:"Gmagick::getversion";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:41:"public array Gmagick::getversion ( void )";i:3;s:67:"Returns the GraphicsMagick API version as a string and as a number.";}
a:4:{i:0;s:21:"Gmagick::hasnextimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public mixed Gmagick::hasnextimage ( void )";i:3;s:93:"Returns TRUE if the object has more images when traversing the list in the forward direction.";}
a:4:{i:0;s:25:"Gmagick::haspreviousimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:47:"public mixed Gmagick::haspreviousimage ( void )";i:3;s:92:"Returns TRUE if the object has more images when traversing the list in the reverse direction";}
a:4:{i:0;s:21:"Gmagick::implodeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public mixed Gmagick::implodeimage ( float $radius )";i:3;s:115:"Creates a new image that is a copy of an existing one with the image pixels "imploded" by the specified percentage.";}
a:4:{i:0;s:19:"Gmagick::labelimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:50:"public mixed Gmagick::labelimage ( string $label )";i:3;s:25:"Adds a label to an image.";}
a:4:{i:0;s:19:"Gmagick::levelimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:132:"public mixed Gmagick::levelimage ( float $blackPoint, float $gamma, float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT ] )";i:3;s:508:"Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.";}
a:4:{i:0;s:21:"Gmagick::magnifyimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public mixed Gmagick::magnifyimage ( void )";i:3;s:71:"Conveniently scales an image proportionally to twice its original size.";}
a:4:{i:0;s:17:"Gmagick::mapimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:67:"public Gmagick Gmagick::mapimage ( gmagick $gmagick, bool $dither )";i:3;s:78:"Replaces the colors of an image with the closest color from a reference image.";}
a:4:{i:0;s:26:"Gmagick::medianfilterimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:56:"public void Gmagick::medianfilterimage ( float $radius )";i:3;s:158:"Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.";}
a:4:{i:0;s:20:"Gmagick::minifyimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:41:"public void Gmagick::minifyimage ( void )";i:3;s:85:"A convenient method that scales an image proportionally to one-half its original size";}
a:4:{i:0;s:22:"Gmagick::modulateimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:87:"public void Gmagick::modulateimage ( float $brightness, float $saturation, float $hue )";i:3;s:316:"Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.";}
a:4:{i:0;s:24:"Gmagick::motionblurimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:82:"public void Gmagick::motionblurimage ( float $radius, float $sigma, float $angle )";i:3;s:302:"Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.";}
a:4:{i:0;s:17:"Gmagick::newimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:97:"public void Gmagick::newimage ( int $width, int $height, string $background [, string $format ] )";i:3;s:55:"Creates a new image with the specified background color";}
a:4:{i:0;s:18:"Gmagick::nextimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:39:"public bool Gmagick::nextimage ( void )";i:3;s:67:"Associates the next image in the image list with an Gmagick object.";}
a:4:{i:0;s:23:"Gmagick::normalizeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:55:"public void Gmagick::normalizeimage ([ int $channel ] )";i:3;s:114:"Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.";}
a:4:{i:0;s:22:"Gmagick::oilpaintimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public void Gmagick::oilpaintimage ( float $radius )";i:3;s:163:"Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.";}
a:4:{i:0;s:22:"Gmagick::previousimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public bool Gmagick::previousimage ( void )";i:3;s:70:"Assocates the previous image in an image list with the Gmagick object.";}
a:4:{i:0;s:21:"Gmagick::profileimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:67:"public void Gmagick::profileimage ( string $name, string $profile )";i:3;s:211:"Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.";}
a:4:{i:0;s:22:"Gmagick::quantizeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:120:"public void Gmagick::quantizeimage ( int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError )";i:3;s:240:"Analyzes the colors within a reference image and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.";}
a:4:{i:0;s:23:"Gmagick::quantizeimages";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:121:"public void Gmagick::quantizeimages ( int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError )";i:3;s:243:"Analyzes the colors within a sequence of images and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.";}
a:4:{i:0;s:25:"Gmagick::queryfontmetrics";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:74:"public array Gmagick::queryfontmetrics ( GmagickDraw $draw, string $text )";i:3;s:72:"MagickQueryFontMetrics() returns an array representing the font metrics.";}
a:4:{i:0;s:19:"Gmagick::queryfonts";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:61:"public array Gmagick::queryfonts ([ string $pattern = "*" ] )";i:3;s:35:"Returns fonts supported by Gmagick.";}
a:4:{i:0;s:21:"Gmagick::queryformats";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:63:"public array Gmagick::queryformats ([ string $pattern = "*" ] )";i:3;s:37:"Returns formats supported by Gmagick.";}
a:4:{i:0;s:24:"Gmagick::radialblurimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:98:"public void Gmagick::radialblurimage ( float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT ] )";i:3;s:22:"Radial blurs an image.";}
a:4:{i:0;s:19:"Gmagick::raiseimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:88:"public void Gmagick::raiseimage ( int $width, int $height, int $x, int $y, bool $raise )";i:3;s:215:"Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.";}
a:4:{i:0;s:13:"Gmagick::read";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public void Gmagick::read ( string $filename )";i:3;s:26:"Reads image from filename.";}
a:4:{i:0;s:18:"Gmagick::readimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:51:"public void Gmagick::readimage ( string $filename )";i:3;s:26:"Reads image from filename.";}
a:4:{i:0;s:22:"Gmagick::readimageblob";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:82:"public void Gmagick::readimageblob ( string $imageContents [, string $filename ] )";i:3;s:33:"Reads image from a binary string.";}
a:4:{i:0;s:22:"Gmagick::readimagefile";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:73:"public void Gmagick::readimagefile ( resource $fp [, string $filename ] )";i:3;s:62:"Reads an image or image sequence from an open file descriptor.";}
a:4:{i:0;s:25:"Gmagick::reducenoiseimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:55:"public void Gmagick::reducenoiseimage ( float $radius )";i:3;s:271:"Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Gmagick::reduceNoiseImage() selects a suitable radius for you.";}
a:4:{i:0;s:20:"Gmagick::removeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:41:"public void Gmagick::removeimage ( void )";i:3;s:37:"Removes an image from the image list.";}
a:4:{i:0;s:27:"Gmagick::removeimageprofile";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:58:"public string Gmagick::removeimageprofile ( string $name )";i:3;s:47:"Removes the named image profile and returns it.";}
a:4:{i:0;s:22:"Gmagick::resampleimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:103:"public void Gmagick::resampleimage ( float $xResolution, float $yResolution, int $filter, float $blur )";i:3;s:37:"Resample image to desired resolution.";}
a:4:{i:0;s:20:"Gmagick::resizeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:109:"public void Gmagick::resizeimage ( int $width, int $height, int $filter, float $blur [, bool $fit = false ] )";i:3;s:56:"Scales an image to the desired dimensions with a filter.";}
a:4:{i:0;s:18:"Gmagick::rollimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public void Gmagick::rollimage ( int $x, int $y )";i:3;s:39:"Offsets an image as defined by x and y.";}
a:4:{i:0;s:20:"Gmagick::rotateimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:68:"public Gmagick Gmagick::rotateimage ( mixed $color, float $degrees )";i:3;s:137:"Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.";}
a:4:{i:0;s:19:"Gmagick::scaleimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:85:"public Gmagick Gmagick::scaleimage ( int $width, int $height [, bool $fit = false ] )";i:3;s:123:"Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param.";}
a:4:{i:0;s:29:"Gmagick::separateimagechannel";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:61:"public Gmagick Gmagick::separateimagechannel ( int $channel )";i:3;s:135:"Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.";}
a:4:{i:0;s:20:"Gmagick::setfilename";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:56:"public Gmagick Gmagick::setfilename ( string $filename )";i:3;s:57:"Sets the filename before you read or write an image file.";}
a:4:{i:0;s:32:"Gmagick::setimagebackgroundcolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:71:"public Gmagick Gmagick::setimagebackgroundcolor ( GmagickPixel $color )";i:3;s:32:"Sets the image background color.";}
a:4:{i:0;s:28:"Gmagick::setimageblueprimary";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:66:"public Gmagick Gmagick::setimageblueprimary ( float $x, float $y )";i:3;s:47:"Sets the image chromaticity blue primary point.";}
a:4:{i:0;s:28:"Gmagick::setimagebordercolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:67:"public Gmagick Gmagick::setimagebordercolor ( GmagickPixel $color )";i:3;s:28:"Sets the image border color.";}
a:4:{i:0;s:29:"Gmagick::setimagechanneldepth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:73:"public Gmagick Gmagick::setimagechanneldepth ( int $channel, int $depth )";i:3;s:45:"Sets the depth of a particular image channel.";}
a:4:{i:0;s:27:"Gmagick::setimagecolorspace";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:62:"public Gmagick Gmagick::setimagecolorspace ( int $colorspace )";i:3;s:26:"Sets the image colorspace.";}
a:4:{i:0;s:24:"Gmagick::setimagecompose";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:58:"public Gmagick Gmagick::setimagecompose ( int $composite )";i:3;s:34:"Sets the image composite operator.";}
a:4:{i:0;s:22:"Gmagick::setimagedelay";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public Gmagick Gmagick::setimagedelay ( int $delay )";i:3;s:20:"Sets the image delay";}
a:4:{i:0;s:22:"Gmagick::setimagedepth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public Gmagick Gmagick::setimagedepth ( int $depth )";i:3;s:20:"Sets the image depth";}
a:4:{i:0;s:24:"Gmagick::setimagedispose";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:60:"public Gmagick Gmagick::setimagedispose ( int $disposeType )";i:3;s:31:"Sets the image disposal method.";}
a:4:{i:0;s:25:"Gmagick::setimagefilename";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:61:"public Gmagick Gmagick::setimagefilename ( string $filename )";i:3;s:54:"Sets the filename of a particular image in a sequence.";}
a:4:{i:0;s:23:"Gmagick::setimageformat";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:62:"public Gmagick Gmagick::setimageformat ( string $imageFormat )";i:3;s:52:"Sets the format of a particular image in a sequence.";}
a:4:{i:0;s:22:"Gmagick::setimagegamma";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:54:"public Gmagick Gmagick::setimagegamma ( float $gamma )";i:3;s:21:"Sets the image gamma.";}
a:4:{i:0;s:29:"Gmagick::setimagegreenprimary";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:67:"public Gmagick Gmagick::setimagegreenprimary ( float $x, float $y )";i:3;s:48:"Sets the image chromaticity green primary point.";}
a:4:{i:0;s:22:"Gmagick::setimageindex";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public Gmagick Gmagick::setimageindex ( int $index )";i:3;s:86:"Set the iterator to the position in the image list specified with the index parameter.";}
a:4:{i:0;s:32:"Gmagick::setimageinterlacescheme";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:66:"public Gmagick Gmagick::setimageinterlacescheme ( int $interlace )";i:3;s:39:"Sets the interlace scheme of the image.";}
a:4:{i:0;s:27:"Gmagick::setimageiterations";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:62:"public Gmagick Gmagick::setimageiterations ( int $iterations )";i:3;s:26:"Sets the image iterations.";}
a:4:{i:0;s:24:"Gmagick::setimageprofile";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:73:"public Gmagick Gmagick::setimageprofile ( string $name, string $profile )";i:3;s:217:"Adds a named profile to the Gmagick object. If a profile with the same name already exists, it is replaced. This method differs from the Gmagick::ProfileImage() method in that it does not apply any CMS color profiles.";}
a:4:{i:0;s:27:"Gmagick::setimageredprimary";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:65:"public Gmagick Gmagick::setimageredprimary ( float $x, float $y )";i:3;s:46:"Sets the image chromaticity red primary point.";}
a:4:{i:0;s:32:"Gmagick::setimagerenderingintent";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:73:"public Gmagick Gmagick::setimagerenderingintent ( int $rendering_intent )";i:3;s:32:"Sets the image rendering intent.";}
a:4:{i:0;s:27:"Gmagick::setimageresolution";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:85:"public Gmagick Gmagick::setimageresolution ( float $xResolution, float $yResolution )";i:3;s:26:"Sets the image resolution.";}
a:4:{i:0;s:22:"Gmagick::setimagescene";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:52:"public Gmagick Gmagick::setimagescene ( int $scene )";i:3;s:21:"Sets the image scene.";}
a:4:{i:0;s:21:"Gmagick::setimagetype";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:53:"public Gmagick Gmagick::setimagetype ( int $imgType )";i:3;s:20:"Sets the image type.";}
a:4:{i:0;s:22:"Gmagick::setimageunits";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:57:"public Gmagick Gmagick::setimageunits ( int $resolution )";i:3;s:35:"Sets the image units of resolution.";}
a:4:{i:0;s:27:"Gmagick::setimagewhitepoint";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:65:"public Gmagick Gmagick::setimagewhitepoint ( float $x, float $y )";i:3;s:40:"Sets the image chromaticity white point.";}
a:4:{i:0;s:27:"Gmagick::setsamplingfactors";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:61:"public Gmagick Gmagick::setsamplingfactors ( array $factors )";i:3;s:32:"Sets the image sampling factors.";}
a:4:{i:0;s:16:"Gmagick::setsize";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:59:"public Gmagick Gmagick::setsize ( int $columns, int $rows )";i:3;s:106:"Sets the size of the Gmagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.";}
a:4:{i:0;s:19:"Gmagick::shearimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:81:"public Gmagick Gmagick::shearimage ( mixed $color, float $xShear, float $yShear )";i:3;s:483:"Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.";}
a:4:{i:0;s:22:"Gmagick::solarizeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:56:"public Gmagick Gmagick::solarizeimage ( int $threshold )";i:3;s:246:"Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.";}
a:4:{i:0;s:20:"Gmagick::spreadimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:53:"public Gmagick Gmagick::spreadimage ( float $radius )";i:3;s:101:"Special effects method that randomly displaces each pixel in a block defined by the radius parameter.";}
a:4:{i:0;s:19:"Gmagick::stripimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public Gmagick Gmagick::stripimage ( void )";i:3;s:45:"Strips an image of all profiles and comments.";}
a:4:{i:0;s:19:"Gmagick::swirlimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:53:"public Gmagick Gmagick::swirlimage ( float $degrees )";i:3;s:194:"Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.";}
a:4:{i:0;s:23:"Gmagick::thumbnailimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:89:"public Gmagick Gmagick::thumbnailimage ( int $width, int $height [, bool $fit = false ] )";i:3;s:383:"Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.";}
a:4:{i:0;s:18:"Gmagick::trimimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public Gmagick Gmagick::trimimage ( float $fuzz )";i:3;s:58:"Remove edges that are the background color from the image.";}
a:4:{i:0;s:14:"Gmagick::write";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:47:"public void Gmagick::write ( string $filename )";i:3;s:174:"Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Gmagick::ReadImage() or Gmagick::SetImageFilename().";}
a:4:{i:0;s:19:"Gmagick::writeimage";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:85:"public Gmagick Gmagick::writeimage ( string $filename [, bool $all_frames = false ] )";i:3;s:174:"Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Gmagick::ReadImage() or Gmagick::SetImageFilename().";}
a:4:{i:0;s:21:"GmagickDraw::annotate";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:77:"public GmagickDraw GmagickDraw::annotate ( float $x, float $y, string $text )";i:3;s:24:"Draws text on the image.";}
a:4:{i:0;s:16:"GmagickDraw::arc";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:104:"public GmagickDraw GmagickDraw::arc ( float $sx, float $sy, float $ex, float $ey, float $sd, float $ed )";i:3;s:72:"Draws an arc falling within a specified bounding rectangle on the image.";}
a:4:{i:0;s:19:"GmagickDraw::bezier";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:66:"public GmagickDraw GmagickDraw::bezier ( array $coordinate_array )";i:3;s:58:"Draws a bezier curve through a set of points on the image.";}
a:4:{i:0;s:20:"GmagickDraw::ellipse";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:112:"public GmagickDraw GmagickDraw::ellipse ( float $ox, float $oy, float $rx, float $ry, float $start, float $end )";i:3;s:30:"Draws an ellipse on the image.";}
a:4:{i:0;s:25:"GmagickDraw::getfillcolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public void GmagickDraw::getfillcolor ( void )";i:3;s:55:"Returns the fill color used for drawing filled objects.";}
a:4:{i:0;s:27:"GmagickDraw::getfillopacity";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public float GmagickDraw::getfillopacity ( void )";i:3;s:37:"Returns the opacity used when drawing";}
a:4:{i:0;s:20:"GmagickDraw::getfont";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:43:"public string GmagickDraw::getfont ( void )";i:3;s:68:"Returns a string specifying the font used when annotating with text.";}
a:4:{i:0;s:24:"GmagickDraw::getfontsize";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public float GmagickDraw::getfontsize ( void )";i:3;s:58:"Returns the font pointsize used when annotating with text.";}
a:4:{i:0;s:25:"GmagickDraw::getfontstyle";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:45:"public int GmagickDraw::getfontstyle ( void )";i:3;s:54:"Returns the font style used when annotating with text.";}
a:4:{i:0;s:26:"GmagickDraw::getfontweight";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:46:"public int GmagickDraw::getfontweight ( void )";i:3;s:55:"Returns the font weight used when annotating with text.";}
a:4:{i:0;s:27:"GmagickDraw::getstrokecolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:48:"public void GmagickDraw::getstrokecolor ( void )";i:3;s:52:"Returns the color used for stroking object outlines.";}
a:4:{i:0;s:29:"GmagickDraw::getstrokeopacity";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:51:"public float GmagickDraw::getstrokeopacity ( void )";i:3;s:47:"Returns the opacity of stroked object outlines.";}
a:4:{i:0;s:27:"GmagickDraw::getstrokewidth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:49:"public float GmagickDraw::getstrokewidth ( void )";i:3;s:61:"Returns the width of the stroke used to draw object outlines.";}
a:4:{i:0;s:30:"GmagickDraw::gettextdecoration";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:50:"public int GmagickDraw::gettextdecoration ( void )";i:3;s:57:"Returns the decoration applied when annotating with text.";}
a:4:{i:0;s:28:"GmagickDraw::gettextencoding";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:51:"public string GmagickDraw::gettextencoding ( void )";i:3;s:72:"Returns a string which specifies the code set used for text annotations.";}
a:4:{i:0;s:17:"GmagickDraw::line";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:83:"public GmagickDraw GmagickDraw::line ( float $sx, float $sy, float $ex, float $ey )";i:3;s:91:"Draws a line on the image using the current stroke color, stroke opacity, and stroke width.";}
a:4:{i:0;s:18:"GmagickDraw::point";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:60:"public GmagickDraw GmagickDraw::point ( float $x, float $y )";i:3;s:95:"Draws a point using the current stroke color and stroke thickness at the specified coordinates.";}
a:4:{i:0;s:20:"GmagickDraw::polygon";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:62:"public GmagickDraw GmagickDraw::polygon ( array $coordinates )";i:3;s:124:"Draws a polygon using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.";}
a:4:{i:0;s:21:"GmagickDraw::polyline";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:68:"public GmagickDraw GmagickDraw::polyline ( array $coordinate_array )";i:3;s:125:"Draws a polyline using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.";}
a:4:{i:0;s:22:"GmagickDraw::rectangle";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:88:"public GmagickDraw GmagickDraw::rectangle ( float $x1, float $y1, float $x2, float $y2 )";i:3;s:102:"Draws a rectangle given two coordinates and using the current stroke, stroke width, and fill settings.";}
a:4:{i:0;s:19:"GmagickDraw::rotate";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:57:"public GmagickDraw GmagickDraw::rotate ( float $degrees )";i:3;s:63:"Applies the specified rotation to the current coordinate space.";}
a:4:{i:0;s:27:"GmagickDraw::roundrectangle";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:115:"public GmagickDraw GmagickDraw::roundrectangle ( float $x1, float $y1, float $x2, float $y2, float $rx, float $ry )";i:3;s:135:"Draws a rounded rectangle given two coordinates, x and y corner radiuses and using the current stroke, stroke width, and fill settings.";}
a:4:{i:0;s:18:"GmagickDraw::scale";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:60:"public GmagickDraw GmagickDraw::scale ( float $x, float $y )";i:3;s:110:"Adjusts the scaling factor to apply in the horizontal and vertical directions to the current coordinate space.";}
a:4:{i:0;s:25:"GmagickDraw::setfillcolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:62:"public GmagickDraw GmagickDraw::setfillcolor ( string $color )";i:3;s:58:"Sets the fill color to be used for drawing filled objects.";}
a:4:{i:0;s:27:"GmagickDraw::setfillopacity";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:70:"public GmagickDraw GmagickDraw::setfillopacity ( float $fill_opacity )";i:3;s:120:"Sets the opacity to use when drawing using the fill color or fill texture. Setting it to 1.0 will make fill full opaque.";}
a:4:{i:0;s:20:"GmagickDraw::setfont";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:56:"public GmagickDraw GmagickDraw::setfont ( string $font )";i:3;s:62:"Sets the fully-specified font to use when annotating with text";}
a:4:{i:0;s:24:"GmagickDraw::setfontsize";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:64:"public GmagickDraw GmagickDraw::setfontsize ( float $pointsize )";i:3;s:57:"Sets the font pointsize to use when annotating with text.";}
a:4:{i:0;s:25:"GmagickDraw::setfontstyle";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:59:"public GmagickDraw GmagickDraw::setfontstyle ( int $style )";i:3;s:119:"Sets the font style to use when annotating with text. The AnyStyle enumeration acts as a wild-card "don't care" option.";}
a:4:{i:0;s:26:"GmagickDraw::setfontweight";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:61:"public GmagickDraw GmagickDraw::setfontweight ( int $weight )";i:3;s:54:"Sets the font weight to use when annotating with text.";}
a:4:{i:0;s:27:"GmagickDraw::setstrokecolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:70:"public GmagickDraw GmagickDraw::setstrokecolor ( GmagickPixel $color )";i:3;s:49:"Sets the color used for stroking object outlines.";}
a:4:{i:0;s:29:"GmagickDraw::setstrokeopacity";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:74:"public GmagickDraw GmagickDraw::setstrokeopacity ( float $stroke_opacity )";i:3;s:49:"Specifies the opacity of stroked object outlines.";}
a:4:{i:0;s:27:"GmagickDraw::setstrokewidth";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:63:"public GmagickDraw GmagickDraw::setstrokewidth ( float $width )";i:3;s:57:"Sets the width of the stroke used to draw object outlines";}
a:4:{i:0;s:30:"GmagickDraw::settextdecoration";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:69:"public GmagickDraw GmagickDraw::settextdecoration ( int $decoration )";i:3;s:63:"Specifies a decoration to be applied when annotating with text.";}
a:4:{i:0;s:28:"GmagickDraw::settextencoding";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:68:"public GmagickDraw GmagickDraw::settextencoding ( string $encoding )";i:3;s:343:"Specifies specifies the code set to use for text annotations. The only character encoding which may be specified at this time is "UTF-8" for representing Unicode as a sequence of bytes. Specify an empty string to set text encoding to the system's default. Successful text annotation using Unicode may require fonts designed to support Unicode.";}
a:4:{i:0;s:25:"GmagickPixel::__construct";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:53:"public GmagickPixel::__construct ([ string $color ] )";i:3;s:145:"Constructs an GmagickPixel object. If a color is specified, the object is constructed and then initialised with that color before being returned.";}
a:4:{i:0;s:22:"GmagickPixel::getcolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:83:"public mixed GmagickPixel::getcolor ([ bool $as_array [, bool $normalize_array ]] )";i:3;s:157:"Returns the color described by the GmagickPixel object, as an array. If the color has an opacity channel set, this is provided as a fourth value in the list.";}
a:4:{i:0;s:27:"GmagickPixel::getcolorcount";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:47:"public int GmagickPixel::getcolorcount ( void )";i:3;s:50:"Returns the color count associated with this color";}
a:4:{i:0;s:27:"GmagickPixel::getcolorvalue";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:55:"public float GmagickPixel::getcolorvalue ( int $color )";i:3;s:95:"Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.";}
a:4:{i:0;s:22:"GmagickPixel::setcolor";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:60:"public GmagickPixel GmagickPixel::setcolor ( string $color )";i:3;s:138:"Sets the color described by the GmagickPixel object, with a string (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)", etc.).";}
a:4:{i:0;s:27:"GmagickPixel::setcolorvalue";i:1;s:25:"(PECL gmagick >= Unknown)";i:2;s:76:"public GmagickPixel GmagickPixel::setcolorvalue ( int $color, float $value )";i:3;s:192:"Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to a GmagickPixel object.";}
a:4:{i:0;s:26:"Imagick::adaptiveBlurImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:108:"bool Imagick::adaptiveBlurImage ( float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:279:"Adds an adaptive blur filter to image. The intensity of an adaptive blur depends is dramatically decreased at edge of the image, whereas a standard blur is uniform across the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:28:"Imagick::adaptiveResizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:88:"bool Imagick::adaptiveResizeImage ( int $columns, int $rows [, bool $bestfit = false ] )";i:3;s:362:"Adaptively resize image with data-dependent triangulation. Avoids blurring across sharp color changes. Most useful when used to shrink images slightly to a slightly smaller "web size"; may not look good when a full-sized image is adaptively resized to a thumbnail. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:29:"Imagick::adaptiveSharpenImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:111:"bool Imagick::adaptiveSharpenImage ( float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:207:"Adaptively sharpen the image by sharpening more intensely near image edges and less intensely far from edges. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:31:"Imagick::adaptiveThresholdImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:77:"bool Imagick::adaptiveThresholdImage ( int $width, int $height, int $offset )";i:3;s:221:"Selects an individual threshold for each pixel based on the range of intensity values in its local neighborhood. This allows for thresholding of an image whose global intensity histogram doesn't contain distinctive peaks.";}
a:4:{i:0;s:17:"Imagick::addImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::addImage ( Imagick $source )";i:3;s:151:"Adds new image to Imagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.";}
a:4:{i:0;s:22:"Imagick::addNoiseImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:92:"bool Imagick::addNoiseImage ( int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:31:"Adds random noise to the image.";}
a:4:{i:0;s:29:"Imagick::affineTransformImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:58:"bool Imagick::affineTransformImage ( ImagickDraw $matrix )";i:3;s:53:"Transforms an image as dictated by the affine matrix.";}
a:4:{i:0;s:22:"Imagick::animateImages";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:48:"bool Imagick::animateImages ( string $x_server )";i:3;s:202:"This method animates the image onto a local or remote X server. This method is not available on Windows. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:22:"Imagick::annotateImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:106:"bool Imagick::annotateImage ( ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text )";i:3;s:29:"Annotates an image with text.";}
a:4:{i:0;s:21:"Imagick::appendImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:53:"Imagick Imagick::appendImages ( bool $stack = false )";i:3;s:45:"Append a set of images into one larger image.";}
a:4:{i:0;s:22:"Imagick::averageImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"Imagick Imagick::averageImages ( void )";i:3;s:24:"Average a set of images.";}
a:4:{i:0;s:28:"Imagick::blackThresholdImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool Imagick::blackThresholdImage ( mixed $threshold )";i:3;s:142:"Is like Imagick::thresholdImage() but forces all pixels below the threshold into black while leaving all pixels above the threshold unchanged.";}
a:4:{i:0;s:18:"Imagick::blurImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:73:"bool Imagick::blurImage ( float $radius, float $sigma [, int $channel ] )";i:3;s:79:"Adds blur filter to image. Optional third parameter to blur a specific channel.";}
a:4:{i:0;s:20:"Imagick::borderImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:73:"bool Imagick::borderImage ( mixed $bordercolor, int $width, int $height )";i:3;s:94:"Surrounds the image with a border of the color defined by the bordercolor ImagickPixel object.";}
a:4:{i:0;s:22:"Imagick::charcoalImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool Imagick::charcoalImage ( float $radius, float $sigma )";i:3;s:29:"Simulates a charcoal drawing.";}
a:4:{i:0;s:18:"Imagick::chopImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:67:"bool Imagick::chopImage ( int $width, int $height, int $x, int $y )";i:3;s:83:"Removes a region of an image and collapses the image to occupy the removed portion.";}
a:4:{i:0;s:14:"Imagick::clear";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:28:"bool Imagick::clear ( void )";i:3;s:49:"Clears all resources associated to Imagick object";}
a:4:{i:0;s:18:"Imagick::clipImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:32:"bool Imagick::clipImage ( void )";i:3;s:61:"Clips along the first path from the 8BIM profile, if present.";}
a:4:{i:0;s:22:"Imagick::clipPathImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:62:"bool Imagick::clipPathImage ( string $pathname, bool $inside )";i:3;s:209:"Clips along the named paths from the 8BIM profile, if present. Later operations take effect inside the path. It may be a number if preceded with #, to work on a numbered path, e.g., "#1" to use the first path.";}
a:4:{i:0;s:14:"Imagick::clone";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:31:"Imagick Imagick::clone ( void )";i:3;s:42:"Makes an exact copy of the Imagick object.";}
a:4:{i:0;s:18:"Imagick::clutImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:96:"bool Imagick::clutImage ( Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:220:"Replaces colors in the image from a color lookup table. Optional second parameter to replace colors in a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:23:"Imagick::coalesceImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"Imagick Imagick::coalesceImages ( void )";i:3;s:359:"Composites a set of images while respecting any page offsets and disposal methods. GIF, MIFF, and MNG animation sequences typically start with an image background and each subsequent image varies in size and offset. Returns a new Imagick object where each image in the sequence is the same size as the first and composited with the next image in the sequence.";}
a:4:{i:0;s:28:"Imagick::colorFloodfillImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:98:"bool Imagick::colorFloodfillImage ( mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y )";i:3;s:86:"Changes the color value of any pixel that matches target and is an immediate neighbor.";}
a:4:{i:0;s:22:"Imagick::colorizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool Imagick::colorizeImage ( mixed $colorize, mixed $opacity )";i:3;s:51:"Blends the fill color with each pixel in the image.";}
a:4:{i:0;s:22:"Imagick::combineImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"Imagick Imagick::combineImages ( int $channelType )";i:3;s:256:"Combines one or more images into a single image. The grayscale value of the pixels of each image in the sequence is assigned in order to the specified channels of the combined image. The typical ordering would be image 1 => Red, 2 => Green, 3 => Blue, etc.";}
a:4:{i:0;s:21:"Imagick::commentImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool Imagick::commentImage ( string $comment )";i:3;s:29:"Adds a comment to your image.";}
a:4:{i:0;s:29:"Imagick::compareImageChannels";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:89:"array Imagick::compareImageChannels ( Imagick $image, int $channelType, int $metricType )";i:3;s:61:"Compares one or more images and returns the difference image.";}
a:4:{i:0;s:27:"Imagick::compareImageLayers";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"Imagick Imagick::compareImageLayers ( int $method )";i:3;s:224:"Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:22:"Imagick::compareImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:62:"array Imagick::compareImages ( Imagick $compare, int $metric )";i:3;s:84:"Returns an array containing a reconstructed image and the difference between images.";}
a:4:{i:0;s:23:"Imagick::compositeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:131:"bool Imagick::compositeImage ( Imagick $composite_object, int $composite, int $x, int $y [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:57:"Composite one image onto another at the specified offset.";}
a:4:{i:0;s:20:"Imagick::__construct";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"Imagick::__construct ( mixed $files )";i:3;s:67:"Creates an Imagick instance for a specified image or set of images.";}
a:4:{i:0;s:22:"Imagick::contrastImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool Imagick::contrastImage ( bool $sharpen )";i:3;s:190:"Enhances the intensity differences between the lighter and darker elements of the image. Set sharpen to a value other than 0 to increase the image contrast otherwise the contrast is reduced.";}
a:4:{i:0;s:29:"Imagick::contrastStretchImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:118:"bool Imagick::contrastStretchImage ( float $black_point, float $white_point [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:212:"Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:22:"Imagick::convolveImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:86:"bool Imagick::convolveImage ( array $kernel [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:49:"Applies a custom convolution kernel to the image.";}
a:4:{i:0;s:18:"Imagick::cropImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:67:"bool Imagick::cropImage ( int $width, int $height, int $x, int $y )";i:3;s:31:"Extracts a region of the image.";}
a:4:{i:0;s:27:"Imagick::cropThumbnailImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:60:"bool Imagick::cropThumbnailImage ( int $width, int $height )";i:3;s:115:"Creates a fixed size thumbnail by first scaling the image up or down and cropping a specified area from the center.";}
a:4:{i:0;s:16:"Imagick::current";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:33:"Imagick Imagick::current ( void )";i:3;s:91:"Returns reference to the current imagick object with image pointer at the correct sequence.";}
a:4:{i:0;s:27:"Imagick::cycleColormapImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"bool Imagick::cycleColormapImage ( int $displace )";i:3;s:143:"Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.";}
a:4:{i:0;s:22:"Imagick::decipherImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:50:"bool Imagick::decipherImage ( string $passphrase )";i:3;s:183:"Deciphers image that has been enciphered before. The image must be enciphered using . This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.";}
a:4:{i:0;s:26:"Imagick::deconstructImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"Imagick Imagick::deconstructImages ( void )";i:3;s:126:"Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.";}
a:4:{i:0;s:28:"Imagick::deleteImageArtifact";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:54:"bool Imagick::deleteImageArtifact ( string $artifact )";i:3;s:261:"Deletes an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.";}
a:4:{i:0;s:20:"Imagick::deskewImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"public bool Imagick::deskewImage ( float $threshold )";i:3;s:233:"This method can be used to remove skew from for example scanned images where the paper was not properly placed on the scanning surface. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.";}
a:4:{i:0;s:23:"Imagick::despeckleImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"bool Imagick::despeckleImage ( void )";i:3;s:87:"Reduces the speckle noise in an image while preserving the edges of the original image.";}
a:4:{i:0;s:16:"Imagick::destroy";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:30:"bool Imagick::destroy ( void )";i:3;s:71:"Destroys the Imagick object and frees all resources associated with it.";}
a:4:{i:0;s:21:"Imagick::displayImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool Imagick::displayImage ( string $servername )";i:3;s:44:"This method displays an image on a X server.";}
a:4:{i:0;s:22:"Imagick::displayImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"bool Imagick::displayImages ( string $servername )";i:3;s:50:"Displays an image or image sequence on a X server.";}
a:4:{i:0;s:21:"Imagick::distortImage";i:1;s:20:"(PECL imagick 2.0.1)";i:2;s:75:"bool Imagick::distortImage ( int $method, array $arguments, bool $bestfit )";i:3;s:198:"Distorts an image using various distortion methods, by mapping color lookups of the source image to a new destination image usually of the same size as the source image, unless 'bestfit' is set to .";}
a:4:{i:0;s:18:"Imagick::drawImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool Imagick::drawImage ( ImagickDraw $draw )";i:3;s:52:"Renders the ImagickDraw object on the current image.";}
a:4:{i:0;s:18:"Imagick::edgeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:41:"bool Imagick::edgeImage ( float $radius )";i:3;s:120:"Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.";}
a:4:{i:0;s:20:"Imagick::embossImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:57:"bool Imagick::embossImage ( float $radius, float $sigma )";i:3;s:281:"Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.";}
a:4:{i:0;s:22:"Imagick::encipherImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:50:"bool Imagick::encipherImage ( string $passphrase )";i:3;s:202:"Converts plain pixels to enciphered pixels. The image is not readable until it has been deciphered using This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.";}
a:4:{i:0;s:21:"Imagick::enhanceImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"bool Imagick::enhanceImage ( void )";i:3;s:68:"Applies a digital filter that improves the quality of a noisy image.";}
a:4:{i:0;s:22:"Imagick::equalizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"bool Imagick::equalizeImage ( void )";i:3;s:30:"Equalizes the image histogram.";}
a:4:{i:0;s:22:"Imagick::evaluateImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:97:"bool Imagick::evaluateImage ( int $op, float $constant [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:207:"Applys an arithmetic, relational, or logical expression to an image. Use these operators to lighten or darken an image, to increase or decrease contrast in an image, or to produce the "negative" of an image.";}
a:4:{i:0;s:26:"Imagick::exportImagePixels";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:110:"public array Imagick::exportImagePixels ( int $x, int $y, int $width, int $height, string $map, int $STORAGE )";i:3;s:222:"Exports image pixels into an array. The map defines the ordering of the exported pixels. The size of the returned array is . This method is available if Imagick has been compiled against ImageMagick version 6.4.7 or newer.";}
a:4:{i:0;s:20:"Imagick::extentImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:69:"bool Imagick::extentImage ( int $width, int $height, int $x, int $y )";i:3;s:236:"Comfortability method for setting image size. The method sets the image size and allows setting x,y coordinates where the new area begins. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.";}
a:4:{i:0;s:22:"Imagick::flattenImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"Imagick Imagick::flattenImages ( void )";i:3;s:95:"Merges a sequence of images. This is useful for combining Photoshop layers into a single image.";}
a:4:{i:0;s:18:"Imagick::flipImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:32:"bool Imagick::flipImage ( void )";i:3;s:83:"Creates a vertical mirror image by reflecting the pixels around the central x-axis.";}
a:4:{i:0;s:28:"Imagick::floodFillPaintImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:152:"bool Imagick::floodFillPaintImage ( mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:230:"Changes the color value of any pixel that matches target and is an immediate neighbor. This method is a replacement for deprecated . This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.";}
a:4:{i:0;s:18:"Imagick::flopImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:32:"bool Imagick::flopImage ( void )";i:3;s:85:"Creates a horizontal mirror image by reflecting the pixels around the central y-axis.";}
a:4:{i:0;s:19:"Imagick::frameImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:108:"bool Imagick::frameImage ( mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel )";i:3;s:247:"Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.";}
a:4:{i:0;s:22:"Imagick::functionImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:115:"public bool Imagick::functionImage ( int $function, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:314:"Applies an arithmetic, relational, or logical expression to an image. Use these operators to create lighter or darker versions of an image, to increase or decrease contrast in an image, or to negate the image colors. This method is available if Imagick has been compiled against ImageMagick version 6.4.9 or newer.";}
a:4:{i:0;s:16:"Imagick::fxImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:88:"Imagick Imagick::fxImage ( string $expression [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:78:"Evaluate expression for each pixel in the image. Consult for more information.";}
a:4:{i:0;s:19:"Imagick::gammaImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:82:"bool Imagick::gammaImage ( float $gamma [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:323:"Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.";}
a:4:{i:0;s:26:"Imagick::gaussianBlurImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:104:"bool Imagick::gaussianBlurImage ( float $radius, float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:235:"Blurs an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and selects a suitable radius for you.";}
a:4:{i:0;s:22:"Imagick::getColorspace";i:1;s:27:"(PECL imagick 0.9.10-0.9.9)";i:2;s:35:"int Imagick::getColorspace ( void )";i:3;s:131:"Gets the global colorspace value. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.";}
a:4:{i:0;s:23:"Imagick::getCompression";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"int Imagick::getCompression ( void )";i:3;s:33:"Gets the object compression type.";}
a:4:{i:0;s:30:"Imagick::getCompressionQuality";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"int Imagick::getCompressionQuality ( void )";i:3;s:36:"Gets the object compression quality.";}
a:4:{i:0;s:21:"Imagick::getCopyright";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"string Imagick::getCopyright ( void )";i:3;s:50:"Returns the ImageMagick API copyright as a string.";}
a:4:{i:0;s:20:"Imagick::getFilename";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"string Imagick::getFilename ( void )";i:3;s:55:"Returns the filename associated with an image sequence.";}
a:4:{i:0;s:16:"Imagick::getFont";i:1;s:20:"(PECL imagick 2.1.0)";i:2;s:32:"string Imagick::getFont ( void )";i:3;s:132:"Returns the objects font property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.";}
a:4:{i:0;s:18:"Imagick::getFormat";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"string Imagick::getFormat ( void )";i:3;s:41:"Returns the format of the Imagick object.";}
a:4:{i:0;s:19:"Imagick::getGravity";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:32:"int Imagick::getGravity ( void )";i:3;s:154:"Gets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.";}
a:4:{i:0;s:19:"Imagick::getHomeURL";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"string Imagick::getHomeURL ( void )";i:3;s:33:"Returns the ImageMagick home URL.";}
a:4:{i:0;s:17:"Imagick::getImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"Imagick Imagick::getImage ( void )";i:3;s:61:"Returns a new Imagick object with the current image sequence.";}
a:4:{i:0;s:29:"Imagick::getImageAlphaChannel";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:42:"int Imagick::getImageAlphaChannel ( void )";i:3;s:168:"Gets the image alpha channel value. The returned value is one of the . This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.";}
a:4:{i:0;s:25:"Imagick::getImageArtifact";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"string Imagick::getImageArtifact ( string $artifact )";i:3;s:258:"Gets an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.";}
a:4:{i:0;s:32:"Imagick::getImageBackgroundColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"ImagickPixel Imagick::getImageBackgroundColor ( void )";i:3;s:35:"Returns the image background color.";}
a:4:{i:0;s:21:"Imagick::getImageBlob";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"string Imagick::getImageBlob ( void )";i:3;s:243:"Implements direct to memory image formats. It returns the image sequence as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().";}
a:4:{i:0;s:28:"Imagick::getImageBluePrimary";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"array Imagick::getImageBluePrimary ( void )";i:3;s:58:"Returns the chromaticity blue primary point for the image.";}
a:4:{i:0;s:28:"Imagick::getImageBorderColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"ImagickPixel Imagick::getImageBorderColor ( void )";i:3;s:31:"Returns the image border color.";}
a:4:{i:0;s:29:"Imagick::getImageChannelDepth";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"int Imagick::getImageChannelDepth ( int $channel )";i:3;s:46:"Gets the depth for a particular image channel.";}
a:4:{i:0;s:34:"Imagick::getImageChannelDistortion";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:90:"float Imagick::getImageChannelDistortion ( Imagick $reference, int $channel, int $metric )";i:3;s:117:"Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metric.";}
a:4:{i:0;s:35:"Imagick::getImageChannelDistortions";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:122:"float Imagick::getImageChannelDistortions ( Imagick $reference, int $metric [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:215:"Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metrics This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.";}
a:4:{i:0;s:31:"Imagick::getImageChannelExtrema";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"array Imagick::getImageChannelExtrema ( int $channel )";i:3;s:122:"Gets the extrema for one or more image channels. Return value is an associative array with the keys "minima" and "maxima".";}
a:4:{i:0;s:32:"Imagick::getImageChannelKurtosis";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:92:"public array Imagick::getImageChannelKurtosis ([ int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:150:"Get the kurtosis and skewness of a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.4.9 or newer.";}
a:4:{i:0;s:28:"Imagick::getImageChannelMean";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"array Imagick::getImageChannelMean ( int $channel )";i:3;s:150:"Gets the mean and standard deviation of one or more image channels. Return value is an associative array with the keys "mean" and "standardDeviation".";}
a:4:{i:0;s:29:"Imagick::getImageChannelRange";i:1;s:20:"(PECL imagick 2.2.1)";i:2;s:52:"array Imagick::getImageChannelRange ( int $channel )";i:3;s:144:"Gets the range for one or more image channels. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.";}
a:4:{i:0;s:34:"Imagick::getImageChannelStatistics";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"array Imagick::getImageChannelStatistics ( void )";i:3;s:213:"Returns statistics for each channel in the image. The statistics include the channel depth, its minima and maxima, the mean, and the standard deviation. You can access the red channel mean, for example, like this:";}
a:4:{i:0;s:25:"Imagick::getImageClipMask";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:42:"Imagick Imagick::getImageClipMask ( void )";i:3;s:187:"Returns the image clip mask. The clip mask is an Imagick object containing the clip mask. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:30:"Imagick::getImageColormapColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:58:"ImagickPixel Imagick::getImageColormapColor ( int $index )";i:3;s:50:"Returns the color of the specified colormap index.";}
a:4:{i:0;s:23:"Imagick::getImageColors";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"int Imagick::getImageColors ( void )";i:3;s:46:"Gets the number of unique colors in the image.";}
a:4:{i:0;s:27:"Imagick::getImageColorspace";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"int Imagick::getImageColorspace ( void )";i:3;s:26:"Gets the image colorspace.";}
a:4:{i:0;s:24:"Imagick::getImageCompose";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"int Imagick::getImageCompose ( void )";i:3;s:57:"Returns the composite operator associated with the image.";}
a:4:{i:0;s:28:"Imagick::getImageCompression";i:1;s:20:"(PECL imagick 2.2.2)";i:2;s:41:"int Imagick::getImageCompression ( void )";i:3;s:42:"Gets the current image's compression type.";}
a:4:{i:0;s:35:"Imagick::getImageCompressionQuality";i:1;s:20:"(PECL imagick 2.2.2)";i:2;s:43:"int Imagick::getCompressionQuality ( void )";i:3;s:44:"Gets the current image's compression quality";}
a:4:{i:0;s:22:"Imagick::getImageDelay";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"int Imagick::getImageDelay ( void )";i:3;s:21:"Gets the image delay.";}
a:4:{i:0;s:22:"Imagick::getImageDepth";i:1;s:26:"(PECL imagick 0.9.1-0.9.9)";i:2;s:35:"int Imagick::getImageDepth ( void )";i:3;s:21:"Gets the image depth.";}
a:4:{i:0;s:24:"Imagick::getImageDispose";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"int Imagick::getImageDispose ( void )";i:3;s:31:"Gets the image disposal method.";}
a:4:{i:0;s:27:"Imagick::getImageDistortion";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:72:"float Imagick::getImageDistortion ( MagickWand $reference, int $metric )";i:3;s:87:"Compares an image to a reconstructed image and returns the specified distortion metric.";}
a:4:{i:0;s:24:"Imagick::getImageExtrema";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"array Imagick::getImageExtrema ( void )";i:3;s:91:"Gets the extrema for the image. Returns an associative array with the keys "min" and "max".";}
a:4:{i:0;s:25:"Imagick::getImageFilename";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:41:"string Imagick::getImageFilename ( void )";i:3;s:57:"Returns the filename of a particular image in a sequence.";}
a:4:{i:0;s:23:"Imagick::getImageFormat";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"string Imagick::getImageFormat ( void )";i:3;s:55:"Returns the format of a particular image in a sequence.";}
a:4:{i:0;s:22:"Imagick::getImageGamma";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"float Imagick::getImageGamma ( void )";i:3;s:21:"Gets the image gamma.";}
a:4:{i:0;s:25:"Imagick::getImageGeometry";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"array Imagick::getImageGeometry ( void )";i:3;s:53:"Returns the width and height as an associative array.";}
a:4:{i:0;s:24:"Imagick::getImageGravity";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:37:"int Imagick::getImageGravity ( void )";i:3;s:222:"Gets the current gravity value of the image. Unlike, this method returns the gravity defined for the current image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.";}
a:4:{i:0;s:29:"Imagick::getImageGreenPrimary";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"array Imagick::getImageGreenPrimary ( void )";i:3;s:89:"Returns the chromaticity green primary point. Returns an array with the keys "x" and "y".";}
a:4:{i:0;s:23:"Imagick::getImageHeight";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"int Imagick::getImageHeight ( void )";i:3;s:25:"Returns the image height.";}
a:4:{i:0;s:26:"Imagick::getImageHistogram";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:41:"array Imagick::getImageHistogram ( void )";i:3;s:64:"Returns the image histogram as an array of ImagickPixel objects.";}
a:4:{i:0;s:22:"Imagick::getImageIndex";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"int Imagick::getImageIndex ( void )";i:3;s:111:"Returns the index of the current active image within the Imagick object. This method has been deprecated. See .";}
a:4:{i:0;s:32:"Imagick::getImageInterlaceScheme";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"int Imagick::getImageInterlaceScheme ( void )";i:3;s:32:"Gets the image interlace scheme.";}
a:4:{i:0;s:34:"Imagick::getImageInterpolateMethod";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:47:"int Imagick::getImageInterpolateMethod ( void )";i:3;s:93:"Returns the interpolation method for the specified image. The method is one of the constants.";}
a:4:{i:0;s:27:"Imagick::getImageIterations";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"int Imagick::getImageIterations ( void )";i:3;s:26:"Gets the image iterations.";}
a:4:{i:0;s:23:"Imagick::getImageLength";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"int Imagick::getImageLength ( void )";i:3;s:33:"Returns the image length in bytes";}
a:4:{i:0;s:30:"Imagick::getImageMagickLicense";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"string Imagick::getImageMagickLicense ( void )";i:3;s:51:"Returns a string containing the ImageMagick license";}
a:4:{i:0;s:22:"Imagick::getImageMatte";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"bool Imagick::getImageMatte ( void )";i:3;s:155:"Returns if the image has a matte channel otherwise false. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:27:"Imagick::getImageMatteColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"ImagickPixel Imagick::getImageMatteColor ( void )";i:3;s:30:"Returns the image matte color.";}
a:4:{i:0;s:28:"Imagick::getImageOrientation";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:41:"int Imagick::getImageOrientation ( void )";i:3;s:60:"Gets the image orientation. The return value is one of the .";}
a:4:{i:0;s:21:"Imagick::getImagePage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"array Imagick::getImagePage ( void )";i:3;s:110:"Returns the page geometry associated with the image in an array with the keys "width", "height", "x", and "y".";}
a:4:{i:0;s:27:"Imagick::getImagePixelColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"ImagickPixel Imagick::getImagePixelColor ( int $x, int $y )";i:3;s:41:"Returns the color of the specified pixel.";}
a:4:{i:0;s:24:"Imagick::getImageProfile";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"string Imagick::getImageProfile ( string $name )";i:3;s:32:"Returns the named image profile.";}
a:4:{i:0;s:25:"Imagick::getImageProfiles";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:88:"array Imagick::getImageProfiles ([ string $pattern = "*" [, bool $only_names = true ]] )";i:3;s:223:"Returns all associated profiles that match the pattern. If is passed as second parameter only the profile names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:27:"Imagick::getImageProperties";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:90:"array Imagick::getImageProperties ([ string $pattern = "*" [, bool $only_names = true ]] )";i:3;s:226:"Returns all associated properties that match the pattern. If is passed as second parameter only the property names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:25:"Imagick::getImageProperty";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"string Imagick::getImageProperty ( string $name )";i:3;s:131:"Returns the named image property. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.";}
a:4:{i:0;s:27:"Imagick::getImageRedPrimary";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"array Imagick::getImageRedPrimary ( void )";i:3;s:81:"Returns the chromaticity red primary point as an array with the keys "x" and "y".";}
a:4:{i:0;s:23:"Imagick::getImageRegion";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:75:"Imagick Imagick::getImageRegion ( int $width, int $height, int $x, int $y )";i:3;s:70:"Extracts a region of the image and returns it as a new Imagick object.";}
a:4:{i:0;s:32:"Imagick::getImageRenderingIntent";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"int Imagick::getImageRenderingIntent ( void )";i:3;s:32:"Gets the image rendering intent.";}
a:4:{i:0;s:27:"Imagick::getImageResolution";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"array Imagick::getImageResolution ( void )";i:3;s:34:"Gets the image X and Y resolution.";}
a:4:{i:0;s:22:"Imagick::getImagesBlob";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"string Imagick::getImagesBlob ( void )";i:3;s:244:"Implements direct to memory image formats. It returns all image sequences as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().";}
a:4:{i:0;s:22:"Imagick::getImageScene";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"int Imagick::getImageScene ( void )";i:3;s:21:"Gets the image scene.";}
a:4:{i:0;s:26:"Imagick::getImageSignature";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"string Imagick::getImageSignature ( void )";i:3;s:63:"Generates an SHA-256 message digest for the image pixel stream.";}
a:4:{i:0;s:21:"Imagick::getImageSize";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"int Imagick::getImageSize ( void )";i:3;s:33:"Returns the image length in bytes";}
a:4:{i:0;s:31:"Imagick::getImageTicksPerSecond";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"int Imagick::getImageTicksPerSecond ( void )";i:3;s:32:"Gets the image ticks-per-second.";}
a:4:{i:0;s:32:"Imagick::getImageTotalInkDensity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:47:"float Imagick::getImageTotalInkDensity ( void )";i:3;s:33:"Gets the image total ink density.";}
a:4:{i:0;s:21:"Imagick::getImageType";i:1;s:27:"(PECL imagick 0.9.10-0.9.9)";i:2;s:34:"int Imagick::getImageType ( void )";i:3;s:30:"Gets the potential image type.";}
a:4:{i:0;s:22:"Imagick::getImageUnits";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"int Imagick::getImageUnits ( void )";i:3;s:35:"Gets the image units of resolution.";}
a:4:{i:0;s:35:"Imagick::getImageVirtualPixelMethod";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"int Imagick::getImageVirtualPixelMethod ( void )";i:3;s:57:"Returns the virtual pixel method for the specified image.";}
a:4:{i:0;s:27:"Imagick::getImageWhitePoint";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"array Imagick::getImageWhitePoint ( void )";i:3;s:87:"Returns the chromaticity white point as an associative array with the keys "x" and "y".";}
a:4:{i:0;s:22:"Imagick::getImageWidth";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"int Imagick::getImageWidth ( void )";i:3;s:24:"Returns the image width.";}
a:4:{i:0;s:27:"Imagick::getInterlaceScheme";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"int Imagick::getInterlaceScheme ( void )";i:3;s:33:"Gets the object interlace scheme.";}
a:4:{i:0;s:25:"Imagick::getIteratorIndex";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"int Imagick::getIteratorIndex ( void )";i:3;s:170:"Returns the index of the current active image within the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:24:"Imagick::getNumberImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"int Imagick::getNumberImages ( void )";i:3;s:60:"Returns the number of images associated with Imagick object.";}
a:4:{i:0;s:18:"Imagick::getOption";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:41:"string Imagick::getOption ( string $key )";i:3;s:67:"Returns a value associated within the object for the specified key.";}
a:4:{i:0;s:23:"Imagick::getPackageName";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"string Imagick::getPackageName ( void )";i:3;s:37:"Returns the ImageMagick package name.";}
a:4:{i:0;s:16:"Imagick::getPage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:31:"array Imagick::getPage ( void )";i:3;s:131:"Returns the page geometry associated with the Imagick object in an associative array with the keys "width", "height", "x", and "y".";}
a:4:{i:0;s:25:"Imagick::getPixelIterator";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"ImagickPixelIterator Imagick::getPixelIterator ( void )";i:3;s:30:"Returns a MagickPixelIterator.";}
a:4:{i:0;s:31:"Imagick::getPixelRegionIterator";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:96:"ImagickPixelIterator Imagick::getPixelRegionIterator ( int $x, int $y, int $columns, int $rows )";i:3;s:49:"Get an ImagickPixelIterator for an image section.";}
a:4:{i:0;s:21:"Imagick::getPointSize";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:36:"float Imagick::getPointSize ( void )";i:3;s:138:"Returns the objects point size property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.";}
a:4:{i:0;s:24:"Imagick::getQuantumDepth";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"array Imagick::getQuantumDepth ( void )";i:3;s:46:"Returns the Imagick quantum depth as a string.";}
a:4:{i:0;s:24:"Imagick::getQuantumRange";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"array Imagick::getQuantumRange ( void )";i:3;s:46:"Returns the Imagick quantum range as a string.";}
a:4:{i:0;s:23:"Imagick::getReleaseDate";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"string Imagick::getReleaseDate ( void )";i:3;s:49:"Returns the ImageMagick release date as a string.";}
a:4:{i:0;s:20:"Imagick::getResource";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"int Imagick::getResource ( int $type )";i:3;s:59:"Returns the specified resource's memory usage in megabytes.";}
a:4:{i:0;s:25:"Imagick::getResourceLimit";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"int Imagick::getResourceLimit ( int $type )";i:3;s:50:"Returns the specified resource limit in megabytes.";}
a:4:{i:0;s:27:"Imagick::getSamplingFactors";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"array Imagick::getSamplingFactors ( void )";i:3;s:49:"Gets the horizontal and vertical sampling factor.";}
a:4:{i:0;s:16:"Imagick::getSize";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:31:"array Imagick::getSize ( void )";i:3;s:99:"Returns the size associated with the Imagick object as an array with the keys "columns" and "rows".";}
a:4:{i:0;s:22:"Imagick::getSizeOffset";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"int Imagick::getSizeOffset ( void )";i:3;s:157:"Returns the size offset associated with the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:19:"Imagick::getVersion";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"array Imagick::getVersion ( void )";i:3;s:64:"Returns the ImageMagick API version as a string and as a number.";}
a:4:{i:0;s:22:"Imagick::haldClutImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:97:"public bool Imagick::haldClutImage ( Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:106:"Replaces colors in the image using a Hald lookup table. Hald images can be created using HALD color coder.";}
a:4:{i:0;s:21:"Imagick::hasNextImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"bool Imagick::hasNextImage ( void )";i:3;s:88:"Returns if the object has more images when traversing the list in the forward direction.";}
a:4:{i:0;s:25:"Imagick::hasPreviousImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"bool Imagick::hasPreviousImage ( void )";i:3;s:87:"Returns if the object has more images when traversing the list in the reverse direction";}
a:4:{i:0;s:22:"Imagick::identifyImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:65:"array Imagick::identifyImage ([ bool $appendRawOutput = false ] )";i:3;s:109:"Identifies an image and returns the attributes. Attributes include the image width, height, size, and others.";}
a:4:{i:0;s:21:"Imagick::implodeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"bool Imagick::implodeImage ( float $radius )";i:3;s:115:"Creates a new image that is a copy of an existing one with the image pixels "imploded" by the specified percentage.";}
a:4:{i:0;s:26:"Imagick::importImagePixels";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:124:"public bool Imagick::importImagePixels ( int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels )";i:3;s:293:"Imports pixels from an array into an image. The is usually 'RGB'. This method imposes the following constraints for the parameters: amount of pixels in the array must match x x length of the map. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.";}
a:4:{i:0;s:19:"Imagick::labelImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::labelImage ( string $label )";i:3;s:25:"Adds a label to an image.";}
a:4:{i:0;s:19:"Imagick::levelImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:120:"bool Imagick::levelImage ( float $blackPoint, float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:508:"Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.";}
a:4:{i:0;s:27:"Imagick::linearStretchImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:73:"bool Imagick::linearStretchImage ( float $blackPoint, float $whitePoint )";i:3;s:46:"Stretches with saturation the image intensity.";}
a:4:{i:0;s:27:"Imagick::liquidRescaleImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:93:"bool Imagick::liquidRescaleImage ( int $width, int $height, float $delta_x, float $rigidity )";i:3;s:322:"This method scales the images using liquid rescaling method. This method is an implementation of a technique called seam carving. In order for this method to work as expected ImageMagick must be compiled with liblqr support. This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.";}
a:4:{i:0;s:21:"Imagick::magnifyImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"bool Imagick::magnifyImage ( void )";i:3;s:87:"Is a convenience method that scales an image proportionally to twice its original size.";}
a:4:{i:0;s:17:"Imagick::mapImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:53:"bool Imagick::mapImage ( Imagick $map, bool $dither )";i:3;s:0:"";}
a:4:{i:0;s:28:"Imagick::matteFloodfillImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:99:"bool Imagick::matteFloodfillImage ( float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y )";i:3;s:231:"Changes the transparency value of any pixel that matches target and is an immediate neighbor. If the method is specified, the transparency value is changed for any neighbor pixel that does not match the bordercolor member of image.";}
a:4:{i:0;s:26:"Imagick::medianFilterImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool Imagick::medianFilterImage ( float $radius )";i:3;s:158:"Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.";}
a:4:{i:0;s:25:"Imagick::mergeImageLayers";i:1;s:20:"(PECL imagick 2.1.0)";i:2;s:52:"bool Imagick::mergeImageLayers ( int $layer_method )";i:3;s:296:"Merges image layers into one. This method is useful when working with image formats that use multiple layers such as PSD. The merging is controlled using the which defines how the layers are merged. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.";}
a:4:{i:0;s:20:"Imagick::minifyImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"bool Imagick::minifyImage ( void )";i:3;s:89:"Is a convenience method that scales an image proportionally to one-half its original size";}
a:4:{i:0;s:22:"Imagick::modulateImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:80:"bool Imagick::modulateImage ( float $brightness, float $saturation, float $hue )";i:3;s:316:"Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.";}
a:4:{i:0;s:21:"Imagick::montageImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:128:"Imagick Imagick::montageImage ( ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame )";i:3;s:187:"Creates a composite image by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.";}
a:4:{i:0;s:20:"Imagick::morphImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"Imagick Imagick::morphImages ( int $number_frames )";i:3;s:158:"Method morphs a set of images. Both the image pixels and size are linearly interpolated to give the appearance of a meta-morphosis from one image to the next.";}
a:4:{i:0;s:21:"Imagick::mosaicImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"Imagick Imagick::mosaicImages ( void )";i:3;s:177:"Inlays an image sequence to form a single coherent picture. It returns a wand with each image in the sequence composited at the location defined by the page offset of the image.";}
a:4:{i:0;s:24:"Imagick::motionBlurImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:120:"bool Imagick::motionBlurImage ( float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:302:"Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.";}
a:4:{i:0;s:20:"Imagick::negateImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:81:"bool Imagick::negateImage ( bool $gray [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:126:"Negates the colors in the reference image. The Grayscale option means that only grayscale values within the image are negated.";}
a:4:{i:0;s:17:"Imagick::newImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:86:"bool Imagick::newImage ( int $cols, int $rows, mixed $background [, string $format ] )";i:3;s:73:"Creates a new image and associates ImagickPixel value as background color";}
a:4:{i:0;s:23:"Imagick::newPseudoImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:78:"bool Imagick::newPseudoImage ( int $columns, int $rows, string $pseudoString )";i:3;s:53:"Creates a new image using ImageMagick pseudo-formats.";}
a:4:{i:0;s:18:"Imagick::nextImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:32:"bool Imagick::nextImage ( void )";i:3;s:67:"Associates the next image in the image list with an Imagick object.";}
a:4:{i:0;s:23:"Imagick::normalizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:71:"bool Imagick::normalizeImage ([ int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:114:"Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.";}
a:4:{i:0;s:22:"Imagick::oilPaintImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool Imagick::oilPaintImage ( float $radius )";i:3;s:163:"Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.";}
a:4:{i:0;s:25:"Imagick::opaquePaintImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:133:"bool Imagick::opaquePaintImage ( mixed $target, mixed $fill, float $fuzz, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:166:"Changes any pixel that matches color with the color defined by fill. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.";}
a:4:{i:0;s:28:"Imagick::optimizeImageLayers";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::optimizeImageLayers ( void )";i:3;s:308:"Compares each image the GIF disposed forms of the previous image in the sequence. From this it attempts to select the smallest cropped image to replace each frame, while preserving the results of the animation. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:30:"Imagick::orderedPosterizeImage";i:1;s:20:"(PECL imagick 2.2.2)";i:2;s:102:"bool Imagick::orderedPosterizeImage ( string $threshold_map [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:300:"Performs an ordered dither based on a number of pre-defined dithering threshold maps, but over multiple intensity levels, which can be different for different channels, according to the input arguments. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.";}
a:4:{i:0;s:28:"Imagick::paintFloodfillImage";i:1;s:20:"(PECL imagick 2.1.0)";i:2;s:139:"bool Imagick::paintFloodfillImage ( mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:170:"Changes the color value of any pixel that matches target and is an immediate neighbor. As of ImageMagick 6.3.8 this method has been deprecated and should be used instead.";}
a:4:{i:0;s:25:"Imagick::paintOpaqueImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:115:"bool Imagick::paintOpaqueImage ( mixed $target, mixed $fill, float $fuzz [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:68:"Changes any pixel that matches color with the color defined by fill.";}
a:4:{i:0;s:30:"Imagick::paintTransparentImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:80:"bool Imagick::paintTransparentImage ( mixed $target, float $alpha, float $fuzz )";i:3;s:68:"Changes any pixel that matches color with the color defined by fill.";}
a:4:{i:0;s:18:"Imagick::pingImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"bool Imagick::pingImage ( string $filename )";i:3;s:116:"This method can be used to query image width, height, size, and format without reading the whole image in to memory.";}
a:4:{i:0;s:22:"Imagick::pingImageBlob";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool Imagick::pingImageBlob ( string $image )";i:3;s:211:"This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:22:"Imagick::pingImageFile";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:74:"bool Imagick::pingImageFile ( resource $filehandle [, string $fileName ] )";i:3;s:211:"This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:22:"Imagick::polaroidImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:69:"bool Imagick::polaroidImage ( ImagickDraw $properties, float $angle )";i:3;s:127:"Simulates a Polaroid picture. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.";}
a:4:{i:0;s:23:"Imagick::posterizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:58:"bool Imagick::posterizeImage ( int $levels, bool $dither )";i:3;s:53:"Reduces the image to a limited number of color level.";}
a:4:{i:0;s:22:"Imagick::previewImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"bool Imagick::previewImages ( int $preview )";i:3;s:203:"Tiles 9 thumbnails of the specified image with an image processing operation applied at varying strengths. This is helpful to quickly pin-point an appropriate parameter for an image processing operation.";}
a:4:{i:0;s:22:"Imagick::previousImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"bool Imagick::previousImage ( void )";i:3;s:70:"Assocates the previous image in an image list with the Imagick object.";}
a:4:{i:0;s:21:"Imagick::profileImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:60:"bool Imagick::profileImage ( string $name, string $profile )";i:3;s:211:"Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.";}
a:4:{i:0;s:22:"Imagick::quantizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:116:"bool Imagick::quantizeImage ( int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError )";i:3;s:0:"";}
a:4:{i:0;s:23:"Imagick::quantizeImages";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:117:"bool Imagick::quantizeImages ( int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError )";i:3;s:0:"";}
a:4:{i:0;s:25:"Imagick::queryFontMetrics";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:94:"array Imagick::queryFontMetrics ( ImagickDraw $properties, string $text [, bool $multiline ] )";i:3;s:64:"Returns a multi-dimensional array representing the font metrics.";}
a:4:{i:0;s:19:"Imagick::queryFonts";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"array Imagick::queryFonts ([ string $pattern = "*" ] )";i:3;s:29:"Returns the configured fonts.";}
a:4:{i:0;s:21:"Imagick::queryFormats";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:56:"array Imagick::queryFormats ([ string $pattern = "*" ] )";i:3;s:37:"Returns formats supported by Imagick.";}
a:4:{i:0;s:24:"Imagick::radialBlurImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:87:"bool Imagick::radialBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:22:"Radial blurs an image.";}
a:4:{i:0;s:19:"Imagick::raiseImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:81:"bool Imagick::raiseImage ( int $width, int $height, int $x, int $y, bool $raise )";i:3;s:215:"Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.";}
a:4:{i:0;s:29:"Imagick::randomThresholdImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:103:"bool Imagick::randomThresholdImage ( float $low, float $high [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:244:"Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:18:"Imagick::readImage";i:1;s:26:"(PECL imagick 0.9.0-0.9.9)";i:2;s:44:"bool Imagick::readImage ( string $filename )";i:3;s:25:"Reads image from filename";}
a:4:{i:0;s:22:"Imagick::readImageBlob";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:67:"bool Imagick::readImageBlob ( string $image [, string $filename ] )";i:3;s:32:"Reads image from a binary string";}
a:4:{i:0;s:22:"Imagick::readImageFile";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:81:"bool Imagick::readImageFile ( resource $filehandle [, string $fileName = null ] )";i:3;s:32:"Reads image from open filehandle";}
a:4:{i:0;s:21:"Imagick::recolorImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:44:"bool Imagick::recolorImage ( array $matrix )";i:3;s:309:"Translate, scale, shear, or rotate image colors. This method supports variable sized matrices but normally 5x5 matrix is used for RGBA and 6x6 is used for CMYK. The last row should contain the normalized values. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:25:"Imagick::reduceNoiseImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"bool Imagick::reduceNoiseImage ( float $radius )";i:3;s:271:"Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Imagick::reduceNoiseImage() selects a suitable radius for you.";}
a:4:{i:0;s:19:"Imagick::remapImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:69:"public bool Imagick::remapImage ( Imagick $replacement, int $DITHER )";i:3;s:203:"Replaces colors an image with those defined by . The colors are replaced with the closest possible color. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.";}
a:4:{i:0;s:20:"Imagick::removeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"bool Imagick::removeImage ( void )";i:3;s:37:"Removes an image from the image list.";}
a:4:{i:0;s:27:"Imagick::removeImageProfile";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"string Imagick::removeImageProfile ( string $name )";i:3;s:47:"Removes the named image profile and returns it.";}
a:4:{i:0;s:15:"Imagick::render";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:29:"bool Imagick::render ( void )";i:3;s:39:"Renders all preceding drawing commands.";}
a:4:{i:0;s:22:"Imagick::resampleImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:98:"bool Imagick::resampleImage ( float $x_resolution, float $y_resolution, int $filter, float $blur )";i:3;s:37:"Resample image to desired resolution.";}
a:4:{i:0;s:23:"Imagick::resetImagePage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:45:"bool Imagick::resetImagePage ( string $page )";i:3;s:163:"The page definition as a string. The string is in format WxH+x+y. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:20:"Imagick::resizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:106:"bool Imagick::resizeImage ( int $columns, int $rows, int $filter, float $blur [, bool $bestfit = false ] )";i:3;s:50:"Scales an image to the desired dimensions with a .";}
a:4:{i:0;s:18:"Imagick::rollImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::rollImage ( int $x, int $y )";i:3;s:39:"Offsets an image as defined by x and y.";}
a:4:{i:0;s:20:"Imagick::rotateImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool Imagick::rotateImage ( mixed $background, float $degrees )";i:3;s:137:"Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.";}
a:4:{i:0;s:21:"Imagick::roundCorners";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:153:"bool Imagick::roundCorners ( float $x_rounding, float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]] )";i:3;s:252:"Rounds image corners. The first two parameters control the amount of rounding and the three last parameters can be used to fine-tune the rounding process. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:20:"Imagick::sampleImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:53:"bool Imagick::sampleImage ( int $columns, int $rows )";i:3;s:167:"Scales an image to the desired dimensions with pixel sampling. Unlike other scaling methods, this method does not introduce any additional color into the scaled image.";}
a:4:{i:0;s:19:"Imagick::scaleImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:76:"bool Imagick::scaleImage ( int $cols, int $rows [, bool $bestfit = false ] )";i:3;s:123:"Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param.";}
a:4:{i:0;s:21:"Imagick::segmentImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:131:"public bool Imagick::segmentImage ( int $COLORSPACE, float $cluster_threshold, float $smooth_threshold [, bool $verbose = false ] )";i:3;s:155:"Analyses the image and identifies units that are similar. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.";}
a:4:{i:0;s:29:"Imagick::separateImageChannel";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool Imagick::separateImageChannel ( int $channel )";i:3;s:135:"Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.";}
a:4:{i:0;s:23:"Imagick::sepiaToneImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool Imagick::sepiaToneImage ( float $threshold )";i:3;s:264:"Applies a special effect to the image, similar to the effect achieved in a photo darkroom by sepia toning. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the sepia toning. A threshold of 80 is a good starting point for a reasonable tone.";}
a:4:{i:0;s:27:"Imagick::setBackgroundColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool Imagick::setBackgroundColor ( mixed $background )";i:3;s:43:"Sets the object's default background color.";}
a:4:{i:0;s:22:"Imagick::setColorspace";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:47:"bool Imagick::setColorspace ( int $COLORSPACE )";i:3;s:146:"Sets the global colorspace value for the object. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.";}
a:4:{i:0;s:23:"Imagick::setCompression";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool Imagick::setCompression ( int $compression )";i:3;s:42:"Sets the object's default compression type";}
a:4:{i:0;s:30:"Imagick::setCompressionQuality";i:1;s:27:"(PECL imagick 0.9.10-0.9.9)";i:2;s:52:"bool Imagick::setCompressionQuality ( int $quality )";i:3;s:46:"Sets the object's default compression quality.";}
a:4:{i:0;s:20:"Imagick::setFilename";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool Imagick::setFilename ( string $filename )";i:3;s:57:"Sets the filename before you read or write an image file.";}
a:4:{i:0;s:25:"Imagick::setFirstIterator";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"bool Imagick::setFirstIterator ( void )";i:3;s:45:"Sets the Imagick iterator to the first image.";}
a:4:{i:0;s:16:"Imagick::setFont";i:1;s:20:"(PECL imagick 2.1.0)";i:2;s:38:"bool Imagick::setFont ( string $font )";i:3;s:393:"Sets object's font property. This method can be used for example to set font for caption: pseudo-format. The font needs to be configured in ImageMagick confiration or a file by the name of must exist. This method should not be confused with which sets the font for a specific ImagickDraw object. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.";}
a:4:{i:0;s:18:"Imagick::setFormat";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::setFormat ( string $format )";i:3;s:38:"Sets the format of the Imagick object.";}
a:4:{i:0;s:19:"Imagick::setGravity";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:41:"bool Imagick::setGravity ( int $gravity )";i:3;s:154:"Sets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.";}
a:4:{i:0;s:17:"Imagick::setImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"bool Imagick::setImage ( Imagick $replace )";i:3;s:71:"Replaces the current image sequence with the image from replace object.";}
a:4:{i:0;s:29:"Imagick::setImageAlphaChannel";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:48:"bool Imagick::setImageAlphaChannel ( int $mode )";i:3;s:170:"Activate or deactivate image alpha channel. The is one of the constants. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.";}
a:4:{i:0;s:25:"Imagick::setImageArtifact";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:66:"bool Imagick::setImageArtifact ( string $artifact, string $value )";i:3;s:253:"Associates an artifact with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.";}
a:4:{i:0;s:32:"Imagick::setImageBackgroundColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool Imagick::setImageBackgroundColor ( mixed $background )";i:3;s:32:"Sets the image background color.";}
a:4:{i:0;s:21:"Imagick::setImageBias";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::setImageBias ( float $bias )";i:3;s:91:"Sets the image bias for any method that convolves an image (e.g. Imagick::ConvolveImage()).";}
a:4:{i:0;s:28:"Imagick::setImageBluePrimary";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:56:"bool Imagick::setImageBluePrimary ( float $x, float $y )";i:3;s:47:"Sets the image chromaticity blue primary point.";}
a:4:{i:0;s:28:"Imagick::setImageBorderColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool Imagick::setImageBorderColor ( mixed $border )";i:3;s:28:"Sets the image border color.";}
a:4:{i:0;s:29:"Imagick::setImageChannelDepth";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool Imagick::setImageChannelDepth ( int $channel, int $depth )";i:3;s:45:"Sets the depth of a particular image channel.";}
a:4:{i:0;s:25:"Imagick::setImageClipMask";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"bool Imagick::setImageClipMask ( Imagick $clip_mask )";i:3;s:147:"Sets image clip mask from another Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:30:"Imagick::setImageColormapColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:71:"bool Imagick::setImageColormapColor ( int $index, ImagickPixel $color )";i:3;s:47:"Sets the color of the specified colormap index.";}
a:4:{i:0;s:27:"Imagick::setImageColorspace";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:52:"bool Imagick::setImageColorspace ( int $colorspace )";i:3;s:26:"Sets the image colorspace.";}
a:4:{i:0;s:24:"Imagick::setImageCompose";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool Imagick::setImageCompose ( int $compose )";i:3;s:140:"Sets the image composite operator, useful for specifying how to composite the image thumbnail when using the Imagick::montageImage() method.";}
a:4:{i:0;s:28:"Imagick::setImageCompression";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool Imagick::setImageCompression ( int $compression )";i:3;s:0:"";}
a:4:{i:0;s:35:"Imagick::setImageCompressionQuality";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:57:"bool Imagick::setImageCompressionQuality ( int $quality )";i:3;s:35:"Sets the image compression quality.";}
a:4:{i:0;s:22:"Imagick::setImageDelay";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::setImageDelay ( int $delay )";i:3;s:21:"Sets the image delay.";}
a:4:{i:0;s:22:"Imagick::setImageDepth";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::setImageDepth ( int $depth )";i:3;s:21:"Sets the image depth.";}
a:4:{i:0;s:24:"Imagick::setImageDispose";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool Imagick::setImageDispose ( int $dispose )";i:3;s:31:"Sets the image disposal method.";}
a:4:{i:0;s:23:"Imagick::setImageExtent";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:56:"bool Imagick::setImageExtent ( int $columns, int $rows )";i:3;s:42:"Sets the image size (i.e. columns & rows).";}
a:4:{i:0;s:25:"Imagick::setImageFilename";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool Imagick::setImageFilename ( string $filename )";i:3;s:54:"Sets the filename of a particular image in a sequence.";}
a:4:{i:0;s:23:"Imagick::setImageFormat";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:47:"bool Imagick::setImageFormat ( string $format )";i:3;s:52:"Sets the format of a particular image in a sequence.";}
a:4:{i:0;s:22:"Imagick::setImageGamma";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"bool Imagick::setImageGamma ( float $gamma )";i:3;s:21:"Sets the image gamma.";}
a:4:{i:0;s:24:"Imagick::setImageGravity";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:46:"bool Imagick::setImageGravity ( int $gravity )";i:3;s:227:"Sets the gravity property for the current image. This method can be used to set the gravity property for a single image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.";}
a:4:{i:0;s:29:"Imagick::setImageGreenPrimary";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:57:"bool Imagick::setImageGreenPrimary ( float $x, float $y )";i:3;s:48:"Sets the image chromaticity green primary point.";}
a:4:{i:0;s:22:"Imagick::setImageIndex";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::setImageIndex ( int $index )";i:3;s:86:"Set the iterator to the position in the image list specified with the index parameter.";}
a:4:{i:0;s:32:"Imagick::setImageInterlaceScheme";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool Imagick::setImageInterlaceScheme ( int $interlace_scheme )";i:3;s:27:"Sets the image compression.";}
a:4:{i:0;s:34:"Imagick::setImageInterpolateMethod";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool Imagick::setImageInterpolateMethod ( int $method )";i:3;s:40:"Sets the image interpolate pixel method.";}
a:4:{i:0;s:27:"Imagick::setImageIterations";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:52:"bool Imagick::setImageIterations ( int $iterations )";i:3;s:26:"Sets the image iterations.";}
a:4:{i:0;s:22:"Imagick::setImageMatte";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"bool Imagick::setImageMatte ( bool $matte )";i:3;s:127:"Sets the image matte channel. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:27:"Imagick::setImageMatteColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool Imagick::setImageMatteColor ( mixed $matte )";i:3;s:27:"Sets the image matte color.";}
a:4:{i:0;s:24:"Imagick::setImageOpacity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"bool Imagick::setImageOpacity ( float $opacity )";i:3;s:144:"Sets the image to the specified opacity level. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.";}
a:4:{i:0;s:28:"Imagick::setImageOrientation";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool Imagick::setImageOrientation ( int $orientation )";i:3;s:27:"Sets the image orientation.";}
a:4:{i:0;s:21:"Imagick::setImagePage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:70:"bool Imagick::setImagePage ( int $width, int $height, int $x, int $y )";i:3;s:36:"Sets the page geometry of the image.";}
a:4:{i:0;s:24:"Imagick::setImageProfile";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool Imagick::setImageProfile ( string $name, string $profile )";i:3;s:217:"Adds a named profile to the Imagick object. If a profile with the same name already exists, it is replaced. This method differs from the Imagick::ProfileImage() method in that it does not apply any CMS color profiles.";}
a:4:{i:0;s:25:"Imagick::setImageProperty";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:62:"bool Imagick::setImageProperty ( string $name, string $value )";i:3;s:133:"Sets a named property to the image. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.";}
a:4:{i:0;s:27:"Imagick::setImageRedPrimary";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool Imagick::setImageRedPrimary ( float $x, float $y )";i:3;s:46:"Sets the image chromaticity red primary point.";}
a:4:{i:0;s:32:"Imagick::setImageRenderingIntent";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool Imagick::setImageRenderingIntent ( int $rendering_intent )";i:3;s:32:"Sets the image rendering intent.";}
a:4:{i:0;s:27:"Imagick::setImageResolution";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:77:"bool Imagick::setImageResolution ( float $x_resolution, float $y_resolution )";i:3;s:26:"Sets the image resolution.";}
a:4:{i:0;s:22:"Imagick::setImageScene";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::setImageScene ( int $scene )";i:3;s:21:"Sets the image scene.";}
a:4:{i:0;s:31:"Imagick::setImageTicksPerSecond";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:62:"bool Imagick::setImageTicksPerSecond ( int $ticks_per-second )";i:3;s:32:"Sets the image ticks-per-second.";}
a:4:{i:0;s:21:"Imagick::setImageType";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool Imagick::setImageType ( int $image_type )";i:3;s:20:"Sets the image type.";}
a:4:{i:0;s:22:"Imagick::setImageUnits";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool Imagick::setImageUnits ( int $units )";i:3;s:35:"Sets the image units of resolution.";}
a:4:{i:0;s:35:"Imagick::setImageVirtualPixelMethod";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:56:"bool Imagick::setImageVirtualPixelMethod ( int $method )";i:3;s:36:"Sets the image virtual pixel method.";}
a:4:{i:0;s:27:"Imagick::setImageWhitePoint";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool Imagick::setImageWhitePoint ( float $x, float $y )";i:3;s:40:"Sets the image chromaticity white point.";}
a:4:{i:0;s:27:"Imagick::setInterlaceScheme";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:58:"bool Imagick::setInterlaceScheme ( int $interlace_scheme )";i:3;s:27:"Sets the image compression.";}
a:4:{i:0;s:25:"Imagick::setIteratorIndex";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool Imagick::setIteratorIndex ( int $index )";i:3;s:184:"Set the iterator to the position in the image list specified with the index parameter. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:24:"Imagick::setLastIterator";i:1;s:20:"(PECL imagick 2.0.1)";i:2;s:38:"bool Imagick::setLastIterator ( void )";i:3;s:44:"Sets the Imagick iterator to the last image.";}
a:4:{i:0;s:18:"Imagick::setOption";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool Imagick::setOption ( string $key, string $value )";i:3;s:45:"Associates one or more options with the wand.";}
a:4:{i:0;s:16:"Imagick::setPage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:65:"bool Imagick::setPage ( int $width, int $height, int $x, int $y )";i:3;s:45:"Sets the page geometry of the Imagick object.";}
a:4:{i:0;s:21:"Imagick::setPointSize";i:1;s:20:"(PECL imagick 2.1.0)";i:2;s:48:"bool Imagick::setPointSize ( float $point_size )";i:3;s:213:"Sets object's point size property. This method can be used for example to set font size for caption: pseudo-format. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.";}
a:4:{i:0;s:22:"Imagick::setResolution";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:72:"bool Imagick::setResolution ( float $x_resolution, float $y_resolution )";i:3;s:26:"Sets the image resolution.";}
a:4:{i:0;s:25:"Imagick::setResourceLimit";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:56:"bool Imagick::setResourceLimit ( int $type, int $limit )";i:3;s:54:"Sets the limit for a particular resource in megabytes.";}
a:4:{i:0;s:27:"Imagick::setSamplingFactors";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool Imagick::setSamplingFactors ( array $factors )";i:3;s:32:"Sets the image sampling factors.";}
a:4:{i:0;s:16:"Imagick::setSize";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool Imagick::setSize ( int $columns, int $rows )";i:3;s:106:"Sets the size of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.";}
a:4:{i:0;s:22:"Imagick::setSizeOffset";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:68:"bool Imagick::setSizeOffset ( int $columns, int $rows, int $offset )";i:3;s:215:"Sets the size and offset of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:16:"Imagick::setType";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:41:"bool Imagick::setType ( int $image_type )";i:3;s:30:"Sets the image type attribute.";}
a:4:{i:0;s:19:"Imagick::shadeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:73:"bool Imagick::shadeImage ( bool $gray, float $azimuth, float $elevation )";i:3;s:339:"Shines a distant light on an image to create a three-dimensional effect. You control the positioning of the light with azimuth and elevation; azimuth is measured in degrees off the x axis and elevation is measured in pixels above the Z axis. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:20:"Imagick::shadowImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:74:"bool Imagick::shadowImage ( float $opacity, float $sigma, int $x, int $y )";i:3;s:26:"Simulates an image shadow.";}
a:4:{i:0;s:21:"Imagick::sharpenImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:99:"bool Imagick::sharpenImage ( float $radius, float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:238:"Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and selects a suitable radius for you.";}
a:4:{i:0;s:19:"Imagick::shaveImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:52:"bool Imagick::shaveImage ( int $columns, int $rows )";i:3;s:137:"Shaves pixels from the image edges. It allocates the memory necessary for the new Image structure and returns a pointer to the new image.";}
a:4:{i:0;s:19:"Imagick::shearImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:78:"bool Imagick::shearImage ( mixed $background, float $x_shear, float $y_shear )";i:3;s:483:"Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.";}
a:4:{i:0;s:31:"Imagick::sigmoidalContrastImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:122:"bool Imagick::sigmoidalContrastImage ( bool $sharpen, float $alpha, float $beta [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:482:"Adjusts the contrast of an image with a non-linear sigmoidal contrast algorithm. Increase the contrast of the image using a sigmoidal transfer function without saturating highlights or shadows. Contrast indicates how much to increase the contrast (0 is none; 3 is typical; 20 is pushing it); mid-point indicates where midtones fall in the resultant image (0 is white; 50 is middle-gray; 100 is black). Set sharpen to to increase the image contrast otherwise the contrast is reduced.";}
a:4:{i:0;s:20:"Imagick::sketchImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:71:"bool Imagick::sketchImage ( float $radius, float $sigma, float $angle )";i:3;s:409:"Simulates a pencil sketch. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::sketchImage() selects a suitable radius for you. Angle gives the angle of the blurring motion. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:22:"Imagick::solarizeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool Imagick::solarizeImage ( int $threshold )";i:3;s:246:"Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.";}
a:4:{i:0;s:25:"Imagick::sparseColorImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:123:"public bool Imagick::sparseColorImage ( int $SPARSE_METHOD, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )";i:3;s:243:"Given the arguments array containing numeric values this method interpolates the colors found at those coordinates across the whole image using . This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.";}
a:4:{i:0;s:20:"Imagick::spliceImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:69:"bool Imagick::spliceImage ( int $width, int $height, int $x, int $y )";i:3;s:37:"Splices a solid color into the image.";}
a:4:{i:0;s:20:"Imagick::spreadImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"bool Imagick::spreadImage ( float $radius )";i:3;s:101:"Special effects method that randomly displaces each pixel in a block defined by the radius parameter.";}
a:4:{i:0;s:21:"Imagick::steganoImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:70:"Imagick Imagick::steganoImage ( Imagick $watermark_wand, int $offset )";i:3;s:196:"Hides a digital watermark within the image. Recover the hidden watermark later to prove that the authenticity of an image. Offset defines the start position within the image to hide the watermark.";}
a:4:{i:0;s:20:"Imagick::stereoImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"bool Imagick::stereoImage ( Imagick $offset_wand )";i:3;s:115:"Composites two images and produces a single image that is the composite of a left and right image of a stereo pair.";}
a:4:{i:0;s:19:"Imagick::stripImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:33:"bool Imagick::stripImage ( void )";i:3;s:45:"Strips an image of all profiles and comments.";}
a:4:{i:0;s:19:"Imagick::swirlImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"bool Imagick::swirlImage ( float $degrees )";i:3;s:194:"Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.";}
a:4:{i:0;s:21:"Imagick::textureImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:52:"bool Imagick::textureImage ( Imagick $texture_wand )";i:3;s:68:"Repeatedly tiles the texture image across and down the image canvas.";}
a:4:{i:0;s:23:"Imagick::thresholdImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:90:"bool Imagick::thresholdImage ( float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:146:"Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image.";}
a:4:{i:0;s:23:"Imagick::thumbnailImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:106:"bool Imagick::thumbnailImage ( int $columns, int $rows [, bool $bestfit = false [, bool $fill = false ]] )";i:3;s:378:"Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.";}
a:4:{i:0;s:18:"Imagick::tintImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool Imagick::tintImage ( mixed $tint, mixed $opacity )";i:3;s:203:"Applies a color vector to each pixel in the image. The length of the vector is 0 for black and white and at its maximum for the midtones. The vector weighing function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).";}
a:4:{i:0;s:23:"Imagick::transformImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:66:"Imagick Imagick::transformImage ( string $crop, string $geometry )";i:3;s:177:"A convenience method for setting crop size and the image geometry from strings. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:30:"Imagick::transparentPaintImage";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:94:"bool Imagick::transparentPaintImage ( mixed $target, float $alpha, float $fuzz, bool $invert )";i:3;s:150:"Paints pixels matching the target color transparent. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.";}
a:4:{i:0;s:23:"Imagick::transposeImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"bool Imagick::transposeImage ( void )";i:3;s:212:"Creates a vertical mirror image by reflecting the pixels around the central x-axis while rotating them 90-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:24:"Imagick::transverseImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"bool Imagick::transverseImage ( void )";i:3;s:215:"Creates a horizontal mirror image by reflecting the pixels around the central y-axis while rotating them 270-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:18:"Imagick::trimImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"bool Imagick::trimImage ( float $fuzz )";i:3;s:156:"Remove edges that are the background color from the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:26:"Imagick::uniqueImageColors";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"bool Imagick::uniqueImageColors ( void )";i:3;s:138:"Discards all but one of any pixel color. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:25:"Imagick::unsharpMaskImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:136:"bool Imagick::unsharpMaskImage ( float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )";i:3;s:262:"Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::UnsharpMaskImage() selects a suitable radius for you.";}
a:4:{i:0;s:14:"Imagick::valid";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:28:"bool Imagick::valid ( void )";i:3;s:36:"Checks if the current item is valid.";}
a:4:{i:0;s:22:"Imagick::vignetteImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:84:"bool Imagick::vignetteImage ( float $blackPoint, float $whitePoint, int $x, int $y )";i:3;s:147:"Softens the edges of the image in vignette style. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:18:"Imagick::waveImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool Imagick::waveImage ( float $amplitude, float $length )";i:3;s:133:"Applies a wave filter to the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.";}
a:4:{i:0;s:28:"Imagick::whiteThresholdImage";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool Imagick::whiteThresholdImage ( mixed $threshold )";i:3;s:141:"Is like Imagick::ThresholdImage() but force all pixels above the threshold into white while leaving all pixels below the threshold unchanged.";}
a:4:{i:0;s:19:"Imagick::writeImage";i:1;s:26:"(PECL imagick 0.9.0-0.9.9)";i:2;s:48:"bool Imagick::writeImage ([ string $filename ] )";i:3;s:174:"Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Imagick::ReadImage() or Imagick::SetImageFilename().";}
a:4:{i:0;s:23:"Imagick::writeImageFile";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"bool Imagick::writeImageFile ( resource $filehandle )";i:3;s:196:"Writes the image sequence to an open filehandle. The handle must be opened with for example fopen. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:20:"Imagick::writeImages";i:1;s:26:"(PECL imagick 0.9.0-0.9.9)";i:2;s:60:"bool Imagick::writeImages ( string $filename, bool $adjoin )";i:3;s:34:"Writes an image or image sequence.";}
a:4:{i:0;s:24:"Imagick::writeImagesFile";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:54:"bool Imagick::writeImagesFile ( resource $filehandle )";i:3;s:242:"Writes all image frames into an open filehandle. This method can be used to write animated gifs or other multiframe images into open filehandle. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.";}
a:4:{i:0;s:19:"ImagickDraw::affine";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool ImagickDraw::affine ( array $affine )";i:3;s:97:"Adjusts the current affine transformation matrix with the specified affine transformation matrix.";}
a:4:{i:0;s:23:"ImagickDraw::annotation";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:65:"bool ImagickDraw::annotation ( float $x, float $y, string $text )";i:3;s:24:"Draws text on the image.";}
a:4:{i:0;s:16:"ImagickDraw::arc";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:90:"bool ImagickDraw::arc ( float $sx, float $sy, float $ex, float $ey, float $sd, float $ed )";i:3;s:72:"Draws an arc falling within a specified bounding rectangle on the image.";}
a:4:{i:0;s:19:"ImagickDraw::bezier";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:47:"bool ImagickDraw::bezier ( array $coordinates )";i:3;s:58:"Draws a bezier curve through a set of points on the image.";}
a:4:{i:0;s:19:"ImagickDraw::circle";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:71:"bool ImagickDraw::circle ( float $ox, float $oy, float $px, float $py )";i:3;s:28:"Draws a circle on the image.";}
a:4:{i:0;s:18:"ImagickDraw::clear";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:32:"bool ImagickDraw::clear ( void )";i:3;s:113:"Clears the ImagickDraw object of any accumulated commands, and resets the settings it contains to their defaults.";}
a:4:{i:0;s:18:"ImagickDraw::clone";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"ImagickDraw ImagickDraw::clone ( void )";i:3;s:56:"Makes an exact copy of the specified ImagickDraw object.";}
a:4:{i:0;s:18:"ImagickDraw::color";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:64:"bool ImagickDraw::color ( float $x, float $y, int $paintMethod )";i:3;s:116:"Draws color on image using the current fill color, starting at specified position, and using specified paint method.";}
a:4:{i:0;s:20:"ImagickDraw::comment";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool ImagickDraw::comment ( string $comment )";i:3;s:41:"Adds a comment to a vector output stream.";}
a:4:{i:0;s:22:"ImagickDraw::composite";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:117:"bool ImagickDraw::composite ( int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand )";i:3;s:132:"Composites an image onto the current image, using the specified composition operator, specified position, and at the specified size.";}
a:4:{i:0;s:24:"ImagickDraw::__construct";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:33:"ImagickDraw::__construct ( void )";i:3;s:27:"The ImagickDraw constructor";}
a:4:{i:0;s:20:"ImagickDraw::destroy";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"bool ImagickDraw::destroy ( void )";i:3;s:59:"Frees all resources associated with the ImagickDraw object.";}
a:4:{i:0;s:20:"ImagickDraw::ellipse";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:98:"bool ImagickDraw::ellipse ( float $ox, float $oy, float $rx, float $ry, float $start, float $end )";i:3;s:30:"Draws an ellipse on the image.";}
a:4:{i:0;s:24:"ImagickDraw::getClipPath";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"string ImagickDraw::getClipPath ( void )";i:3;s:37:"Obtains the current clipping path ID.";}
a:4:{i:0;s:24:"ImagickDraw::getClipRule";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"int ImagickDraw::getClipRule ( void )";i:3;s:70:"Returns the current polygon fill rule to be used by the clipping path.";}
a:4:{i:0;s:25:"ImagickDraw::getClipUnits";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"int ImagickDraw::getClipUnits ( void )";i:3;s:46:"Returns the interpretation of clip path units.";}
a:4:{i:0;s:25:"ImagickDraw::getFillColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:47:"ImagickPixel ImagickDraw::getFillColor ( void )";i:3;s:55:"Returns the fill color used for drawing filled objects.";}
a:4:{i:0;s:27:"ImagickDraw::getFillOpacity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"float ImagickDraw::getFillOpacity ( void )";i:3;s:96:"Returns the opacity used when drawing using the fill color or fill texture. Fully opaque is 1.0.";}
a:4:{i:0;s:24:"ImagickDraw::getFillRule";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"int ImagickDraw::getFillRule ( void )";i:3;s:50:"Returns the fill rule used while drawing polygons.";}
a:4:{i:0;s:20:"ImagickDraw::getFont";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"string ImagickDraw::getFont ( void )";i:3;s:68:"Returns a string specifying the font used when annotating with text.";}
a:4:{i:0;s:26:"ImagickDraw::getFontFamily";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"string ImagickDraw::getFontFamily ( void )";i:3;s:57:"Returns the font family to use when annotating with text.";}
a:4:{i:0;s:24:"ImagickDraw::getFontSize";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"float ImagickDraw::getFontSize ( void )";i:3;s:58:"Returns the font pointsize used when annotating with text.";}
a:4:{i:0;s:25:"ImagickDraw::getFontStyle";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"int ImagickDraw::getFontStyle ( void )";i:3;s:54:"Returns the font style used when annotating with text.";}
a:4:{i:0;s:26:"ImagickDraw::getFontWeight";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:39:"int ImagickDraw::getFontWeight ( void )";i:3;s:55:"Returns the font weight used when annotating with text.";}
a:4:{i:0;s:23:"ImagickDraw::getGravity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"int ImagickDraw::getGravity ( void )";i:3;s:66:"Returns the text placement gravity used when annotating with text.";}
a:4:{i:0;s:31:"ImagickDraw::getStrokeAntialias";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool ImagickDraw::getStrokeAntialias ( void )";i:3;s:227:"Returns the current stroke antialias setting. Stroked outlines are antialiased by default. When antialiasing is disabled stroked pixels are thresholded to determine if the stroke color or underlying canvas color should be used.";}
a:4:{i:0;s:27:"ImagickDraw::getStrokeColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"ImagickPixel ImagickDraw::getStrokeColor ( void )";i:3;s:52:"Returns the color used for stroking object outlines.";}
a:4:{i:0;s:31:"ImagickDraw::getStrokeDashArray";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"array ImagickDraw::getStrokeDashArray ( void )";i:3;s:82:"Returns an array representing the pattern of dashes and gaps used to stroke paths.";}
a:4:{i:0;s:32:"ImagickDraw::getStrokeDashOffset";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:47:"float ImagickDraw::getStrokeDashOffset ( void )";i:3;s:59:"Returns the offset into the dash pattern to start the dash.";}
a:4:{i:0;s:29:"ImagickDraw::getStrokeLineCap";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"int ImagickDraw::getStrokeLineCap ( void )";i:3;s:79:"Returns the shape to be used at the end of open subpaths when they are stroked.";}
a:4:{i:0;s:30:"ImagickDraw::getStrokeLineJoin";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"int ImagickDraw::getStrokeLineJoin ( void )";i:3;s:100:"Returns the shape to be used at the corners of paths (or other vector shapes) when they are stroked.";}
a:4:{i:0;s:32:"ImagickDraw::getStrokeMiterLimit";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"int ImagickDraw::getStrokeMiterLimit ( void )";i:3;s:302:"Returns the miter limit. When two line segments meet at a sharp angle and miter joins have been specified for 'lineJoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path. The 'miterLimit' imposes a limit on the ratio of the miter length to the 'lineWidth'.";}
a:4:{i:0;s:29:"ImagickDraw::getStrokeOpacity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"float ImagickDraw::getStrokeOpacity ( void )";i:3;s:47:"Returns the opacity of stroked object outlines.";}
a:4:{i:0;s:27:"ImagickDraw::getStrokeWidth";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"float ImagickDraw::getStrokeWidth ( void )";i:3;s:61:"Returns the width of the stroke used to draw object outlines.";}
a:4:{i:0;s:29:"ImagickDraw::getTextAlignment";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"int ImagickDraw::getTextAlignment ( void )";i:3;s:56:"Returns the alignment applied when annotating with text.";}
a:4:{i:0;s:29:"ImagickDraw::getTextAntialias";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"bool ImagickDraw::getTextAntialias ( void )";i:3;s:121:"Returns the current text antialias setting, which determines whether text is antialiased. Text is antialiased by default.";}
a:4:{i:0;s:30:"ImagickDraw::getTextDecoration";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"int ImagickDraw::getTextDecoration ( void )";i:3;s:57:"Returns the decoration applied when annotating with text.";}
a:4:{i:0;s:28:"ImagickDraw::getTextEncoding";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:44:"string ImagickDraw::getTextEncoding ( void )";i:3;s:72:"Returns a string which specifies the code set used for text annotations.";}
a:4:{i:0;s:30:"ImagickDraw::getTextUnderColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:52:"ImagickPixel ImagickDraw::getTextUnderColor ( void )";i:3;s:76:"Returns the color of a background rectangle to place under text annotations.";}
a:4:{i:0;s:30:"ImagickDraw::getVectorGraphics";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"string ImagickDraw::getVectorGraphics ( void )";i:3;s:136:"Returns a string which specifies the vector graphics generated by any graphics calls made since the ImagickDraw object was instantiated.";}
a:4:{i:0;s:17:"ImagickDraw::line";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:69:"bool ImagickDraw::line ( float $sx, float $sy, float $ex, float $ey )";i:3;s:91:"Draws a line on the image using the current stroke color, stroke opacity, and stroke width.";}
a:4:{i:0;s:18:"ImagickDraw::matte";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:64:"bool ImagickDraw::matte ( float $x, float $y, int $paintMethod )";i:3;s:121:"Paints on the image's opacity channel in order to set effected pixels to transparent, to influence the opacity of pixels.";}
a:4:{i:0;s:22:"ImagickDraw::pathClose";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"bool ImagickDraw::pathClose ( void )";i:3;s:215:"Adds a path element to the current path which closes the current subpath by drawing a straight line from the current point to the current subpath's most recent starting point (usually, the most recent moveto point).";}
a:4:{i:0;s:32:"ImagickDraw::pathCurveToAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:104:"bool ImagickDraw::pathCurveToAbsolute ( float $x1, float $y1, float $x2, float $y2, float $x, float $y )";i:3;s:321:"Draws a cubic Bezier curve from the current point to (x,y) using (x1,y1) as the control point at the beginning of the curve and (x2,y2) as the control point at the end of the curve using absolute coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:48:"
ImagickDraw::pathCurveToQuadraticBezierAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:97:"bool ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1, float $y1, float $x, float $y )";i:3;s:238:"Draws a quadratic Bezier curve from the current point to (x,y) using (x1,y1) as the control point using absolute coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:48:"
ImagickDraw::pathCurveToQuadraticBezierRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:97:"bool ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1, float $y1, float $x, float $y )";i:3;s:238:"Draws a quadratic Bezier curve from the current point to (x,y) using (x1,y1) as the control point using relative coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:54:"
ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:81:"bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x, float $y )";i:3;s:639:"Draws a quadratic Bezier curve (using absolute coordinates) from the current point to (x,y). The control point is assumed to be the reflection of the control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not a DrawPathCurveToQuadraticBezierAbsolute, DrawPathCurveToQuadraticBezierRelative, DrawPathCurveToQuadraticBezierSmoothAbsolut or DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point is coincident with the current point.). At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:54:"
ImagickDraw::pathCurveToQuadraticBezierSmoothRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:81:"bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x, float $y )";i:3;s:640:"Draws a quadratic Bezier curve (using relative coordinates) from the current point to (x, y). The control point is assumed to be the reflection of the control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not a DrawPathCurveToQuadraticBezierAbsolute, DrawPathCurveToQuadraticBezierRelative, DrawPathCurveToQuadraticBezierSmoothAbsolut or DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point is coincident with the current point). At the end of the command, the new current point becomes the final (x, y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:32:"ImagickDraw::pathCurveToRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:104:"bool ImagickDraw::pathCurveToRelative ( float $x1, float $y1, float $x2, float $y2, float $x, float $y )";i:3;s:321:"Draws a cubic Bezier curve from the current point to (x,y) using (x1,y1) as the control point at the beginning of the curve and (x2,y2) as the control point at the end of the curve using relative coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:38:"ImagickDraw::pathCurveToSmoothAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:88:"bool ImagickDraw::pathCurveToSmoothAbsolute ( float $x2, float $y2, float $x, float $y )";i:3;s:680:"Draws a cubic Bezier curve from the current point to (x,y) using absolute coordinates. The first control point is assumed to be the reflection of the second control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not an DrawPathCurveToAbsolute, DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or DrawPathCurveToSmoothRelative, assume the first control point is coincident with the current point.) (x2,y2) is the second control point (i.e., the control point at the end of the curve). At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:38:"ImagickDraw::pathCurveToSmoothRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:88:"bool ImagickDraw::pathCurveToSmoothRelative ( float $x2, float $y2, float $x, float $y )";i:3;s:680:"Draws a cubic Bezier curve from the current point to (x,y) using relative coordinates. The first control point is assumed to be the reflection of the second control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not an DrawPathCurveToAbsolute, DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or DrawPathCurveToSmoothRelative, assume the first control point is coincident with the current point.) (x2,y2) is the second control point (i.e., the control point at the end of the curve). At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.";}
a:4:{i:0;s:36:"ImagickDraw::pathEllipticArcAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:150:"bool ImagickDraw::pathEllipticArcAbsolute ( float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y )";i:3;s:644:"Draws an elliptical arc from the current point to (x, y) using absolute coordinates. The size and orientation of the ellipse are defined by two radii (rx, ry) and an xAxisRotation, which indicates how the ellipse as a whole is rotated relative to the current coordinate system. The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraints imposed by the other parameters. largeArcFlag and sweepFlag contribute to the automatic calculations and help determine how the arc is drawn. If largeArcFlag is then draw the larger of the available arcs. If sweepFlag is true, then draw the arc matching a clock-wise rotation.";}
a:4:{i:0;s:36:"ImagickDraw::pathEllipticArcRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:150:"bool ImagickDraw::pathEllipticArcRelative ( float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y )";i:3;s:644:"Draws an elliptical arc from the current point to (x, y) using relative coordinates. The size and orientation of the ellipse are defined by two radii (rx, ry) and an xAxisRotation, which indicates how the ellipse as a whole is rotated relative to the current coordinate system. The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraints imposed by the other parameters. largeArcFlag and sweepFlag contribute to the automatic calculations and help determine how the arc is drawn. If largeArcFlag is then draw the larger of the available arcs. If sweepFlag is true, then draw the arc matching a clock-wise rotation.";}
a:4:{i:0;s:23:"ImagickDraw::pathFinish";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"bool ImagickDraw::pathFinish ( void )";i:3;s:28:"Terminates the current path.";}
a:4:{i:0;s:31:"ImagickDraw::pathLineToAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool ImagickDraw::pathLineToAbsolute ( float $x, float $y )";i:3;s:143:"Draws a line path from the current point to the given coordinate using absolute coordinates. The coordinate then becomes the new current point.";}
a:4:{i:0;s:41:"ImagickDraw::pathLineToHorizontalAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool ImagickDraw::pathLineToHorizontalAbsolute ( float $x )";i:3;s:152:"Draws a horizontal line path from the current point to the target point using absolute coordinates. The target point then becomes the new current point.";}
a:4:{i:0;s:41:"ImagickDraw::pathLineToHorizontalRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool ImagickDraw::pathLineToHorizontalRelative ( float $x )";i:3;s:152:"Draws a horizontal line path from the current point to the target point using relative coordinates. The target point then becomes the new current point.";}
a:4:{i:0;s:31:"ImagickDraw::pathLineToRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool ImagickDraw::pathLineToRelative ( float $x, float $y )";i:3;s:143:"Draws a line path from the current point to the given coordinate using relative coordinates. The coordinate then becomes the new current point.";}
a:4:{i:0;s:39:"ImagickDraw::pathLineToVerticalAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:57:"bool ImagickDraw::pathLineToVerticalAbsolute ( float $y )";i:3;s:150:"Draws a vertical line path from the current point to the target point using absolute coordinates. The target point then becomes the new current point.";}
a:4:{i:0;s:39:"ImagickDraw::pathLineToVerticalRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:57:"bool ImagickDraw::pathLineToVerticalRelative ( float $y )";i:3;s:150:"Draws a vertical line path from the current point to the target point using relative coordinates. The target point then becomes the new current point.";}
a:4:{i:0;s:31:"ImagickDraw::pathMoveToAbsolute";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool ImagickDraw::pathMoveToAbsolute ( float $x, float $y )";i:3;s:130:"Starts a new sub-path at the given coordinate using absolute coordinates. The current point then becomes the specified coordinate.";}
a:4:{i:0;s:31:"ImagickDraw::pathMoveToRelative";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool ImagickDraw::pathMoveToRelative ( float $x, float $y )";i:3;s:130:"Starts a new sub-path at the given coordinate using relative coordinates. The current point then becomes the specified coordinate.";}
a:4:{i:0;s:22:"ImagickDraw::pathStart";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:36:"bool ImagickDraw::pathStart ( void )";i:3;s:291:"Declares the start of a path drawing list which is terminated by a matching DrawPathFinish() command. All other DrawPath commands must be enclosed between a and a DrawPathFinish() command. This is because path drawing commands are subordinate commands and they do not function by themselves.";}
a:4:{i:0;s:18:"ImagickDraw::point";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool ImagickDraw::point ( float $x, float $y )";i:3;s:95:"Draws a point using the current stroke color and stroke thickness at the specified coordinates.";}
a:4:{i:0;s:20:"ImagickDraw::polygon";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"bool ImagickDraw::polygon ( array $coordinates )";i:3;s:124:"Draws a polygon using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.";}
a:4:{i:0;s:21:"ImagickDraw::polyline";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool ImagickDraw::polyline ( array $coordinates )";i:3;s:125:"Draws a polyline using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.";}
a:4:{i:0;s:16:"ImagickDraw::pop";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:30:"bool ImagickDraw::pop ( void )";i:3;s:273:"Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw. Multiple ImagickDraws may exist. It is an error to attempt to pop more ImagickDraws than have been pushed, and it is proper form to pop all ImagickDraws which have been pushed.";}
a:4:{i:0;s:24:"ImagickDraw::popClipPath";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:38:"bool ImagickDraw::popClipPath ( void )";i:3;s:34:"Terminates a clip path definition.";}
a:4:{i:0;s:20:"ImagickDraw::popDefs";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:34:"bool ImagickDraw::popDefs ( void )";i:3;s:29:"Terminates a definition list.";}
a:4:{i:0;s:23:"ImagickDraw::popPattern";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:37:"bool ImagickDraw::popPattern ( void )";i:3;s:32:"Terminates a pattern definition.";}
a:4:{i:0;s:17:"ImagickDraw::push";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:31:"bool ImagickDraw::push ( void )";i:3;s:294:"Clones the current ImagickDraw to create a new ImagickDraw, which is then added to the ImagickDraw stack. The original drawing ImagickDraw(s) may be returned to by invoking pop(). The ImagickDraws are stored on a ImagickDraw stack. For every Pop there must have already been an equivalent Push.";}
a:4:{i:0;s:25:"ImagickDraw::pushClipPath";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool ImagickDraw::pushClipPath ( string $clip_mask_id )";i:3;s:138:"Starts a clip path definition which is comprised of any number of drawing commands and terminated by a ImagickDraw::popClipPath() command.";}
a:4:{i:0;s:21:"ImagickDraw::pushDefs";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"bool ImagickDraw::pushDefs ( void )";i:3;s:196:"Indicates that commands up to a terminating ImagickDraw::popDefs() command create named elements (e.g. clip-paths, textures, etc.) which may safely be processed earlier for the sake of efficiency.";}
a:4:{i:0;s:24:"ImagickDraw::pushPattern";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:101:"bool ImagickDraw::pushPattern ( string $pattern_id, float $x, float $y, float $width, float $height )";i:3;s:349:"Indicates that subsequent commands up to a DrawPopPattern() command comprise the definition of a named pattern. The pattern space is assigned top left corner coordinates, a width and height, and becomes its own drawing space. Anything which can be drawn may be used in a pattern definition. Named patterns may be used as stroke or brush definitions.";}
a:4:{i:0;s:22:"ImagickDraw::rectangle";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:74:"bool ImagickDraw::rectangle ( float $x1, float $y1, float $x2, float $y2 )";i:3;s:102:"Draws a rectangle given two coordinates and using the current stroke, stroke width, and fill settings.";}
a:4:{i:0;s:19:"ImagickDraw::render";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:33:"bool ImagickDraw::render ( void )";i:3;s:54:"Renders all preceding drawing commands onto the image.";}
a:4:{i:0;s:19:"ImagickDraw::rotate";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"bool ImagickDraw::rotate ( float $degrees )";i:3;s:63:"Applies the specified rotation to the current coordinate space.";}
a:4:{i:0;s:27:"ImagickDraw::roundRectangle";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:101:"bool ImagickDraw::roundRectangle ( float $x1, float $y1, float $x2, float $y2, float $rx, float $ry )";i:3;s:133:"Draws a rounded rectangle given two coordinates, x & y corner radiuses and using the current stroke, stroke width, and fill settings.";}
a:4:{i:0;s:18:"ImagickDraw::scale";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"bool ImagickDraw::scale ( float $x, float $y )";i:3;s:110:"Adjusts the scaling factor to apply in the horizontal and vertical directions to the current coordinate space.";}
a:4:{i:0;s:24:"ImagickDraw::setClipPath";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool ImagickDraw::setClipPath ( string $clip_mask )";i:3;s:143:"Associates a named clipping path with the image. Only the areas drawn on by the clipping path will be modified as long as it remains in effect.";}
a:4:{i:0;s:24:"ImagickDraw::setClipRule";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"bool ImagickDraw::setClipRule ( int $fill_rule )";i:3;s:58:"Set the polygon fill rule to be used by the clipping path.";}
a:4:{i:0;s:25:"ImagickDraw::setClipUnits";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"bool ImagickDraw::setClipUnits ( int $clip_units )";i:3;s:43:"Sets the interpretation of clip path units.";}
a:4:{i:0;s:25:"ImagickDraw::setFillAlpha";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool ImagickDraw::setFillAlpha ( float $opacity )";i:3;s:95:"Sets the opacity to use when drawing using the fill color or fill texture. Fully opaque is 1.0.";}
a:4:{i:0;s:25:"ImagickDraw::setFillColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"bool ImagickDraw::setFillColor ( ImagickPixel $fill_pixel )";i:3;s:58:"Sets the fill color to be used for drawing filled objects.";}
a:4:{i:0;s:27:"ImagickDraw::setFillOpacity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool ImagickDraw::setFillOpacity ( float $fillOpacity )";i:3;s:95:"Sets the opacity to use when drawing using the fill color or fill texture. Fully opaque is 1.0.";}
a:4:{i:0;s:30:"ImagickDraw::setFillPatternURL";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:56:"bool ImagickDraw::setFillPatternURL ( string $fill_url )";i:3;s:226:"Sets the URL to use as a fill pattern for filling objects. Only local URLs ("#identifier") are supported at this time. These local URLs are normally created by defining a named fill pattern with DrawPushPattern/DrawPopPattern.";}
a:4:{i:0;s:24:"ImagickDraw::setFillRule";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"bool ImagickDraw::setFillRule ( int $fill_rule )";i:3;s:49:"Sets the fill rule to use while drawing polygons.";}
a:4:{i:0;s:20:"ImagickDraw::setFont";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:47:"bool ImagickDraw::setFont ( string $font_name )";i:3;s:63:"Sets the fully-specified font to use when annotating with text.";}
a:4:{i:0;s:26:"ImagickDraw::setFontFamily";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool ImagickDraw::setFontFamily ( string $font_family )";i:3;s:54:"Sets the font family to use when annotating with text.";}
a:4:{i:0;s:24:"ImagickDraw::setFontSize";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"bool ImagickDraw::setFontSize ( float $pointsize )";i:3;s:57:"Sets the font pointsize to use when annotating with text.";}
a:4:{i:0;s:27:"ImagickDraw::setFontStretch";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:53:"bool ImagickDraw::setFontStretch ( int $fontStretch )";i:3;s:123:"Sets the font stretch to use when annotating with text. The AnyStretch enumeration acts as a wild-card "don't care" option.";}
a:4:{i:0;s:25:"ImagickDraw::setFontStyle";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool ImagickDraw::setFontStyle ( int $style )";i:3;s:119:"Sets the font style to use when annotating with text. The AnyStyle enumeration acts as a wild-card "don't care" option.";}
a:4:{i:0;s:26:"ImagickDraw::setFontWeight";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:52:"bool ImagickDraw::setFontWeight ( int $font_weight )";i:3;s:54:"Sets the font weight to use when annotating with text.";}
a:4:{i:0;s:23:"ImagickDraw::setGravity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool ImagickDraw::setGravity ( int $gravity )";i:3;s:65:"Sets the text placement gravity to use when annotating with text.";}
a:4:{i:0;s:27:"ImagickDraw::setStrokeAlpha";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool ImagickDraw::setStrokeAlpha ( float $opacity )";i:3;s:49:"Specifies the opacity of stroked object outlines.";}
a:4:{i:0;s:31:"ImagickDraw::setStrokeAntialias";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool ImagickDraw::setStrokeAntialias ( bool $stroke_antialias )";i:3;s:232:"Controls whether stroked outlines are antialiased. Stroked outlines are antialiased by default. When antialiasing is disabled stroked pixels are thresholded to determine if the stroke color or underlying canvas color should be used.";}
a:4:{i:0;s:27:"ImagickDraw::setStrokeColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:63:"bool ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel )";i:3;s:49:"Sets the color used for stroking object outlines.";}
a:4:{i:0;s:31:"ImagickDraw::setStrokeDashArray";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:57:"bool ImagickDraw::setStrokeDashArray ( array $dashArray )";i:3;s:449:"Specifies the pattern of dashes and gaps used to stroke paths. The strokeDashArray represents an array of numbers that specify the lengths of alternating dashes and gaps in pixels. If an odd number of values is provided, then the list of values is repeated to yield an even number of values. To remove an existing dash array, pass a zero number_elements argument and null dash_array. A typical strokeDashArray_ array might contain the members 5 3 2.";}
a:4:{i:0;s:32:"ImagickDraw::setStrokeDashOffset";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:60:"bool ImagickDraw::setStrokeDashOffset ( float $dash_offset )";i:3;s:61:"Specifies the offset into the dash pattern to start the dash.";}
a:4:{i:0;s:29:"ImagickDraw::setStrokeLineCap";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool ImagickDraw::setStrokeLineCap ( int $linecap )";i:3;s:81:"Specifies the shape to be used at the end of open subpaths when they are stroked.";}
a:4:{i:0;s:30:"ImagickDraw::setStrokeLineJoin";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:53:"bool ImagickDraw::setStrokeLineJoin ( int $linejoin )";i:3;s:102:"Specifies the shape to be used at the corners of paths (or other vector shapes) when they are stroked.";}
a:4:{i:0;s:32:"ImagickDraw::setStrokeMiterLimit";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:57:"bool ImagickDraw::setStrokeMiterLimit ( int $miterlimit )";i:3;s:303:"Specifies the miter limit. When two line segments meet at a sharp angle and miter joins have been specified for 'lineJoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path. The miterLimit' imposes a limit on the ratio of the miter length to the 'lineWidth'.";}
a:4:{i:0;s:29:"ImagickDraw::setStrokeOpacity";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:60:"bool ImagickDraw::setStrokeOpacity ( float $stroke_opacity )";i:3;s:49:"Specifies the opacity of stroked object outlines.";}
a:4:{i:0;s:32:"ImagickDraw::setStrokePatternURL";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:60:"bool ImagickDraw::setStrokePatternURL ( string $stroke_url )";i:3;s:51:"Sets the pattern used for stroking object outlines.";}
a:4:{i:0;s:27:"ImagickDraw::setStrokeWidth";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:56:"bool ImagickDraw::setStrokeWidth ( float $stroke_width )";i:3;s:58:"Sets the width of the stroke used to draw object outlines.";}
a:4:{i:0;s:29:"ImagickDraw::setTextAlignment";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:53:"bool ImagickDraw::setTextAlignment ( int $alignment )";i:3;s:67:"Specifies a text alignment to be applied when annotating with text.";}
a:4:{i:0;s:29:"ImagickDraw::setTextAntialias";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool ImagickDraw::setTextAntialias ( bool $antiAlias )";i:3;s:69:"Controls whether text is antialiased. Text is antialiased by default.";}
a:4:{i:0;s:30:"ImagickDraw::setTextDecoration";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool ImagickDraw::setTextDecoration ( int $decoration )";i:3;s:63:"Specifies a decoration to be applied when annotating with text.";}
a:4:{i:0;s:28:"ImagickDraw::setTextEncoding";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool ImagickDraw::setTextEncoding ( string $encoding )";i:3;s:343:"Specifies specifies the code set to use for text annotations. The only character encoding which may be specified at this time is "UTF-8" for representing Unicode as a sequence of bytes. Specify an empty string to set text encoding to the system's default. Successful text annotation using Unicode may require fonts designed to support Unicode.";}
a:4:{i:0;s:30:"ImagickDraw::setTextUnderColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:65:"bool ImagickDraw::setTextUnderColor ( ImagickPixel $under_color )";i:3;s:78:"Specifies the color of a background rectangle to place under text annotations.";}
a:4:{i:0;s:30:"ImagickDraw::setVectorGraphics";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"bool ImagickDraw::setVectorGraphics ( string $xml )";i:3;s:178:"Sets the vector graphics associated with the specified ImagickDraw object. Use this method with ImagickDraw::getVectorGraphics() as a method to persist the vector graphics state.";}
a:4:{i:0;s:23:"ImagickDraw::setViewbox";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:67:"bool ImagickDraw::setViewbox ( int $x1, int $y1, int $x2, int $y2 )";i:3;s:303:"Sets the overall canvas size to be recorded with the drawing vector data. Usually this will be specified using the same size as the canvas image. When the vector data is saved to SVG or MVG formats, the viewbox is use to specify the size of the canvas image that a viewer will render the vector data on.";}
a:4:{i:0;s:18:"ImagickDraw::skewX";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool ImagickDraw::skewX ( float $degrees )";i:3;s:64:"Skews the current coordinate system in the horizontal direction.";}
a:4:{i:0;s:18:"ImagickDraw::skewY";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:42:"bool ImagickDraw::skewY ( float $degrees )";i:3;s:62:"Skews the current coordinate system in the vertical direction.";}
a:4:{i:0;s:22:"ImagickDraw::translate";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:50:"bool ImagickDraw::translate ( float $x, float $y )";i:3;s:124:"Applies a translation to the current coordinate system which moves the coordinate system origin to the specified coordinate.";}
a:4:{i:0;s:19:"ImagickPixel::clear";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:33:"bool ImagickPixel::clear ( void )";i:3;s:115:"Clears the ImagickPixel object, leaving it in a fresh state. This also unsets any color associated with the object.";}
a:4:{i:0;s:25:"ImagickPixel::__construct";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:46:"ImagickPixel::__construct ([ string $color ] )";i:3;s:145:"Constructs an ImagickPixel object. If a color is specified, the object is constructed and then initialised with that color before being returned.";}
a:4:{i:0;s:21:"ImagickPixel::destroy";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"bool ImagickPixel::destroy ( void )";i:3;s:165:"Deallocates any resources used by the ImagickPixel object, and unsets any associated color. The object should not be used after the destroy function has been called.";}
a:4:{i:0;s:22:"ImagickPixel::getColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:60:"array ImagickPixel::getColor ([ bool $normalized = false ] )";i:3;s:157:"Returns the color described by the ImagickPixel object, as an array. If the color has an opacity channel set, this is provided as a fourth value in the list.";}
a:4:{i:0;s:30:"ImagickPixel::getColorAsString";i:1;s:20:"(PECL imagick 2.1.0)";i:2;s:46:"string ImagickPixel::getColorAsString ( void )";i:3;s:57:"Returns the color of the ImagickPixel object as a string.";}
a:4:{i:0;s:27:"ImagickPixel::getColorCount";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:40:"int ImagickPixel::getColorCount ( void )";i:3;s:51:"Returns the color count associated with this color.";}
a:4:{i:0;s:27:"ImagickPixel::getColorValue";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"float ImagickPixel::getColorValue ( int $color )";i:3;s:95:"Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.";}
a:4:{i:0;s:20:"ImagickPixel::getHSL";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:35:"array ImagickPixel::getHSL ( void )";i:3;s:147:"Returns the normalized HSL color described by the ImagickPixel object, with each of the three values as floating point numbers between 0.0 and 1.0.";}
a:4:{i:0;s:23:"ImagickPixel::isSimilar";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:65:"bool ImagickPixel::isSimilar ( ImagickPixel $color, float $fuzz )";i:3;s:254:"Checks the distance between the color described by this ImagickPixel object and that of the provided object, by plotting their RGB values on the color cube. If the distance between the two points is less than the fuzz value given, the colors are similar.";}
a:4:{i:0;s:22:"ImagickPixel::setColor";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:45:"bool ImagickPixel::setColor ( string $color )";i:3;s:138:"Sets the color described by the ImagickPixel object, with a string (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)", etc.).";}
a:4:{i:0;s:27:"ImagickPixel::setColorValue";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:61:"bool ImagickPixel::setColorValue ( int $color, float $value )";i:3;s:193:"Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to an ImagickPixel object.";}
a:4:{i:0;s:20:"ImagickPixel::setHSL";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:78:"bool ImagickPixel::setHSL ( float $hue, float $saturation, float $luminosity )";i:3;s:111:"Sets the color described by the ImagickPixel object using normalized values for hue, saturation and luminosity.";}
a:4:{i:0;s:27:"ImagickPixelIterator::clear";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:41:"bool ImagickPixelIterator::clear ( void )";i:3;s:48:"Clear resources associated with a PixelIterator.";}
a:4:{i:0;s:33:"ImagickPixelIterator::__construct";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:51:"ImagickPixelIterator::__construct ( Imagick $wand )";i:3;s:36:"The ImagickPixelIterator constructor";}
a:4:{i:0;s:29:"ImagickPixelIterator::destroy";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:43:"bool ImagickPixelIterator::destroy ( void )";i:3;s:54:"Deallocates resources associated with a PixelIterator.";}
a:4:{i:0;s:44:"
ImagickPixelIterator::getCurrentIteratorRow";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:58:"array ImagickPixelIterator::getCurrentIteratorRow ( void )";i:3;s:84:"Returns the current row as an array of ImagickPixel objects from the pixel iterator.";}
a:4:{i:0;s:36:"ImagickPixelIterator::getIteratorRow";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"int ImagickPixelIterator::getIteratorRow ( void )";i:3;s:39:"Returns the current pixel iterator row.";}
a:4:{i:0;s:40:"ImagickPixelIterator::getNextIteratorRow";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"array ImagickPixelIterator::getNextIteratorRow ( void )";i:3;s:72:"Returns the next row as an array of pixel wands from the pixel iterator.";}
a:4:{i:0;s:45:"
ImagickPixelIterator::getPreviousIteratorRow";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:59:"array ImagickPixelIterator::getPreviousIteratorRow ( void )";i:3;s:76:"Returns the previous row as an array of pixel wands from the pixel iterator.";}
a:4:{i:0;s:38:"ImagickPixelIterator::newPixelIterator";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:61:"bool ImagickPixelIterator::newPixelIterator ( Imagick $wand )";i:3;s:29:"Returns a new pixel iterator.";}
a:4:{i:0;s:45:"
ImagickPixelIterator::newPixelRegionIterator";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:108:"bool ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand, int $x, int $y, int $columns, int $rows )";i:3;s:29:"Returns a new pixel iterator.";}
a:4:{i:0;s:35:"ImagickPixelIterator::resetIterator";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:49:"bool ImagickPixelIterator::resetIterator ( void )";i:3;s:149:"Resets the pixel iterator. Use it in conjunction with ImagickPixelIterator::getNextIteratorRow() to iterate over all the pixels in a pixel container.";}
a:4:{i:0;s:41:"ImagickPixelIterator::setIteratorFirstRow";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:55:"bool ImagickPixelIterator::setIteratorFirstRow ( void )";i:3;s:47:"Sets the pixel iterator to the first pixel row.";}
a:4:{i:0;s:40:"ImagickPixelIterator::setIteratorLastRow";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool ImagickPixelIterator::setIteratorLastRow ( void )";i:3;s:46:"Sets the pixel iterator to the last pixel row.";}
a:4:{i:0;s:36:"ImagickPixelIterator::setIteratorRow";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:54:"bool ImagickPixelIterator::setIteratorRow ( int $row )";i:3;s:27:"Set the pixel iterator row.";}
a:4:{i:0;s:34:"ImagickPixelIterator::syncIterator";i:1;s:20:"(PECL imagick 2.0.0)";i:2;s:48:"bool ImagickPixelIterator::syncIterator ( void )";i:3;s:25:"Syncs the pixel iterator.";}
a:4:{i:0;s:18:"cyrus_authenticate";i:1;s:32:"(PHP 4 >= 4.1.0, PECL cyrus 1.0)";i:2;s:181:"void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"cyrus_bind";i:1;s:32:"(PHP 4 >= 4.1.0, PECL cyrus 1.0)";i:2;s:58:"bool cyrus_bind ( resource $connection, array $callbacks )";i:3;s:43:"Binds callbacks to a Cyrus IMAP connection.";}
a:4:{i:0;s:11:"cyrus_close";i:1;s:32:"(PHP 4 >= 4.1.0, PECL cyrus 1.0)";i:2;s:41:"bool cyrus_close ( resource $connection )";i:3;s:45:"Closes the connection to a Cyrus IMAP server.";}
a:4:{i:0;s:13:"cyrus_connect";i:1;s:32:"(PHP 4 >= 4.1.0, PECL cyrus 1.0)";i:2;s:74:"resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] )";i:3;s:32:"Connects to a Cyrus IMAP server.";}
a:4:{i:0;s:11:"cyrus_query";i:1;s:32:"(PHP 4 >= 4.1.0, PECL cyrus 1.0)";i:2;s:57:"array cyrus_query ( resource $connection, string $query )";i:3;s:37:"Sends a query to a Cyrus IMAP server.";}
a:4:{i:0;s:12:"cyrus_unbind";i:1;s:32:"(PHP 4 >= 4.1.0, PECL cyrus 1.0)";i:2;s:64:"bool cyrus_unbind ( resource $connection, string $trigger_name )";i:3;s:0:"";}
a:4:{i:0;s:9:"imap_8bit";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string imap_8bit ( string $string )";i:3;s:80:"Convert an 8bit string to a quoted-printable string (according to, section 6.7).";}
a:4:{i:0;s:11:"imap_alerts";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"array imap_alerts ( void )";i:3;s:94:"Returns all of the alert messages generated since the last call, or the beginning of the page.";}
a:4:{i:0;s:11:"imap_append";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:137:"bool imap_append ( resource $imap_stream, string $mailbox, string $message [, string $options = NULL [, string $internal_date = NULL ]] )";i:3;s:35:"Appends a string to the specified .";}
a:4:{i:0;s:11:"imap_base64";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string imap_base64 ( string $text )";i:3;s:35:"Decodes the given BASE-64 encoded .";}
a:4:{i:0;s:11:"imap_binary";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"string imap_binary ( string $string )";i:3;s:68:"Convert an 8bit string to a base64 string according to, Section 6.8.";}
a:4:{i:0;s:9:"imap_body";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"string imap_body ( resource $imap_stream, int $msg_number [, int $options = 0 ] )";i:3;s:65:"returns the body of the message, numbered in the current mailbox.";}
a:4:{i:0;s:15:"imap_bodystruct";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:82:"object imap_bodystruct ( resource $imap_stream, int $msg_number, string $section )";i:3;s:69:"Read the structure of a specified body section of a specific message.";}
a:4:{i:0;s:10:"imap_check";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"object imap_check ( resource $imap_stream )";i:3;s:45:"Checks information about the current mailbox.";}
a:4:{i:0;s:19:"imap_clearflag_full";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:104:"bool imap_clearflag_full ( resource $imap_stream, string $sequence, string $flag [, int $options = 0 ] )";i:3;s:105:"This function causes a store to delete the specified to the flags set for the messages in the specified .";}
a:4:{i:0;s:10:"imap_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:60:"bool imap_close ( resource $imap_stream [, int $flag = 0 ] )";i:3;s:23:"Closes the imap stream.";}
a:4:{i:0;s:11:"imap_create";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:18:"imap_createmailbox";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:66:"bool imap_createmailbox ( resource $imap_stream, string $mailbox )";i:3;s:36:"Creates a new mailbox specified by .";}
a:4:{i:0;s:11:"imap_delete";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"bool imap_delete ( resource $imap_stream, int $msg_number [, int $options = 0 ] )";i:3;s:158:"Marks messages listed in for deletion. Messages marked for deletion will stay in the mailbox until either is called or is called with the optional parameter .";}
a:4:{i:0;s:18:"imap_deletemailbox";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:66:"bool imap_deletemailbox ( resource $imap_stream, string $mailbox )";i:3;s:23:"Deletes the specified .";}
a:4:{i:0;s:11:"imap_errors";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"array imap_errors ( void )";i:3;s:111:"Gets all of the errors (if any) that have occurred during this page request or since the error stack was reset.";}
a:4:{i:0;s:12:"imap_expunge";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"bool imap_expunge ( resource $imap_stream )";i:3;s:55:"Deletes all the messages marked for deletion by, , or .";}
a:4:{i:0;s:19:"imap_fetch_overview";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"array imap_fetch_overview ( resource $imap_stream, string $sequence [, int $options = 0 ] )";i:3;s:91:"This function fetches mail headers for the given and returns an overview of their contents.";}
a:4:{i:0;s:14:"imap_fetchbody";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:103:"string imap_fetchbody ( resource $imap_stream, int $msg_number, string $section [, int $options = 0 ] )";i:3;s:113:"Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function.";}
a:4:{i:0;s:16:"imap_fetchheader";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:88:"string imap_fetchheader ( resource $imap_stream, int $msg_number [, int $options = 0 ] )";i:3;s:96:"This function causes a fetch of the complete, unfiltered format header of the specified message.";}
a:4:{i:0;s:14:"imap_fetchmime";i:1;s:16:"(PHP 5 >= 5.3.6)";i:2;s:103:"string imap_fetchmime ( resource $imap_stream, int $msg_number, string $section [, int $options = 0 ] )";i:3;s:85:"Fetch the MIME headers of a particular section of the body of the specified messages.";}
a:4:{i:0;s:19:"imap_fetchstructure";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"object imap_fetchstructure ( resource $imap_stream, int $msg_number [, int $options = 0 ] )";i:3;s:59:"Fetches all the structured information for a given message.";}
a:4:{i:0;s:14:"imap_fetchtext";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:7:"imap_gc";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:51:"bool imap_gc ( resource $imap_stream, int $caches )";i:3;s:47:"Purges the cache of entries of a specific type.";}
a:4:{i:0;s:14:"imap_get_quota";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:66:"array imap_get_quota ( resource $imap_stream, string $quota_root )";i:3;s:65:"Retrieve the quota level settings, and usage statics per mailbox.";}
a:4:{i:0;s:18:"imap_get_quotaroot";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:70:"array imap_get_quotaroot ( resource $imap_stream, string $quota_root )";i:3;s:205:"Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user's total mailbox usage. The usage value represents the user's current total mailbox capacity.";}
a:4:{i:0;s:11:"imap_getacl";i:1;s:7:"(PHP 5)";i:2;s:60:"array imap_getacl ( resource $imap_stream, string $mailbox )";i:3;s:33:"Gets the ACL for a given mailbox.";}
a:4:{i:0;s:17:"imap_getmailboxes";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:79:"array imap_getmailboxes ( resource $imap_stream, string $ref, string $pattern )";i:3;s:34:"Gets information on the mailboxes.";}
a:4:{i:0;s:18:"imap_getsubscribed";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:80:"array imap_getsubscribed ( resource $imap_stream, string $ref, string $pattern )";i:3;s:48:"Gets information about the subscribed mailboxes.";}
a:4:{i:0;s:11:"imap_header";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:15:"imap_headerinfo";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:148:"object imap_headerinfo ( resource $imap_stream, int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] )";i:3;s:71:"Gets information about the given message number by reading its headers.";}
a:4:{i:0;s:12:"imap_headers";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"array imap_headers ( resource $imap_stream )";i:3;s:46:"Returns headers for all messages in a mailbox.";}
a:4:{i:0;s:15:"imap_last_error";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"string imap_last_error ( void )";i:3;s:187:"Gets the full text of the last error message that occurred on the current page. The error stack is untouched; calling subsequently, with no intervening errors, will return the same error.";}
a:4:{i:0;s:9:"imap_list";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"array imap_list ( resource $imap_stream, string $ref, string $pattern )";i:3;s:27:"Read the list of mailboxes.";}
a:4:{i:0;s:16:"imap_listmailbox";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:13:"imap_listscan";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:92:"array imap_listscan ( resource $imap_stream, string $ref, string $pattern, string $content )";i:3;s:92:"Returns an array containing the names of the mailboxes that have in the text of the mailbox.";}
a:4:{i:0;s:19:"imap_listsubscribed";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:9:"imap_lsub";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"array imap_lsub ( resource $imap_stream, string $ref, string $pattern )";i:3;s:60:"Gets an array of all the mailboxes that you have subscribed.";}
a:4:{i:0;s:17:"imap_mail_compose";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"string imap_mail_compose ( array $envelope, array $body )";i:3;s:54:"Create a MIME message based on the given and sections.";}
a:4:{i:0;s:14:"imap_mail_copy";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:101:"bool imap_mail_copy ( resource $imap_stream, string $msglist, string $mailbox [, int $options = 0 ] )";i:3;s:55:"Copies mail messages specified by to specified mailbox.";}
a:4:{i:0;s:14:"imap_mail_move";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:101:"bool imap_mail_move ( resource $imap_stream, string $msglist, string $mailbox [, int $options = 0 ] )";i:3;s:51:"Moves mail messages specified by to the specified .";}
a:4:{i:0;s:9:"imap_mail";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:172:"bool imap_mail ( string $to, string $subject, string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] )";i:3;s:85:"This function allows sending of emails with correct handling of Cc and Bcc receivers.";}
a:4:{i:0;s:19:"imap_mailboxmsginfo";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"object imap_mailboxmsginfo ( resource $imap_stream )";i:3;s:185:"Checks the current mailbox status on the server. It is similar to, but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute.";}
a:4:{i:0;s:23:"imap_mime_header_decode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"array imap_mime_header_decode ( string $text )";i:3;s:70:"Decodes MIME message header extensions that are non ASCII text (see ).";}
a:4:{i:0;s:10:"imap_msgno";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"int imap_msgno ( resource $imap_stream, int $uid )";i:3;s:51:"Returns the message sequence number for the given .";}
a:4:{i:0;s:12:"imap_num_msg";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"int imap_num_msg ( resource $imap_stream )";i:3;s:51:"Gets the number of messages in the current mailbox.";}
a:4:{i:0;s:15:"imap_num_recent";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"int imap_num_recent ( resource $imap_stream )";i:3;s:58:"Gets the number of recent messages in the current mailbox.";}
a:4:{i:0;s:9:"imap_open";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:144:"resource imap_open ( string $mailbox, string $username, string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] )";i:3;s:22:"Opens an stream to a .";}
a:4:{i:0;s:9:"imap_ping";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"bool imap_ping ( resource $imap_stream )";i:3;s:201:"pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic "new mail check" as well as a "keep alive" for servers which have inactivity timeout.";}
a:4:{i:0;s:11:"imap_qprint";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"string imap_qprint ( string $string )";i:3;s:79:"Convert a quoted-printable string to an 8 bit string according to, section 6.7.";}
a:4:{i:0;s:11:"imap_rename";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:18:"imap_renamemailbox";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:85:"bool imap_renamemailbox ( resource $imap_stream, string $old_mbox, string $new_mbox )";i:3;s:82:"This function renames on old mailbox to new mailbox (see for the format of names).";}
a:4:{i:0;s:11:"imap_reopen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:104:"bool imap_reopen ( resource $imap_stream, string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] )";i:3;s:54:"Reopens the specified stream to a new on an or server.";}
a:4:{i:0;s:25:"imap_rfc822_parse_adrlist";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:73:"array imap_rfc822_parse_adrlist ( string $address, string $default_host )";i:3;s:61:"Parses the address string as defined in and for each address.";}
a:4:{i:0;s:25:"imap_rfc822_parse_headers";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:89:"object imap_rfc822_parse_headers ( string $headers [, string $defaulthost = "UNKNOWN" ] )";i:3;s:55:"Gets an object of various header elements, similar to .";}
a:4:{i:0;s:25:"imap_rfc822_write_address";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"string imap_rfc822_write_address ( string $mailbox, string $host, string $personal )";i:3;s:86:"Returns a properly formatted email address as defined in given the needed information.";}
a:4:{i:0;s:13:"imap_savebody";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:125:"bool imap_savebody ( resource $imap_stream, mixed $file, int $msg_number [, string $part_number = "" [, int $options = 0 ]] )";i:3;s:56:"Saves a part or the whole body of the specified message.";}
a:4:{i:0;s:9:"imap_scan";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:16:"imap_scanmailbox";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"imap_search";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:115:"array imap_search ( resource $imap_stream, string $criteria [, int $options = SE_FREE [, string $charset = NIL ]] )";i:3;s:84:"This function performs a search on the mailbox currently opened in the given stream.";}
a:4:{i:0;s:14:"imap_set_quota";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:83:"bool imap_set_quota ( resource $imap_stream, string $quota_root, int $quota_limit )";i:3;s:49:"Sets an upper limit quota on a per mailbox basis.";}
a:4:{i:0;s:11:"imap_setacl";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:87:"bool imap_setacl ( resource $imap_stream, string $mailbox, string $id, string $rights )";i:3;s:34:"Sets the ACL for a giving mailbox.";}
a:4:{i:0;s:17:"imap_setflag_full";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:104:"bool imap_setflag_full ( resource $imap_stream, string $sequence, string $flag [, int $options = NIL ] )";i:3;s:88:"Causes a store to add the specified to the flags set for the messages in the specified .";}
a:4:{i:0;s:9:"imap_sort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:153:"array imap_sort ( resource $imap_stream, int $criteria, int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL ]]] )";i:3;s:55:"Gets and sorts message numbers by the given parameters.";}
a:4:{i:0;s:11:"imap_status";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:75:"object imap_status ( resource $imap_stream, string $mailbox, int $options )";i:3;s:41:"Gets status information about the given .";}
a:4:{i:0;s:14:"imap_subscribe";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"bool imap_subscribe ( resource $imap_stream, string $mailbox )";i:3;s:27:"Subscribe to a new mailbox.";}
a:4:{i:0;s:11:"imap_thread";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:71:"array imap_thread ( resource $imap_stream [, int $options = SE_FREE ] )";i:3;s:34:"Gets a tree of a threaded message.";}
a:4:{i:0;s:12:"imap_timeout";i:1;s:23:"(PHP 4 >= 4.3.3, PHP 5)";i:2;s:63:"mixed imap_timeout ( int $timeout_type [, int $timeout = -1 ] )";i:3;s:33:"Sets or fetches the imap timeout.";}
a:4:{i:0;s:8:"imap_uid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"int imap_uid ( resource $imap_stream, int $msg_number )";i:3;s:217:"This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes.";}
a:4:{i:0;s:13:"imap_undelete";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"bool imap_undelete ( resource $imap_stream, int $msg_number [, int $flags = 0 ] )";i:3;s:71:"Removes the deletion flag for a specified message, which is set by or .";}
a:4:{i:0;s:16:"imap_unsubscribe";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"bool imap_unsubscribe ( resource $imap_stream, string $mailbox )";i:3;s:32:"Unsubscribe from the specified .";}
a:4:{i:0;s:16:"imap_utf7_decode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"string imap_utf7_decode ( string $text )";i:3;s:46:"Decodes modified UTF-7 into ISO-8859-1 string.";}
a:4:{i:0;s:16:"imap_utf7_encode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"string imap_utf7_encode ( string $data )";i:3;s:32:"Converts to modified UTF-7 text.";}
a:4:{i:0;s:9:"imap_utf8";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string imap_utf8 ( string $mime_encoded_text )";i:3;s:28:"Converts the given to UTF-8.";}
a:4:{i:0;s:10:"ezmlm_hash";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:31:"int ezmlm_hash ( string $addr )";i:3;s:86:"calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database.";}
a:4:{i:0;s:4:"mail";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:124:"bool mail ( string $to, string $subject, string $message [, string $additional_headers [, string $additional_parameters ]] )";i:3;s:15:"Sends an email.";}
a:4:{i:0;s:38:"mailparse_determine_best_xfer_encoding";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:62:"string mailparse_determine_best_xfer_encoding ( resource $fp )";i:3;s:82:"Figures out the best way of encoding the content read from the given file pointer.";}
a:4:{i:0;s:20:"mailparse_msg_create";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:38:"resource mailparse_msg_create ( void )";i:3;s:23:"Create a mail resource.";}
a:4:{i:0;s:31:"mailparse_msg_extract_part_file";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:106:"string mailparse_msg_extract_part_file ( resource $mimemail, mixed $filename [, callable $callbackfunc ] )";i:3;s:62:"Extracts/decodes a message section from the supplied filename.";}
a:4:{i:0;s:26:"mailparse_msg_extract_part";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:99:"void mailparse_msg_extract_part ( resource $mimemail, string $msgbody [, callable $callbackfunc ] )";i:3;s:0:"";}
a:4:{i:0;s:37:"mailparse_msg_extract_whole_part_file";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:113:"string mailparse_msg_extract_whole_part_file ( resource $mimemail, string $filename [, callable $callbackfunc ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"mailparse_msg_free";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:46:"bool mailparse_msg_free ( resource $mimemail )";i:3;s:17:"Frees a resource.";}
a:4:{i:0;s:27:"mailparse_msg_get_part_data";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:56:"array mailparse_msg_get_part_data ( resource $mimemail )";i:3;s:0:"";}
a:4:{i:0;s:22:"mailparse_msg_get_part";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:75:"resource mailparse_msg_get_part ( resource $mimemail, string $mimesection )";i:3;s:0:"";}
a:4:{i:0;s:27:"mailparse_msg_get_structure";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:56:"array mailparse_msg_get_structure ( resource $mimemail )";i:3;s:0:"";}
a:4:{i:0;s:24:"mailparse_msg_parse_file";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:54:"resource mailparse_msg_parse_file ( string $filename )";i:3;s:84:"Parses a file. This is the optimal way of parsing a mail file that you have on disk.";}
a:4:{i:0;s:19:"mailparse_msg_parse";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:61:"bool mailparse_msg_parse ( resource $mimemail, string $data )";i:3;s:62:"Incrementally parse data into the supplied mime mail resource.";}
a:4:{i:0;s:32:"mailparse_rfc822_parse_addresses";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:60:"array mailparse_rfc822_parse_addresses ( string $addresses )";i:3;s:68:"Parses a compliant recipient list, such as that found in the header.";}
a:4:{i:0;s:23:"mailparse_stream_encode";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:87:"bool mailparse_stream_encode ( resource $sourcefp, resource $destfp, string $encoding )";i:3;s:91:"Streams data from the source file pointer, apply and write to the destination file pointer.";}
a:4:{i:0;s:22:"mailparse_uudecode_all";i:1;s:25:"(PECL mailparse >= 0.9.0)";i:2;s:45:"array mailparse_uudecode_all ( resource $fp )";i:3;s:106:"Scans the data from the given file pointer and extract each embedded uuencoded file into a temporary file.";}
a:4:{i:0;s:28:"vpopmail_add_alias_domain_ex";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:74:"bool vpopmail_add_alias_domain_ex ( string $olddomain, string $newdomain )";i:3;s:0:"";}
a:4:{i:0;s:25:"vpopmail_add_alias_domain";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:70:"bool vpopmail_add_alias_domain ( string $domain, string $aliasdomain )";i:3;s:0:"";}
a:4:{i:0;s:22:"vpopmail_add_domain_ex";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:115:"bool vpopmail_add_domain_ex ( string $domain, string $passwd [, string $quota [, string $bounce [, bool $apop ]]] )";i:3;s:0:"";}
a:4:{i:0;s:19:"vpopmail_add_domain";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:76:"bool vpopmail_add_domain ( string $domain, string $dir, int $uid, int $gid )";i:3;s:0:"";}
a:4:{i:0;s:17:"vpopmail_add_user";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:107:"bool vpopmail_add_user ( string $user, string $domain, string $password [, string $gecos [, bool $apop ]] )";i:3;s:0:"";}
a:4:{i:0;s:18:"vpopmail_alias_add";i:1;s:38:"(PHP 4 >= 4.0.7, PECL vpopmail >= 0.2)";i:2;s:71:"bool vpopmail_alias_add ( string $user, string $domain, string $alias )";i:3;s:0:"";}
a:4:{i:0;s:25:"vpopmail_alias_del_domain";i:1;s:38:"(PHP 4 >= 4.0.7, PECL vpopmail >= 0.2)";i:2;s:49:"bool vpopmail_alias_del_domain ( string $domain )";i:3;s:0:"";}
a:4:{i:0;s:18:"vpopmail_alias_del";i:1;s:38:"(PHP 4 >= 4.0.7, PECL vpopmail >= 0.2)";i:2;s:56:"bool vpopmail_alias_del ( string $user, string $domain )";i:3;s:0:"";}
a:4:{i:0;s:22:"vpopmail_alias_get_all";i:1;s:38:"(PHP 4 >= 4.0.7, PECL vpopmail >= 0.2)";i:2;s:47:"array vpopmail_alias_get_all ( string $domain )";i:3;s:0:"";}
a:4:{i:0;s:18:"vpopmail_alias_get";i:1;s:38:"(PHP 4 >= 4.0.7, PECL vpopmail >= 0.2)";i:2;s:58:"array vpopmail_alias_get ( string $alias, string $domain )";i:3;s:0:"";}
a:4:{i:0;s:18:"vpopmail_auth_user";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:92:"bool vpopmail_auth_user ( string $user, string $domain, string $password [, string $apop ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"vpopmail_del_domain_ex";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:46:"bool vpopmail_del_domain_ex ( string $domain )";i:3;s:0:"";}
a:4:{i:0;s:19:"vpopmail_del_domain";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:43:"bool vpopmail_del_domain ( string $domain )";i:3;s:0:"";}
a:4:{i:0;s:17:"vpopmail_del_user";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:55:"bool vpopmail_del_user ( string $user, string $domain )";i:3;s:0:"";}
a:4:{i:0;s:14:"vpopmail_error";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:30:"string vpopmail_error ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"vpopmail_passwd";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:87:"bool vpopmail_passwd ( string $user, string $domain, string $password [, bool $apop ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"vpopmail_set_user_quota";i:1;s:38:"(PHP 4 >= 4.0.5, PECL vpopmail >= 0.2)";i:2;s:76:"bool vpopmail_set_user_quota ( string $user, string $domain, string $quota )";i:3;s:0:"";}
a:4:{i:0;s:5:"bcadd";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"string bcadd ( string $left_operand, string $right_operand [, int $scale ] )";i:3;s:10:"Sums and .";}
a:4:{i:0;s:6:"bccomp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"int bccomp ( string $left_operand, string $right_operand [, int $scale ] )";i:3;s:57:"Compares the to the and returns the result as an integer.";}
a:4:{i:0;s:5:"bcdiv";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"string bcdiv ( string $left_operand, string $right_operand [, int $scale ] )";i:3;s:20:"Divides the by the .";}
a:4:{i:0;s:5:"bcmod";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:54:"string bcmod ( string $left_operand, string $modulus )";i:3;s:30:"Get the modulus of the using .";}
a:4:{i:0;s:5:"bcmul";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"string bcmul ( string $left_operand, string $right_operand [, int $scale ] )";i:3;s:21:"Multiply the by the .";}
a:4:{i:0;s:5:"bcpow";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"string bcpow ( string $left_operand, string $right_operand [, int $scale ] )";i:3;s:20:"Raise to the power .";}
a:4:{i:0;s:8:"bcpowmod";i:1;s:7:"(PHP 5)";i:2;s:96:"string bcpowmod ( string $left_operand, string $right_operand, string $modulus [, int $scale ] )";i:3;s:86:"Use the fast-exponentiation method to raise to the power with respect to the modulus .";}
a:4:{i:0;s:7:"bcscale";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"bool bcscale ( int $scale )";i:3;s:128:"Sets the default scale parameter for all subsequent calls to bc math functions that do not explicitly specify a scale parameter.";}
a:4:{i:0;s:6:"bcsqrt";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"string bcsqrt ( string $operand [, int $scale ] )";i:3;s:31:"Return the square root of the .";}
a:4:{i:0;s:5:"bcsub";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"string bcsub ( string $left_operand, string $right_operand [, int $scale ] )";i:3;s:24:"Subtracts the from the .";}
a:4:{i:0;s:7:"gmp_abs";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:32:"resource gmp_abs ( resource $a )";i:3;s:35:"Get the absolute value of a number.";}
a:4:{i:0;s:7:"gmp_add";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_add ( resource $a, resource $b )";i:3;s:16:"Add two numbers.";}
a:4:{i:0;s:7:"gmp_and";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_and ( resource $a, resource $b )";i:3;s:42:"Calculates bitwise AND of two GMP numbers.";}
a:4:{i:0;s:10:"gmp_clrbit";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:43:"void gmp_clrbit ( resource $a, int $index )";i:3;s:50:"Clears (sets to 0) bit in . The index starts at 0.";}
a:4:{i:0;s:7:"gmp_cmp";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:40:"int gmp_cmp ( resource $a, resource $b )";i:3;s:21:"Compares two numbers.";}
a:4:{i:0;s:7:"gmp_com";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:32:"resource gmp_com ( resource $a )";i:3;s:33:"Returns the one's complement of .";}
a:4:{i:0;s:9:"gmp_div_q";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:80:"resource gmp_div_q ( resource $a, resource $b [, int $round = GMP_ROUND_ZERO ] )";i:3;s:42:"Divides by and returns the integer result.";}
a:4:{i:0;s:10:"gmp_div_qr";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:78:"array gmp_div_qr ( resource $n, resource $d [, int $round = GMP_ROUND_ZERO ] )";i:3;s:25:"The function divides by .";}
a:4:{i:0;s:9:"gmp_div_r";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:80:"resource gmp_div_r ( resource $n, resource $d [, int $round = GMP_ROUND_ZERO ] )";i:3;s:109:"Calculates remainder of the integer division of by . The remainder has the sign of the argument, if not zero.";}
a:4:{i:0;s:7:"gmp_div";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:12:"gmp_divexact";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:50:"resource gmp_divexact ( resource $n, resource $d )";i:3;s:137:"Divides by, using fast "exact division" algorithm. This function produces correct results only when it is known in advance that divides .";}
a:4:{i:0;s:8:"gmp_fact";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:30:"resource gmp_fact ( mixed $a )";i:3;s:28:"Calculates factorial () of .";}
a:4:{i:0;s:7:"gmp_gcd";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_gcd ( resource $a, resource $b )";i:3;s:129:"Calculate greatest common divisor of and . The result is always positive even if either of, or both, input operands are negative.";}
a:4:{i:0;s:10:"gmp_gcdext";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"array gmp_gcdext ( resource $a, resource $b )";i:3;s:130:"Calculates g, s, and t, such that, where gcd is the greatest common divisor. Returns an array with respective elements g, s and t.";}
a:4:{i:0;s:11:"gmp_hamdist";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:44:"int gmp_hamdist ( resource $a, resource $b )";i:3;s:80:"Returns the hamming distance between and . Both operands should be non-negative.";}
a:4:{i:0;s:8:"gmp_init";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:54:"resource gmp_init ( mixed $number [, int $base = 0 ] )";i:3;s:47:"Creates a GMP number from an integer or string.";}
a:4:{i:0;s:10:"gmp_intval";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:38:"int gmp_intval ( resource $gmpnumber )";i:3;s:54:"This function allows to convert GMP number to integer.";}
a:4:{i:0;s:10:"gmp_invert";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:48:"resource gmp_invert ( resource $a, resource $b )";i:3;s:32:"Computes the inverse of modulo .";}
a:4:{i:0;s:10:"gmp_jacobi";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:43:"int gmp_jacobi ( resource $a, resource $p )";i:3;s:53:"Computes of and . should be odd and must be positive.";}
a:4:{i:0;s:12:"gmp_legendre";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"int gmp_legendre ( resource $a, resource $p )";i:3;s:56:"Compute the of and . should be odd and must be positive.";}
a:4:{i:0;s:7:"gmp_mod";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_mod ( resource $n, resource $d )";i:3;s:78:"Calculates modulo . The result is always non-negative, the sign of is ignored.";}
a:4:{i:0;s:7:"gmp_mul";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_mul ( resource $a, resource $b )";i:3;s:37:"Multiplies by and returns the result.";}
a:4:{i:0;s:7:"gmp_neg";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:32:"resource gmp_neg ( resource $a )";i:3;s:39:"Returns the negative value of a number.";}
a:4:{i:0;s:13:"gmp_nextprime";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:33:"resource gmp_nextprime ( int $a )";i:3;s:22:"Find next prime number";}
a:4:{i:0;s:6:"gmp_or";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:44:"resource gmp_or ( resource $a, resource $b )";i:3;s:51:"Calculates bitwise inclusive OR of two GMP numbers.";}
a:4:{i:0;s:18:"gmp_perfect_square";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:39:"bool gmp_perfect_square ( resource $a )";i:3;s:38:"Check if a number is a perfect square.";}
a:4:{i:0;s:12:"gmp_popcount";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:32:"int gmp_popcount ( resource $a )";i:3;s:25:"Get the population count.";}
a:4:{i:0;s:7:"gmp_pow";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_pow ( resource $base, int $exp )";i:3;s:18:"Raise into power .";}
a:4:{i:0;s:8:"gmp_powm";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:66:"resource gmp_powm ( resource $base, resource $exp, resource $mod )";i:3;s:77:"Calculate ( raised into power ) modulo . If is negative, result is undefined.";}
a:4:{i:0;s:14:"gmp_prob_prime";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:54:"int gmp_prob_prime ( resource $a [, int $reps = 10 ] )";i:3;s:84:"The function uses Miller-Rabin's probabilistic test to check if a number is a prime.";}
a:4:{i:0;s:10:"gmp_random";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:44:"resource gmp_random ([ int $limiter = 20 ] )";i:3;s:153:"Generate a random number. The number will be between zero and the number of bits per limb multiplied by . If is negative, negative numbers are generated.";}
a:4:{i:0;s:9:"gmp_scan0";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:41:"int gmp_scan0 ( resource $a, int $start )";i:3;s:92:"Scans, starting with bit, towards more significant bits, until the first clear bit is found.";}
a:4:{i:0;s:9:"gmp_scan1";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:41:"int gmp_scan1 ( resource $a, int $start )";i:3;s:90:"Scans, starting with bit, towards more significant bits, until the first set bit is found.";}
a:4:{i:0;s:10:"gmp_setbit";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:69:"void gmp_setbit ( resource &$a, int $index [, bool $bit_on = true ] )";i:3;s:13:"Sets bit in .";}
a:4:{i:0;s:8:"gmp_sign";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:28:"int gmp_sign ( resource $a )";i:3;s:28:"Checks the sign of a number.";}
a:4:{i:0;s:8:"gmp_sqrt";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"resource gmp_sqrt ( resource $a )";i:3;s:27:"Calculates square root of .";}
a:4:{i:0;s:11:"gmp_sqrtrem";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"array gmp_sqrtrem ( resource $a )";i:3;s:54:"Calculate the square root of a number, with remainder.";}
a:4:{i:0;s:10:"gmp_strval";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:61:"string gmp_strval ( resource $gmpnumber [, int $base = 10 ] )";i:3;s:77:"Convert GMP number to string representation in base . The default base is 10.";}
a:4:{i:0;s:7:"gmp_sub";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_sub ( resource $a, resource $b )";i:3;s:38:"Subtracts from and returns the result.";}
a:4:{i:0;s:11:"gmp_testbit";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"bool gmp_testbit ( resource $a, int $index )";i:3;s:34:"Tests if the specified bit is set.";}
a:4:{i:0;s:7:"gmp_xor";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:45:"resource gmp_xor ( resource $a, resource $b )";i:3;s:57:"Calculates bitwise exclusive OR (XOR) of two GMP numbers.";}
a:4:{i:0;s:19:"Lapack::eigenValues";i:1;s:22:"(PECL lapack >= 0.1.0)";i:2;s:86:"public static array Lapack::eigenValues ( array $a [, array $left [, array $right ]] )";i:3;s:104:"Calculate the eigenvalues for a square matrix, and optionally calculate the left and right eigenvectors.";}
a:4:{i:0;s:16:"Lapack::identity";i:1;s:22:"(PECL lapack >= 0.1.0)";i:2;s:47:"public static array Lapack::identity ( int $n )";i:3;s:31:"Return a size n identity matrix";}
a:4:{i:0;s:35:"Lapack::leastSquaresByFactorisation";i:1;s:22:"(PECL lapack >= 0.1.0)";i:2;s:78:"public static array Lapack::leastSquaresByFactorisation ( array $a, array $b )";i:3;s:243:"Solve the linear least squares problem, find min x in || B - Ax || Returns an array representing x. Expects arrays of arrays, and will return an array of arrays in the dimension B num cols x A num cols. Uses QR or LQ factorisation on matrix A.";}
a:4:{i:0;s:25:"Lapack::leastSquaresBySVD";i:1;s:22:"(PECL lapack >= 0.1.0)";i:2;s:68:"public static array Lapack::leastSquaresBySVD ( array $a, array $b )";i:3;s:248:"Solve the linear least squares problem, find min x in || B - Ax || Returns an array representing x. Expects arrays of arrays, and will return an array of arrays in the dimension B num cols x A num cols. Uses SVD with a divide and conquer algorithm.";}
a:4:{i:0;s:21:"Lapack::pseudoInverse";i:1;s:22:"(PECL lapack >= 0.1.0)";i:2;s:54:"public static array Lapack::pseudoInverse ( array $a )";i:3;s:37:"Find the pseudoinverse of a matrix A.";}
a:4:{i:0;s:22:"Lapack::singularValues";i:1;s:22:"(PECL lapack >= 0.1.0)";i:2;s:55:"public static array Lapack::singularValues ( array $a )";i:3;s:46:"Calculate the singular values of the matrix A.";}
a:4:{i:0;s:27:"Lapack::solveLinearEquation";i:1;s:22:"(PECL lapack >= 0.1.0)";i:2;s:70:"public static array Lapack::solveLinearEquation ( array $a, array $b )";i:3;s:158:"This function computes the solution to the system of linear equations with a square matrix A and multiple right-hand sides B. Solves A * X = B for multiple B.";}
a:4:{i:0;s:3:"abs";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"number abs ( mixed $number )";i:3;s:31:"Returns the absolute value of .";}
a:4:{i:0;s:4:"acos";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"float acos ( float $arg )";i:3;s:133:"Returns the arc cosine of in radians. is the complementary function of, which means that for every value of a that is within ' range.";}
a:4:{i:0;s:5:"acosh";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:26:"float acosh ( float $arg )";i:3;s:85:"Returns the inverse hyperbolic cosine of, i.e. the value whose hyperbolic cosine is .";}
a:4:{i:0;s:4:"asin";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"float asin ( float $arg )";i:3;s:132:"Returns the arc sine of in radians. is the complementary function of, which means that for every value of a that is within 's range.";}
a:4:{i:0;s:5:"asinh";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:26:"float asinh ( float $arg )";i:3;s:81:"Returns the inverse hyperbolic sine of, i.e. the value whose hyperbolic sine is .";}
a:4:{i:0;s:5:"atan2";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"float atan2 ( float $y, float $x )";i:3;s:208:"This function calculates the arc tangent of the two variables and . It is similar to calculating the arc tangent of /, except that the signs of both arguments are used to determine the quadrant of the result.";}
a:4:{i:0;s:4:"atan";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"float atan ( float $arg )";i:3;s:135:"Returns the arc tangent of in radians. is the complementary function of, which means that for every value of a that is within 's range.";}
a:4:{i:0;s:5:"atanh";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:26:"float atanh ( float $arg )";i:3;s:87:"Returns the inverse hyperbolic tangent of, i.e. the value whose hyperbolic tangent is .";}
a:4:{i:0;s:12:"base_convert";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:66:"string base_convert ( string $number, int $frombase, int $tobase )";i:3;s:280:"Returns a string containing represented in base . The base in which is given is specified in . Both and have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.";}
a:4:{i:0;s:6:"bindec";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"number bindec ( string $binary_string )";i:3;s:80:"Returns the decimal equivalent of the binary number represented by the argument.";}
a:4:{i:0;s:4:"ceil";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"float ceil ( float $value )";i:3;s:67:"Returns the next highest integer value by rounding up if necessary.";}
a:4:{i:0;s:3:"cos";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:24:"float cos ( float $arg )";i:3;s:65:"returns the cosine of the parameter. The parameter is in radians.";}
a:4:{i:0;s:4:"cosh";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:25:"float cosh ( float $arg )";i:3;s:46:"Returns the hyperbolic cosine of, defined as .";}
a:4:{i:0;s:6:"decbin";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"string decbin ( int $number )";i:3;s:74:"Returns a string containing a binary representation of the given argument.";}
a:4:{i:0;s:6:"dechex";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"string dechex ( int $number )";i:3;s:88:"Returns a string containing a hexadecimal representation of the given unsigned argument.";}
a:4:{i:0;s:6:"decoct";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"string decoct ( int $number )";i:3;s:168:"Returns a string containing an octal representation of the given argument. The largest number that can be converted is 4294967295 in decimal resulting to "37777777777".";}
a:4:{i:0;s:7:"deg2rad";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"float deg2rad ( float $number )";i:3;s:61:"This function converts from degrees to the radian equivalent.";}
a:4:{i:0;s:3:"exp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:24:"float exp ( float $arg )";i:3;s:32:"Returns raised to the power of .";}
a:4:{i:0;s:5:"expm1";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:26:"float expm1 ( float $arg )";i:3;s:210:"returns the equivalent to 'exp() - 1' computed in a way that is accurate even if the value of is near zero, a case where 'exp () - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.";}
a:4:{i:0;s:5:"floor";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"float floor ( float $value )";i:3;s:68:"Returns the next lowest integer value by rounding down if necessary.";}
a:4:{i:0;s:4:"fmod";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:33:"float fmod ( float $x, float $y )";i:3;s:230:"Returns the floating point remainder of dividing the dividend () by the divisor (). The reminder () is defined as: x = i * y + r, for some integer . If is non-zero, has the same sign as and a magnitude less than the magnitude of .";}
a:4:{i:0;s:10:"getrandmax";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:23:"int getrandmax ( void )";i:3;s:61:"Returns the maximum value that can be returned by a call to .";}
a:4:{i:0;s:6:"hexdec";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"number hexdec ( string $hex_string )";i:3;s:136:"Returns the decimal equivalent of the hexadecimal number represented by the argument. converts a hexadecimal string to a decimal number.";}
a:4:{i:0;s:5:"hypot";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:34:"float hypot ( float $x, float $y )";i:3;s:163:"returns the length of the hypotenuse of a right-angle triangle with sides of length and, or the distance of the point (, ) from the origin. This is equivalent to .";}
a:4:{i:0;s:9:"is_finite";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:29:"bool is_finite ( float $val )";i:3;s:50:"Checks whether is a legal finite on this platform.";}
a:4:{i:0;s:11:"is_infinite";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:31:"bool is_infinite ( float $val )";i:3;s:124:"Returns if is infinite (positive or negative), like the result of or any value too big to fit into a float on this platform.";}
a:4:{i:0;s:6:"is_nan";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:26:"bool is_nan ( float $val )";i:3;s:54:"Checks whether is 'not a number', like the result of .";}
a:4:{i:0;s:9:"lcg_value";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:24:"float lcg_value ( void )";i:3;s:194:"returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.";}
a:4:{i:0;s:5:"log10";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"float log10 ( float $arg )";i:3;s:34:"Returns the base-10 logarithm of .";}
a:4:{i:0;s:5:"log1p";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:29:"float log1p ( float $number )";i:3;s:157:"returns log(1 + ) computed in a way that is accurate even when the value of is close to zero. might only return log(1) in this case due to lack of precision.";}
a:4:{i:0;s:3:"log";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:47:"float log ( float $arg [, float $base = M_E ] )";i:3;s:97:"If the optional parameter is specified, returns log, otherwise returns the natural logarithm of .";}
a:4:{i:0;s:3:"max";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"mixed max ( array $values )";i:3;s:163:"If the first and only parameter is an array, returns the highest value in that array. If at least two parameters are provided, returns the biggest of these values.";}
a:4:{i:0;s:3:"min";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"mixed min ( array $values )";i:3;s:163:"If the first and only parameter is an array, returns the lowest value in that array. If at least two parameters are provided, returns the smallest of these values.";}
a:4:{i:0;s:13:"mt_getrandmax";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int mt_getrandmax ( void )";i:3;s:61:"Returns the maximum value that can be returned by a call to .";}
a:4:{i:0;s:7:"mt_rand";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:20:"int mt_rand ( void )";i:3;s:387:"Many random number generators of older libcs have dubious or unknown characteristics and are slow. By default, PHP uses the libc random number generator with the function. The function is a drop-in replacement for this. It uses a random number generator with known characteristics using the, which will produce random numbers four times faster than what the average libc rand() provides.";}
a:4:{i:0;s:8:"mt_srand";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"void mt_srand ([ int $seed ] )";i:3;s:77:"Seeds the random number generator with or with a random value if no is given.";}
a:4:{i:0;s:6:"octdec";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"number octdec ( string $octal_string )";i:3;s:79:"Returns the decimal equivalent of the octal number represented by the argument.";}
a:4:{i:0;s:2:"pi";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:17:"float pi ( void )";i:3;s:174:"Returns an approximation of pi. The returned has a precision based on the directive in, which defaults to . Also, you can use the constant which yields identical results to .";}
a:4:{i:0;s:3:"pow";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"number pow ( number $base, number $exp )";i:3;s:32:"Returns raised to the power of .";}
a:4:{i:0;s:7:"rad2deg";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"float rad2deg ( float $number )";i:3;s:46:"This function converts from radian to degrees.";}
a:4:{i:0;s:4:"rand";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:17:"int rand ( void )";i:3;s:166:"If called without the optional, arguments returns a pseudo-random integer between 0 and . If you want a random number between 5 and 15 (inclusive), for example, use .";}
a:4:{i:0;s:5:"round";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )";i:3;s:125:"Returns the rounded value of to specified (number of digits after the decimal point). can also be negative or zero (default).";}
a:4:{i:0;s:3:"sin";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:24:"float sin ( float $arg )";i:3;s:63:"returns the sine of the parameter. The parameter is in radians.";}
a:4:{i:0;s:4:"sinh";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:25:"float sinh ( float $arg )";i:3;s:44:"Returns the hyperbolic sine of, defined as .";}
a:4:{i:0;s:4:"sqrt";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"float sqrt ( float $arg )";i:3;s:28:"Returns the square root of .";}
a:4:{i:0;s:5:"srand";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"void srand ([ int $seed ] )";i:3;s:77:"Seeds the random number generator with or with a random value if no is given.";}
a:4:{i:0;s:3:"tan";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:24:"float tan ( float $arg )";i:3;s:66:"returns the tangent of the parameter. The parameter is in radians.";}
a:4:{i:0;s:4:"tanh";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:25:"float tanh ( float $arg )";i:3;s:47:"Returns the hyperbolic tangent of, defined as .";}
a:4:{i:0;s:24:"stats_absolute_deviation";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:43:"float stats_absolute_deviation ( array $a )";i:3;s:0:"";}
a:4:{i:0;s:14:"stats_cdf_beta";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:74:"float stats_cdf_beta ( float $par1, float $par2, float $par3, int $which )";i:3;s:1418:"Method Cumulative distribution function (P) is calculated directly by code associated with the following reference. DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit Computation of the Incomplete Beta Function Ratios. ACM Trans. Math. Softw. 18 (1993), 360-373. Computation of other parameters involve a search for a value that produces the desired value of P. The search relies on the monotonicity of P with the other parameter. Note The beta density is proportional to t^(A-1) * (1-t)^(B-1) Arguments P -- The integral from 0 to X of the chi-square distribution. Input range: [0, 1]. Q -- 1-P. Input range: [0, 1]. P + Q = 1.0. X -- Upper limit of integration of beta density. Input range: [0,1]. Search range: [0,1] Y -- 1-X. Input range: [0,1]. Search range: [0,1] X + Y = 1.0. A -- The first parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] B -- The second parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] STATUS -- 0 if calculation completed correctly -I if input parameter number I is out of range 1 if answer appears to be lower than lowest search bound 2 if answer appears to be higher than greatest search bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1 BOUND -- Undefined if STATUS is 0 Bound exceeded by parameter number I if STATUS is negative. Lower search bound if STATUS is 1. Upper search bound if STATUS is 2.";}
a:4:{i:0;s:18:"stats_cdf_binomial";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:78:"float stats_cdf_binomial ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:16:"stats_cdf_cauchy";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:76:"float stats_cdf_cauchy ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:19:"stats_cdf_chisquare";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:66:"float stats_cdf_chisquare ( float $par1, float $par2, int $which )";i:3;s:0:"";}
a:4:{i:0;s:21:"stats_cdf_exponential";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:68:"float stats_cdf_exponential ( float $par1, float $par2, int $which )";i:3;s:0:"";}
a:4:{i:0;s:11:"stats_cdf_f";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:71:"float stats_cdf_f ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:15:"stats_cdf_gamma";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:75:"float stats_cdf_gamma ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_cdf_laplace";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:77:"float stats_cdf_laplace ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:18:"stats_cdf_logistic";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:78:"float stats_cdf_logistic ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:27:"stats_cdf_negative_binomial";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:87:"float stats_cdf_negative_binomial ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:30:"stats_cdf_noncentral_chisquare";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:90:"float stats_cdf_noncentral_chisquare ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:22:"stats_cdf_noncentral_f";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:95:"float stats_cdf_noncentral_f ( float $par1, float $par2, float $par3, float $par4, int $which )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_cdf_poisson";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:64:"float stats_cdf_poisson ( float $par1, float $par2, int $which )";i:3;s:0:"";}
a:4:{i:0;s:11:"stats_cdf_t";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:58:"float stats_cdf_t ( float $par1, float $par2, int $which )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_cdf_uniform";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:77:"float stats_cdf_uniform ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_cdf_weibull";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:77:"float stats_cdf_weibull ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:16:"stats_covariance";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:45:"float stats_covariance ( array $a, array $b )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_den_uniform";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:56:"float stats_den_uniform ( float $x, float $a, float $b )";i:3;s:0:"";}
a:4:{i:0;s:15:"stats_dens_beta";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:54:"float stats_dens_beta ( float $x, float $a, float $b )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_dens_cauchy";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:62:"float stats_dens_cauchy ( float $x, float $ave, float $stdev )";i:3;s:0:"";}
a:4:{i:0;s:20:"stats_dens_chisquare";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:51:"float stats_dens_chisquare ( float $x, float $dfr )";i:3;s:0:"";}
a:4:{i:0;s:22:"stats_dens_exponential";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:55:"float stats_dens_exponential ( float $x, float $scale )";i:3;s:0:"";}
a:4:{i:0;s:12:"stats_dens_f";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:57:"float stats_dens_f ( float $x, float $dfr1, float $dfr2 )";i:3;s:0:"";}
a:4:{i:0;s:16:"stats_dens_gamma";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:63:"float stats_dens_gamma ( float $x, float $shape, float $scale )";i:3;s:0:"";}
a:4:{i:0;s:18:"stats_dens_laplace";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:63:"float stats_dens_laplace ( float $x, float $ave, float $stdev )";i:3;s:0:"";}
a:4:{i:0;s:19:"stats_dens_logistic";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:64:"float stats_dens_logistic ( float $x, float $ave, float $stdev )";i:3;s:0:"";}
a:4:{i:0;s:28:"stats_dens_negative_binomial";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:68:"float stats_dens_negative_binomial ( float $x, float $n, float $pi )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_dens_normal";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:62:"float stats_dens_normal ( float $x, float $ave, float $stdev )";i:3;s:0:"";}
a:4:{i:0;s:23:"stats_dens_pmf_binomial";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:63:"float stats_dens_pmf_binomial ( float $x, float $n, float $pi )";i:3;s:0:"";}
a:4:{i:0;s:29:"stats_dens_pmf_hypergeometric";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:82:"float stats_dens_pmf_hypergeometric ( float $n1, float $n2, float $N1, float $N2 )";i:3;s:0:"";}
a:4:{i:0;s:22:"stats_dens_pmf_poisson";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:52:"float stats_dens_pmf_poisson ( float $x, float $lb )";i:3;s:0:"";}
a:4:{i:0;s:12:"stats_dens_t";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:43:"float stats_dens_t ( float $x, float $dfr )";i:3;s:0:"";}
a:4:{i:0;s:18:"stats_dens_weibull";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:57:"float stats_dens_weibull ( float $x, float $a, float $b )";i:3;s:0:"";}
a:4:{i:0;s:19:"stats_harmonic_mean";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:39:"number stats_harmonic_mean ( array $a )";i:3;s:0:"";}
a:4:{i:0;s:14:"stats_kurtosis";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:33:"float stats_kurtosis ( array $a )";i:3;s:0:"";}
a:4:{i:0;s:19:"stats_rand_gen_beta";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:48:"float stats_rand_gen_beta ( float $a, float $b )";i:3;s:144:"Returns a random deviate from the beta distribution with parameters A and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0 < x";}
a:4:{i:0;s:24:"stats_rand_gen_chisquare";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:44:"float stats_rand_gen_chisquare ( float $df )";i:3;s:0:"";}
a:4:{i:0;s:26:"stats_rand_gen_exponential";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:46:"float stats_rand_gen_exponential ( float $av )";i:3;s:0:"";}
a:4:{i:0;s:16:"stats_rand_gen_f";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:49:"float stats_rand_gen_f ( float $dfn, float $dfd )";i:3;s:220:"Generates a random deviate from the F (variance ratio) distribution with "dfn" degrees of freedom in the numerator and "dfd" degrees of freedom in the denominator. Method : directly generates ratio of chisquare variates.";}
a:4:{i:0;s:23:"stats_rand_gen_funiform";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:57:"float stats_rand_gen_funiform ( float $low, float $high )";i:3;s:0:"";}
a:4:{i:0;s:20:"stats_rand_gen_gamma";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:49:"float stats_rand_gen_gamma ( float $a, float $r )";i:3;s:110:"Generates random deviates from the gamma distribution whose density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).";}
a:4:{i:0;s:33:"stats_rand_gen_ibinomial_negative";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:58:"int stats_rand_gen_ibinomial_negative ( int $n, float $p )";i:3;s:0:"";}
a:4:{i:0;s:24:"stats_rand_gen_ibinomial";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:50:"int stats_rand_gen_ibinomial ( int $n, float $pp )";i:3;s:0:"";}
a:4:{i:0;s:18:"stats_rand_gen_int";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:31:"int stats_rand_gen_int ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"stats_rand_gen_ipoisson";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:41:"int stats_rand_gen_ipoisson ( float $mu )";i:3;s:0:"";}
a:4:{i:0;s:23:"stats_rand_gen_iuniform";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:51:"int stats_rand_gen_iuniform ( int $low, int $high )";i:3;s:0:"";}
a:4:{i:0;s:34:"stats_rand_gen_noncenral_chisquare";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:68:"float stats_rand_gen_noncenral_chisquare ( float $df, float $xnonc )";i:3;s:0:"";}
a:4:{i:0;s:27:"stats_rand_gen_noncentral_f";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:74:"float stats_rand_gen_noncentral_f ( float $dfn, float $dfd, float $xnonc )";i:3;s:0:"";}
a:4:{i:0;s:27:"stats_rand_gen_noncentral_t";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:61:"float stats_rand_gen_noncentral_t ( float $df, float $xnonc )";i:3;s:0:"";}
a:4:{i:0;s:21:"stats_rand_gen_normal";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:52:"float stats_rand_gen_normal ( float $av, float $sd )";i:3;s:0:"";}
a:4:{i:0;s:16:"stats_rand_gen_t";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:36:"float stats_rand_gen_t ( float $df )";i:3;s:0:"";}
a:4:{i:0;s:20:"stats_rand_get_seeds";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:35:"array stats_rand_get_seeds ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"stats_rand_phrase_to_seeds";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:51:"array stats_rand_phrase_to_seeds ( string $phrase )";i:3;s:0:"";}
a:4:{i:0;s:15:"stats_rand_ranf";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:30:"float stats_rand_ranf ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_rand_setall";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:51:"void stats_rand_setall ( int $iseed1, int $iseed2 )";i:3;s:0:"";}
a:4:{i:0;s:10:"stats_skew";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:29:"float stats_skew ( array $a )";i:3;s:0:"";}
a:4:{i:0;s:24:"stats_standard_deviation";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:69:"float stats_standard_deviation ( array $a [, bool $sample = false ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"stats_stat_binomial_coef";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:49:"float stats_stat_binomial_coef ( int $x, int $n )";i:3;s:0:"";}
a:4:{i:0;s:22:"stats_stat_correlation";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:57:"float stats_stat_correlation ( array $arr1, array $arr2 )";i:3;s:0:"";}
a:4:{i:0;s:17:"stats_stat_gennch";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:34:"float stats_stat_gennch ( int $n )";i:3;s:0:"";}
a:4:{i:0;s:24:"stats_stat_independent_t";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:59:"float stats_stat_independent_t ( array $arr1, array $arr2 )";i:3;s:0:"";}
a:4:{i:0;s:23:"stats_stat_innerproduct";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:58:"float stats_stat_innerproduct ( array $arr1, array $arr2 )";i:3;s:0:"";}
a:4:{i:0;s:23:"stats_stat_noncentral_t";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:83:"float stats_stat_noncentral_t ( float $par1, float $par2, float $par3, int $which )";i:3;s:0:"";}
a:4:{i:0;s:19:"stats_stat_paired_t";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:54:"float stats_stat_paired_t ( array $arr1, array $arr2 )";i:3;s:0:"";}
a:4:{i:0;s:21:"stats_stat_percentile";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:55:"float stats_stat_percentile ( float $df, float $xnonc )";i:3;s:0:"";}
a:4:{i:0;s:19:"stats_stat_powersum";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:54:"float stats_stat_powersum ( array $arr, float $power )";i:3;s:0:"";}
a:4:{i:0;s:14:"stats_variance";i:1;s:21:"(PECL stats >= 1.0.0)";i:2;s:59:"float stats_variance ( array $a [, bool $sample = false ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_acos";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_acos ( array $real )";i:3;s:76:"Calculates the arc cosine for each value in and returns the resulting array.";}
a:4:{i:0;s:9:"trader_ad";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:72:"array trader_ad ( array $high, array $low, array $close, array $volume )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_add";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:47:"array trader_add ( array $real0, array $real1 )";i:3;s:70:"Calculates the vector addition of to and returns the resulting vector.";}
a:4:{i:0;s:12:"trader_adosc";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:124:"array trader_adosc ( array $high, array $low, array $close, array $volume [, integer $fastPeriod [, integer $slowPeriod ]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_adx";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_adx ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_adxr";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:84:"array trader_adxr ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_apo";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:101:"array trader_apo ( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType ]]] )";i:3;s:0:"";}
a:4:{i:0;s:12:"trader_aroon";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:71:"array trader_aroon ( array $high, array $low [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_aroonosc";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:74:"array trader_aroonosc ( array $high, array $low [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_asin";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_asin ( array $real )";i:3;s:74:"Calculates the arc sine for each value in and returns the resulting array.";}
a:4:{i:0;s:11:"trader_atan";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_atan ( array $real )";i:3;s:77:"Calculates the arc tangent for each value in and returns the resulting array.";}
a:4:{i:0;s:10:"trader_atr";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_atr ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_avgprice";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:76:"array trader_avgprice ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:13:"trader_bbands";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:118:"array trader_bbands ( array $real [, integer $timePeriod [, float $nbDevUp [, float $nbDevDn [, integer $mAType ]]]] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_beta";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:73:"array trader_beta ( array $real0, array $real1 [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_bop";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:71:"array trader_bop ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_cci";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_cci ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_cdl2crows";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:77:"array trader_cdl2crows ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdl3blackcrows";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:82:"array trader_cdl3blackcrows ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:17:"trader_cdl3inside";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:78:"array trader_cdl3inside ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdl3linestrike";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:82:"array trader_cdl3linestrike ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_cdl3outside";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:79:"array trader_cdl3outside ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:23:"trader_cdl3starsinsouth";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:84:"array trader_cdl3starsinsouth ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:24:"trader_cdl3whitesoldiers";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:85:"array trader_cdl3whitesoldiers ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:23:"trader_cdlabandonedbaby";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:108:"array trader_cdlabandonedbaby ( array $open, array $high, array $low, array $close [, float $penetration ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"trader_cdladvanceblock";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_cdladvanceblock ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_cdlbelthold";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:79:"array trader_cdlbelthold ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:19:"trader_cdlbreakaway";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:80:"array trader_cdlbreakaway ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:25:"trader_cdlclosingmarubozu";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:86:"array trader_cdlclosingmarubozu ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:26:"trader_cdlconcealbabyswall";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:87:"array trader_cdlconcealbabyswall ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:23:"trader_cdlcounterattack";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:84:"array trader_cdlcounterattack ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:24:"trader_cdldarkcloudcover";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:109:"array trader_cdldarkcloudcover ( array $open, array $high, array $low, array $close [, float $penetration ] )";i:3;s:0:"";}
a:4:{i:0;s:14:"trader_cdldoji";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:75:"array trader_cdldoji ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_cdldojistar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:79:"array trader_cdldojistar ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:23:"trader_cdldragonflydoji";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:84:"array trader_cdldragonflydoji ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:19:"trader_cdlengulfing";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:80:"array trader_cdlengulfing ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:25:"trader_cdleveningdojistar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:110:"array trader_cdleveningdojistar ( array $open, array $high, array $low, array $close [, float $penetration ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdleveningstar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:106:"array trader_cdleveningstar ( array $open, array $high, array $low, array $close [, float $penetration ] )";i:3;s:0:"";}
a:4:{i:0;s:26:"trader_cdlgapsidesidewhite";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:87:"array trader_cdlgapsidesidewhite ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:24:"trader_cdlgravestonedoji";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:85:"array trader_cdlgravestonedoji ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_cdlhammer";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:77:"array trader_cdlhammer ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:20:"trader_cdlhangingman";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:81:"array trader_cdlhangingman ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_cdlharami";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:77:"array trader_cdlharami ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdlharamicross";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:82:"array trader_cdlharamicross ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_cdlhighwave";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:79:"array trader_cdlhighwave ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:17:"trader_cdlhikkake";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:78:"array trader_cdlhikkake ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:20:"trader_cdlhikkakemod";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:81:"array trader_cdlhikkakemod ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:22:"trader_cdlhomingpigeon";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_cdlhomingpigeon ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:25:"trader_cdlidentical3crows";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:86:"array trader_cdlidentical3crows ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_cdlinneck";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:77:"array trader_cdlinneck ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:24:"trader_cdlinvertedhammer";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:85:"array trader_cdlinvertedhammer ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:17:"trader_cdlkicking";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:78:"array trader_cdlkicking ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:25:"trader_cdlkickingbylength";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:86:"array trader_cdlkickingbylength ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:22:"trader_cdlladderbottom";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_cdlladderbottom ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:24:"trader_cdllongleggeddoji";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:85:"array trader_cdllongleggeddoji ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_cdllongline";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:79:"array trader_cdllongline ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_cdlmarubozu";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:79:"array trader_cdlmarubozu ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdlmatchinglow";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:82:"array trader_cdlmatchinglow ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:17:"trader_cdlmathold";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:102:"array trader_cdlmathold ( array $open, array $high, array $low, array $close [, float $penetration ] )";i:3;s:0:"";}
a:4:{i:0;s:25:"trader_cdlmorningdojistar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:110:"array trader_cdlmorningdojistar ( array $open, array $high, array $low, array $close [, float $penetration ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdlmorningstar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:106:"array trader_cdlmorningstar ( array $open, array $high, array $low, array $close [, float $penetration ] )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_cdlonneck";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:77:"array trader_cdlonneck ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_cdlpiercing";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:79:"array trader_cdlpiercing ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdlrickshawman";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:82:"array trader_cdlrickshawman ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:26:"trader_cdlrisefall3methods";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:87:"array trader_cdlrisefall3methods ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:25:"trader_cdlseparatinglines";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:86:"array trader_cdlseparatinglines ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:22:"trader_cdlshootingstar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_cdlshootingstar ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:19:"trader_cdlshortline";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:80:"array trader_cdlshortline ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:21:"trader_cdlspinningtop";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:82:"array trader_cdlspinningtop ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:24:"trader_cdlstalledpattern";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:85:"array trader_cdlstalledpattern ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:23:"trader_cdlsticksandwich";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:84:"array trader_cdlsticksandwich ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_cdltakuri";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:77:"array trader_cdltakuri ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:19:"trader_cdltasukigap";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:80:"array trader_cdltasukigap ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:19:"trader_cdlthrusting";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:80:"array trader_cdlthrusting ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:17:"trader_cdltristar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:78:"array trader_cdltristar ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:22:"trader_cdlunique3river";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:83:"array trader_cdlunique3river ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:25:"trader_cdlupsidegap2crows";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:86:"array trader_cdlupsidegap2crows ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:26:"trader_cdlxsidegap3methods";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:87:"array trader_cdlxsidegap3methods ( array $open, array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_ceil";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_ceil ( array $real )";i:3;s:85:"Calculates the next higest integer for each value in and returns the resulting array.";}
a:4:{i:0;s:10:"trader_cmo";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_cmo ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"trader_correl";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:75:"array trader_correl ( array $real0, array $real1 [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_cos";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:32:"array trader_cos ( array $real )";i:3;s:72:"Calculates the cosine for each value in and returns the resulting array.";}
a:4:{i:0;s:11:"trader_cosh";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_cosh ( array $real )";i:3;s:83:"Calculates the hyperbolic cosine for each value in and returns the resulting array.";}
a:4:{i:0;s:11:"trader_dema";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:58:"array trader_dema ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_div";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:47:"array trader_div ( array $real0, array $real1 )";i:3;s:88:"Divides each value from by the corresponding value from and returns the resulting array.";}
a:4:{i:0;s:9:"trader_dx";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:82:"array trader_dx ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_ema";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_ema ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:12:"trader_errno";i:1;s:22:"(PECL trader >= 0.3.0)";i:2;s:29:"integer trader_errno ( void )";i:3;s:37:"Get error code of the last operation.";}
a:4:{i:0;s:10:"trader_exp";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:32:"array trader_exp ( array $real )";i:3;s:92:"Calculates raised to the power of each value in . Returns an array with the calculated data.";}
a:4:{i:0;s:12:"trader_floor";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:34:"array trader_floor ( array $real )";i:3;s:85:"Calculates the next lowest integer for each value in and returns the resulting array.";}
a:4:{i:0;s:17:"trader_get_compat";i:1;s:22:"(PECL trader >= 0.2.2)";i:2;s:34:"integer trader_get_compat ( void )";i:3;s:98:"Get compatibility mode which affects the way calculations are done by all the extension functions.";}
a:4:{i:0;s:26:"trader_get_unstable_period";i:1;s:22:"(PECL trader >= 0.2.2)";i:2;s:58:"integer trader_get_unstable_period ( integer $functionId )";i:3;s:53:"Get unstable period factor for a particular function.";}
a:4:{i:0;s:18:"trader_ht_dcperiod";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:40:"array trader_ht_dcperiod ( array $real )";i:3;s:0:"";}
a:4:{i:0;s:17:"trader_ht_dcphase";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:39:"array trader_ht_dcphase ( array $real )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_ht_phasor";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:38:"array trader_ht_phasor ( array $real )";i:3;s:0:"";}
a:4:{i:0;s:14:"trader_ht_sine";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:36:"array trader_ht_sine ( array $real )";i:3;s:0:"";}
a:4:{i:0;s:19:"trader_ht_trendline";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:41:"array trader_ht_trendline ( array $real )";i:3;s:0:"";}
a:4:{i:0;s:19:"trader_ht_trendmode";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:41:"array trader_ht_trendmode ( array $real )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_kama";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:58:"array trader_kama ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"trader_linearreg_angle";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:69:"array trader_linearreg_angle ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:26:"trader_linearreg_intercept";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:73:"array trader_linearreg_intercept ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"trader_linearreg_slope";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:69:"array trader_linearreg_slope ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:16:"trader_linearreg";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:63:"array trader_linearreg ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:9:"trader_ln";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:31:"array trader_ln ( array $real )";i:3;s:83:"Calculates the natural logarithm for each value in and returns the resulting array.";}
a:4:{i:0;s:12:"trader_log10";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:34:"array trader_log10 ( array $real )";i:3;s:83:"Calculates the base-10 logarithm for each value in and returns the resulting array.";}
a:4:{i:0;s:9:"trader_ma";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:76:"array trader_ma ( array $real [, integer $timePeriod [, integer $mAType ]] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_macd";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:108:"array trader_macd ( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $signalPeriod ]]] )";i:3;s:0:"";}
a:4:{i:0;s:14:"trader_macdext";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:185:"array trader_macdext ( array $real [, integer $fastPeriod [, integer $fastMAType [, integer $slowPeriod [, integer $slowMAType [, integer $signalPeriod [, integer $signalMAType ]]]]]] )";i:3;s:0:"";}
a:4:{i:0;s:14:"trader_macdfix";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:63:"array trader_macdfix ( array $real [, integer $signalPeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_mama";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:76:"array trader_mama ( array $real [, float $fastLimit [, float $slowLimit ]] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_mavp";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:116:"array trader_mavp ( array $real, array $periods [, integer $minPeriod [, integer $maxPeriod [, integer $mAType ]]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_max";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_max ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_maxindex";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:62:"array trader_maxindex ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_medprice";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:49:"array trader_medprice ( array $high, array $low )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_mfi";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:98:"array trader_mfi ( array $high, array $low, array $close, array $volume [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_midpoint";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:62:"array trader_midpoint ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_midprice";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:74:"array trader_midprice ( array $high, array $low [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_min";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_min ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_minindex";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:62:"array trader_minindex ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"trader_minmax";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:60:"array trader_minmax ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"trader_minmaxindex";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:65:"array trader_minmaxindex ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_minus_di";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:88:"array trader_minus_di ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_minus_dm";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:74:"array trader_minus_dm ( array $high, array $low [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_mom";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_mom ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_mult";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:48:"array trader_mult ( array $real0, array $real1 )";i:3;s:75:"Calculates the vector dot product of with and returns the resulting vector.";}
a:4:{i:0;s:11:"trader_natr";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:84:"array trader_natr ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_obv";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:47:"array trader_obv ( array $real, array $volume )";i:3;s:0:"";}
a:4:{i:0;s:14:"trader_plus_di";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:87:"array trader_plus_di ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:14:"trader_plus_dm";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:73:"array trader_plus_dm ( array $high, array $low [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_ppo";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:101:"array trader_ppo ( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType ]]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_roc";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_roc ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_rocp";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:58:"array trader_rocp ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:14:"trader_rocr100";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:61:"array trader_rocr100 ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_rocr";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:58:"array trader_rocr ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_rsi";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_rsi ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_sar";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:88:"array trader_sar ( array $high, array $low [, float $acceleration [, float $maximum ]] )";i:3;s:0:"";}
a:4:{i:0;s:13:"trader_sarext";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:282:"array trader_sarext ( array $high, array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort ]]]]]]]] )";i:3;s:0:"";}
a:4:{i:0;s:17:"trader_set_compat";i:1;s:22:"(PECL trader >= 0.2.2)";i:2;s:44:"void trader_set_compat ( integer $compatId )";i:3;s:102:"Set compatibility mode which will affect the way calculations are done by all the extension functions.";}
a:4:{i:0;s:26:"trader_set_unstable_period";i:1;s:22:"(PECL trader >= 0.2.2)";i:2;s:76:"void trader_set_unstable_period ( integer $functionId, integer $timePeriod )";i:3;s:158:"Influences unstable period factor for functions, which are sensible to it. More information about unstable periods can be found on the API documentation page.";}
a:4:{i:0;s:10:"trader_sin";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:32:"array trader_sin ( array $real )";i:3;s:70:"Calculates the sine for each value in and returns the resulting array.";}
a:4:{i:0;s:11:"trader_sinh";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_sinh ( array $real )";i:3;s:81:"Calculates the hyperbolic sine for each value in and returns the resulting array.";}
a:4:{i:0;s:10:"trader_sma";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_sma ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_sqrt";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_sqrt ( array $real )";i:3;s:76:"Calculates the square root of each value in and returns the resulting array.";}
a:4:{i:0;s:13:"trader_stddev";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:77:"array trader_stddev ( array $real [, integer $timePeriod [, float $nbDev ]] )";i:3;s:0:"";}
a:4:{i:0;s:12:"trader_stoch";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:191:"array trader_stoch ( array $high, array $low, array $close [, integer $fastK_Period [, integer $slowK_Period [, integer $slowK_MAType [, integer $slowD_Period [, integer $slowD_MAType ]]]]] )";i:3;s:0:"";}
a:4:{i:0;s:13:"trader_stochf";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:140:"array trader_stochf ( array $high, array $low, array $close [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType ]]] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_stochrsi";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:140:"array trader_stochrsi ( array $real [, integer $timePeriod [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType ]]]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_sub";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:47:"array trader_sub ( array $real0, array $real1 )";i:3;s:75:"Calculates the vector subtraction of from and returns the resulting vector.";}
a:4:{i:0;s:10:"trader_sum";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_sum ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:9:"trader_t3";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:75:"array trader_t3 ( array $real [, integer $timePeriod [, float $vFactor ]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_tan";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:32:"array trader_tan ( array $real )";i:3;s:73:"Calculates the tangent for each value in and returns the resulting array.";}
a:4:{i:0;s:11:"trader_tanh";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:33:"array trader_tanh ( array $real )";i:3;s:84:"Calculates the hyperbolic tangent for each value in and returns the resulting array.";}
a:4:{i:0;s:11:"trader_tema";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:58:"array trader_tema ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"trader_trange";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:61:"array trader_trange ( array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:12:"trader_trima";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:59:"array trader_trima ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:11:"trader_trix";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:58:"array trader_trix ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_tsf";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_tsf ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_typprice";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:63:"array trader_typprice ( array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:13:"trader_ultosc";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:137:"array trader_ultosc ( array $high, array $low, array $close [, integer $timePeriod1 [, integer $timePeriod2 [, integer $timePeriod3 ]]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_var";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:74:"array trader_var ( array $real [, integer $timePeriod [, float $nbDev ]] )";i:3;s:0:"";}
a:4:{i:0;s:15:"trader_wclprice";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:63:"array trader_wclprice ( array $high, array $low, array $close )";i:3;s:0:"";}
a:4:{i:0;s:12:"trader_willr";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:85:"array trader_willr ( array $high, array $low, array $close [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:10:"trader_wma";i:1;s:22:"(PECL trader >= 0.2.0)";i:2;s:57:"array trader_wma ( array $real [, integer $timePeriod ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"fdf_add_doc_javascript";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:96:"bool fdf_add_doc_javascript ( resource $fdf_document, string $script_name, string $script_code )";i:3;s:123:"Adds a script to the FDF, which Acrobat then adds to the doc-level scripts of a document, once the FDF is imported into it.";}
a:4:{i:0;s:16:"fdf_add_template";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:111:"bool fdf_add_template ( resource $fdf_document, int $newpage, string $filename, string $template, int $rename )";i:3;s:0:"";}
a:4:{i:0;s:9:"fdf_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"void fdf_close ( resource $fdf_document )";i:3;s:24:"Closes the FDF document.";}
a:4:{i:0;s:10:"fdf_create";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"resource fdf_create ( void )";i:3;s:27:"Creates a new FDF document.";}
a:4:{i:0;s:15:"fdf_enum_values";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:88:"bool fdf_enum_values ( resource $fdf_document, callable $function [, mixed $userdata ] )";i:3;s:0:"";}
a:4:{i:0;s:9:"fdf_errno";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:22:"int fdf_errno ( void )";i:3;s:54:"Gets the error code set by the last FDF function call.";}
a:4:{i:0;s:9:"fdf_error";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:44:"string fdf_error ([ int $error_code = -1 ] )";i:3;s:60:"Gets a textual description for the FDF error code given in .";}
a:4:{i:0;s:10:"fdf_get_ap";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:86:"bool fdf_get_ap ( resource $fdf_document, string $field, int $face, string $filename )";i:3;s:81:"Gets the appearance of a (i.e. the value of the /AP key) and stores it in a file.";}
a:4:{i:0;s:18:"fdf_get_attachment";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:88:"array fdf_get_attachment ( resource $fdf_document, string $fieldname, string $savepath )";i:3;s:85:"Extracts a file uploaded by means of the "file selection" field and stores it under .";}
a:4:{i:0;s:16:"fdf_get_encoding";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:50:"string fdf_get_encoding ( resource $fdf_document )";i:3;s:26:"Gets the value of the key.";}
a:4:{i:0;s:12:"fdf_get_file";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string fdf_get_file ( resource $fdf_document )";i:3;s:26:"Gets the value of the key.";}
a:4:{i:0;s:13:"fdf_get_flags";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:80:"int fdf_get_flags ( resource $fdf_document, string $fieldname, int $whichflags )";i:3;s:0:"";}
a:4:{i:0;s:11:"fdf_get_opt";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:86:"mixed fdf_get_opt ( resource $fdf_document, string $fieldname [, int $element = -1 ] )";i:3;s:0:"";}
a:4:{i:0;s:14:"fdf_get_status";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"string fdf_get_status ( resource $fdf_document )";i:3;s:26:"Gets the value of the key.";}
a:4:{i:0;s:13:"fdf_get_value";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:86:"mixed fdf_get_value ( resource $fdf_document, string $fieldname [, int $which = -1 ] )";i:3;s:39:"Gets the value for the requested field.";}
a:4:{i:0;s:15:"fdf_get_version";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:52:"string fdf_get_version ([ resource $fdf_document ] )";i:3;s:106:"Return the FDF version for the given document, or the toolkit API version number if no parameter is given.";}
a:4:{i:0;s:10:"fdf_header";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:24:"void fdf_header ( void )";i:3;s:95:"This is a convenience function to set appropriate HTTP headers for FDF output. It sets the to .";}
a:4:{i:0;s:19:"fdf_next_field_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] )";i:3;s:95:"Gets the name of the field after the given field. This name can be used with several functions.";}
a:4:{i:0;s:15:"fdf_open_string";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:45:"resource fdf_open_string ( string $fdf_data )";i:3;s:30:"Reads form data from a string.";}
a:4:{i:0;s:8:"fdf_open";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"resource fdf_open ( string $filename )";i:3;s:28:"Opens a file with form data.";}
a:4:{i:0;s:15:"fdf_remove_item";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:77:"bool fdf_remove_item ( resource $fdf_document, string $fieldname, int $item )";i:3;s:0:"";}
a:4:{i:0;s:15:"fdf_save_string";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:49:"string fdf_save_string ( resource $fdf_document )";i:3;s:37:"Returns the FDF document as a string.";}
a:4:{i:0;s:8:"fdf_save";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"bool fdf_save ( resource $fdf_document [, string $filename ] )";i:3;s:21:"Saves a FDF document.";}
a:4:{i:0;s:10:"fdf_set_ap";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:109:"bool fdf_set_ap ( resource $fdf_document, string $field_name, int $face, string $filename, int $page_number )";i:3;s:59:"Sets the appearance of a field (i.e. the value of the key).";}
a:4:{i:0;s:16:"fdf_set_encoding";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:66:"bool fdf_set_encoding ( resource $fdf_document, string $encoding )";i:3;s:49:"Sets the character encoding for the FDF document.";}
a:4:{i:0;s:12:"fdf_set_file";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"bool fdf_set_file ( resource $fdf_document, string $url [, string $target_frame ] )";i:3;s:97:"Selects a different PDF document to display the form results in then the form it originated from.";}
a:4:{i:0;s:13:"fdf_set_flags";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:96:"bool fdf_set_flags ( resource $fdf_document, string $fieldname, int $whichFlags, int $newFlags )";i:3;s:38:"Sets certain flags of the given field.";}
a:4:{i:0;s:25:"fdf_set_javascript_action";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:106:"bool fdf_set_javascript_action ( resource $fdf_document, string $fieldname, int $trigger, string $script )";i:3;s:45:"Sets a javascript action for the given field.";}
a:4:{i:0;s:28:"fdf_set_on_import_javascript";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:102:"bool fdf_set_on_import_javascript ( resource $fdf_document, string $script, bool $before_data_import )";i:3;s:0:"";}
a:4:{i:0;s:11:"fdf_set_opt";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:104:"bool fdf_set_opt ( resource $fdf_document, string $fieldname, int $element, string $str1, string $str2 )";i:3;s:32:"Sets options of the given field.";}
a:4:{i:0;s:14:"fdf_set_status";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"bool fdf_set_status ( resource $fdf_document, string $status )";i:3;s:116:"Sets the value of the key. When a client receives a FDF with a status set it will present the value in an alert box.";}
a:4:{i:0;s:26:"fdf_set_submit_form_action";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:119:"bool fdf_set_submit_form_action ( resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags )";i:3;s:46:"Sets a submit form action for the given field.";}
a:4:{i:0;s:20:"fdf_set_target_frame";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:72:"bool fdf_set_target_frame ( resource $fdf_document, string $frame_name )";i:3;s:62:"Sets the target frame to display a result PDF defined with in.";}
a:4:{i:0;s:13:"fdf_set_value";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:95:"bool fdf_set_value ( resource $fdf_document, string $fieldname, mixed $value [, int $isName ] )";i:3;s:29:"Sets the for the given field.";}
a:4:{i:0;s:15:"fdf_set_version";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:64:"bool fdf_set_version ( resource $fdf_document, string $version )";i:3;s:36:"Sets the FDF for the given document.";}
a:4:{i:0;s:19:"gnupg_adddecryptkey";i:1;s:19:"(PECL gnupg >= 0.5)";i:2;s:90:"bool gnupg_adddecryptkey ( resource $identifier, string $fingerprint, string $passphrase )";i:3;s:0:"";}
a:4:{i:0;s:19:"gnupg_addencryptkey";i:1;s:19:"(PECL gnupg >= 0.5)";i:2;s:70:"bool gnupg_addencryptkey ( resource $identifier, string $fingerprint )";i:3;s:0:"";}
a:4:{i:0;s:16:"gnupg_addsignkey";i:1;s:19:"(PECL gnupg >= 0.5)";i:2;s:91:"bool gnupg_addsignkey ( resource $identifier, string $fingerprint [, string $passphrase ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"gnupg_cleardecryptkeys";i:1;s:19:"(PECL gnupg >= 0.5)";i:2;s:52:"bool gnupg_cleardecryptkeys ( resource $identifier )";i:3;s:0:"";}
a:4:{i:0;s:22:"gnupg_clearencryptkeys";i:1;s:19:"(PECL gnupg >= 0.5)";i:2;s:52:"bool gnupg_clearencryptkeys ( resource $identifier )";i:3;s:0:"";}
a:4:{i:0;s:19:"gnupg_clearsignkeys";i:1;s:19:"(PECL gnupg >= 0.5)";i:2;s:49:"bool gnupg_clearsignkeys ( resource $identifier )";i:3;s:0:"";}
a:4:{i:0;s:13:"gnupg_decrypt";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:59:"string gnupg_decrypt ( resource $identifier, string $text )";i:3;s:66:"Decrypts the given text with the keys, which were set with before.";}
a:4:{i:0;s:19:"gnupg_decryptverify";i:1;s:19:"(PECL gnupg >= 0.2)";i:2;s:84:"array gnupg_decryptverify ( resource $identifier, string $text, string &$plaintext )";i:3;s:79:"Decrypts and verifies a given text and returns information about the signature.";}
a:4:{i:0;s:13:"gnupg_encrypt";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:64:"string gnupg_encrypt ( resource $identifier, string $plaintext )";i:3;s:92:"Encrypts the given with the keys, which were set with before and returns the encrypted text.";}
a:4:{i:0;s:17:"gnupg_encryptsign";i:1;s:19:"(PECL gnupg >= 0.2)";i:2;s:68:"string gnupg_encryptsign ( resource $identifier, string $plaintext )";i:3;s:117:"Encrypts and signs the given with the keys, which were set with and before and returns the encrypted and signed text.";}
a:4:{i:0;s:12:"gnupg_export";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:65:"string gnupg_export ( resource $identifier, string $fingerprint )";i:3;s:17:"Exports the key .";}
a:4:{i:0;s:14:"gnupg_geterror";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:46:"string gnupg_geterror ( resource $identifier )";i:3;s:0:"";}
a:4:{i:0;s:17:"gnupg_getprotocol";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:46:"int gnupg_getprotocol ( resource $identifier )";i:3;s:0:"";}
a:4:{i:0;s:12:"gnupg_import";i:1;s:19:"(PECL gnupg >= 0.3)";i:2;s:60:"array gnupg_import ( resource $identifier, string $keydata )";i:3;s:78:"Imports the key and returns an array with information about the importprocess.";}
a:4:{i:0;s:10:"gnupg_init";i:1;s:19:"(PECL gnupg >= 0.4)";i:2;s:28:"resource gnupg_init ( void )";i:3;s:0:"";}
a:4:{i:0;s:13:"gnupg_keyinfo";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:61:"array gnupg_keyinfo ( resource $identifier, string $pattern )";i:3;s:0:"";}
a:4:{i:0;s:14:"gnupg_setarmor";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:56:"bool gnupg_setarmor ( resource $identifier, int $armor )";i:3;s:26:"Toggle the armored output.";}
a:4:{i:0;s:18:"gnupg_seterrormode";i:1;s:19:"(PECL gnupg >= 0.6)";i:2;s:64:"void gnupg_seterrormode ( resource $identifier, int $errormode )";i:3;s:19:"Sets the mode for .";}
a:4:{i:0;s:17:"gnupg_setsignmode";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:62:"bool gnupg_setsignmode ( resource $identifier, int $signmode )";i:3;s:26:"Sets the mode for signing.";}
a:4:{i:0;s:10:"gnupg_sign";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:61:"string gnupg_sign ( resource $identifier, string $plaintext )";i:3;s:136:"Signs the given with the keys, which were set with before and returns the signed text or the signature, depending on what was set with .";}
a:4:{i:0;s:12:"gnupg_verify";i:1;s:19:"(PECL gnupg >= 0.1)";i:2;s:107:"array gnupg_verify ( resource $identifier, string $signed_text, string $signature [, string &$plaintext ] )";i:3;s:63:"Verifies the given and returns information about the signature.";}
a:4:{i:0;s:16:"HaruDoc::addPage";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:32:"object HaruDoc::addPage ( void )";i:3;s:32:"Adds a new page to the document.";}
a:4:{i:0;s:21:"HaruDoc::addPageLabel";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:99:"bool HaruDoc::addPageLabel ( int $first_page, int $style, int $first_num [, string $prefix = "" ] )";i:3;s:57:"Set the numbering style for the specified range of pages.";}
a:4:{i:0;s:20:"HaruDoc::__construct";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:29:"HaruDoc::__construct ( void )";i:3;s:32:"Constructs new HaruDoc instance.";}
a:4:{i:0;s:22:"HaruDoc::createOutline";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:95:"object HaruDoc::createOutline ( string $title [, object $parent_outline [, object $encoder ]] )";i:3;s:18:"Create a instance.";}
a:4:{i:0;s:26:"HaruDoc::getCurrentEncoder";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:42:"object HaruDoc::getCurrentEncoder ( void )";i:3;s:39:"Get the currently used in the document.";}
a:4:{i:0;s:23:"HaruDoc::getCurrentPage";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:39:"object HaruDoc::getCurrentPage ( void )";i:3;s:33:"Get current page of the document.";}
a:4:{i:0;s:19:"HaruDoc::getEncoder";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:47:"object HaruDoc::getEncoder ( string $encoding )";i:3;s:44:"Get the instance for the specified encoding.";}
a:4:{i:0;s:16:"HaruDoc::getFont";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:66:"object HaruDoc::getFont ( string $fontname [, string $encoding ] )";i:3;s:15:"Get a instance.";}
a:4:{i:0;s:20:"HaruDoc::getInfoAttr";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:41:"string HaruDoc::getInfoAttr ( int $type )";i:3;s:58:"Get the current value of the specified document attribute.";}
a:4:{i:0;s:22:"HaruDoc::getPageLayout";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:35:"int HaruDoc::getPageLayout ( void )";i:3;s:65:"Get the current page layout. See for the list of possible values.";}
a:4:{i:0;s:20:"HaruDoc::getPageMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"int HaruDoc::getPageMode ( void )";i:3;s:63:"Get the current page mode. See for the list of possible values.";}
a:4:{i:0;s:22:"HaruDoc::getStreamSize";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:35:"int HaruDoc::getStreamSize ( void )";i:3;s:37:"Get the size of the temporary stream.";}
a:4:{i:0;s:19:"HaruDoc::insertPage";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"object HaruDoc::insertPage ( object $page )";i:3;s:62:"Creates a new page and inserts just before the specified page.";}
a:4:{i:0;s:17:"HaruDoc::loadJPEG";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"object HaruDoc::loadJPEG ( string $filename )";i:3;s:31:"Loads the specified JPEG image.";}
a:4:{i:0;s:16:"HaruDoc::loadPNG";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:72:"object HaruDoc::loadPNG ( string $filename [, bool $deferred = false ] )";i:3;s:18:"Loads a PNG image.";}
a:4:{i:0;s:16:"HaruDoc::loadRaw";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:87:"object HaruDoc::loadRaw ( string $filename, int $width, int $height, int $color_space )";i:3;s:18:"Loads a RAW image.";}
a:4:{i:0;s:16:"HaruDoc::loadTTC";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:81:"string HaruDoc::loadTTC ( string $fontfile, int $index [, bool $embed = false ] )";i:3;s:81:"Loads the TrueType font with the specified index from a TrueType collection file.";}
a:4:{i:0;s:16:"HaruDoc::loadTTF";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:69:"string HaruDoc::loadTTF ( string $fontfile [, bool $embed = false ] )";i:3;s:75:"Loads the given TTF file and (optionally) embed its data into the document.";}
a:4:{i:0;s:18:"HaruDoc::loadType1";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:66:"string HaruDoc::loadType1 ( string $afmfile [, string $pfmfile ] )";i:3;s:74:"Loads Type1 font from the given file and registers it in the PDF document.";}
a:4:{i:0;s:15:"HaruDoc::output";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:29:"bool HaruDoc::output ( void )";i:3;s:46:"Writes the document data into standard output.";}
a:4:{i:0;s:23:"HaruDoc::readFromStream";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"string HaruDoc::readFromStream ( int $bytes )";i:3;s:36:"Read data from the temporary stream.";}
a:4:{i:0;s:19:"HaruDoc::resetError";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"bool HaruDoc::resetError ( void )";i:3;s:260:"Once an error code is set, most of the operations, including I/O processing functions cannot be performed. In case if you want to continue after the cause of the error has been fixed, you have to invoke this function in order to reset the document error state.";}
a:4:{i:0;s:20:"HaruDoc::resetStream";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:34:"bool HaruDoc::resetStream ( void )";i:3;s:45:"Rewinds the temporary stream of the document.";}
a:4:{i:0;s:13:"HaruDoc::save";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:35:"bool HaruDoc::save ( string $file )";i:3;s:43:"Saves the document into the specified file.";}
a:4:{i:0;s:21:"HaruDoc::saveToStream";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:35:"bool HaruDoc::saveToStream ( void )";i:3;s:48:"Saves the document data into a temporary stream.";}
a:4:{i:0;s:27:"HaruDoc::setCompressionMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:46:"bool HaruDoc::setCompressionMode ( int $mode )";i:3;s:131:"Defines compression mode for the document. In case when libharu was compiled without Zlib support this function will always throw .";}
a:4:{i:0;s:26:"HaruDoc::setCurrentEncoder";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:52:"bool HaruDoc::setCurrentEncoder ( string $encoding )";i:3;s:51:"Defines the encoder currently used in the document.";}
a:4:{i:0;s:26:"HaruDoc::setEncryptionMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:67:"bool HaruDoc::setEncryptionMode ( int $mode [, int $key_len = 5 ] )";i:3;s:104:"Defines encryption mode for the document. The encryption mode cannot be set before setting the password.";}
a:4:{i:0;s:20:"HaruDoc::setInfoAttr";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:53:"bool HaruDoc::setInfoAttr ( int $type, string $info )";i:3;s:69:"Defines an info attribute. Uses the current encoding of the document.";}
a:4:{i:0;s:24:"HaruDoc::setInfoDateAttr";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:149:"bool HaruDoc::setInfoDateAttr ( int $type, int $year, int $month, int $day, int $hour, int $min, int $sec, string $ind, int $off_hour, int $off_min )";i:3;s:50:"Sets the datetime info attributes of the document.";}
a:4:{i:0;s:22:"HaruDoc::setOpenAction";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:51:"bool HaruDoc::setOpenAction ( object $destination )";i:3;s:63:"Defines which page should be shown when the document is opened.";}
a:4:{i:0;s:22:"HaruDoc::setPageLayout";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"bool HaruDoc::setPageLayout ( int $layout )";i:3;s:38:"Defines how pages should be displayed.";}
a:4:{i:0;s:20:"HaruDoc::setPageMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:39:"bool HaruDoc::setPageMode ( int $mode )";i:3;s:45:"Defines how the document should be displayed.";}
a:4:{i:0;s:30:"HaruDoc::setPagesConfiguration";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:59:"bool HaruDoc::setPagesConfiguration ( int $page_per_pages )";i:3;s:452:"By default the document has one pages object as a root for all pages. All page objects are create as branches of this object. One pages object can contain only 8191, therefore the maximum number of pages per document is 8191. But you can change that fact by setting parameter, so that the root pages object contains 8191 more pages (not page) objects, which in turn contain 8191 pages each. So the maximum number of pages in the document becomes 8191*.";}
a:4:{i:0;s:20:"HaruDoc::setPassword";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:75:"bool HaruDoc::setPassword ( string $owner_password, string $user_password )";i:3;s:111:"Defines owner and user passwords for the document. Setting the passwords makes the document contents encrypted.";}
a:4:{i:0;s:22:"HaruDoc::setPermission";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:47:"bool HaruDoc::setPermission ( int $permission )";i:3;s:37:"Defines permissions for the document.";}
a:4:{i:0;s:24:"HaruDoc::useCNSEncodings";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"bool HaruDoc::useCNSEncodings ( void )";i:3;s:37:"Enables Chinese simplified encodings.";}
a:4:{i:0;s:20:"HaruDoc::useCNSFonts";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:34:"bool HaruDoc::useCNSFonts ( void )";i:3;s:41:"Enables builtin Chinese simplified fonts.";}
a:4:{i:0;s:24:"HaruDoc::useCNTEncodings";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"bool HaruDoc::useCNTEncodings ( void )";i:3;s:38:"Enables Chinese traditional encodings.";}
a:4:{i:0;s:20:"HaruDoc::useCNTFonts";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:34:"bool HaruDoc::useCNTFonts ( void )";i:3;s:42:"Enables builtin Chinese traditional fonts.";}
a:4:{i:0;s:23:"HaruDoc::useJPEncodings";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"bool HaruDoc::useJPEncodings ( void )";i:3;s:27:"Enables Japanese encodings.";}
a:4:{i:0;s:19:"HaruDoc::useJPFonts";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"bool HaruDoc::useJPFonts ( void )";i:3;s:31:"Enables builtin Japanese fonts.";}
a:4:{i:0;s:23:"HaruDoc::useKREncodings";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"bool HaruDoc::useKREncodings ( void )";i:3;s:25:"Enables Korean encodings.";}
a:4:{i:0;s:19:"HaruDoc::useKRFonts";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"bool HaruDoc::useKRFonts ( void )";i:3;s:29:"Enables builtin Korean fonts.";}
a:4:{i:0;s:13:"HaruPage::arc";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:79:"bool HaruPage::arc ( float $x, float $y, float $ray, float $ang1, float $ang2 )";i:3;s:35:"Appends an arc to the current path.";}
a:4:{i:0;s:19:"HaruPage::beginText";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"bool HaruPage::beginText ( void )";i:3;s:67:"Begins new text object and sets the current text position to (0,0).";}
a:4:{i:0;s:16:"HaruPage::circle";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:56:"bool HaruPage::circle ( float $x, float $y, float $ray )";i:3;s:37:"Appends a circle to the current path.";}
a:4:{i:0;s:19:"HaruPage::closePath";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"bool HaruPage::closePath ( void )";i:3;s:78:"Appends a straight line from the current point to the start point of the path.";}
a:4:{i:0;s:16:"HaruPage::concat";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:84:"bool HaruPage::concat ( float $a, float $b, float $c, float $d, float $x, float $y )";i:3;s:80:"Concatenates current transformation matrix of the page and the specified matrix.";}
a:4:{i:0;s:27:"HaruPage::createDestination";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"object HaruPage::createDestination ( void )";i:3;s:22:"Create a new instance.";}
a:4:{i:0;s:30:"HaruPage::createLinkAnnotation";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:79:"object HaruPage::createLinkAnnotation ( array $rectangle, object $destination )";i:3;s:23:"Creates a new instance.";}
a:4:{i:0;s:30:"HaruPage::createTextAnnotation";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:93:"object HaruPage::createTextAnnotation ( array $rectangle, string $text [, object $encoder ] )";i:3;s:23:"Creates a new instance.";}
a:4:{i:0;s:29:"HaruPage::createURLAnnotation";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:70:"object HaruPage::createURLAnnotation ( array $rectangle, string $url )";i:3;s:23:"Creates a new instance.";}
a:4:{i:0;s:18:"HaruPage::curveTo2";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:70:"bool HaruPage::curveTo2 ( float $x2, float $y2, float $x3, float $y3 )";i:3;s:186:"Appends a Bezier curve to the current path. The current point and the point (x2, y2) are used as the control points for the Bezier curve and current point is moved to the point (x3, y3).";}
a:4:{i:0;s:18:"HaruPage::curveTo3";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:70:"bool HaruPage::curveTo3 ( float $x1, float $y1, float $x3, float $y3 )";i:3;s:185:"Appends a Bezier curve to the current path. The point (x1, y1) and the point (x3, y3) are used as the control points for a Bezier curve and current point is moved to the point (x3, y3).";}
a:4:{i:0;s:17:"HaruPage::curveTo";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:91:"bool HaruPage::curveTo ( float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 )";i:3;s:184:"Append a Bezier curve to the current path. The point (x1, y1) and the point (x2, y2) are used as the control points for a Bezier curve and current point is moved to the point (x3, y3).";}
a:4:{i:0;s:19:"HaruPage::drawImage";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:91:"bool HaruPage::drawImage ( object $image, float $x, float $y, float $width, float $height )";i:3;s:23:"Show image at the page.";}
a:4:{i:0;s:17:"HaruPage::ellipse";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:71:"bool HaruPage::ellipse ( float $x, float $y, float $xray, float $yray )";i:3;s:39:"Appends an ellipse to the current path.";}
a:4:{i:0;s:17:"HaruPage::endPath";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:31:"bool HaruPage::endPath ( void )";i:3;s:76:"Ends current path object without performing filling and painting operations.";}
a:4:{i:0;s:17:"HaruPage::endText";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:31:"bool HaruPage::endText ( void )";i:3;s:30:"Finalizes current text object.";}
a:4:{i:0;s:16:"HaruPage::eofill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:30:"bool HaruPage::eofill ( void )";i:3;s:39:"Fills current path using even-odd rule.";}
a:4:{i:0;s:22:"HaruPage::eoFillStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:59:"bool HaruPage::eoFillStroke ([ bool $close_path = false ] )";i:3;s:61:"Fills current path using even-odd rule, then paints the path.";}
a:4:{i:0;s:14:"HaruPage::fill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:28:"bool HaruPage::fill ( void )";i:3;s:53:"Fills current path using nonzero winding number rule.";}
a:4:{i:0;s:20:"HaruPage::fillStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:57:"bool HaruPage::fillStroke ([ bool $close_path = false ] )";i:3;s:75:"Fills current path using nonzero winding number rule, then paints the path.";}
a:4:{i:0;s:22:"HaruPage::getCharSpace";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"float HaruPage::getCharSpace ( void )";i:3;s:43:"Get the current value of character spacing.";}
a:4:{i:0;s:21:"HaruPage::getCMYKFill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:36:"array HaruPage::getCMYKFill ( void )";i:3;s:34:"Returns the current filling color.";}
a:4:{i:0;s:23:"HaruPage::getCMYKStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"array HaruPage::getCMYKStroke ( void )";i:3;s:31:"Get the current stroking color.";}
a:4:{i:0;s:24:"HaruPage::getCurrentFont";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:40:"object HaruPage::getCurrentFont ( void )";i:3;s:28:"Get the currently used font.";}
a:4:{i:0;s:28:"HaruPage::getCurrentFontSize";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"float HaruPage::getCurrentFontSize ( void )";i:3;s:26:"Get the current font size.";}
a:4:{i:0;s:23:"HaruPage::getCurrentPos";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"array HaruPage::getCurrentPos ( void )";i:3;s:43:"Get the current position for path painting.";}
a:4:{i:0;s:27:"HaruPage::getCurrentTextPos";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:42:"array HaruPage::getCurrentTextPos ( void )";i:3;s:43:"Get the current position for text printing.";}
a:4:{i:0;s:17:"HaruPage::getDash";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:32:"array HaruPage::getDash ( void )";i:3;s:72:"Get the current dash pattern. See for more information on dash patterns.";}
a:4:{i:0;s:30:"HaruPage::getFillingColorSpace";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"int HaruPage::getFillingColorSpace ( void )";i:3;s:36:"Get the current filling color space.";}
a:4:{i:0;s:21:"HaruPage::getFlatness";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:36:"float HaruPage::getFlatness ( void )";i:3;s:29:"Get the flatness of the page.";}
a:4:{i:0;s:18:"HaruPage::getGMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:31:"int HaruPage::getGMode ( void )";i:3;s:30:"Get the current graphics mode.";}
a:4:{i:0;s:21:"HaruPage::getGrayFill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:36:"float HaruPage::getGrayFill ( void )";i:3;s:30:"Get the current filling color.";}
a:4:{i:0;s:23:"HaruPage::getGrayStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"float HaruPage::getGrayStroke ( void )";i:3;s:31:"Get the current stroking color.";}
a:4:{i:0;s:19:"HaruPage::getHeight";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:34:"float HaruPage::getHeight ( void )";i:3;s:27:"Get the height of the page.";}
a:4:{i:0;s:30:"HaruPage::getHorizontalScaling";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"float HaruPage::getHorizontalScaling ( void )";i:3;s:48:"Get the current value of the horizontal scaling.";}
a:4:{i:0;s:20:"HaruPage::getLineCap";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"int HaruPage::getLineCap ( void )";i:3;s:31:"Get the current line cap style.";}
a:4:{i:0;s:21:"HaruPage::getLineJoin";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:34:"int HaruPage::getLineJoin ( void )";i:3;s:32:"Get the current line join style.";}
a:4:{i:0;s:22:"HaruPage::getLineWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"float HaruPage::getLineWidth ( void )";i:3;s:27:"Get the current line width.";}
a:4:{i:0;s:23:"HaruPage::getMiterLimit";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"float HaruPage::getMiterLimit ( void )";i:3;s:33:"Get the value of the miter limit.";}
a:4:{i:0;s:20:"HaruPage::getRGBFill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:35:"array HaruPage::getRGBFill ( void )";i:3;s:30:"Get the current filling color.";}
a:4:{i:0;s:22:"HaruPage::getRGBStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"array HaruPage::getRGBStroke ( void )";i:3;s:31:"Get the current stroking color.";}
a:4:{i:0;s:31:"HaruPage::getStrokingColorSpace";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:44:"int HaruPage::getStrokingColorSpace ( void )";i:3;s:37:"Get the current stroking color space.";}
a:4:{i:0;s:24:"HaruPage::getTextLeading";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:39:"float HaruPage::getTextLeading ( void )";i:3;s:38:"Get the current value of line spacing.";}
a:4:{i:0;s:23:"HaruPage::getTextMatrix";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"array HaruPage::getTextMatrix ( void )";i:3;s:55:"Get the current text transformation matrix of the page.";}
a:4:{i:0;s:30:"HaruPage::getTextRenderingMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"int HaruPage::getTextRenderingMode ( void )";i:3;s:36:"Get the current text rendering mode.";}
a:4:{i:0;s:21:"HaruPage::getTextRise";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:36:"float HaruPage::getTextRise ( void )";i:3;s:37:"Get the current value of text rising.";}
a:4:{i:0;s:22:"HaruPage::getTextWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"float HaruPage::getTextWidth ( string $text )";i:3;s:84:"Get the width of the text using current fontsize, character spacing and word spacing";}
a:4:{i:0;s:24:"HaruPage::getTransMatrix";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:39:"array HaruPage::getTransMatrix ( void )";i:3;s:50:"Get the current transformation matrix of the page.";}
a:4:{i:0;s:18:"HaruPage::getWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"float HaruPage::getWidth ( void )";i:3;s:26:"Get the width of the page.";}
a:4:{i:0;s:22:"HaruPage::getWordSpace";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"float HaruPage::getWordSpace ( void )";i:3;s:38:"Get the current value of word spacing.";}
a:4:{i:0;s:16:"HaruPage::lineTo";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:44:"bool HaruPage::lineTo ( float $x, float $y )";i:3;s:59:"Draws a line from the current point to the specified point.";}
a:4:{i:0;s:21:"HaruPage::measureText";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:84:"int HaruPage::measureText ( string $text, float $width [, bool $wordwrap = false ] )";i:3;s:78:"Get the number of characters which can be included within the specified width.";}
a:4:{i:0;s:21:"HaruPage::moveTextPos";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:80:"bool HaruPage::moveTextPos ( float $x, float $y [, bool $set_leading = false ] )";i:3;s:144:"Moves text position to the specified offset. If the start position of the current line is (x1, y1), the start of the next line is (x1 +, y1 + ).";}
a:4:{i:0;s:16:"HaruPage::moveTo";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:44:"bool HaruPage::moveTo ( float $x, float $y )";i:3;s:44:"Defines starting point for new drawing path.";}
a:4:{i:0;s:24:"HaruPage::moveToNextLine";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"bool HaruPage::moveToNextLine ( void )";i:3;s:50:"Moves text position to the start of the next line.";}
a:4:{i:0;s:19:"HaruPage::rectangle";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:76:"bool HaruPage::rectangle ( float $x, float $y, float $width, float $height )";i:3;s:48:"Appends a rectangle to the current drawing path.";}
a:4:{i:0;s:22:"HaruPage::setCharSpace";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:49:"bool HaruPage::setCharSpace ( float $char_space )";i:3;s:39:"Defines character spacing for the page.";}
a:4:{i:0;s:21:"HaruPage::setCMYKFill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:69:"bool HaruPage::setCMYKFill ( float $c, float $m, float $y, float $k )";i:3;s:35:"Defines filling color for the page.";}
a:4:{i:0;s:23:"HaruPage::setCMYKStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:71:"bool HaruPage::setCMYKStroke ( float $c, float $m, float $y, float $k )";i:3;s:36:"Defines stroking color for the page.";}
a:4:{i:0;s:17:"HaruPage::setDash";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:53:"bool HaruPage::setDash ( array $pattern, int $phase )";i:3;s:38:"Defines the dash pattern for the page.";}
a:4:{i:0;s:21:"HaruPage::setFlatness";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:46:"bool HaruPage::setFlatness ( float $flatness )";i:3;s:30:"Defines flatness for the page.";}
a:4:{i:0;s:24:"HaruPage::setFontAndSize";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:59:"bool HaruPage::setFontAndSize ( object $font, float $size )";i:3;s:47:"Defines current font and its size for the page.";}
a:4:{i:0;s:21:"HaruPage::setGrayFill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"bool HaruPage::setGrayFill ( float $value )";i:3;s:35:"Defines filling color for the page.";}
a:4:{i:0;s:23:"HaruPage::setGrayStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"bool HaruPage::setGrayStroke ( float $value )";i:3;s:36:"Defines stroking color for the page.";}
a:4:{i:0;s:19:"HaruPage::setHeight";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:42:"bool HaruPage::setHeight ( float $height )";i:3;s:27:"Defines height of the page.";}
a:4:{i:0;s:30:"HaruPage::setHorizontalScaling";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:54:"bool HaruPage::setHorizontalScaling ( float $scaling )";i:3;s:40:"Set the horizontal scaling for the page.";}
a:4:{i:0;s:20:"HaruPage::setLineCap";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"bool HaruPage::setLineCap ( int $cap )";i:3;s:50:"Defines the shape to be used at the ends of lines.";}
a:4:{i:0;s:21:"HaruPage::setLineJoin";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:40:"bool HaruPage::setLineJoin ( int $join )";i:3;s:37:"Defines line join style for the page.";}
a:4:{i:0;s:22:"HaruPage::setLineWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:44:"bool HaruPage::setLineWidth ( float $width )";i:3;s:32:"Defines line width for the page.";}
a:4:{i:0;s:23:"HaruPage::setMiterLimit";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"bool HaruPage::setMiterLimit ( float $limit )";i:3;s:53:"Set the current value of the miter limit of the page.";}
a:4:{i:0;s:20:"HaruPage::setRGBFill";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:58:"bool HaruPage::setRGBFill ( float $r, float $g, float $b )";i:3;s:71:"Defines filling color for the page. All values must be between 0 and 1.";}
a:4:{i:0;s:22:"HaruPage::setRGBStroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:60:"bool HaruPage::setRGBStroke ( float $r, float $g, float $b )";i:3;s:72:"Defines stroking color for the page. All values must be between 0 and 1.";}
a:4:{i:0;s:19:"HaruPage::setRotate";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:39:"bool HaruPage::setRotate ( int $angle )";i:3;s:35:"Defines rotation angle of the page.";}
a:4:{i:0;s:17:"HaruPage::setSize";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:52:"bool HaruPage::setSize ( int $size, int $direction )";i:3;s:62:"Changes size and direction of the page to a predefined format.";}
a:4:{i:0;s:22:"HaruPage::setSlideShow";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:78:"bool HaruPage::setSlideShow ( int $type, float $disp_time, float $trans_time )";i:3;s:38:"Defines transition style for the page.";}
a:4:{i:0;s:24:"HaruPage::setTextLeading";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:53:"bool HaruPage::setTextLeading ( float $text_leading )";i:3;s:49:"Set the text leading (line spacing) for the page.";}
a:4:{i:0;s:23:"HaruPage::setTextMatrix";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:91:"bool HaruPage::setTextMatrix ( float $a, float $b, float $c, float $d, float $x, float $y )";i:3;s:51:"Defines the text transformation matrix of the page.";}
a:4:{i:0;s:30:"HaruPage::setTextRenderingMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:49:"bool HaruPage::setTextRenderingMode ( int $mode )";i:3;s:41:"Defines text rendering mode for the page.";}
a:4:{i:0;s:21:"HaruPage::setTextRise";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:42:"bool HaruPage::setTextRise ( float $rise )";i:3;s:37:"Set the current value of text rising.";}
a:4:{i:0;s:18:"HaruPage::setWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:40:"bool HaruPage::setWidth ( float $width )";i:3;s:26:"Set the width of the page.";}
a:4:{i:0;s:22:"HaruPage::setWordSpace";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:49:"bool HaruPage::setWordSpace ( float $word_space )";i:3;s:34:"Set the word spacing for the page.";}
a:4:{i:0;s:18:"HaruPage::showText";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:40:"bool HaruPage::showText ( string $text )";i:3;s:56:"Prints out the text at the current position of the page.";}
a:4:{i:0;s:26:"HaruPage::showTextNextLine";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:101:"bool HaruPage::showTextNextLine ( string $text [, float $word_space = 0 [, float $char_space = 0 ]] )";i:3;s:80:"Moves the current position to the start of the next line and print out the text.";}
a:4:{i:0;s:16:"HaruPage::stroke";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:53:"bool HaruPage::stroke ([ bool $close_path = false ] )";i:3;s:24:"Paints the current path.";}
a:4:{i:0;s:17:"HaruPage::textOut";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:59:"bool HaruPage::textOut ( float $x, float $y, string $text )";i:3;s:42:"Prints the text on the specified position.";}
a:4:{i:0;s:18:"HaruPage::textRect";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:134:"bool HaruPage::textRect ( float $left, float $top, float $right, float $bottom, string $text [, int $align = HaruPage::TALIGN_LEFT ] )";i:3;s:44:"Prints the text inside the specified region.";}
a:4:{i:0;s:19:"HaruFont::getAscent";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:32:"int HaruFont::getAscent ( void )";i:3;s:36:"Get the vertical ascent of the font.";}
a:4:{i:0;s:22:"HaruFont::getCapHeight";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:35:"int HaruFont::getCapHeight ( void )";i:3;s:56:"Get the distance from the baseline of uppercase letters.";}
a:4:{i:0;s:20:"HaruFont::getDescent";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"int HaruFont::getDescent ( void )";i:3;s:37:"Get the vertical descent of the font.";}
a:4:{i:0;s:25:"HaruFont::getEncodingName";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:41:"string HaruFont::getEncodingName ( void )";i:3;s:34:"Get the name of the font encoding.";}
a:4:{i:0;s:21:"HaruFont::getFontName";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"string HaruFont::getFontName ( void )";i:3;s:25:"Get the name of the font.";}
a:4:{i:0;s:22:"HaruFont::getTextWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"array HaruFont::getTextWidth ( string $text )";i:3;s:92:"Get the total width of the text, number of characters, number of words and number of spaces.";}
a:4:{i:0;s:25:"HaruFont::getUnicodeWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:48:"int HaruFont::getUnicodeWidth ( int $character )";i:3;s:43:"Get the width of the character in the font.";}
a:4:{i:0;s:20:"HaruFont::getXHeight";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"int HaruFont::getXHeight ( void )";i:3;s:57:"Gets the distance from the baseline of lowercase letters.";}
a:4:{i:0;s:21:"HaruFont::measureText";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:141:"int HaruFont::measureText ( string $text, float $width, float $font_size, float $char_space, float $word_space [, bool $word_wrap = false ] )";i:3;s:84:"Calculate the number of characters which can be included within the specified width.";}
a:4:{i:0;s:30:"HaruImage::getBitsPerComponent";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:43:"int HaruImage::getBitsPerComponent ( void )";i:3;s:75:"Gets the number of bits used to describe each color component of the image.";}
a:4:{i:0;s:24:"HaruImage::getColorSpace";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:40:"string HaruImage::getColorSpace ( void )";i:3;s:32:"Get the name of the color space.";}
a:4:{i:0;s:20:"HaruImage::getHeight";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"int HaruImage::getHeight ( void )";i:3;s:28:"Get the height of the image.";}
a:4:{i:0;s:18:"HaruImage::getSize";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"array HaruImage::getSize ( void )";i:3;s:26:"Get the size of the image.";}
a:4:{i:0;s:19:"HaruImage::getWidth";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:32:"int HaruImage::getWidth ( void )";i:3;s:27:"Get the width of the image.";}
a:4:{i:0;s:23:"HaruImage::setColorMask";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:97:"bool HaruImage::setColorMask ( int $rmin, int $rmax, int $gmin, int $gmax, int $bmin, int $bmax )";i:3;s:176:"Defines the transparent color of the image using the RGB range values. The color within the range is displayed as a transparent color. The color space of the image must be RGB.";}
a:4:{i:0;s:23:"HaruImage::setMaskImage";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:51:"bool HaruImage::setMaskImage ( object $mask_image )";i:3;s:74:"Sets the image used as image-mask. It must be 1bit gray-scale color image.";}
a:4:{i:0;s:24:"HaruEncoder::getByteType";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:57:"int HaruEncoder::getByteType ( string $text, int $index )";i:3;s:37:"Get the type of the byte in the text.";}
a:4:{i:0;s:20:"HaruEncoder::getType";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:33:"int HaruEncoder::getType ( void )";i:3;s:28:"Get the type of the encoder.";}
a:4:{i:0;s:23:"HaruEncoder::getUnicode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:46:"int HaruEncoder::getUnicode ( int $character )";i:3;s:44:"Converts the specified character to unicode.";}
a:4:{i:0;s:27:"HaruEncoder::getWritingMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:40:"int HaruEncoder::getWritingMode ( void )";i:3;s:36:"Get the writing mode of the encoder.";}
a:4:{i:0;s:27:"HaruOutline::setDestination";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:56:"bool HaruOutline::setDestination ( object $destination )";i:3;s:88:"Sets a destination object which becomes a target to jump to when the outline is clicked.";}
a:4:{i:0;s:22:"HaruOutline::setOpened";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:44:"bool HaruOutline::setOpened ( bool $opened )";i:3;s:92:"Defines whether this node is opened or not when the outline is displayed for the first time.";}
a:4:{i:0;s:30:"HaruAnnotation::setBorderStyle";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:81:"bool HaruAnnotation::setBorderStyle ( float $width, int $dash_on, int $dash_off )";i:3;s:104:"Defines the style of the border of the annotation. This function may be used with link annotations only.";}
a:4:{i:0;s:32:"HaruAnnotation::setHighlightMode";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:51:"bool HaruAnnotation::setHighlightMode ( int $mode )";i:3;s:108:"Defines the appearance of the annotation when clicked. This function may be used with link annotations only.";}
a:4:{i:0;s:23:"HaruAnnotation::setIcon";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:42:"bool HaruAnnotation::setIcon ( int $icon )";i:3;s:95:"Defines the style of the annotation icon. This function may be used with text annotations only.";}
a:4:{i:0;s:25:"HaruAnnotation::setOpened";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:47:"bool HaruAnnotation::setOpened ( bool $opened )";i:3;s:113:"Defines whether the annotation is initially displayed open. This function may be used with text annotations only.";}
a:4:{i:0;s:23:"HaruDestination::setFit";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:37:"bool HaruDestination::setFit ( void )";i:3;s:53:"Defines the appearance of the page to fit the window.";}
a:4:{i:0;s:24:"HaruDestination::setFitB";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:38:"bool HaruDestination::setFitB ( void )";i:3;s:89:"Defines the appearance of the page to fit the bounding box of the page within the window.";}
a:4:{i:0;s:25:"HaruDestination::setFitBH";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"bool HaruDestination::setFitBH ( float $top )";i:3;s:144:"Defines the appearance of the page to magnifying to fit the width of the bounding box and setting the top position of the page to the value of .";}
a:4:{i:0;s:25:"HaruDestination::setFitBV";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:46:"bool HaruDestination::setFitBV ( float $left )";i:3;s:146:"Defines the appearance of the page to magnifying to fit the height of the bounding box and setting the left position of the page to the value of .";}
a:4:{i:0;s:24:"HaruDestination::setFitH";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:44:"bool HaruDestination::setFitH ( float $top )";i:3;s:114:"Defines the appearance of the page to fit the window width and sets the top position of the page to the value of .";}
a:4:{i:0;s:24:"HaruDestination::setFitR";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:86:"bool HaruDestination::setFitR ( float $left, float $bottom, float $right, float $top )";i:3;s:74:"Defines the appearance of the page to fit the rectangle by the parameters.";}
a:4:{i:0;s:24:"HaruDestination::setFitV";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:45:"bool HaruDestination::setFitV ( float $left )";i:3;s:60:"Defines the appearance of the page to fit the window height.";}
a:4:{i:0;s:23:"HaruDestination::setXYZ";i:1;s:20:"(PECL haru >= 0.0.1)";i:2;s:69:"bool HaruDestination::setXYZ ( float $left, float $top, float $zoom )";i:3;s:65:"Defines the appearance of the page using three parameters:, and .";}
a:4:{i:0;s:13:"ming_keypress";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:34:"int ming_keypress ( string $char )";i:3;s:0:"";}
a:4:{i:0;s:22:"ming_setcubicthreshold";i:1;s:38:"(PHP 4 >= 4.0.5, PHP 5, PECL ming SVN)";i:2;s:46:"void ming_setcubicthreshold ( int $threshold )";i:3;s:51:"Sets the threshold error for drawing cubic beziers.";}
a:4:{i:0;s:13:"ming_setscale";i:1;s:38:"(PHP 4 >= 4.0.5, PHP 5, PECL ming SVN)";i:2;s:35:"void ming_setscale ( float $scale )";i:3;s:140:"Sets the scale of the output SWF. Inside the SWF file, coordinates are measured in TWIPS, rather than PIXELS. There are 20 TWIPS in 1 pixel.";}
a:4:{i:0;s:22:"ming_setswfcompression";i:1;s:32:"(PHP 5.2.1-5.3.0, PECL ming SVN)";i:2;s:42:"void ming_setswfcompression ( int $level )";i:3;s:38:"Sets the SWF output compression level.";}
a:4:{i:0;s:17:"ming_useconstants";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:35:"void ming_useconstants ( int $use )";i:3;s:0:"";}
a:4:{i:0;s:18:"ming_useswfversion";i:1;s:47:"(PHP 4 >= 4.2.0, PHP 5 <= 5.3.0, PECL ming
SVN)";i:2;s:40:"void ming_useswfversion ( int $version )";i:3;s:89:"Sets the SWF version to be used in the movie. This affect the bahaviour of Action Script.";}
a:4:{i:0;s:22:"SWFAction::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:41:"SWFAction::__construct ( string $script )";i:3;s:53:"Creates a new SWFAction and compiles the given in it.";}
a:4:{i:0;s:22:"SWFBitmap::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:60:"SWFBitmap::__construct ( mixed $file [, mixed $alphafile ] )";i:3;s:39:"Creates the new object from the given .";}
a:4:{i:0;s:20:"SWFBitmap::getHeight";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:35:"float SWFBitmap::getHeight ( void )";i:3;s:28:"Returns the bitmap's height.";}
a:4:{i:0;s:19:"SWFBitmap::getWidth";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"float SWFBitmap::getWidth ( void )";i:3;s:27:"Returns the bitmap's width.";}
a:4:{i:0;s:20:"SWFButton::addAction";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:59:"void SWFButton::addAction ( SWFAction $action, int $flags )";i:3;s:54:"Adds the given to the button for the given conditions.";}
a:4:{i:0;s:20:"SWFButton::addASound";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:69:"SWFSoundInstance SWFButton::addASound ( SWFSound $sound, int $flags )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFButton::addShape";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:56:"void SWFButton::addShape ( SWFShape $shape, int $flags )";i:3;s:29:"Adds the given to the button.";}
a:4:{i:0;s:22:"SWFButton::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:31:"SWFButton::__construct ( void )";i:3;s:21:"Creates a new Button.";}
a:4:{i:0;s:20:"SWFButton::setAction";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:47:"void SWFButton::setAction ( SWFAction $action )";i:3;s:59:"Sets the action to be performed when the button is clicked.";}
a:4:{i:0;s:18:"SWFButton::setDown";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:43:"void SWFButton::setDown ( SWFShape $shape )";i:3;s:42:"alias for addShape(shape, SWFBUTTON_DOWN).";}
a:4:{i:0;s:17:"SWFButton::setHit";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:42:"void SWFButton::setHit ( SWFShape $shape )";i:3;s:41:"alias for addShape(shape, SWFBUTTON_HIT).";}
a:4:{i:0;s:18:"SWFButton::setMenu";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:37:"void SWFButton::setMenu ( int $flag )";i:3;s:0:"";}
a:4:{i:0;s:18:"SWFButton::setOver";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:43:"void SWFButton::setOver ( SWFShape $shape )";i:3;s:42:"alias for addShape(shape, SWFBUTTON_OVER).";}
a:4:{i:0;s:16:"SWFButton::setUp";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:41:"void SWFButton::setUp ( SWFShape $shape )";i:3;s:40:"alias for addShape(shape, SWFBUTTON_UP).";}
a:4:{i:0;s:25:"SWFDisplayItem::addAction";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:64:"void SWFDisplayItem::addAction ( SWFAction $action, int $flags )";i:3;s:0:"";}
a:4:{i:0;s:24:"SWFDisplayItem::addColor";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:77:"void SWFDisplayItem::addColor ( int $red, int $green, int $blue [, int $a ] )";i:3;s:82:"adds the color to this item's color transform. The color is given in its RGB form.";}
a:4:{i:0;s:23:"SWFDisplayItem::endMask";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:37:"void SWFDisplayItem::endMask ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"SWFDisplayItem::getRot";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:37:"float SWFDisplayItem::getRot ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFDisplayItem::getX";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:35:"float SWFDisplayItem::getX ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"SWFDisplayItem::getXScale";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:40:"float SWFDisplayItem::getXScale ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"SWFDisplayItem::getXSkew";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:39:"float SWFDisplayItem::getXSkew ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFDisplayItem::getY";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:35:"float SWFDisplayItem::getY ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"SWFDisplayItem::getYScale";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:40:"float SWFDisplayItem::getYScale ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"SWFDisplayItem::getYSkew";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:39:"float SWFDisplayItem::getYSkew ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFDisplayItem::move";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:50:"void SWFDisplayItem::move ( float $dx, float $dy )";i:3;s:58:"moves the current object by (,) from its current position.";}
a:4:{i:0;s:22:"SWFDisplayItem::moveTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:50:"void SWFDisplayItem::moveTo ( float $x, float $y )";i:3;s:54:"moves the current object to (,) in global coordinates.";}
a:4:{i:0;s:25:"SWFDisplayItem::multColor";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:86:"void SWFDisplayItem::multColor ( float $red, float $green, float $blue [, float $a ] )";i:3;s:58:"multiplies the item's color transform by the given values.";}
a:4:{i:0;s:22:"SWFDisplayItem::remove";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:36:"void SWFDisplayItem::remove ( void )";i:3;s:50:"removes this object from the movie's display list.";}
a:4:{i:0;s:22:"SWFDisplayItem::rotate";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:44:"void SWFDisplayItem::rotate ( float $angle )";i:3;s:64:"rotates the current object by degrees from its current rotation.";}
a:4:{i:0;s:24:"SWFDisplayItem::rotateTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:46:"void SWFDisplayItem::rotateTo ( float $angle )";i:3;s:65:"set the current object rotation to degrees in global coordinates.";}
a:4:{i:0;s:21:"SWFDisplayItem::scale";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:51:"void SWFDisplayItem::scale ( float $dx, float $dy )";i:3;s:55:"scales the current object by (,) from its current size.";}
a:4:{i:0;s:23:"SWFDisplayItem::scaleTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:55:"void SWFDisplayItem::scaleTo ( float $x [, float $y ] )";i:3;s:55:"scales the current object to (,) in global coordinates.";}
a:4:{i:0;s:24:"SWFDisplayItem::setDepth";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:44:"void SWFDisplayItem::setDepth ( int $depth )";i:3;s:245:"sets the object's z-order to . Depth defaults to the order in which instances are created (by adding a shape/text to a movie)- newer ones are on top of older ones. If two objects are given the same depth, only the later-defined one can be moved.";}
a:4:{i:0;s:28:"SWFDisplayItem::setMaskLevel";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:48:"void SWFDisplayItem::setMaskLevel ( int $level )";i:3;s:0:"";}
a:4:{i:0;s:25:"SWFDisplayItem::setMatrix";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:93:"void SWFDisplayItem::setMatrix ( float $a, float $b, float $c, float $d, float $x, float $y )";i:3;s:0:"";}
a:4:{i:0;s:23:"SWFDisplayItem::setName";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:45:"void SWFDisplayItem::setName ( string $name )";i:3;s:85:"sets the object's name to, for targetting with action script. Only useful on sprites.";}
a:4:{i:0;s:24:"SWFDisplayItem::setRatio";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:46:"void SWFDisplayItem::setRatio ( float $ratio )";i:3;s:62:"sets the object's ratio to . Obviously only useful for morphs.";}
a:4:{i:0;s:21:"SWFDisplayItem::skewX";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:46:"void SWFDisplayItem::skewX ( float $ddegrees )";i:3;s:23:"adds to current x-skew.";}
a:4:{i:0;s:23:"SWFDisplayItem::skewXTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:47:"void SWFDisplayItem::skewXTo ( float $degrees )";i:3;s:113:"sets the x-skew to . For is 1.0, it means a 45-degree forward slant. More is more forward, less is more backward.";}
a:4:{i:0;s:21:"SWFDisplayItem::skewY";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:46:"void SWFDisplayItem::skewY ( float $ddegrees )";i:3;s:23:"adds to current y-skew.";}
a:4:{i:0;s:23:"SWFDisplayItem::skewYTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:47:"void SWFDisplayItem::skewYTo ( float $degrees )";i:3;s:112:"sets the y-skew to . For is 1.0, it means a 45-degree forward slant. More is more upward, less is more downward.";}
a:4:{i:0;s:15:"SWFFill::moveTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:43:"void SWFFill::moveTo ( float $x, float $y )";i:3;s:54:"Moves the fill origin to the given global coordinates.";}
a:4:{i:0;s:17:"SWFFill::rotateTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:39:"void SWFFill::rotateTo ( float $angle )";i:3;s:37:"Sets the fill rotation to the given .";}
a:4:{i:0;s:16:"SWFFill::scaleTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:48:"void SWFFill::scaleTo ( float $x [, float $y ] )";i:3;s:45:"Sets the fill scale to the given coordinates.";}
a:4:{i:0;s:16:"SWFFill::skewXTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"void SWFFill::skewXTo ( float $x )";i:3;s:25:"Sets the fill x-skew to .";}
a:4:{i:0;s:16:"SWFFill::skewYTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"void SWFFill::skewYTo ( float $y )";i:3;s:25:"Sets the fill y-skew to .";}
a:4:{i:0;s:20:"SWFFont::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:41:"SWFFont::__construct ( string $filename )";i:3;s:153:"If is the name of an FDB file (i.e., it ends in ".fdb"), load the font definition found in said file. Otherwise, create a browser-defined font reference.";}
a:4:{i:0;s:18:"SWFFont::getAscent";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:33:"float SWFFont::getAscent ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFFont::getDescent";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"float SWFFont::getDescent ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFFont::getLeading";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"float SWFFont::getLeading ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"SWFFont::getShape";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:38:"string SWFFont::getShape ( int $code )";i:3;s:0:"";}
a:4:{i:0;s:21:"SWFFont::getUTF8Width";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:46:"float SWFFont::getUTF8Width ( string $string )";i:3;s:0:"";}
a:4:{i:0;s:17:"SWFFont::getWidth";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:42:"float SWFFont::getWidth ( string $string )";i:3;s:149:"returns the string 's width, using font's default scaling. You'll probably want to use the version of this method which uses the text object's scale.";}
a:4:{i:0;s:21:"SWFFontChar::addChars";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:43:"void SWFFontChar::addChars ( string $char )";i:3;s:0:"";}
a:4:{i:0;s:25:"SWFFontChar::addUTF8Chars";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:47:"void SWFFontChar::addUTF8Chars ( string $char )";i:3;s:0:"";}
a:4:{i:0;s:21:"SWFGradient::addEntry";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:98:"void SWFGradient::addEntry ( float $ratio, int $red, int $green, int $blue [, int $alpha = 255 ] )";i:3;s:169:"adds an entry to the gradient list. is a number between 0 and 1 indicating where in the gradient this color appears. Thou shalt add entries in order of increasing ratio.";}
a:4:{i:0;s:24:"SWFGradient::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:33:"SWFGradient::__construct ( void )";i:3;s:33:"creates a new SWFGradient object.";}
a:4:{i:0;s:21:"SWFMorph::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:30:"SWFMorph::__construct ( void )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:19:"SWFMorph::getShape1";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:37:"SWFShape SWFMorph::getShape1 ( void )";i:3;s:32:"Gets the morph's starting shape.";}
a:4:{i:0;s:19:"SWFMorph::getShape2";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:37:"SWFShape SWFMorph::getShape2 ( void )";i:3;s:30:"Gets the morph's ending shape.";}
a:4:{i:0;s:13:"SWFMovie::add";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:40:"mixed SWFMovie::add ( object $instance )";i:3;s:40:"Adds an SWF object to the current movie.";}
a:4:{i:0;s:19:"SWFMovie::addExport";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:61:"void SWFMovie::addExport ( SWFCharacter $char, string $name )";i:3;s:0:"";}
a:4:{i:0;s:17:"SWFMovie::addFont";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:41:"mixed SWFMovie::addFont ( SWFFont $font )";i:3;s:0:"";}
a:4:{i:0;s:21:"SWFMovie::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:41:"SWFMovie::__construct ([ int $version ] )";i:3;s:54:"Creates a new movie object, representing an SWF movie.";}
a:4:{i:0;s:20:"SWFMovie::importChar";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:63:"SWFSprite SWFMovie::importChar ( string $libswf, string $name )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFMovie::importFont";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:65:"SWFFontChar SWFMovie::importFont ( string $libswf, string $name )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFMovie::labelFrame";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:43:"void SWFMovie::labelFrame ( string $label )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFMovie::nextFrame";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:33:"void SWFMovie::nextFrame ( void )";i:3;s:41:"Moves to the next frame of the animation.";}
a:4:{i:0;s:16:"SWFMovie::output";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:44:"int SWFMovie::output ([ int $compression ] )";i:3;s:11:"Dumps the .";}
a:4:{i:0;s:16:"SWFMovie::remove";i:1;s:32:"(PHP 5.2.1-5.3.0, PECL ming SVN)";i:2;s:42:"void SWFMovie::remove ( object $instance )";i:3;s:47:"Removes the given object from the display list.";}
a:4:{i:0;s:14:"SWFMovie::save";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:66:"int SWFMovie::save ( string $filename [, int $compression = -1 ] )";i:3;s:38:"Saves the SWF movie to the specified .";}
a:4:{i:0;s:20:"SWFMovie::saveToFile";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:67:"int SWFMovie::saveToFile ( resource $x [, int $compression = -1 ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"SWFMovie::setbackground";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:64:"void SWFMovie::setbackground ( int $red, int $green, int $blue )";i:3;s:26:"Sets the background color.";}
a:4:{i:0;s:22:"SWFMovie::setDimension";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:59:"void SWFMovie::setDimension ( float $width, float $height )";i:3;s:49:"Sets the movie's dimension to the specified and .";}
a:4:{i:0;s:19:"SWFMovie::setFrames";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:40:"void SWFMovie::setFrames ( int $number )";i:3;s:63:"Sets the total number of frames in the animation to the given .";}
a:4:{i:0;s:17:"SWFMovie::setRate";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:38:"void SWFMovie::setRate ( float $rate )";i:3;s:38:"Sets the frame rate to the specified .";}
a:4:{i:0;s:20:"SWFMovie::startSound";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:57:"SWFSoundInstance SWFMovie::startSound ( SWFSound $sound )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFMovie::stopSound";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:44:"void SWFMovie::stopSound ( SWFSound $sound )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFMovie::streamMP3";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:63:"int SWFMovie::streamMP3 ( mixed $mp3file [, float $skip = 0 ] )";i:3;s:28:"Streams the given MP3 file .";}
a:4:{i:0;s:22:"SWFMovie::writeExports";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:36:"void SWFMovie::writeExports ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"SWFPrebuiltClip::__construct";i:1;s:32:"(PHP 5.0.5-5.3.0, PECL ming SVN)";i:2;s:44:"SWFPrebuiltClip::__construct ( mixed $file )";i:3;s:0:"";}
a:4:{i:0;s:17:"SWFShape::addFill";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:83:"SWFFill SWFShape::addFill ( int $red, int $green, int $blue [, int $alpha = 255 ] )";i:3;s:97:"adds a solid fill to the shape's list of fill styles. accepts three different types of arguments.";}
a:4:{i:0;s:21:"SWFShape::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:30:"SWFShape::__construct ( void )";i:3;s:21:"Created a new object.";}
a:4:{i:0;s:17:"SWFShape::drawArc";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:71:"void SWFShape::drawArc ( float $r, float $startAngle, float $endAngle )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFShape::drawCircle";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:38:"void SWFShape::drawCircle ( float $r )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFShape::drawCubic";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:92:"int SWFShape::drawCubic ( float $bx, float $by, float $cx, float $cy, float $dx, float $dy )";i:3;s:0:"";}
a:4:{i:0;s:21:"SWFShape::drawCubicTo";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:94:"int SWFShape::drawCubicTo ( float $bx, float $by, float $cx, float $cy, float $dx, float $dy )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFShape::drawCurve";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:134:"int SWFShape::drawCurve ( float $controldx, float $controldy, float $anchordx, float $anchordy [, float $targetdx ], float $targetdy )";i:3;s:236:"draws a quadratic curve (using the current line style,set by ) from the current pen position to the relative position (,) using relative control point (,). That is, head towards the control point, then smoothly turn to the anchor point.";}
a:4:{i:0;s:21:"SWFShape::drawCurveTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:130:"int SWFShape::drawCurveTo ( float $controlx, float $controly, float $anchorx, float $anchory [, float $targetx ], float $targety )";i:3;s:211:"draws a quadratic curve (using the current line style, set by ) from the current pen position to (,) using (,) as a control point. That is, head towards the control point, then smoothly turn to the anchor point.";}
a:4:{i:0;s:19:"SWFShape::drawGlyph";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:76:"void SWFShape::drawGlyph ( SWFFont $font, string $character [, int $size ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"SWFShape::drawLine";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:48:"void SWFShape::drawLine ( float $dx, float $dy )";i:3;s:102:"draws a line (using the current line style set by ) from the current pen position to displacement (,).";}
a:4:{i:0;s:20:"SWFShape::drawLineTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:48:"void SWFShape::drawLineTo ( float $x, float $y )";i:3;s:128:"draws a line (using the current line style, set by ) from the current pen position to point (,) in the shape's coordinate space.";}
a:4:{i:0;s:17:"SWFShape::movePen";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:47:"void SWFShape::movePen ( float $dx, float $dy )";i:3;s:123:"move the shape's pen from coordinates (current x,current y) to (current x +, current y + ) in the shape's coordinate space.";}
a:4:{i:0;s:19:"SWFShape::movePenTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:47:"void SWFShape::movePenTo ( float $x, float $y )";i:3;s:60:"move the shape's pen to (,) in the shape's coordinate space.";}
a:4:{i:0;s:21:"SWFShape::setLeftFill";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:48:"void SWFShape::setLeftFill ( SWFGradient $fill )";i:3;s:218:"What this nonsense is about is, every edge segment borders at most two fills. When rasterizing the object, it's pretty handy to know what those fills are ahead of time, so the swf format requires these to be specified.";}
a:4:{i:0;s:17:"SWFShape::setLine";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:42:"void SWFShape::setLine ( SWFShape $shape )";i:3;s:196:"sets the shape's line style. is the line's width. If is 0, the line's style is removed (then, all other arguments are ignored). If > 0, then line's color is set to, , . Last parameter is optional.";}
a:4:{i:0;s:22:"SWFShape::setRightFill";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:49:"void SWFShape::setRightFill ( SWFGradient $fill )";i:3;s:14:"Shortcut for .";}
a:4:{i:0;s:21:"SWFSound::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:62:"SWFSound::__construct ( string $filename [, int $flags = 0 ] )";i:3;s:0:"";}
a:4:{i:0;s:27:"SWFSoundInstance::loopCount";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:47:"void SWFSoundInstance::loopCount ( int $point )";i:3;s:0:"";}
a:4:{i:0;s:29:"SWFSoundInstance::loopInPoint";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:49:"void SWFSoundInstance::loopInPoint ( int $point )";i:3;s:0:"";}
a:4:{i:0;s:30:"SWFSoundInstance::loopOutPoint";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:50:"void SWFSoundInstance::loopOutPoint ( int $point )";i:3;s:0:"";}
a:4:{i:0;s:28:"SWFSoundInstance::noMultiple";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:42:"void SWFSoundInstance::noMultiple ( void )";i:3;s:0:"";}
a:4:{i:0;s:14:"SWFSprite::add";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:38:"void SWFSprite::add ( object $object )";i:3;s:28:"adds a, a, a, a or a object.";}
a:4:{i:0;s:22:"SWFSprite::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:31:"SWFSprite::__construct ( void )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:21:"SWFSprite::labelFrame";i:1;s:16:"(PHP 4 >= 4.3.3)";i:2;s:44:"void SWFSprite::labelFrame ( string $label )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFSprite::nextFrame";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"void SWFSprite::nextFrame ( void )";i:3;s:41:"moves to the next frame of the animation.";}
a:4:{i:0;s:17:"SWFSprite::remove";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:41:"void SWFSprite::remove ( object $object )";i:3;s:46:"remove a, a, a, a or a object from the sprite.";}
a:4:{i:0;s:20:"SWFSprite::setFrames";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:41:"void SWFSprite::setFrames ( int $number )";i:3;s:53:"sets the total number of frames in the animation to .";}
a:4:{i:0;s:21:"SWFSprite::startSound";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:58:"SWFSoundInstance SWFSprite::startSound ( SWFSound $sount )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFSprite::stopSound";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:45:"void SWFSprite::stopSound ( SWFSound $sount )";i:3;s:0:"";}
a:4:{i:0;s:18:"SWFText::addString";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:42:"void SWFText::addString ( string $string )";i:3;s:135:"draws the string at the current pen (cursor) location. Pen is at the baseline of the text; i.e., ascending text is in the -y direction.";}
a:4:{i:0;s:22:"SWFText::addUTF8String";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:44:"void SWFText::addUTF8String ( string $text )";i:3;s:0:"";}
a:4:{i:0;s:20:"SWFText::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:29:"SWFText::__construct ( void )";i:3;s:45:"Creates a new object, fresh for manipulating.";}
a:4:{i:0;s:18:"SWFText::getAscent";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:33:"float SWFText::getAscent ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFText::getDescent";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"float SWFText::getDescent ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"SWFText::getLeading";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:34:"float SWFText::getLeading ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"SWFText::getUTF8Width";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:46:"float SWFText::getUTF8Width ( string $string )";i:3;s:0:"";}
a:4:{i:0;s:17:"SWFText::getWidth";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:42:"float SWFText::getWidth ( string $string )";i:3;s:97:"Returns the rendered width of the at the text object's current font, scale, and spacing settings.";}
a:4:{i:0;s:15:"SWFText::moveTo";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:43:"void SWFText::moveTo ( float $x, float $y )";i:3;s:187:"moves the pen (or cursor, if that makes more sense) to (,) in text object's coordinate space. If either is zero, though, value in that dimension stays the same. Annoying, should be fixed.";}
a:4:{i:0;s:17:"SWFText::setColor";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:76:"void SWFText::setColor ( int $red, int $green, int $blue [, int $a = 255 ] )";i:3;s:31:"Changes the current text color.";}
a:4:{i:0;s:16:"SWFText::setFont";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:39:"void SWFText::setFont ( SWFFont $font )";i:3;s:26:"sets the current font to .";}
a:4:{i:0;s:18:"SWFText::setHeight";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:41:"void SWFText::setHeight ( float $height )";i:3;s:49:"sets the current font height to . Default is 240.";}
a:4:{i:0;s:19:"SWFText::setSpacing";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:43:"void SWFText::setSpacing ( float $spacing )";i:3;s:429:"sets the current font spacing to . Default is 1.0. 0 is all of the letters written at the same point. This doesn't really work that well because it inflates the advance across the letter, doesn't add the same amount of spacing between the letters. I should try and explain that better, prolly. Or just fix the damn thing to do constant spacing. This was really just a way to figure out how letter advances work, anyway.. So nyah.";}
a:4:{i:0;s:22:"SWFTextField::addChars";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:45:"void SWFTextField::addChars ( string $chars )";i:3;s:0:"";}
a:4:{i:0;s:23:"SWFTextField::addString";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:47:"void SWFTextField::addString ( string $string )";i:3;s:42:"concatenates the string to the text field.";}
a:4:{i:0;s:19:"SWFTextField::align";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:44:"void SWFTextField::align ( int $alignement )";i:3;s:166:"sets the text field alignment to . Valid values for are : SWFTEXTFIELD_ALIGN_LEFT, SWFTEXTFIELD_ALIGN_RIGHT, SWFTEXTFIELD_ALIGN_CENTER and SWFTEXTFIELD_ALIGN_JUSTIFY.";}
a:4:{i:0;s:25:"SWFTextField::__construct";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:43:"SWFTextField::__construct ([ int $flags ] )";i:3;s:215:"creates a new text field object. Text Fields are less flexible than objects- they can't be rotated, scaled non-proportionally, or skewed, but they can be used as form entries, and they can use browser-defined fonts.";}
a:4:{i:0;s:23:"SWFTextField::setBounds";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:60:"void SWFTextField::setBounds ( float $width, float $height )";i:3;s:130:"sets the text field width to and height to . If you don't set the bounds yourself, Ming makes a poor guess at what the bounds are.";}
a:4:{i:0;s:22:"SWFTextField::setColor";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:81:"void SWFTextField::setColor ( int $red, int $green, int $blue [, int $a = 255 ] )";i:3;s:103:"sets the color of the text field. Default is fully opaque black. Color is represented using RGB system.";}
a:4:{i:0;s:21:"SWFTextField::setFont";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:44:"void SWFTextField::setFont ( SWFFont $font )";i:3;s:56:"sets the text field font to the [browser-defined?] font.";}
a:4:{i:0;s:23:"SWFTextField::setHeight";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:46:"void SWFTextField::setHeight ( float $height )";i:3;s:82:"sets the font height of this text field font to the given height . Default is 240.";}
a:4:{i:0;s:28:"SWFTextField::setIndentation";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:50:"void SWFTextField::setIndentation ( float $width )";i:3;s:62:"sets the indentation of the first line in the text field, to .";}
a:4:{i:0;s:27:"SWFTextField::setLeftMargin";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:49:"void SWFTextField::setLeftMargin ( float $width )";i:3;s:63:"sets the left margin width of the text field to . Default is 0.";}
a:4:{i:0;s:28:"SWFTextField::setLineSpacing";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:51:"void SWFTextField::setLineSpacing ( float $height )";i:3;s:73:"sets the line spacing of the text field to the height of . Default is 40.";}
a:4:{i:0;s:24:"SWFTextField::setMargins";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:59:"void SWFTextField::setMargins ( float $left, float $right )";i:3;s:48:"set both margins at once, for the man on the go.";}
a:4:{i:0;s:21:"SWFTextField::setName";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:43:"void SWFTextField::setName ( string $name )";i:3;s:93:"sets the variable name of this text field to, for form posting and action scripting purposes.";}
a:4:{i:0;s:24:"SWFTextField::setPadding";i:1;s:31:"(PHP 5 <= 5.3.0, PECL ming SVN)";i:2;s:48:"void SWFTextField::setPadding ( float $padding )";i:3;s:0:"";}
a:4:{i:0;s:28:"SWFTextField::setRightMargin";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:50:"void SWFTextField::setRightMargin ( float $width )";i:3;s:64:"sets the right margin width of the text field to . Default is 0.";}
a:4:{i:0;s:27:"SWFVideoStream::__construct";i:1;s:32:"(PHP 5.0.5-5.3.0, PECL ming SVN)";i:2;s:47:"SWFVideoStream::__construct ([ string $file ] )";i:3;s:0:"";}
a:4:{i:0;s:28:"SWFVideoStream::getNumFrames";i:1;s:32:"(PHP 5.0.5-5.3.0, PECL ming SVN)";i:2;s:41:"int SWFVideoStream::getNumFrames ( void )";i:3;s:69:"This function returns the number of video-frames of a SWFVideoStream.";}
a:4:{i:0;s:28:"SWFVideoStream::setDimension";i:1;s:32:"(PHP 5.0.5-5.3.0, PECL ming SVN)";i:2;s:52:"void SWFVideoStream::setDimension ( int $x, int $y )";i:3;s:46:"Sets the width and height for streamed videos.";}
a:4:{i:0;s:17:"PDF_activate_item";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:52:"bool PDF_activate_item ( resource $pdfdoc, int $id )";i:3;s:105:"Activates a previously created structure element or other content item. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_add_annotation";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:46:"This function is deprecated, use with instead.";}
a:4:{i:0;s:16:"PDF_add_bookmark";i:1;s:38:"(PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 6, use instead.";}
a:4:{i:0;s:18:"PDF_add_launchlink";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:110:"bool PDF_add_launchlink ( resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename )";i:3;s:30:"Adds a link to a web resource.";}
a:4:{i:0;s:17:"PDF_add_locallink";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:146:"bool PDF_add_locallink ( resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, int $page, string $dest )";i:3;s:96:"Add a link annotation to a target within the current PDF file. Returns on success or on failure.";}
a:4:{i:0;s:17:"PDF_add_nameddest";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:74:"bool PDF_add_nameddest ( resource $pdfdoc, string $name, string $optlist )";i:3;s:107:"Creates a named destination on an arbitrary page in the current document. Returns on success or on failure.";}
a:4:{i:0;s:12:"PDF_add_note";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:144:"bool PDF_add_note ( resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open )";i:3;s:74:"Sets an annotation for the current page. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_add_outline";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:41:"This function is deprecated, use instead.";}
a:4:{i:0;s:15:"PDF_add_pdflink";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:166:"bool PDF_add_pdflink ( resource $pdfdoc, float $bottom_left_x, float $bottom_left_y, float $up_right_x, float $up_right_y, string $filename, int $page, string $dest )";i:3;s:77:"Add a file link annotation to a PDF target. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_add_table_cell";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:109:"int PDF_add_table_cell ( resource $pdfdoc, int $table, int $column, int $row, string $text, string $optlist )";i:3;s:39:"Adds a cell to a new or existing table.";}
a:4:{i:0;s:16:"PDF_add_textflow";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:87:"int PDF_add_textflow ( resource $pdfdoc, int $textflow, string $text, string $optlist )";i:3;s:85:"Creates a Textflow object, or adds text and explicit options to an existing Textflow.";}
a:4:{i:0;s:17:"PDF_add_thumbnail";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:55:"bool PDF_add_thumbnail ( resource $pdfdoc, int $image )";i:3;s:91:"Adds an existing image as thumbnail for the current page. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_add_weblink";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:132:"bool PDF_add_weblink ( resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, string $url )";i:3;s:83:"Adds a weblink annotation to a target on the Web. Returns on success or on failure.";}
a:4:{i:0;s:7:"PDF_arc";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:85:"bool PDF_arc ( resource $p, float $x, float $y, float $r, float $alpha, float $beta )";i:3;s:37:"Adds a counterclockwise circular arc.";}
a:4:{i:0;s:8:"PDF_arcn";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:86:"bool PDF_arcn ( resource $p, float $x, float $y, float $r, float $alpha, float $beta )";i:3;s:70:"Except for the drawing direction, this function behaves exactly like .";}
a:4:{i:0;s:15:"PDF_attach_file";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:176:"bool PDF_attach_file ( resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename, string $description, string $author, string $mimetype, string $icon )";i:3;s:68:"Adds a file attachment annotation. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_begin_document";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:78:"int PDF_begin_document ( resource $pdfdoc, string $filename, string $optlist )";i:3;s:50:"Creates a new PDF file subject to various options.";}
a:4:{i:0;s:14:"PDF_begin_font";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:135:"bool PDF_begin_font ( resource $pdfdoc, string $filename, float $a, float $b, float $c, float $d, float $e, float $f, string $optlist )";i:3;s:32:"Starts a Type 3 font definition.";}
a:4:{i:0;s:15:"PDF_begin_glyph";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:119:"bool PDF_begin_glyph ( resource $pdfdoc, string $glyphname, float $wx, float $llx, float $lly, float $urx, float $ury )";i:3;s:44:"Starts a glyph definition for a Type 3 font.";}
a:4:{i:0;s:14:"PDF_begin_item";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:69:"int PDF_begin_item ( resource $pdfdoc, string $tag, string $optlist )";i:3;s:84:"Opens a structure element or other content item with attributes supplied as options.";}
a:4:{i:0;s:15:"PDF_begin_layer";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:53:"bool PDF_begin_layer ( resource $pdfdoc, int $layer )";i:3;s:83:"Starts a layer for subsequent output on the page. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_begin_page_ext";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:90:"bool PDF_begin_page_ext ( resource $pdfdoc, float $width, float $height, string $optlist )";i:3;s:162:"Adds a new page to the document, and specifies various options. The parameters and are the dimensions of the new page in points. Returns on success or on failure.";}
a:4:{i:0;s:14:"PDF_begin_page";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:69:"bool PDF_begin_page ( resource $pdfdoc, float $width, float $height )";i:3;s:66:"Adds a new page to the document. Returns on success or on failure.";}
a:4:{i:0;s:17:"PDF_begin_pattern";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:115:"int PDF_begin_pattern ( resource $pdfdoc, float $width, float $height, float $xstep, float $ystep, int $painttype )";i:3;s:32:"Starts a new pattern definition.";}
a:4:{i:0;s:22:"PDF_begin_template_ext";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:93:"int PDF_begin_template_ext ( resource $pdfdoc, float $width, float $height, string $optlist )";i:3;s:33:"Starts a new template definition.";}
a:4:{i:0;s:18:"PDF_begin_template";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:72:"int PDF_begin_template ( resource $pdfdoc, float $width, float $height )";i:3;s:33:"Starts a new template definition.";}
a:4:{i:0;s:10:"PDF_circle";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:66:"bool PDF_circle ( resource $pdfdoc, float $x, float $y, float $r )";i:3;s:48:"Adds a circle. Returns on success or on failure.";}
a:4:{i:0;s:8:"PDF_clip";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:29:"bool PDF_clip ( resource $p )";i:3;s:97:"Uses the current path as clipping path, and terminate the path. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_close_image";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:48:"bool PDF_close_image ( resource $p, int $image )";i:3;s:38:"Closes an retrieved with the function.";}
a:4:{i:0;s:18:"PDF_close_pdi_page";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:50:"bool PDF_close_pdi_page ( resource $p, int $page )";i:3;s:95:"Closes the page handle, and frees all page-related resources. Returns on success or on failure.";}
a:4:{i:0;s:13:"PDF_close_pdi";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:44:"bool PDF_close_pdi ( resource $p, int $doc )";i:3;s:98:"Closes all open page handles, and closes the input PDF document. Returns on success or on failure.";}
a:4:{i:0;s:9:"PDF_close";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:30:"bool PDF_close ( resource $p )";i:3;s:106:"Closes the generated PDF file, and frees all document-related resources. Returns on success or on failure.";}
a:4:{i:0;s:25:"PDF_closepath_fill_stroke";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:46:"bool PDF_closepath_fill_stroke ( resource $p )";i:3;s:73:"Closes the path, fills, and strokes it. Returns on success or on failure.";}
a:4:{i:0;s:20:"PDF_closepath_stroke";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:41:"bool PDF_closepath_stroke ( resource $p )";i:3;s:66:"Closes the path, and strokes it. Returns on success or on failure.";}
a:4:{i:0;s:13:"PDF_closepath";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:34:"bool PDF_closepath ( resource $p )";i:3;s:58:"Closes the current path. Returns on success or on failure.";}
a:4:{i:0;s:10:"PDF_concat";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:91:"bool PDF_concat ( resource $p, float $a, float $b, float $c, float $d, float $e, float $f )";i:3;s:99:"Concatenates a matrix to the current transformation matrix (CTM). Returns on success or on failure.";}
a:4:{i:0;s:17:"PDF_continue_text";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:52:"bool PDF_continue_text ( resource $p, string $text )";i:3;s:58:"Prints at the next line. Returns on success or on failure.";}
a:4:{i:0;s:17:"PDF_create_3dview";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:77:"int PDF_create_3dview ( resource $pdfdoc, string $username, string $optlist )";i:3;s:18:"Creates a 3D view.";}
a:4:{i:0;s:17:"PDF_create_action";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:73:"int PDF_create_action ( resource $pdfdoc, string $type, string $optlist )";i:3;s:69:"Creates an action which can be applied to various objects and events.";}
a:4:{i:0;s:21:"PDF_create_annotation";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:126:"bool PDF_create_annotation ( resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist )";i:3;s:53:"Creates a rectangular annotation on the current page.";}
a:4:{i:0;s:19:"PDF_create_bookmark";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:75:"int PDF_create_bookmark ( resource $pdfdoc, string $text, string $optlist )";i:3;s:46:"Creates a bookmark subject to various options.";}
a:4:{i:0;s:16:"PDF_create_field";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:135:"bool PDF_create_field ( resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $name, string $type, string $optlist )";i:3;s:68:"Creates a form field on the current page subject to various options.";}
a:4:{i:0;s:21:"PDF_create_fieldgroup";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:78:"bool PDF_create_fieldgroup ( resource $pdfdoc, string $name, string $optlist )";i:3;s:54:"Creates a form field group subject to various options.";}
a:4:{i:0;s:17:"PDF_create_gstate";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:59:"int PDF_create_gstate ( resource $pdfdoc, string $optlist )";i:3;s:59:"Creates a graphics state object subject to various options.";}
a:4:{i:0;s:14:"PDF_create_pvf";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:89:"bool PDF_create_pvf ( resource $pdfdoc, string $filename, string $data, string $optlist )";i:3;s:68:"Creates a named virtual read-only file from data provided in memory.";}
a:4:{i:0;s:19:"PDF_create_textflow";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:75:"int PDF_create_textflow ( resource $pdfdoc, string $text, string $optlist )";i:3;s:69:"Preprocesses text for later formatting and creates a textflow object.";}
a:4:{i:0;s:11:"PDF_curveto";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:98:"bool PDF_curveto ( resource $p, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 )";i:3;s:107:"Draws a Bezier curve from the current point, using 3 more control points. Returns on success or on failure.";}
a:4:{i:0;s:16:"PDF_define_layer";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:72:"int PDF_define_layer ( resource $pdfdoc, string $name, string $optlist )";i:3;s:31:"Creates a new layer definition.";}
a:4:{i:0;s:14:"PDF_delete_pvf";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:57:"int PDF_delete_pvf ( resource $pdfdoc, string $filename )";i:3;s:82:"Deletes a named virtual file and frees its data structures (but not the contents).";}
a:4:{i:0;s:16:"PDF_delete_table";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:71:"bool PDF_delete_table ( resource $pdfdoc, int $table, string $optlist )";i:3;s:51:"Deletes a table and all associated data structures.";}
a:4:{i:0;s:19:"PDF_delete_textflow";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:60:"bool PDF_delete_textflow ( resource $pdfdoc, int $textflow )";i:3;s:54:"Deletes a textflow and the associated data structures.";}
a:4:{i:0;s:10:"PDF_delete";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:36:"bool PDF_delete ( resource $pdfdoc )";i:3;s:92:"Deletes a PDFlib object, and frees all internal resources. Returns on success or on failure.";}
a:4:{i:0;s:21:"PDF_encoding_set_char";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:104:"bool PDF_encoding_set_char ( resource $pdfdoc, string $encoding, int $slot, string $glyphname, int $uv )";i:3;s:60:"Adds a glyph name and/or Unicode value to a custom encoding.";}
a:4:{i:0;s:16:"PDF_end_document";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:59:"bool PDF_end_document ( resource $pdfdoc, string $optlist )";i:3;s:58:"Closes the generated PDF file and applies various options.";}
a:4:{i:0;s:12:"PDF_end_font";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:38:"bool PDF_end_font ( resource $pdfdoc )";i:3;s:36:"Terminates a Type 3 font definition.";}
a:4:{i:0;s:13:"PDF_end_glyph";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:39:"bool PDF_end_glyph ( resource $pdfdoc )";i:3;s:48:"Terminates a glyph definition for a Type 3 font.";}
a:4:{i:0;s:12:"PDF_end_item";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:47:"bool PDF_end_item ( resource $pdfdoc, int $id )";i:3;s:49:"Closes a structure element or other content item.";}
a:4:{i:0;s:13:"PDF_end_layer";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:39:"bool PDF_end_layer ( resource $pdfdoc )";i:3;s:64:"Deactivates all active layers. Returns on success or on failure.";}
a:4:{i:0;s:16:"PDF_end_page_ext";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:59:"bool PDF_end_page_ext ( resource $pdfdoc, string $optlist )";i:3;s:79:"Finishes a page, and applies various options. Returns on success or on failure.";}
a:4:{i:0;s:12:"PDF_end_page";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:33:"bool PDF_end_page ( resource $p )";i:3;s:52:"Finishes the page. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_end_pattern";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:36:"bool PDF_end_pattern ( resource $p )";i:3;s:66:"Finishes the pattern definition. Returns on success or on failure.";}
a:4:{i:0;s:16:"PDF_end_template";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:37:"bool PDF_end_template ( resource $p )";i:3;s:65:"Finishes a template definition. Returns on success or on failure.";}
a:4:{i:0;s:11:"PDF_endpath";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:32:"bool PDF_endpath ( resource $p )";i:3;s:53:"Ends the current path without filling or stroking it.";}
a:4:{i:0;s:19:"PDF_fill_imageblock";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:103:"int PDF_fill_imageblock ( resource $pdfdoc, int $page, string $blockname, int $image, string $optlist )";i:3;s:68:"Fills an image block with variable data according to its properties.";}
a:4:{i:0;s:17:"PDF_fill_pdfblock";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:104:"int PDF_fill_pdfblock ( resource $pdfdoc, int $page, string $blockname, int $contents, string $optlist )";i:3;s:65:"Fills a PDF block with variable data according to its properties.";}
a:4:{i:0;s:15:"PDF_fill_stroke";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:36:"bool PDF_fill_stroke ( resource $p )";i:3;s:108:"Fills and strokes the current path with the current fill and stroke color. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_fill_textblock";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:104:"int PDF_fill_textblock ( resource $pdfdoc, int $page, string $blockname, string $text, string $optlist )";i:3;s:66:"Fills a text block with variable data according to its properties.";}
a:4:{i:0;s:8:"PDF_fill";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:29:"bool PDF_fill ( resource $p )";i:3;s:101:"Fills the interior of the current path with the current fill color. Returns on success or on failure.";}
a:4:{i:0;s:12:"PDF_findfont";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:80:"int PDF_findfont ( resource $p, string $fontname, string $encoding, int $embed )";i:3;s:284:"Search for a font and prepare it for later use with . The metrics will be loaded, and if is nonzero, the font file will be checked, but not yet used. is one of, ,, , a user-defined encoding name or the name of a CMap. Parameter is optional before PHP 4.3.5 or with PDFlib less than 5.";}
a:4:{i:0;s:13:"PDF_fit_image";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:88:"bool PDF_fit_image ( resource $pdfdoc, int $image, float $x, float $y, string $optlist )";i:3;s:102:"Places an image or template on the page, subject to various options. Returns on success or on failure.";}
a:4:{i:0;s:16:"PDF_fit_pdi_page";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:90:"bool PDF_fit_pdi_page ( resource $pdfdoc, int $page, float $x, float $y, string $optlist )";i:3;s:102:"Places an imported PDF page on the page, subject to various options. Returns on success or on failure.";}
a:4:{i:0;s:13:"PDF_fit_table";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:118:"string PDF_fit_table ( resource $pdfdoc, int $table, float $llx, float $lly, float $urx, float $ury, string $optlist )";i:3;s:46:"Places a table on the page fully or partially.";}
a:4:{i:0;s:16:"PDF_fit_textflow";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:124:"string PDF_fit_textflow ( resource $pdfdoc, int $textflow, float $llx, float $lly, float $urx, float $ury, string $optlist )";i:3;s:63:"Formats the next portion of a textflow into a rectangular area.";}
a:4:{i:0;s:16:"PDF_fit_textline";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:93:"bool PDF_fit_textline ( resource $pdfdoc, string $text, float $x, float $y, string $optlist )";i:3;s:103:"Places a single line of text on the page, subject to various options. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_get_apiname";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:43:"string PDF_get_apiname ( resource $pdfdoc )";i:3;s:75:"Gets the name of the API function which threw the last exception or failed.";}
a:4:{i:0;s:14:"PDF_get_buffer";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:37:"string PDF_get_buffer ( resource $p )";i:3;s:53:"Fetches the buffer containing the generated PDF data.";}
a:4:{i:0;s:14:"PDF_get_errmsg";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:42:"string PDF_get_errmsg ( resource $pdfdoc )";i:3;s:84:"Gets the text of the last thrown exception or the reason for a failed function call.";}
a:4:{i:0;s:14:"PDF_get_errnum";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:39:"int PDF_get_errnum ( resource $pdfdoc )";i:3;s:86:"Gets the number of the last thrown exception or the reason for a failed function call.";}
a:4:{i:0;s:12:"PDF_get_font";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:16:"PDF_get_fontname";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:16:"PDF_get_fontsize";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:20:"PDF_get_image_height";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:19:"PDF_get_image_width";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:20:"PDF_get_majorversion";i:1;s:38:"(PHP 4 >= 4.2.0, PECL pdflib >= 1.0.0)";i:2;s:33:"int PDF_get_majorversion ( void )";i:3;s:83:"This function is deprecated since PDFlib version 5, use with the parameter instead.";}
a:4:{i:0;s:20:"PDF_get_minorversion";i:1;s:38:"(PHP 4 >= 4.2.0, PECL pdflib >= 1.0.0)";i:2;s:33:"int PDF_get_minorversion ( void )";i:3;s:55:"Returns the minor version number of the PDFlib version.";}
a:4:{i:0;s:17:"PDF_get_parameter";i:1;s:38:"(PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0)";i:2;s:70:"string PDF_get_parameter ( resource $p, string $key, float $modifier )";i:3;s:60:"Gets the contents of some PDFlib parameter with string type.";}
a:4:{i:0;s:21:"PDF_get_pdi_parameter";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:93:"string PDF_get_pdi_parameter ( resource $p, string $key, int $doc, int $page, int $reserved )";i:3;s:63:"Gets the contents of a PDI document parameter with string type.";}
a:4:{i:0;s:17:"PDF_get_pdi_value";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:88:"float PDF_get_pdi_value ( resource $p, string $key, int $doc, int $page, int $reserved )";i:3;s:66:"Gets the contents of a PDI document parameter with numerical type.";}
a:4:{i:0;s:13:"PDF_get_value";i:1;s:38:"(PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0)";i:2;s:65:"float PDF_get_value ( resource $p, string $key, float $modifier )";i:3;s:60:"Gets the value of some PDFlib parameter with numerical type.";}
a:4:{i:0;s:13:"PDF_info_font";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:85:"float PDF_info_font ( resource $pdfdoc, int $font, string $keyword, string $optlist )";i:3;s:49:"Queries detailed information about a loaded font.";}
a:4:{i:0;s:17:"PDF_info_matchbox";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:88:"float PDF_info_matchbox ( resource $pdfdoc, string $boxname, int $num, string $keyword )";i:3;s:57:"Queries information about a matchbox on the current page.";}
a:4:{i:0;s:14:"PDF_info_table";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:70:"float PDF_info_table ( resource $pdfdoc, int $table, string $keyword )";i:3;s:79:"Retrieves table information related to the most recently placed table instance.";}
a:4:{i:0;s:17:"PDF_info_textflow";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:76:"float PDF_info_textflow ( resource $pdfdoc, int $textflow, string $keyword )";i:3;s:40:"Queries the current state of a textflow.";}
a:4:{i:0;s:17:"PDF_info_textline";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:92:"float PDF_info_textline ( resource $pdfdoc, string $text, string $keyword, string $optlist )";i:3;s:63:"Performs textline formatting and queries the resulting metrics.";}
a:4:{i:0;s:16:"PDF_initgraphics";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:37:"bool PDF_initgraphics ( resource $p )";i:3;s:98:"Reset all color and graphics state parameters to their defaults. Returns on success or on failure.";}
a:4:{i:0;s:10:"PDF_lineto";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:51:"bool PDF_lineto ( resource $p, float $x, float $y )";i:3;s:87:"Draws a line from the current point to another point. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_load_3ddata";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:75:"int PDF_load_3ddata ( resource $pdfdoc, string $filename, string $optlist )";i:3;s:51:"Loads a 3D model from a disk-based or virtual file.";}
a:4:{i:0;s:13:"PDF_load_font";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:91:"int PDF_load_font ( resource $pdfdoc, string $fontname, string $encoding, string $optlist )";i:3;s:50:"Searches for a font and prepares it for later use.";}
a:4:{i:0;s:19:"PDF_load_iccprofile";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:82:"int PDF_load_iccprofile ( resource $pdfdoc, string $profilename, string $optlist )";i:3;s:59:"Searches for an ICC profile, and prepares it for later use.";}
a:4:{i:0;s:14:"PDF_load_image";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:93:"int PDF_load_image ( resource $pdfdoc, string $imagetype, string $filename, string $optlist )";i:3;s:68:"Opens a disk-based or virtual image file subject to various options.";}
a:4:{i:0;s:17:"PDF_makespotcolor";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:55:"int PDF_makespotcolor ( resource $p, string $spotname )";i:3;s:124:"Finds a built-in spot color name, or makes a named spot color from the current fill color. Returns on success or on failure.";}
a:4:{i:0;s:10:"PDF_moveto";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:51:"bool PDF_moveto ( resource $p, float $x, float $y )";i:3;s:77:"Sets the current point for graphics output. Returns on success or on failure.";}
a:4:{i:0;s:7:"PDF_new";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:25:"resource PDF_new ( void )";i:3;s:50:"Creates a new PDFlib object with default settings.";}
a:4:{i:0;s:14:"PDF_open_ccitt";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:122:"int PDF_open_ccitt ( resource $pdfdoc, string $filename, int $width, int $height, int $BitReverse, int $k, int $Blackls1 )";i:3;s:24:"Opens a raw CCITT image.";}
a:4:{i:0;s:13:"PDF_open_file";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:52:"bool PDF_open_file ( resource $p, string $filename )";i:3;s:86:"Creates a new PDF file using the supplied file name. Returns on success or on failure.";}
a:4:{i:0;s:12:"PDF_open_gif";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:19:"PDF_open_image_file";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:112:"int PDF_open_image_file ( resource $p, string $imagetype, string $filename, string $stringparam, int $intparam )";i:3;s:20:"Opens an image file.";}
a:4:{i:0;s:14:"PDF_open_image";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:164:"int PDF_open_image ( resource $p, string $imagetype, string $source, string $data, int $length, int $width, int $height, int $components, int $bpc, string $params )";i:3;s:47:"Uses image data from a variety of data sources.";}
a:4:{i:0;s:13:"PDF_open_jpeg";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:21:"PDF_open_memory_image";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:58:"int PDF_open_memory_image ( resource $p, resource $image )";i:3;s:46:"This function is not supported by PDFlib GmbH.";}
a:4:{i:0;s:21:"PDF_open_pdi_document";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:76:"int PDF_open_pdi_document ( resource $p, string $filename, string $optlist )";i:3;s:71:"Open a disk-based or virtual PDF document and prepare it for later use.";}
a:4:{i:0;s:17:"PDF_open_pdi_page";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:81:"int PDF_open_pdi_page ( resource $p, int $doc, int $pagenumber, string $optlist )";i:3;s:36:"Prepares a page for later use with .";}
a:4:{i:0;s:12:"PDF_open_pdi";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:82:"int PDF_open_pdi ( resource $pdfdoc, string $filename, string $optlist, int $len )";i:3;s:73:"Opens a disk-based or virtual PDF document and prepares it for later use.";}
a:4:{i:0;s:13:"PDF_open_tiff";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:19:"PDF_pcos_get_number";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:65:"float PDF_pcos_get_number ( resource $p, int $doc, string $path )";i:3;s:58:"Gets the value of a pCOS path with type number or boolean.";}
a:4:{i:0;s:19:"PDF_pcos_get_stream";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:83:"string PDF_pcos_get_stream ( resource $p, int $doc, string $optlist, string $path )";i:3;s:70:"Gets the contents of a pCOS path with type stream, fstream, or string.";}
a:4:{i:0;s:19:"PDF_pcos_get_string";i:1;s:22:"(PECL pdflib >= 2.1.0)";i:2;s:66:"string PDF_pcos_get_string ( resource $p, int $doc, string $path )";i:3;s:65:"Gets the value of a pCOS path with type name, string, or boolean.";}
a:4:{i:0;s:15:"PDF_place_image";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:87:"bool PDF_place_image ( resource $pdfdoc, int $image, float $x, float $y, float $scale )";i:3;s:64:"Places an image and scales it. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_place_pdi_page";i:1;s:38:"(PHP 4 >= 4.0.6, PECL pdflib >= 1.0.0)";i:2;s:97:"bool PDF_place_pdi_page ( resource $pdfdoc, int $page, float $x, float $y, float $sx, float $sy )";i:3;s:66:"Places a PDF page and scales it. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_process_pdi";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:78:"int PDF_process_pdi ( resource $pdfdoc, int $doc, int $page, string $optlist )";i:3;s:55:"Processes certain elements of an imported PDF document.";}
a:4:{i:0;s:8:"PDF_rect";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:78:"bool PDF_rect ( resource $p, float $x, float $y, float $width, float $height )";i:3;s:52:"Draws a rectangle. Returns on success or on failure.";}
a:4:{i:0;s:11:"PDF_restore";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:32:"bool PDF_restore ( resource $p )";i:3;s:82:"Restores the most recently saved graphics state. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_resume_page";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:58:"bool PDF_resume_page ( resource $pdfdoc, string $optlist )";i:3;s:41:"Resumes a page to add more content to it.";}
a:4:{i:0;s:10:"PDF_rotate";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:43:"bool PDF_rotate ( resource $p, float $phi )";i:3;s:64:"Rotates the coordinate system. Returns on success or on failure.";}
a:4:{i:0;s:8:"PDF_save";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:29:"bool PDF_save ( resource $p )";i:3;s:67:"Saves the current graphics state. Returns on success or on failure.";}
a:4:{i:0;s:9:"PDF_scale";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:52:"bool PDF_scale ( resource $p, float $sx, float $sy )";i:3;s:63:"Scales the coordinate system. Returns on success or on failure.";}
a:4:{i:0;s:20:"PDF_set_border_color";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:80:"bool PDF_set_border_color ( resource $p, float $red, float $green, float $blue )";i:3;s:85:"Sets the border color for all kinds of annotations. Returns on success or on failure.";}
a:4:{i:0;s:19:"PDF_set_border_dash";i:1;s:38:"(PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0)";i:2;s:73:"bool PDF_set_border_dash ( resource $pdfdoc, float $black, float $white )";i:3;s:90:"Sets the border dash style for all kinds of annotations. Returns on success or on failure.";}
a:4:{i:0;s:20:"PDF_set_border_style";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:75:"bool PDF_set_border_style ( resource $pdfdoc, string $style, float $width )";i:3;s:85:"Sets the border style for all kinds of annotations. Returns on success or on failure.";}
a:4:{i:0;s:20:"PDF_set_char_spacing";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:79:"This function is deprecated since PDFlib version 3, use with parameter instead.";}
a:4:{i:0;s:16:"PDF_set_duration";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:81:"This function is deprecated since PDFlib version 3, use the option in or instead.";}
a:4:{i:0;s:14:"PDF_set_gstate";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:53:"bool PDF_set_gstate ( resource $pdfdoc, int $gstate )";i:3;s:34:"Activates a graphics state object.";}
a:4:{i:0;s:21:"PDF_set_horiz_scaling";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:79:"This function is deprecated since PDFlib version 3, use with parameter instead.";}
a:4:{i:0;s:19:"PDF_set_info_author";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:20:"PDF_set_info_creator";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:21:"PDF_set_info_keywords";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:20:"PDF_set_info_subject";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:18:"PDF_set_info_title";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 3, use instead.";}
a:4:{i:0;s:12:"PDF_set_info";i:1;s:38:"(PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0)";i:2;s:61:"bool PDF_set_info ( resource $p, string $key, string $value )";i:3;s:72:"Fill document information field with . Returns on success or on failure.";}
a:4:{i:0;s:24:"PDF_set_layer_dependency";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:81:"bool PDF_set_layer_dependency ( resource $pdfdoc, string $type, string $optlist )";i:3;s:92:"Defines hierarchical and group relationships among layers. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_set_leading";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:17:"PDF_set_parameter";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:66:"bool PDF_set_parameter ( resource $p, string $key, string $value )";i:3;s:78:"Sets some PDFlib parameter with string type. Returns on success or on failure.";}
a:4:{i:0;s:19:"PDF_set_text_matrix";i:1;s:16:"(PHP 4 <= 4.0.4)";i:2;s:0:"";i:3;s:71:"This function is deprecated since PDFlib version 3, use, ,, or instead.";}
a:4:{i:0;s:16:"PDF_set_text_pos";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:57:"bool PDF_set_text_pos ( resource $p, float $x, float $y )";i:3;s:80:"Sets the position for text output on the page. Returns on success or on failure.";}
a:4:{i:0;s:22:"PDF_set_text_rendering";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:17:"PDF_set_text_rise";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:13:"PDF_set_value";i:1;s:38:"(PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0)";i:2;s:61:"bool PDF_set_value ( resource $p, string $key, float $value )";i:3;s:94:"Sets the value of some PDFlib parameter with numerical type. Returns on success or on failure.";}
a:4:{i:0;s:20:"PDF_set_word_spacing";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:83:"This function is deprecated since PDFlib version 3, use with the parameter instead.";}
a:4:{i:0;s:12:"PDF_setcolor";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:113:"bool PDF_setcolor ( resource $p, string $fstype, string $colorspace, float $c1, float $c2, float $c3, float $c4 )";i:3;s:73:"Sets the current color space and color. Returns on success or on failure.";}
a:4:{i:0;s:11:"PDF_setdash";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:57:"bool PDF_setdash ( resource $pdfdoc, float $b, float $w )";i:3;s:89:"Sets the current dash pattern to black and white units. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_setdashpattern";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:61:"bool PDF_setdashpattern ( resource $pdfdoc, string $optlist )";i:3;s:80:"Sets a dash pattern defined by an option list. Returns on success or on failure.";}
a:4:{i:0;s:11:"PDF_setflat";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:54:"bool PDF_setflat ( resource $pdfdoc, float $flatness )";i:3;s:62:"Sets the flatness parameter. Returns on success or on failure.";}
a:4:{i:0;s:11:"PDF_setfont";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:65:"bool PDF_setfont ( resource $pdfdoc, int $font, float $fontsize )";i:3;s:102:"Sets the current font in the specified, using a handle returned by . Returns on success or on failure.";}
a:4:{i:0;s:16:"PDF_setgray_fill";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:47:"bool PDF_setgray_fill ( resource $p, float $g )";i:3;s:104:"Sets the current fill color to a gray value between 0 and 1 inclusive. Returns on success or on failure.";}
a:4:{i:0;s:18:"PDF_setgray_stroke";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:49:"bool PDF_setgray_stroke ( resource $p, float $g )";i:3;s:106:"Sets the current stroke color to a gray value between 0 and 1 inclusive. Returns on success or on failure.";}
a:4:{i:0;s:11:"PDF_setgray";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:42:"bool PDF_setgray ( resource $p, float $g )";i:3;s:115:"Sets the current fill and stroke color to a gray value between 0 and 1 inclusive. Returns on success or on failure.";}
a:4:{i:0;s:14:"PDF_setlinecap";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:49:"bool PDF_setlinecap ( resource $p, int $linecap )";i:3;s:86:"Sets the parameter to control the shape at the end of a path with respect to stroking.";}
a:4:{i:0;s:15:"PDF_setlinejoin";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:48:"bool PDF_setlinejoin ( resource $p, int $value )";i:3;s:115:"Sets the parameter to specify the shape at the corners of paths that are stroked. Returns on success or on failure.";}
a:4:{i:0;s:16:"PDF_setlinewidth";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:51:"bool PDF_setlinewidth ( resource $p, float $width )";i:3;s:62:"Sets the current line width. Returns on success or on failure.";}
a:4:{i:0;s:13:"PDF_setmatrix";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:94:"bool PDF_setmatrix ( resource $p, float $a, float $b, float $c, float $d, float $e, float $f )";i:3;s:84:"Explicitly sets the current transformation matrix. Returns on success or on failure.";}
a:4:{i:0;s:17:"PDF_setmiterlimit";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:57:"bool PDF_setmiterlimit ( resource $pdfdoc, float $miter )";i:3;s:54:"Sets the miter limit.Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_setpolydash";i:1;s:38:"(PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0)";i:2;s:0:"";i:3;s:64:"This function is deprecated since PDFlib version 5, use instead.";}
a:4:{i:0;s:20:"PDF_setrgbcolor_fill";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:80:"bool PDF_setrgbcolor_fill ( resource $p, float $red, float $green, float $blue )";i:3;s:89:"Sets the current fill color to the supplied RGB values. Returns on success or on failure.";}
a:4:{i:0;s:22:"PDF_setrgbcolor_stroke";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:82:"bool PDF_setrgbcolor_stroke ( resource $p, float $red, float $green, float $blue )";i:3;s:91:"Sets the current stroke color to the supplied RGB values. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_setrgbcolor";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:75:"bool PDF_setrgbcolor ( resource $p, float $red, float $green, float $blue )";i:3;s:100:"Sets the current fill and stroke color to the supplied RGB values. Returns on success or on failure.";}
a:4:{i:0;s:19:"PDF_shading_pattern";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:75:"int PDF_shading_pattern ( resource $pdfdoc, int $shading, string $optlist )";i:3;s:49:"Defines a shading pattern using a shading object.";}
a:4:{i:0;s:11:"PDF_shading";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:157:"int PDF_shading ( resource $pdfdoc, string $shtype, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist )";i:3;s:61:"Defines a blend from the current fill color to another color.";}
a:4:{i:0;s:10:"PDF_shfill";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:50:"bool PDF_shfill ( resource $pdfdoc, int $shading )";i:3;s:56:"Fills an area with a shading, based on a shading object.";}
a:4:{i:0;s:14:"PDF_show_boxed";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:133:"int PDF_show_boxed ( resource $p, string $text, float $left, float $top, float $width, float $height, string $mode, string $feature )";i:3;s:125:"This function is deprecated since PDFlib version 6, use for single lines, or the functions for multi-line formatting instead.";}
a:4:{i:0;s:11:"PDF_show_xy";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:66:"bool PDF_show_xy ( resource $p, string $text, float $x, float $y )";i:3;s:61:"Prints in the current font. Returns on success or on failure.";}
a:4:{i:0;s:8:"PDF_show";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:48:"bool PDF_show ( resource $pdfdoc, string $text )";i:3;s:94:"Prints in the current font and size at the current position. Returns on success or on failure.";}
a:4:{i:0;s:8:"PDF_skew";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:56:"bool PDF_skew ( resource $p, float $alpha, float $beta )";i:3;s:98:"Skews the coordinate system in x and y direction by and degrees. Returns on success or on failure.";}
a:4:{i:0;s:15:"PDF_stringwidth";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:79:"float PDF_stringwidth ( resource $p, string $text, int $font, float $fontsize )";i:3;s:42:"Returns the width of in an arbitrary font.";}
a:4:{i:0;s:10:"PDF_stroke";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:31:"bool PDF_stroke ( resource $p )";i:3;s:103:"Strokes the path with the current color and line width, and clear it. Returns on success or on failure.";}
a:4:{i:0;s:16:"PDF_suspend_page";i:1;s:22:"(PECL pdflib >= 2.0.0)";i:2;s:59:"bool PDF_suspend_page ( resource $pdfdoc, string $optlist )";i:3;s:64:"Suspends the current page so that it can later be resumed with .";}
a:4:{i:0;s:13:"PDF_translate";i:1;s:29:"(PHP 4, PECL pdflib >= 1.0.0)";i:2;s:56:"bool PDF_translate ( resource $p, float $tx, float $ty )";i:3;s:47:"Translates the origin of the coordinate system.";}
a:4:{i:0;s:17:"PDF_utf16_to_utf8";i:1;s:22:"(PECL pdflib >= 2.0.3)";i:2;s:66:"string PDF_utf16_to_utf8 ( resource $pdfdoc, string $utf16string )";i:3;s:46:"Converts a string from UTF-16 format to UTF-8.";}
a:4:{i:0;s:18:"PDF_utf32_to_utf16";i:1;s:31:"(PECL pdflib >= Unknown future)";i:2;s:85:"string PDF_utf32_to_utf16 ( resource $pdfdoc, string $utf32string, string $ordering )";i:3;s:47:"Converts a string from UTF-32 format to UTF-16.";}
a:4:{i:0;s:17:"PDF_utf8_to_utf16";i:1;s:22:"(PECL pdflib >= 2.0.3)";i:2;s:83:"string PDF_utf8_to_utf16 ( resource $pdfdoc, string $utf8string, string $ordering )";i:3;s:46:"Converts a string from UTF-8 format to UTF-16.";}
a:4:{i:0;s:15:"ps_add_bookmark";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:92:"int ps_add_bookmark ( resource $psdoc, string $text [, int $parent = 0 [, int $open = 0 ]] )";i:3;s:170:"Adds a bookmark for the current page. Bookmarks usually appear in PDF-Viewers left of the page in a hierarchical tree. Clicking on a bookmark will jump to the given page.";}
a:4:{i:0;s:17:"ps_add_launchlink";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:108:"bool ps_add_launchlink ( resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename )";i:3;s:286:"Places a hyperlink at the given position pointing to a file program which is being started when clicked on. The hyperlink's source position is a rectangle with its lower left corner at (llx, lly) and its upper right corner at (urx, ury). The rectangle has by default a thin blue border.";}
a:4:{i:0;s:16:"ps_add_locallink";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:114:"bool ps_add_locallink ( resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest )";i:3;s:174:"Places a hyperlink at the given position pointing to a page in the same document. Clicking on the link will jump to the given page. The first page in a document has number 1.";}
a:4:{i:0;s:11:"ps_add_note";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:142:"bool ps_add_note ( resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open )";i:3;s:242:"Adds a note at a certain position on the page. Notes are like little rectangular sheets with text on it, which can be placed anywhere on a page. They are shown either folded or unfolded. If folded, the specified icon is used as a placeholder.";}
a:4:{i:0;s:14:"ps_add_pdflink";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:130:"bool ps_add_pdflink ( resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest )";i:3;s:186:"Places a hyperlink at the given position pointing to a second pdf document. Clicking on the link will branch to the document at the given page. The first page in a document has number 1.";}
a:4:{i:0;s:14:"ps_add_weblink";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:100:"bool ps_add_weblink ( resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url )";i:3;s:231:"Places a hyperlink at the given position pointing to a web page. The hyperlink's source position is a rectangle with its lower left corner at (, ) and its upper right corner at (, ). The rectangle has by default a thin blue border.";}
a:4:{i:0;s:6:"ps_arc";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:93:"bool ps_arc ( resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta )";i:3;s:263:"Draws a portion of a circle with at middle point at (, ). The arc starts at an angle of and ends at an angle of . It is drawn counterclockwise (use to draw clockwise). The subpath added to the current path starts on the arc at angle and ends on the arc at angle .";}
a:4:{i:0;s:7:"ps_arcn";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:94:"bool ps_arcn ( resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta )";i:3;s:263:"Draws a portion of a circle with at middle point at (, ). The arc starts at an angle of and ends at an angle of . It is drawn clockwise (use to draw counterclockwise). The subpath added to the current path starts on the arc at angle and ends on the arc at angle .";}
a:4:{i:0;s:13:"ps_begin_page";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:67:"bool ps_begin_page ( resource $psdoc, float $width, float $height )";i:3;s:504:"Starts a new page. Although the parameters and imply a different page size for each page, this is not possible in PostScript. The first call of will set the page size for the whole document. Consecutive calls will have no effect, except for creating a new page. The situation is different if you intent to convert the PostScript document into PDF. This function places pdfmarks into the document which can set the size for each page indiviually. The resulting PDF document will have different page sizes.";}
a:4:{i:0;s:16:"ps_begin_pattern";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:113:"int ps_begin_pattern ( resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype )";i:3;s:177:"Starts a new pattern. A pattern is like a page containing e.g. a drawing which can be used for filling areas. It is used like a color by calling and setting the color space to .";}
a:4:{i:0;s:17:"ps_begin_template";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:70:"int ps_begin_template ( resource $psdoc, float $width, float $height )";i:3;s:366:"Starts a new template. A template is called a form in the postscript language. It is created similar to a pattern but used like an image. Templates are often used for drawings which are placed several times through out the document, e.g. like a company logo. All drawing functions may be used within a template. The template will not be drawn until it is placed by .";}
a:4:{i:0;s:9:"ps_circle";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:69:"bool ps_circle ( resource $psdoc, float $x, float $y, float $radius )";i:3;s:322:"Draws a circle with its middle point at (, ). The circle starts and ends at position (+, ). If this function is called outside a path it will start a new path. If it is called within a path it will add the circle as a subpath. If the last drawing operation does not end in point (+, ) then there will be a gap in the path.";}
a:4:{i:0;s:7:"ps_clip";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:32:"bool ps_clip ( resource $psdoc )";i:3;s:134:"Takes the current path and uses it to define the border of a clipping area. Everything drawn outside of that area will not be visible.";}
a:4:{i:0;s:14:"ps_close_image";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:53:"void ps_close_image ( resource $psdoc, int $imageid )";i:3;s:91:"Closes an image and frees its resources. Once an image is closed it cannot be used anymore.";}
a:4:{i:0;s:8:"ps_close";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:33:"bool ps_close ( resource $psdoc )";i:3;s:31:"Closes the PostScript document.";}
a:4:{i:0;s:19:"ps_closepath_stroke";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:44:"bool ps_closepath_stroke ( resource $psdoc )";i:3;s:87:"Connects the last point with first point of a path and draws the resulting closed line.";}
a:4:{i:0;s:12:"ps_closepath";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:37:"bool ps_closepath ( resource $psdoc )";i:3;s:125:"Connects the last point with the first point of a path. The resulting path can be used for stroking, filling, clipping, etc..";}
a:4:{i:0;s:16:"ps_continue_text";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:55:"bool ps_continue_text ( resource $psdoc, string $text )";i:3;s:227:"Output a text one line below the last line. The line spacing is taken from the value "leading" which must be set with . The actual position of the text is determined by the values "textx" and "texty" which can be requested with";}
a:4:{i:0;s:10:"ps_curveto";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:101:"bool ps_curveto ( resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 )";i:3;s:105:"Add a section of a cubic BÃƒÂ©zier curve described by the three given control points to the current path.";}
a:4:{i:0;s:9:"ps_delete";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:34:"bool ps_delete ( resource $psdoc )";i:3;s:314:"Mainly frees memory used by the document. Also closes a file, if it was not closed before with . You should in any case close the file with before, because not just closes the file but also outputs a trailor containing PostScript comments like the number of pages in the document and adding the bookmark hierarchy.";}
a:4:{i:0;s:11:"ps_end_page";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:36:"bool ps_end_page ( resource $psdoc )";i:3;s:237:"Ends a page which was started with . Ending a page will leave the current drawing context, which e.g. requires to reload fonts if they were loading within the page, and to set many other drawing parameters like the line width, or color..";}
a:4:{i:0;s:14:"ps_end_pattern";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:39:"bool ps_end_pattern ( resource $psdoc )";i:3;s:113:"Ends a pattern which was started with . Once a pattern has been ended, it can be used like a color to fill areas.";}
a:4:{i:0;s:15:"ps_end_template";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:40:"bool ps_end_template ( resource $psdoc )";i:3;s:102:"Ends a template which was started with . Once a template has been ended, it can be used like an image.";}
a:4:{i:0;s:14:"ps_fill_stroke";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:39:"bool ps_fill_stroke ( resource $psdoc )";i:3;s:84:"Fills and draws the path constructed with previously called drawing functions like .";}
a:4:{i:0;s:7:"ps_fill";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:32:"bool ps_fill ( resource $psdoc )";i:3;s:74:"Fills the path constructed with previously called drawing functions like .";}
a:4:{i:0;s:11:"ps_findfont";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:96:"int ps_findfont ( resource $psdoc, string $fontname, string $encoding [, bool $embed = false ] )";i:3;s:444:"Loads a font for later use. Before text is output with a loaded font it must be set with . This function needs the adobe font metric file in order to calculate the space used up by the characters. A font which is loaded within a page will only be available on that page. Fonts which are to be used in the complete document have to be loaded before the first call of . Calling between pages will make that font available for all following pages.";}
a:4:{i:0;s:13:"ps_get_buffer";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:40:"string ps_get_buffer ( resource $psdoc )";i:3;s:354:"This function is not implemented yet. It will always return an empty string. The idea for a later implementation is to write the contents of the postscript file into an internal buffer if in memory creation is requested, and retrieve the buffer content with this function. Currently, documents created in memory are send to the browser without buffering.";}
a:4:{i:0;s:16:"ps_get_parameter";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:78:"string ps_get_parameter ( resource $psdoc, string $name [, float $modifier ] )";i:3;s:215:"Gets several parameters which were directly set by or indirectly by one of the other functions. Parameters are by definition string values. This function cannot be used to retrieve resources which were also set by .";}
a:4:{i:0;s:12:"ps_get_value";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:73:"float ps_get_value ( resource $psdoc, string $name [, float $modifier ] )";i:3;s:78:"Gets several values which were set by . Values are by definition float values.";}
a:4:{i:0;s:12:"ps_hyphenate";i:1;s:18:"(PECL ps >= 1.1.1)";i:2;s:52:"array ps_hyphenate ( resource $psdoc, string $text )";i:3;s:165:"Hyphenates the passed word. evaluates the value hyphenminchars (set by ) and the parameter hyphendict (set by ). hyphendict must be set before calling this function.";}
a:4:{i:0;s:15:"ps_include_file";i:1;s:18:"(PECL ps >= 1.3.4)";i:2;s:54:"bool ps_include_file ( resource $psdoc, string $file )";i:3;s:0:"";}
a:4:{i:0;s:9:"ps_lineto";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:54:"bool ps_lineto ( resource $psdoc, float $x, float $y )";i:3;s:132:"Adds a straight line from the current point to the given coordinates to the current path. Use to set the starting point of the line.";}
a:4:{i:0;s:16:"ps_makespotcolor";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:77:"int ps_makespotcolor ( resource $psdoc, string $name [, int $reserved = 0 ] )";i:3;s:327:"Creates a spot color from the current fill color. The fill color must be defined in rgb, cmyk or gray colorspace. The spot color name can be an arbitrary name. A spot color can be set as any color with . When the document is not printed but displayed by an postscript viewer the given color in the specified color space is use.";}
a:4:{i:0;s:9:"ps_moveto";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:54:"bool ps_moveto ( resource $psdoc, float $x, float $y )";i:3;s:246:"Sets the current point to new coordinates. If this is the first call of after a previous path has been ended then it will start a new path. If this function is called in the middle of a path it will just set the current point and start a subpath.";}
a:4:{i:0;s:6:"ps_new";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:24:"resource ps_new ( void )";i:3;s:187:"Creates a new document instance. It does not create the file on disk or in memory, it just sets up everything. is usually followed by a call of to actually create the postscript document.";}
a:4:{i:0;s:12:"ps_open_file";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:59:"bool ps_open_file ( resource $psdoc [, string $filename ] )";i:3;s:110:"Creates a new file on disk and writes the PostScript document into it. The file will be closed when is called.";}
a:4:{i:0;s:18:"ps_open_image_file";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:121:"int ps_open_image_file ( resource $psdoc, string $type, string $filename [, string $stringparam [, int $intparam = 0 ]] )";i:3;s:29:"Loads an image for later use.";}
a:4:{i:0;s:13:"ps_open_image";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:162:"int ps_open_image ( resource $psdoc, string $type, string $source, string $data, int $lenght, int $width, int $height, int $components, int $bpc, string $params )";i:3;s:293:"Reads an image which is already available in memory. The parameter is currently not evaluated and assumed to be . The image data is a sequence of pixels starting in th upper left corner and ending in the lower right corner. Each pixel consists of color components, and each component has bits.";}
a:4:{i:0;s:20:"ps_open_memory_image";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:53:"int ps_open_memory_image ( resource $psdoc, int $gd )";i:3;s:0:"";}
a:4:{i:0;s:14:"ps_place_image";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:87:"bool ps_place_image ( resource $psdoc, int $imageid, float $x, float $y, float $scale )";i:3;s:167:"Places a formerly loaded image on the page. The image can be scaled. If the image shall be rotated as well, you will have to rotate the coordinate system before with .";}
a:4:{i:0;s:7:"ps_rect";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:81:"bool ps_rect ( resource $psdoc, float $x, float $y, float $width, float $height )";i:3;s:353:"Draws a rectangle with its lower left corner at (, ). The rectangle starts and ends in its lower left corner. If this function is called outside a path it will start a new path. If it is called within a path it will add the rectangle as a subpath. If the last drawing operation does not end in the lower left corner then there will be a gap in the path.";}
a:4:{i:0;s:10:"ps_restore";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:35:"bool ps_restore ( resource $psdoc )";i:3;s:219:"Restores a previously saved graphics context. Any call of must be accompanied by a call to . All coordinate transformations, line style settings, color settings, etc. are being restored to the state before the call of .";}
a:4:{i:0;s:9:"ps_rotate";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:46:"bool ps_rotate ( resource $psdoc, float $rot )";i:3;s:43:"Sets the rotation of the coordinate system.";}
a:4:{i:0;s:7:"ps_save";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:32:"bool ps_save ( resource $psdoc )";i:3;s:142:"Saves the current graphics context, containing colors, translation and rotation settings and some more. A saved context can be restored with .";}
a:4:{i:0;s:8:"ps_scale";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:53:"bool ps_scale ( resource $psdoc, float $x, float $y )";i:3;s:62:"Sets horizontal and vertical scaling of the coordinate system.";}
a:4:{i:0;s:19:"ps_set_border_color";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:83:"bool ps_set_border_color ( resource $psdoc, float $red, float $green, float $blue )";i:3;s:286:"Links added with one of the functions, , etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the color of the rectangle's border line.";}
a:4:{i:0;s:18:"ps_set_border_dash";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:71:"bool ps_set_border_dash ( resource $psdoc, float $black, float $white )";i:3;s:311:"Links added with one of the functions, , etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the length of the black and white portion of a dashed border line.";}
a:4:{i:0;s:19:"ps_set_border_style";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:73:"bool ps_set_border_style ( resource $psdoc, string $style, float $width )";i:3;s:289:"Links added with one of the functions, , etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the appearance and width of the border line.";}
a:4:{i:0;s:11:"ps_set_info";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:58:"bool ps_set_info ( resource $p, string $key, string $val )";i:3;s:221:"Sets certain information fields of the document. This fields will be shown as a comment in the header of the PostScript file. If the document is converted to pdf this fields will also be used for the document information.";}
a:4:{i:0;s:16:"ps_set_parameter";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:70:"bool ps_set_parameter ( resource $psdoc, string $name, string $value )";i:3;s:101:"Sets several parameters which are used by many functions. Parameters are by definition string values.";}
a:4:{i:0;s:15:"ps_set_text_pos";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:60:"bool ps_set_text_pos ( resource $psdoc, float $x, float $y )";i:3;s:153:"Set the position for the next text output. You may alternatively set the x and y value separately by calling and choosing respectively as the value name.";}
a:4:{i:0;s:12:"ps_set_value";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:65:"bool ps_set_value ( resource $psdoc, string $name, float $value )";i:3;s:96:"Sets several values which are used by many functions. Parameters are by definition float values.";}
a:4:{i:0;s:11:"ps_setcolor";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:114:"bool ps_setcolor ( resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4 )";i:3;s:45:"Sets the color for drawing, filling, or both.";}
a:4:{i:0;s:10:"ps_setdash";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:58:"bool ps_setdash ( resource $psdoc, float $on, float $off )";i:3;s:65:"Sets the length of the black and white portions of a dashed line.";}
a:4:{i:0;s:10:"ps_setflat";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:49:"bool ps_setflat ( resource $psdoc, float $value )";i:3;s:0:"";}
a:4:{i:0;s:10:"ps_setfont";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:61:"bool ps_setfont ( resource $psdoc, int $fontid, float $size )";i:3;s:109:"Sets a font, which has to be loaded before with . Outputting text without setting a font results in an error.";}
a:4:{i:0;s:10:"ps_setgray";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:48:"bool ps_setgray ( resource $psdoc, float $gray )";i:3;s:57:"Sets the gray value for all following drawing operations.";}
a:4:{i:0;s:13:"ps_setlinecap";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:49:"bool ps_setlinecap ( resource $psdoc, int $type )";i:3;s:29:"Sets how line ends look like.";}
a:4:{i:0;s:14:"ps_setlinejoin";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:50:"bool ps_setlinejoin ( resource $psdoc, int $type )";i:3;s:26:"Sets how lines are joined.";}
a:4:{i:0;s:15:"ps_setlinewidth";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:54:"bool ps_setlinewidth ( resource $psdoc, float $width )";i:3;s:57:"Sets the line width for all following drawing operations.";}
a:4:{i:0;s:16:"ps_setmiterlimit";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:55:"bool ps_setmiterlimit ( resource $psdoc, float $value )";i:3;s:210:"If two lines join in a small angle and the line join is set to, then the resulting spike will be very long. The miter limit is the maximum ratio of the miter length (the length of the spike) and the line width.";}
a:4:{i:0;s:19:"ps_setoverprintmode";i:1;s:18:"(PECL ps >= 1.3.0)";i:2;s:55:"bool ps_setoverprintmode ( resource $psdoc, int $mode )";i:3;s:0:"";}
a:4:{i:0;s:14:"ps_setpolydash";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:51:"bool ps_setpolydash ( resource $psdoc, float $arr )";i:3;s:112:"Sets the length of the black and white portions of a dashed line. is used to set more complicated dash patterns.";}
a:4:{i:0;s:18:"ps_shading_pattern";i:1;s:18:"(PECL ps >= 1.3.0)";i:2;s:75:"int ps_shading_pattern ( resource $psdoc, int $shadingid, string $optlist )";i:3;s:127:"Creates a pattern based on a shading, which has to be created before with . Shading patterns can be used like regular patterns.";}
a:4:{i:0;s:10:"ps_shading";i:1;s:18:"(PECL ps >= 1.3.0)";i:2;s:153:"int ps_shading ( resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist )";i:3;s:44:"Creates a shading, which can be used by or .";}
a:4:{i:0;s:9:"ps_shfill";i:1;s:18:"(PECL ps >= 1.3.0)";i:2;s:50:"bool ps_shfill ( resource $psdoc, int $shadingid )";i:3;s:175:"Fills an area with a shading, which has to be created before with . This is an alternative way to creating a pattern from a shading and using the pattern as the filling color.";}
a:4:{i:0;s:13:"ps_show_boxed";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:144:"int ps_show_boxed ( resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode [, string $feature ] )";i:3;s:188:"Outputs a text in a given box. The lower left corner of the box is at (, ). Line breaks will be inserted where needed. Multiple spaces are treated as one. Tabulators are treated as spaces.";}
a:4:{i:0;s:11:"ps_show_xy2";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:88:"bool ps_show_xy2 ( resource $psdoc, string $text, int $len, float $xcoor, float $ycoor )";i:3;s:0:"";}
a:4:{i:0;s:10:"ps_show_xy";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:69:"bool ps_show_xy ( resource $psdoc, string $text, float $x, float $y )";i:3;s:41:"Output a text at the given text position.";}
a:4:{i:0;s:8:"ps_show2";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:57:"bool ps_show2 ( resource $psdoc, string $text, int $len )";i:3;s:0:"";}
a:4:{i:0;s:7:"ps_show";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:46:"bool ps_show ( resource $psdoc, string $text )";i:3;s:216:"Output a text at the current text position. The text position can be set by storing the x and y coordinates into the values and with the function . The function will issue an error if a font was not set before with .";}
a:4:{i:0;s:18:"ps_string_geometry";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:101:"array ps_string_geometry ( resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0 ]] )";i:3;s:121:"This function is similar to but returns an array of dimensions containing the width, ascender, and descender of the text.";}
a:4:{i:0;s:14:"ps_stringwidth";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:97:"float ps_stringwidth ( resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0 ]] )";i:3;s:227:"Calculates the width of a string in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width. If kerning is turned on, it will be taken into account.";}
a:4:{i:0;s:9:"ps_stroke";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:34:"bool ps_stroke ( resource $psdoc )";i:3;s:74:"Draws the path constructed with previously called drawing functions like .";}
a:4:{i:0;s:14:"ps_symbol_name";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:72:"string ps_symbol_name ( resource $psdoc, int $ord [, int $fontid = 0 ] )";i:3;s:82:"This function needs an Adobe font metrics file to know which glyphs are available.";}
a:4:{i:0;s:15:"ps_symbol_width";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:94:"float ps_symbol_width ( resource $psdoc, int $ord [, int $fontid = 0 [, float $size = 0.0 ]] )";i:3;s:170:"Calculates the width of a glyph in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width.";}
a:4:{i:0;s:9:"ps_symbol";i:1;s:18:"(PECL ps >= 1.2.0)";i:2;s:44:"bool ps_symbol ( resource $psdoc, int $ord )";i:3;s:146:"Output the glyph at position in the font encoding vector of the current font. The font encoding for a font can be set when loading the font with .";}
a:4:{i:0;s:12:"ps_translate";i:1;s:18:"(PECL ps >= 1.1.0)";i:2;s:57:"bool ps_translate ( resource $psdoc, float $x, float $y )";i:3;s:50:"Sets a new initial point of the coordinate system.";}
a:4:{i:0;s:9:"rpm_close";i:1;s:25:"(PECL rpmreader >= 0.1.0)";i:2;s:33:"bool rpm_close ( resource $rpmr )";i:3;s:31:"will close an RPM file pointer.";}
a:4:{i:0;s:11:"rpm_get_tag";i:1;s:25:"(PECL rpmreader >= 0.1.0)";i:2;s:49:"mixed rpm_get_tag ( resource $rpmr, int $tagnum )";i:3;s:67:"will retrieve a given tag from the RPM file's header and return it.";}
a:4:{i:0;s:12:"rpm_is_valid";i:1;s:25:"(PECL rpmreader >= 0.1.0)";i:2;s:38:"bool rpm_is_valid ( string $filename )";i:3;s:182:"will test an RPM file for validity as an RPM file. This is not the same as as it only checks the file for validity but does not return a file pointer to be used by further functions.";}
a:4:{i:0;s:8:"rpm_open";i:1;s:25:"(PECL rpmreader >= 0.1.0)";i:2;s:38:"resource rpm_open ( string $filename )";i:3;s:73:"will open an RPM file and will determine if the file is a valid RPM file.";}
a:4:{i:0;s:11:"rpm_version";i:1;s:25:"(PECL rpmreader >= 0.3.0)";i:2;s:27:"string rpm_version ( void )";i:3;s:59:"will return the current version of the rpmreader extension.";}
a:4:{i:0;s:16:"swf_actiongeturl";i:1;s:7:"(PHP 4)";i:2;s:53:"void swf_actiongeturl ( string $url, string $target )";i:3;s:56:"Gets the URL specified by the parameter with the given .";}
a:4:{i:0;s:19:"swf_actiongotoframe";i:1;s:7:"(PHP 4)";i:2;s:45:"void swf_actiongotoframe ( int $framenumber )";i:3;s:71:"The function will go to the frame specified by, play it, and then stop.";}
a:4:{i:0;s:19:"swf_actiongotolabel";i:1;s:7:"(PHP 4)";i:2;s:42:"void swf_actiongotolabel ( string $label )";i:3;s:85:"The function displays the frame with the label given by the parameter and then stops.";}
a:4:{i:0;s:19:"swf_actionnextframe";i:1;s:7:"(PHP 4)";i:2;s:33:"void swf_actionnextframe ( void )";i:3;s:21:"Go forward one frame.";}
a:4:{i:0;s:14:"swf_actionplay";i:1;s:7:"(PHP 4)";i:2;s:28:"void swf_actionplay ( void )";i:3;s:53:"Start playing the flash movie from the current frame.";}
a:4:{i:0;s:19:"swf_actionprevframe";i:1;s:7:"(PHP 4)";i:2;s:33:"void swf_actionprevframe ( void )";i:3;s:23:"Go backwards one frame.";}
a:4:{i:0;s:19:"swf_actionsettarget";i:1;s:7:"(PHP 4)";i:2;s:43:"void swf_actionsettarget ( string $target )";i:3;s:108:"Sets the context for all actions. You can use this to control other flash movies that are currently playing.";}
a:4:{i:0;s:14:"swf_actionstop";i:1;s:7:"(PHP 4)";i:2;s:28:"void swf_actionstop ( void )";i:3;s:50:"Stop playing the flash movie at the current frame.";}
a:4:{i:0;s:23:"swf_actiontogglequality";i:1;s:7:"(PHP 4)";i:2;s:37:"void swf_actiontogglequality ( void )";i:3;s:52:"Toggle the flash movie between high and low quality.";}
a:4:{i:0;s:22:"swf_actionwaitforframe";i:1;s:7:"(PHP 4)";i:2;s:64:"void swf_actionwaitforframe ( int $framenumber, int $skipcount )";i:3;s:211:"The function will check to see if the frame, specified by the parameter has been loaded, if not it will skip the number of actions specified by the parameter. This can be useful for "Loading..." type animations.";}
a:4:{i:0;s:19:"swf_addbuttonrecord";i:1;s:7:"(PHP 4)";i:2;s:66:"void swf_addbuttonrecord ( int $states, int $shapeid, int $depth )";i:3;s:52:"Allow you to define the specifics of using a button.";}
a:4:{i:0;s:12:"swf_addcolor";i:1;s:7:"(PHP 4)";i:2;s:60:"void swf_addcolor ( float $r, float $g, float $b, float $a )";i:3;s:107:"Sets the global add color to the specified color. This color is then implicitly used by the, and functions.";}
a:4:{i:0;s:13:"swf_closefile";i:1;s:7:"(PHP 4)";i:2;s:42:"void swf_closefile ([ int $return_file ] )";i:3;s:45:"Close a file that was opened by the function.";}
a:4:{i:0;s:16:"swf_definebitmap";i:1;s:7:"(PHP 4)";i:2;s:56:"void swf_definebitmap ( int $objid, string $image_name )";i:3;s:45:"The function defines a bitmap given an image.";}
a:4:{i:0;s:14:"swf_definefont";i:1;s:7:"(PHP 4)";i:2;s:53:"void swf_definefont ( int $fontid, string $fontname )";i:3;s:120:"The function defines a font parameter and gives it the specified id. It then sets the font given by to the current font.";}
a:4:{i:0;s:14:"swf_defineline";i:1;s:7:"(PHP 4)";i:2;s:92:"void swf_defineline ( int $objid, float $x1, float $y1, float $x2, float $y2, float $width )";i:3;s:15:"Defines a line.";}
a:4:{i:0;s:14:"swf_definepoly";i:1;s:7:"(PHP 4)";i:2;s:77:"void swf_definepoly ( int $objid, array $coords, int $npoints, float $width )";i:3;s:53:"Defines a polygon given an array of x, y coordinates.";}
a:4:{i:0;s:14:"swf_definerect";i:1;s:7:"(PHP 4)";i:2;s:92:"void swf_definerect ( int $objid, float $x1, float $y1, float $x2, float $y2, float $width )";i:3;s:89:"Defines a rectangle with an upper left hand coordinate and a lower right hand coordinate.";}
a:4:{i:0;s:14:"swf_definetext";i:1;s:7:"(PHP 4)";i:2;s:62:"void swf_definetext ( int $objid, string $str, int $docenter )";i:3;s:59:"Defines a text string using the current font and font size.";}
a:4:{i:0;s:13:"swf_endbutton";i:1;s:7:"(PHP 4)";i:2;s:27:"void swf_endbutton ( void )";i:3;s:55:"The function ends the definition of the current button.";}
a:4:{i:0;s:15:"swf_enddoaction";i:1;s:7:"(PHP 4)";i:2;s:29:"void swf_enddoaction ( void )";i:3;s:48:"Ends the current action started by the function.";}
a:4:{i:0;s:12:"swf_endshape";i:1;s:7:"(PHP 4)";i:2;s:26:"void swf_endshape ( void )";i:3;s:50:"The completes the definition of the current shape.";}
a:4:{i:0;s:13:"swf_endsymbol";i:1;s:7:"(PHP 4)";i:2;s:27:"void swf_endsymbol ( void )";i:3;s:65:"Ends the definition of a symbol that was started by the function.";}
a:4:{i:0;s:12:"swf_fontsize";i:1;s:7:"(PHP 4)";i:2;s:33:"void swf_fontsize ( float $size )";i:3;s:58:"Changes the font size to the value given by the parameter.";}
a:4:{i:0;s:13:"swf_fontslant";i:1;s:7:"(PHP 4)";i:2;s:35:"void swf_fontslant ( float $slant )";i:3;s:67:"Set the current font slant to the angle indicated by the parameter.";}
a:4:{i:0;s:16:"swf_fonttracking";i:1;s:7:"(PHP 4)";i:2;s:41:"void swf_fonttracking ( float $tracking )";i:3;s:225:"Set the font tracking to the value specified by the parameter. This function is used to increase the spacing between letters and text, positive values increase the space and negative values decrease the space between letters.";}
a:4:{i:0;s:17:"swf_getbitmapinfo";i:1;s:7:"(PHP 4)";i:2;s:41:"array swf_getbitmapinfo ( int $bitmapid )";i:3;s:35:"Returns information about a bitmap.";}
a:4:{i:0;s:15:"swf_getfontinfo";i:1;s:7:"(PHP 4)";i:2;s:30:"array swf_getfontinfo ( void )";i:3;s:96:"Gets information about the font by giving the height in pixels of a capital A and a lowercase x.";}
a:4:{i:0;s:12:"swf_getframe";i:1;s:7:"(PHP 4)";i:2;s:25:"int swf_getframe ( void )";i:3;s:50:"The function gets the number of the current frame.";}
a:4:{i:0;s:14:"swf_labelframe";i:1;s:7:"(PHP 4)";i:2;s:36:"void swf_labelframe ( string $name )";i:3;s:41:"Labels the current frame with the given .";}
a:4:{i:0;s:10:"swf_lookat";i:1;s:7:"(PHP 4)";i:2;s:137:"void swf_lookat ( float $view_x, float $view_y, float $view_z, float $reference_x, float $reference_y, float $reference_z, float $twist )";i:3;s:118:"Defines a viewing transformation by giving the viewing position and the coordinates of a reference point in the scene.";}
a:4:{i:0;s:16:"swf_modifyobject";i:1;s:7:"(PHP 4)";i:2;s:46:"void swf_modifyobject ( int $depth, int $how )";i:3;s:66:"Updates the position and/or color of the object at the specified .";}
a:4:{i:0;s:12:"swf_mulcolor";i:1;s:7:"(PHP 4)";i:2;s:60:"void swf_mulcolor ( float $r, float $g, float $b, float $a )";i:3;s:106:"Sets the global multiply color to the given one. This color is then implicitly used by the, and functions.";}
a:4:{i:0;s:10:"swf_nextid";i:1;s:7:"(PHP 4)";i:2;s:23:"int swf_nextid ( void )";i:3;s:50:"The function returns the next available object id.";}
a:4:{i:0;s:15:"swf_oncondition";i:1;s:7:"(PHP 4)";i:2;s:40:"void swf_oncondition ( int $transition )";i:3;s:69:"The function describes a transition that will trigger an action list.";}
a:4:{i:0;s:12:"swf_openfile";i:1;s:7:"(PHP 4)";i:2;s:115:"void swf_openfile ( string $filename, float $width, float $height, float $framerate, float $r, float $g, float $b )";i:3;s:96:"Opens a new file. This must be the first function you call, otherwise your script will not work.";}
a:4:{i:0;s:10:"swf_ortho2";i:1;s:7:"(PHP 4)";i:2;s:70:"void swf_ortho2 ( float $xmin, float $xmax, float $ymin, float $ymax )";i:3;s:161:"Defines a two dimensional orthographic mapping of user coordinates onto the current viewport, this defaults to one to one mapping of the area of the Flash movie.";}
a:4:{i:0;s:9:"swf_ortho";i:1;s:16:"(PHP 4 >= 4.0.1)";i:2;s:95:"void swf_ortho ( float $xmin, float $xmax, float $ymin, float $ymax, float $zmin, float $zmax )";i:3;s:81:"Defines an 3D orthographic mapping of user coordinates onto the current viewport.";}
a:4:{i:0;s:15:"swf_perspective";i:1;s:7:"(PHP 4)";i:2;s:76:"void swf_perspective ( float $fovy, float $aspect, float $near, float $far )";i:3;s:48:"Defines a perspective projection transformation.";}
a:4:{i:0;s:15:"swf_placeobject";i:1;s:7:"(PHP 4)";i:2;s:47:"void swf_placeobject ( int $objid, int $depth )";i:3;s:55:"Places the object in the current frame at a specified .";}
a:4:{i:0;s:13:"swf_polarview";i:1;s:7:"(PHP 4)";i:2;s:82:"void swf_polarview ( float $dist, float $azimuth, float $incidence, float $twist )";i:3;s:64:"The function defines the viewer's position in polar coordinates.";}
a:4:{i:0;s:13:"swf_popmatrix";i:1;s:7:"(PHP 4)";i:2;s:27:"void swf_popmatrix ( void )";i:3;s:42:"Restores a previous transformation matrix.";}
a:4:{i:0;s:12:"swf_posround";i:1;s:7:"(PHP 4)";i:2;s:32:"void swf_posround ( int $round )";i:3;s:168:"Enables or disables the rounding of the translation when objects are placed or moved, there are times when text becomes more readable because rounding has been enabled.";}
a:4:{i:0;s:14:"swf_pushmatrix";i:1;s:7:"(PHP 4)";i:2;s:28:"void swf_pushmatrix ( void )";i:3;s:61:"Pushes the current transformation matrix back onto the stack.";}
a:4:{i:0;s:16:"swf_removeobject";i:1;s:7:"(PHP 4)";i:2;s:36:"void swf_removeobject ( int $depth )";i:3;s:57:"Removes the last object drawn at the depth specified by .";}
a:4:{i:0;s:10:"swf_rotate";i:1;s:7:"(PHP 4)";i:2;s:46:"void swf_rotate ( float $angle, string $axis )";i:3;s:64:"Rotates the current transformation by a given around the given .";}
a:4:{i:0;s:9:"swf_scale";i:1;s:7:"(PHP 4)";i:2;s:47:"void swf_scale ( float $x, float $y, float $z )";i:3;s:48:"The scales curve coordinates by the given value.";}
a:4:{i:0;s:11:"swf_setfont";i:1;s:7:"(PHP 4)";i:2;s:32:"void swf_setfont ( int $fontid )";i:3;s:62:"The sets the current font to the value given by the parameter.";}
a:4:{i:0;s:12:"swf_setframe";i:1;s:7:"(PHP 4)";i:2;s:38:"void swf_setframe ( int $framenumber )";i:3;s:45:"Changes the active frame to the specified on.";}
a:4:{i:0;s:12:"swf_shapearc";i:1;s:7:"(PHP 4)";i:2;s:76:"void swf_shapearc ( float $x, float $y, float $r, float $ang1, float $ang2 )";i:3;s:21:"Draws a circular arc.";}
a:4:{i:0;s:17:"swf_shapecurveto3";i:1;s:7:"(PHP 4)";i:2;s:91:"void swf_shapecurveto3 ( float $x1, float $y1, float $x2, float $y2, float $x3, float $y3 )";i:3;s:54:"Draw a cubic bezier curve using the given coordinates.";}
a:4:{i:0;s:16:"swf_shapecurveto";i:1;s:7:"(PHP 4)";i:2;s:68:"void swf_shapecurveto ( float $x1, float $y1, float $x2, float $y2 )";i:3;s:86:"Draws a quadratic bezier curve from the current location, though the two given points.";}
a:4:{i:0;s:23:"swf_shapefillbitmapclip";i:1;s:7:"(PHP 4)";i:2;s:46:"void swf_shapefillbitmapclip ( int $bitmapid )";i:3;s:75:"Sets the fill to bitmap clipped, empty spaces will be filled by the bitmap.";}
a:4:{i:0;s:23:"swf_shapefillbitmaptile";i:1;s:7:"(PHP 4)";i:2;s:46:"void swf_shapefillbitmaptile ( int $bitmapid )";i:3;s:72:"Sets the fill to bitmap tile, empty spaces will be filled by the bitmap.";}
a:4:{i:0;s:16:"swf_shapefilloff";i:1;s:7:"(PHP 4)";i:2;s:30:"void swf_shapefilloff ( void )";i:3;s:40:"Turns off filling for the current shape.";}
a:4:{i:0;s:18:"swf_shapefillsolid";i:1;s:7:"(PHP 4)";i:2;s:66:"void swf_shapefillsolid ( float $r, float $g, float $b, float $a )";i:3;s:86:"Sets the current fill style to solid, and then sets the fill color to the given color.";}
a:4:{i:0;s:18:"swf_shapelinesolid";i:1;s:7:"(PHP 4)";i:2;s:80:"void swf_shapelinesolid ( float $r, float $g, float $b, float $a, float $width )";i:3;s:57:"Sets the current line style to the given color and width.";}
a:4:{i:0;s:15:"swf_shapelineto";i:1;s:7:"(PHP 4)";i:2;s:43:"void swf_shapelineto ( float $x, float $y )";i:3;s:84:"Draws a line to the and coordinates. The current position is then set to that point.";}
a:4:{i:0;s:15:"swf_shapemoveto";i:1;s:7:"(PHP 4)";i:2;s:43:"void swf_shapemoveto ( float $x, float $y )";i:3;s:46:"Moves the current position to the given point.";}
a:4:{i:0;s:13:"swf_showframe";i:1;s:7:"(PHP 4)";i:2;s:27:"void swf_showframe ( void )";i:3;s:26:"Outputs the current frame.";}
a:4:{i:0;s:15:"swf_startbutton";i:1;s:7:"(PHP 4)";i:2;s:46:"void swf_startbutton ( int $objid, int $type )";i:3;s:34:"Starts the definition of a button.";}
a:4:{i:0;s:17:"swf_startdoaction";i:1;s:7:"(PHP 4)";i:2;s:31:"void swf_startdoaction ( void )";i:3;s:133:"Starts the description of an action list for the current frame. This must be called before actions are defined for the current frame.";}
a:4:{i:0;s:14:"swf_startshape";i:1;s:7:"(PHP 4)";i:2;s:34:"void swf_startshape ( int $objid )";i:3;s:23:"Starts a complex shape.";}
a:4:{i:0;s:15:"swf_startsymbol";i:1;s:7:"(PHP 4)";i:2;s:35:"void swf_startsymbol ( int $objid )";i:3;s:98:"Defines an object id as a symbol. Symbols are tiny flash movies that can be played simultaneously.";}
a:4:{i:0;s:13:"swf_textwidth";i:1;s:7:"(PHP 4)";i:2;s:35:"float swf_textwidth ( string $str )";i:3;s:78:"Gives the width of the string in pixels, using the current font and font size.";}
a:4:{i:0;s:13:"swf_translate";i:1;s:7:"(PHP 4)";i:2;s:51:"void swf_translate ( float $x, float $y, float $z )";i:3;s:58:"Translates the current transformation by the given values.";}
a:4:{i:0;s:12:"swf_viewport";i:1;s:7:"(PHP 4)";i:2;s:72:"void swf_viewport ( float $xmin, float $xmax, float $ymin, float $ymax )";i:3;s:125:"Selects an area for future drawing for to and to, if this function is not called the area defaults to the size of the screen.";}
a:4:{i:0;s:8:"eio_busy";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:117:"resource eio_busy ( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:98:"artificially increases load taking seconds to execute. May be used for debugging, or benchmarking.";}
a:4:{i:0;s:10:"eio_cancel";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:33:"void eio_cancel ( resource $req )";i:3;s:30:"cancels a request specified by";}
a:4:{i:0;s:9:"eio_chmod";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:131:"resource eio_chmod ( string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:78:"changes file, or direcrory permissions. The new permissions are specified by .";}
a:4:{i:0;s:9:"eio_chown";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:148:"resource eio_chown ( string $path, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )";i:3;s:39:"Changes file, or directory permissions.";}
a:4:{i:0;s:9:"eio_close";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:117:"resource eio_close ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:26:"closes file specified by .";}
a:4:{i:0;s:10:"eio_custom";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:95:"resource eio_custom ( callable $execute, int $pri, callable $callback [, mixed $data = NULL ] )";i:3;s:77:"executes custom function specified by processing it just like any other call.";}
a:4:{i:0;s:8:"eio_dup2";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:128:"resource eio_dup2 ( mixed $fd, mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:27:"duplicates file descriptor.";}
a:4:{i:0;s:14:"eio_event_loop";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:28:"bool eio_event_loop ( void )";i:3;s:42:"polls libeio until all requests proceeded.";}
a:4:{i:0;s:13:"eio_fallocate";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:158:"resource eio_fallocate ( mixed $fd, int $mode, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:164:"allows the caller to directly manipulate the allocated disk space for the file specified by file descriptor for the byte range starting at and continuing for bytes.";}
a:4:{i:0;s:10:"eio_fchmod";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:129:"resource eio_fchmod ( mixed $fd, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:62:"changes permissions for the file specified by file descriptor.";}
a:4:{i:0;s:10:"eio_fchown";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:146:"resource eio_fchown ( mixed $fd, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )";i:3;s:59:"changes ownership of the file specified by file descriptor.";}
a:4:{i:0;s:13:"eio_fdatasync";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:121:"resource eio_fdatasync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:56:"synchronizes a file's in-core state with storage device.";}
a:4:{i:0;s:9:"eio_fstat";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:79:"resource eio_fstat ( mixed $fd, int $pri, callable $callback [, mixed $data ] )";i:3;s:46:"returns file status information in argument of";}
a:4:{i:0;s:12:"eio_fstatvfs";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:82:"resource eio_fstatvfs ( mixed $fd, int $pri, callable $callback [, mixed $data ] )";i:3;s:38:"returns file system statistics in of .";}
a:4:{i:0;s:9:"eio_fsync";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:117:"resource eio_fsync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:54:"Synchronize a file's in-core state with storage device";}
a:4:{i:0;s:13:"eio_ftruncate";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:141:"resource eio_ftruncate ( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )";i:3;s:87:"causes a regular file referenced by file descriptor to be truncated to precisely bytes.";}
a:4:{i:0;s:10:"eio_futime";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:146:"resource eio_futime ( mixed $fd, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:48:"changes file last access and modification times.";}
a:4:{i:0;s:20:"eio_get_event_stream";i:1;s:20:"(PECL eio >= 0.3.1b)";i:2;s:35:"mixed eio_get_event_stream ( void )";i:3;s:183:"acquires stream representing a variable used in internal communications with libeio. Could be used to bind with some event loop provided by other PECL extension, for example libevent.";}
a:4:{i:0;s:18:"eio_get_last_error";i:1;s:19:"(PECL eio >= 1.0.0)";i:2;s:43:"string eio_get_last_error ( resource $req )";i:3;s:58:"returns string describing the last error associated with .";}
a:4:{i:0;s:11:"eio_grp_add";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:49:"void eio_grp_add ( resource $grp, resource $req )";i:3;s:36:"adds a request to the request group.";}
a:4:{i:0;s:14:"eio_grp_cancel";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:37:"void eio_grp_cancel ( resource $grp )";i:3;s:60:"cancels a group request specified by request group resource.";}
a:4:{i:0;s:13:"eio_grp_limit";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:48:"void eio_grp_limit ( resource $grp, int $limit )";i:3;s:46:"Limit number of requests in the request group.";}
a:4:{i:0;s:7:"eio_grp";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:64:"resource eio_grp ( callable $callback [, string $data = NULL ] )";i:3;s:24:"creates a request group.";}
a:4:{i:0;s:8:"eio_init";i:1;s:18:"(PECL eio = 1.0.0)";i:2;s:22:"void eio_init ( void )";i:3;s:223:"(re-)initializes Eio. It allocates memory for internal structures of libeio and Eio itself. You may call before using Eio functions. Otherwise it will be called internally first time you invoke an Eio function in a process.";}
a:4:{i:0;s:8:"eio_link";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:137:"resource eio_link ( string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:44:"creates a hardlink for a file specified by .";}
a:4:{i:0;s:9:"eio_lstat";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:89:"resource eio_lstat ( string $path, int $pri, callable $callback [, mixed $data = NULL ] )";i:3;s:46:"returns file status information in argument of";}
a:4:{i:0;s:9:"eio_mkdir";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:131:"resource eio_mkdir ( string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:41:"creates directory with specified access .";}
a:4:{i:0;s:9:"eio_mknod";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:141:"resource eio_mknod ( string $path, int $mode, int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:40:"creates ordinary or special(often) file.";}
a:4:{i:0;s:7:"eio_nop";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:103:"resource eio_nop ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:86:"does nothing, except go through the whole request cycle. Could be useful in debugging.";}
a:4:{i:0;s:12:"eio_npending";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:25:"int eio_npending ( void )";i:3;s:50:"returns number of finished, but unhandled requests";}
a:4:{i:0;s:10:"eio_nready";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:23:"int eio_nready ( void )";i:3;s:0:"";}
a:4:{i:0;s:9:"eio_nreqs";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:22:"int eio_nreqs ( void )";i:3;s:42:"could be called in a custom loop calling .";}
a:4:{i:0;s:12:"eio_nthreads";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:25:"int eio_nthreads ( void )";i:3;s:0:"";}
a:4:{i:0;s:8:"eio_open";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:111:"resource eio_open ( string $path, int $flags, int $mode, int $pri, callable $callback [, mixed $data = NULL ] )";i:3;s:43:"opens file specified by in access mode with";}
a:4:{i:0;s:8:"eio_poll";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:21:"int eio_poll ( void )";i:3;s:110:"can be used to implement special event loop. For this could be used to test if there are unprocessed requests.";}
a:4:{i:0;s:8:"eio_read";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:111:"resource eio_read ( mixed $fd, int $length, int $offset, int $pri, callable $callback [, mixed $data = NULL ] )";i:3;s:86:"reads up to bytes from file descriptor at . The read bytes are stored in argument of .";}
a:4:{i:0;s:13:"eio_readahead";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:147:"resource eio_readahead ( mixed $fd, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:140:"populates the page cache with data from a file so that subsequent reads from that file will not block on disk I/O. See man page for details.";}
a:4:{i:0;s:11:"eio_readdir";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:104:"resource eio_readdir ( string $path, int $flags, int $pri, callable $callback [, string $data = NULL ] )";i:3;s:151:"Reads through a whole directory(via the, and system calls) and returns either the names or an array in argument of function, depending on the argument.";}
a:4:{i:0;s:12:"eio_readlink";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:93:"resource eio_readlink ( string $path, int $pri, callable $callback [, string $data = NULL ] )";i:3;s:0:"";}
a:4:{i:0;s:12:"eio_realpath";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:93:"resource eio_realpath ( string $path, int $pri, callable $callback [, string $data = NULL ] )";i:3;s:68:"returns the canonicalized absolute pathname in argument of function.";}
a:4:{i:0;s:10:"eio_rename";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:139:"resource eio_rename ( string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:40:"renames or moves a file to new location.";}
a:4:{i:0;s:9:"eio_rmdir";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:120:"resource eio_rmdir ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:20:"removes a directory.";}
a:4:{i:0;s:8:"eio_seek";i:1;s:20:"(PECL eio >= 0.5.0b)";i:2;s:142:"resource eio_seek ( mixed $fd, int $offset, int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:167:"repositions the offset of the open file associated with stream, Socket resource, or file descriptor specified by to the argument according to the directive as follows:";}
a:4:{i:0;s:12:"eio_sendfile";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:133:"resource eio_sendfile ( mixed $out_fd, mixed $in_fd, int $offset, int $length [, int $pri [, callable $callback [, string $data ]]] )";i:3;s:78:"copies data between one file descriptor and another. See man page for details.";}
a:4:{i:0;s:16:"eio_set_max_idle";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:39:"void eio_set_max_idle ( int $nthreads )";i:3;s:0:"";}
a:4:{i:0;s:20:"eio_set_max_parallel";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:43:"void eio_set_max_parallel ( int $nthreads )";i:3;s:0:"";}
a:4:{i:0;s:21:"eio_set_max_poll_reqs";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:41:"void eio_set_max_poll_reqs ( int $nreqs )";i:3;s:0:"";}
a:4:{i:0;s:21:"eio_set_max_poll_time";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:46:"void eio_set_max_poll_time ( float $nseconds )";i:3;s:48:"Polling stops, if poll took longer than seconds.";}
a:4:{i:0;s:20:"eio_set_min_parallel";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:46:"void eio_set_min_parallel ( string $nthreads )";i:3;s:0:"";}
a:4:{i:0;s:8:"eio_stat";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:88:"resource eio_stat ( string $path, int $pri, callable $callback [, mixed $data = NULL ] )";i:3;s:46:"returns file status information in argument of";}
a:4:{i:0;s:11:"eio_statvfs";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:84:"resource eio_statvfs ( string $path, int $pri, callable $callback [, mixed $data ] )";i:3;s:57:"returns file system statistics information in argument of";}
a:4:{i:0;s:11:"eio_symlink";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:140:"resource eio_symlink ( string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:28:"creates a symbolic link to .";}
a:4:{i:0;s:19:"eio_sync_file_range";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:165:"resource eio_sync_file_range ( mixed $fd, int $offset, int $nbytes, int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:99:"permits fine control when synchronizing the open file referred to by the file descriptor with disk.";}
a:4:{i:0;s:8:"eio_sync";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:104:"resource eio_sync ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"eio_syncfs";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:118:"resource eio_syncfs ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:0:"";}
a:4:{i:0;s:12:"eio_truncate";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:143:"resource eio_truncate ( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )";i:3;s:77:"causes the regular file named by to be truncated to a size of precisely bytes";}
a:4:{i:0;s:10:"eio_unlink";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:121:"resource eio_unlink ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:36:"deletes a name from the file system.";}
a:4:{i:0;s:9:"eio_utime";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:148:"resource eio_utime ( string $path, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )";i:3;s:0:"";}
a:4:{i:0;s:9:"eio_write";i:1;s:22:"(PECL eio >= 0.0.1dev)";i:2;s:170:"resource eio_write ( mixed $fd, string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]] )";i:3;s:65:"writes up to bytes from at offset from the beginning of the file.";}
a:4:{i:0;s:11:"Ev::backend";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:44:"final public static int Ev::backend ( void )";i:3;s:55:"Returns an integer describing the backend used by . See";}
a:4:{i:0;s:9:"Ev::depth";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:42:"final public static int Ev::depth ( void )";i:3;s:257:"The number of times was entered minus the number of times was exited normally, in other words, the recursion depth. Outside, this number is . In a callback, this number is, unless was invoked recursively (or from another thread), in which case it is higher.";}
a:4:{i:0;s:22:"Ev::embeddableBackends";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:56:"final public static void Ev::embeddableBackends ( void )";i:3;s:69:"Returns the set of backends that are embeddable in other event loops.";}
a:4:{i:0;s:14:"Ev::feedSignal";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:55:"final public static void Ev::feedSignal ( int $signum )";i:3;s:197:"Simulates a signal receive. It is safe to call this function at any time, from any context, including signal handlers or random threads. Its main use is to customise signal handling in the process.";}
a:4:{i:0;s:19:"Ev::feedSignalEvent";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:60:"final public static void Ev::feedSignalEvent ( int $signum )";i:3;s:111:"Feed signal event into the default loop. Ev will react to this call as if the signal specified by had occurred.";}
a:4:{i:0;s:13:"Ev::iteration";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:46:"final public static int Ev::iteration ( void )";i:3;s:110:"Return the number of times the event loop has polled for new events. Sometimes useful as a generation counter.";}
a:4:{i:0;s:7:"Ev::now";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:43:"final public static double Ev::now ( void )";i:3;s:182:"Returns the time when the last iteration of the default event loop has started. This is the time that timers( and ) are based on, and referring to it is usually faster then calling .";}
a:4:{i:0;s:13:"Ev::nowUpdate";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:47:"final public static void Ev::nowUpdate ( void )";i:3;s:169:"Establishes the current time by querying the kernel, updating the time returned by in the progress. This is a costly operation and is usually done automatically within .";}
a:4:{i:0;s:23:"Ev::recommendedBackends";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:57:"final public static void Ev::recommendedBackends ( void )";i:3;s:389:"Returns the set of all backends compiled into this binary of and also recommended for this platform, meaning it will work for most file descriptor types. This set is often smaller than the one returned by, as for example is broken on most systems and will not be auto-detected unless it is requested explicitly. This is the set of backends that will probe no backends specified explicitly.";}
a:4:{i:0;s:10:"Ev::resume";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:44:"final public static void Ev::resume ( void )";i:3;s:54:"and methods suspend and resume a loop correspondingly.";}
a:4:{i:0;s:7:"Ev::run";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:50:"final public static void Ev::run ([ int $flags ] )";i:3;s:313:"Begin checking for events and calling callbacks . Returns when a callback calls method, or the flags are nonzero(in which case the return value is true) or when there are no active watchers which reference the loop( is ), in which case the return value will be . The return value can generally be interpreted as .";}
a:4:{i:0;s:9:"Ev::sleep";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:54:"final public static void Ev::sleep ( double $seconds )";i:3;s:50:"Block the process for the given number of seconds.";}
a:4:{i:0;s:8:"Ev::stop";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:49:"final public static void Ev::stop ([ int $how ] )";i:3;s:28:"Stops the default event loop";}
a:4:{i:0;s:21:"Ev::supportedBackends";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:55:"final public static void Ev::supportedBackends ( void )";i:3;s:69:"Returns the set of backends supported by current libev configuration.";}
a:4:{i:0;s:11:"Ev::suspend";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:45:"final public static void Ev::suspend ( void )";i:3;s:64:"and methods suspend and resume the default loop correspondingly.";}
a:4:{i:0;s:8:"Ev::time";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:44:"final public static double Ev::time ( void )";i:3;s:78:"Returns the current time in fractional seconds since the epoch. Consider using";}
a:4:{i:0;s:10:"Ev::verify";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:44:"final public static void Ev::verify ( void )";i:3;s:125:"Performs internal consistency checks(for debugging ) and abort the program if any data structures were found to be corrupted.";}
a:4:{i:0;s:20:"EvCheck::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:85:"public EvCheck::__construct ( callable $callback [, mixed $data [, int $priority ]] )";i:3;s:30:"Constructs the watcher object.";}
a:4:{i:0;s:22:"EvCheck::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:109:"final public static object EvCheck::createStopped ( string $callback [, string $data [, string $priority ]] )";i:3;s:44:"Create instance of a stopped EvCheck watcher";}
a:4:{i:0;s:20:"EvChild::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:119:"public EvChild::__construct ( int $pid, bool $trace, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:30:"Constructs the watcher object.";}
a:4:{i:0;s:22:"EvChild::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:130:"final public static object EvChild::createStopped ( int $pid, bool $trace, callable $callback [, mixed $data [, int $priority ]] )";i:3;s:57:"The same as, but doesn't start the watcher automatically.";}
a:4:{i:0;s:12:"EvChild::set";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:50:"public void EvChild::set ( int $pid, bool $trace )";i:3;s:0:"";}
a:4:{i:0;s:20:"EvEmbed::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:103:"public EvEmbed::__construct ( object $other [, callable $callback [, mixed $data [, int $priority ]]] )";i:3;s:244:"This is a rather advanced watcher type that lets to embed one event loop into another(currently only IO events are supported in the embedded loop, other types of watchers might be handled in a delayed or incorrect fashion and must not be used).";}
a:4:{i:0;s:22:"EvEmbed::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:123:"final public static void EvEmbed::createStopped ( object $other [, callable $callback [, mixed $data [, int $priority ]]] )";i:3;s:57:"The same as, but doesn't start the watcher automatically.";}
a:4:{i:0;s:12:"EvEmbed::set";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:42:"public void EvEmbed::set ( object $other )";i:3;s:48:"Configures the watcher to use event loop object.";}
a:4:{i:0;s:14:"EvEmbed::sweep";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:35:"public void EvEmbed::sweep ( void )";i:3;s:143:"Make a single, non-blocking sweep over the embedded loop. Works similarly to the following, but in the most appropriate way for embedded loops:";}
a:4:{i:0;s:19:"EvFork::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:95:"public EvFork::__construct ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:74:"Constructs the EvFork watcher object and starts the watcher automatically.";}
a:4:{i:0;s:21:"EvFork::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:108:"final public static object EvFork::createStopped ( string $callback [, string $data [, string $priority ]] )";i:3;s:57:"The same as, but doesn't start the watcher automatically.";}
a:4:{i:0;s:19:"EvIdle::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:84:"public EvIdle::__construct ( callable $callback [, mixed $data [, int $priority ]] )";i:3;s:74:"Constructs the EvIdle watcher object and starts the watcher automatically.";}
a:4:{i:0;s:21:"EvIdle::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:104:"final public static object EvIdle::createStopped ( string $callback [, mixed $data [, int $priority ]] )";i:3;s:57:"The same as, but doesn't start the watcher automatically.";}
a:4:{i:0;s:17:"EvIo::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:106:"public EvIo::__construct ( mixed $fd, int $events, callable $callback [, mixed $data [, int $priority ]] )";i:3;s:68:"Constructs EvIo watcher object and starts the watcher automatically.";}
a:4:{i:0;s:19:"EvIo::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:137:"final public static EvIo EvIo::createStopped ( mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:57:"The same as, but doesn't start the watcher automatically.";}
a:4:{i:0;s:9:"EvIo::set";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:48:"public void EvIo::set ( mixed $fd, int $events )";i:3;s:27:"Configures the EvIo watcher";}
a:4:{i:0;s:15:"EvLoop::backend";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:35:"public int EvLoop::backend ( void )";i:3;s:39:"The same as, but for the loop instance.";}
a:4:{i:0;s:13:"EvLoop::check";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:94:"final public EvCheck EvLoop::check ( string $callback [, string $data [, string $priority ]] )";i:3;s:71:"Creates EvCheck object associated with the current event loop instance.";}
a:4:{i:0;s:13:"EvLoop::child";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:122:"final public EvChild EvLoop::child ( string $pid, string $trace, string $callback [, string $data [, string $priority ]] )";i:3;s:62:"Creates EvChild object associated with the current event loop.";}
a:4:{i:0;s:19:"EvLoop::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:132:"public EvLoop::__construct ([ int $flags [, mixed $data = NULL [, double $io_interval = 0.0 [, double $timeout_interval = 0.0 ]]]] )";i:3;s:33:"Constructs the event loop object.";}
a:4:{i:0;s:19:"EvLoop::defaultLoop";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:160:"public static EvLoop EvLoop::defaultLoop ([ int $flags = Ev::FLAG_AUTO [, mixed $data = NULL [, double $io_interval = 0. [, double $timeout_interval = 0. ]]]] )";i:3;s:191:"If the default event loop is not created, creates it with the specified parameters. Otherwise, it just returns the object representing previously created instance ignoring all the parameters.";}
a:4:{i:0;s:13:"EvLoop::embed";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:112:"final public EvEmbed EvLoop::embed ( string $other [, string $callback [, string $data [, string $priority ]]] )";i:3;s:66:"Creates an instance of watcher associated with the current object.";}
a:4:{i:0;s:12:"EvLoop::fork";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:101:"final public EvFork EvLoop::fork ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:77:"Creates EvFork watcher object associated with the current event loop instance";}
a:4:{i:0;s:12:"EvLoop::idle";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:101:"final public EvIdle EvLoop::idle ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:77:"Creates EvIdle watcher object associated with the current event loop instance";}
a:4:{i:0;s:21:"EvLoop::invokePending";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:42:"public void EvLoop::invokePending ( void )";i:3;s:64:"Invoke all pending watchers while resetting their pending state.";}
a:4:{i:0;s:10:"EvLoop::io";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:121:"final public EvIo EvLoop::io ( mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:75:"Create EvIo watcher object associated with the current event loop instance.";}
a:4:{i:0;s:16:"EvLoop::loopFork";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:37:"public void EvLoop::loopFork ( void )";i:3;s:190:"Must be called after a in the child, before entering or continuing the event loop. An alternative is to use which calls this function automatically, at some performance loss (refer to the ).";}
a:4:{i:0;s:11:"EvLoop::now";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:34:"public double EvLoop::now ( void )";i:3;s:351:"Returns the current "event loop time", which is the time the event loop received events and started processing them. This timestamp does not change as long as callbacks are being processed, and this is also the base time used for relative timers. You can treat it as the timestamp of the event occurring(or more correctly, libev finding out about it).";}
a:4:{i:0;s:17:"EvLoop::nowUpdate";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:38:"public void EvLoop::nowUpdate ( void )";i:3;s:169:"Establishes the current time by querying the kernel, updating the time returned by in the progress. This is a costly operation and is usually done automatically within .";}
a:4:{i:0;s:16:"EvLoop::periodic";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:143:"final public EvPeriodic EvLoop::periodic ( double $offset, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:81:"Creates EvPeriodic watcher object associated with the current event loop instance";}
a:4:{i:0;s:15:"EvLoop::prepare";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:107:"final public EvPrepare EvLoop::prepare ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:80:"Creates EvPrepare watcher object associated with the current event loop instance";}
a:4:{i:0;s:14:"EvLoop::resume";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:35:"public void EvLoop::resume ( void )";i:3;s:54:"and methods suspend and resume a loop correspondingly.";}
a:4:{i:0;s:11:"EvLoop::run";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:45:"public void EvLoop::run ([ int $flags = 0 ] )";i:3;s:339:"Begin checking for events and calling callbacks for the current event loop. Returns when a callback calls method, or the flags are nonzero(in which case the return value is true) or when there are no active watchers which reference the loop( is ), in which case the return value will be . The return value can generally be interpreted as .";}
a:4:{i:0;s:14:"EvLoop::signal";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:118:"final public EvSignal EvLoop::signal ( int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:79:"Creates EvSignal watcher object associated with the current event loop instance";}
a:4:{i:0;s:12:"EvLoop::stat";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:133:"final public EvStat EvLoop::stat ( string $path, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:77:"Creates EvStat watcher object associated with the current event loop instance";}
a:4:{i:0;s:12:"EvLoop::stop";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:40:"public void EvLoop::stop ([ int $how ] )";i:3;s:20:"Stops the event loop";}
a:4:{i:0;s:15:"EvLoop::suspend";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:36:"public void EvLoop::suspend ( void )";i:3;s:54:"and methods suspend and resume a loop correspondingly.";}
a:4:{i:0;s:13:"EvLoop::timer";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:134:"final public EvTimer EvLoop::timer ( double $after, double $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:78:"Creates EvTimer watcher object associated with the current event loop instance";}
a:4:{i:0;s:14:"EvLoop::verify";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:35:"public void EvLoop::verify ( void )";i:3;s:125:"Performs internal consistency checks(for debugging ) and abort the program if any data structures were found to be corrupted.";}
a:4:{i:0;s:17:"EvPeriodic::again";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:38:"public void EvPeriodic::again ( void )";i:3;s:102:"Simply stops and restarts the periodic watcher again. This is only useful when attributes are changed.";}
a:4:{i:0;s:14:"EvPeriodic::at";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:37:"public double EvPeriodic::at ( void )";i:3;s:191:"When the watcher is active, returns the absolute time that this watcher is supposed to trigger next. This is not the same as the offset argument to or, but indeed works even in interval mode.";}
a:4:{i:0;s:23:"EvPeriodic::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:158:"public EvPeriodic::__construct ( double $offset, string $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:106:"Constructs EvPeriodic watcher object and starts it automatically. method creates stopped periodic watcher.";}
a:4:{i:0;s:25:"EvPeriodic::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:184:"final public static EvPeriodic EvPeriodic::createStopped ( double $offset, double $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:85:"Create EvPeriodic object. Unlike this method doesn't start the watcher automatically.";}
a:4:{i:0;s:15:"EvPeriodic::set";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:64:"public void EvPeriodic::set ( double $offset, double $interval )";i:3;s:34:"(Re-)Configures EvPeriodic watcher";}
a:4:{i:0;s:22:"EvPrepare::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:89:"public EvPrepare::__construct ( string $callback [, string $data [, string $priority ]] )";i:3;s:115:"Constructs EvPrepare watcher object. And starts the watcher automatically. If need a stopped watcher consider using";}
a:4:{i:0;s:24:"EvPrepare::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:123:"final public static EvPrepare EvPrepare::createStopped ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:108:"Creates a stopped instance of EvPrepare watcher. Unlike, this method doesn' start the watcher automatically.";}
a:4:{i:0;s:21:"EvSignal::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:110:"public EvSignal::__construct ( int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:119:"Constructs EvPeriodic watcher object and starts it automatically. For a stopped periodic watcher consider using method.";}
a:4:{i:0;s:23:"EvSignal::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:134:"final public static EvSignal EvSignal::createStopped ( int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:99:"Create stopped EvSignal watcher object. Unlike, this method does't start the watcher automatically.";}
a:4:{i:0;s:13:"EvSignal::set";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:41:"public void EvSignal::set ( int $signum )";i:3;s:23:"Configures the watcher.";}
a:4:{i:0;s:12:"EvStat::attr";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:34:"public array EvStat::attr ( void )";i:3;s:56:"Returns array of the values most recently detected by Ev";}
a:4:{i:0;s:19:"EvStat::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:127:"public EvStat::__construct ( string $path, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:70:"Constructs EvStat watcher object and starts the watcher automatically.";}
a:4:{i:0;s:21:"EvStat::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:147:"final public static void EvStat::createStopped ( string $path, double $interval, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:75:"Creates EvStat watcher object, but doesn't start it automatically(unlike ).";}
a:4:{i:0;s:12:"EvStat::prev";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:33:"public void EvStat::prev ( void )";i:3;s:50:"Just like, but returns the previous set of values.";}
a:4:{i:0;s:11:"EvStat::set";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:58:"public void EvStat::set ( string $path, double $interval )";i:3;s:23:"Configures the watcher.";}
a:4:{i:0;s:12:"EvStat::stat";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:33:"public bool EvStat::stat ( void )";i:3;s:124:"Initiates the stat call(updates internal cache). It stats(using ) the specified in the watcher and sets to the values found.";}
a:4:{i:0;s:14:"EvTimer::again";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:35:"public void EvTimer::again ( void )";i:3;s:105:"This will act as if the timer timed out and restart it again if it is repeating. The exact semantics are:";}
a:4:{i:0;s:20:"EvTimer::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:127:"public EvTimer::__construct ( double $after, double $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:37:"Constructs an EvTimer watcher object.";}
a:4:{i:0;s:22:"EvTimer::createStopped";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:150:"final public static EvTimer EvTimer::createStopped ( double $after, double $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )";i:3;s:100:"Creates EvTimer stopped watcher object. Unlike, this method doesn't start the watcher automatically.";}
a:4:{i:0;s:12:"EvTimer::set";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:58:"public void EvTimer::set ( double $after, double $repeat )";i:3;s:22:"Configures the watcher";}
a:4:{i:0;s:16:"EvWatcher::clear";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:36:"public int EvWatcher::clear ( void )";i:3;s:171:"If the watcher is pending, this method clears its status and returns its bitset(as if its callback was invoked). If the watcher isn't pending it does nothing and returns .";}
a:4:{i:0;s:22:"EvWatcher::__construct";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:47:"abstract public EvWatcher::__construct ( void )";i:3;s:82:"is an abstract constructor of a watcher object implemented in the derived classes.";}
a:4:{i:0;s:15:"EvWatcher::feed";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:44:"public void EvWatcher::feed ( int $revents )";i:3;s:104:"Feeds the given revents set into the event loop, as if the specified event had happened for the watcher.";}
a:4:{i:0;s:18:"EvWatcher::getLoop";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:41:"public EvLoop EvWatcher::getLoop ( void )";i:3;s:44:"Returns the loop responsible for the watcher";}
a:4:{i:0;s:17:"EvWatcher::invoke";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:46:"public void EvWatcher::invoke ( int $revents )";i:3;s:69:"Invokes the watcher callback with the given received events bit mask.";}
a:4:{i:0;s:20:"EvWatcher::keepalive";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:51:"public bool EvWatcher::keepalive ([ bool $value ] )";i:3;s:148:"Configures whether to keep the loop from returning. With keepalive set to the watcher won't keep / from returning even though the watcher is active.";}
a:4:{i:0;s:22:"EvWatcher::setCallback";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:57:"public void EvWatcher::setCallback ( callable $callback )";i:3;s:33:"Sets new callback for the watcher";}
a:4:{i:0;s:16:"EvWatcher::start";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:37:"public void EvWatcher::start ( void )";i:3;s:80:"Marks the watcher as active. Note that only active watchers will receive events.";}
a:4:{i:0;s:15:"EvWatcher::stop";i:1;s:18:"(PECL ev >= 0.2.0)";i:2;s:36:"public void EvWatcher::stop ( void )";i:3;s:82:"Marks the watcher as inactive. Note that only active watchers will receive events.";}
a:4:{i:0;s:14:"expect_expectl";i:1;s:22:"(PECL expect >= 0.1.0)";i:2;s:72:"int expect_expectl ( resource $expect, array $cases [, array &$match ] )";i:3;s:117:"Waits until the output from a process matches one of the patterns, a specified time period has passed, or an is seen.";}
a:4:{i:0;s:12:"expect_popen";i:1;s:22:"(PECL expect >= 0.1.0)";i:2;s:41:"resource expect_popen ( string $command )";i:3;s:73:"Execute command via Bourne shell, and open the PTY stream to the process.";}
a:4:{i:0;s:9:"event_add";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:57:"bool event_add ( resource $event [, int $timeout = -1 ] )";i:3;s:272:"schedules the execution of the when the event specified in occurs or in at least the time specified by the argument. If was not specified, not timeout is set. The must be already initalized by and functions. If the already has a timeout set, it is replaced by the new one.";}
a:4:{i:0;s:15:"event_base_free";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:45:"void event_base_free ( resource $event_base )";i:3;s:143:"Destroys the specified and frees all the resources associated. Note that it's not possible to destroy an event base with events attached to it.";}
a:4:{i:0;s:15:"event_base_loop";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:64:"int event_base_loop ( resource $event_base [, int $flags = 0 ] )";i:3;s:47:"Starts event loop for the specified event base.";}
a:4:{i:0;s:20:"event_base_loopbreak";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:50:"bool event_base_loopbreak ( resource $event_base )";i:3;s:79:"Abort the active event loop immediately. The behaviour is similar to statement.";}
a:4:{i:0;s:19:"event_base_loopexit";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:72:"bool event_base_loopexit ( resource $event_base [, int $timeout = -1 ] )";i:3;s:128:"The next event loop iteration after the given timer expires will complete normally, then exit without blocking for events again.";}
a:4:{i:0;s:14:"event_base_new";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:32:"resource event_base_new ( void )";i:3;s:72:"Returns new event base, which can be used later in, and other functions.";}
a:4:{i:0;s:24:"event_base_priority_init";i:1;s:24:"(PECL libevent >= 0.0.2)";i:2;s:72:"bool event_base_priority_init ( resource $event_base, int $npriorities )";i:3;s:51:"Sets the number of different event priority levels.";}
a:4:{i:0;s:14:"event_base_set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:61:"bool event_base_set ( resource $event, resource $event_base )";i:3;s:25:"Associates the with the .";}
a:4:{i:0;s:21:"event_buffer_base_set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:69:"bool event_buffer_base_set ( resource $bevent, resource $event_base )";i:3;s:29:"Assign the specified to the .";}
a:4:{i:0;s:20:"event_buffer_disable";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:59:"bool event_buffer_disable ( resource $bevent, int $events )";i:3;s:38:"Disables the specified buffered event.";}
a:4:{i:0;s:19:"event_buffer_enable";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:58:"bool event_buffer_enable ( resource $bevent, int $events )";i:3;s:37:"Enables the specified buffered event.";}
a:4:{i:0;s:19:"event_buffer_fd_set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:59:"void event_buffer_fd_set ( resource $bevent, resource $fd )";i:3;s:65:"Changes the file descriptor on which the buffered event operates.";}
a:4:{i:0;s:17:"event_buffer_free";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:43:"void event_buffer_free ( resource $bevent )";i:3;s:77:"Destroys the specified buffered event and frees all the resources associated.";}
a:4:{i:0;s:16:"event_buffer_new";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:109:"resource event_buffer_new ( resource $stream, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg ] )";i:3;s:226:"Libevent provides an abstraction layer on top of the regular event API. Using buffered event you don't need to deal with the I/O manually, instead it provides input and output buffers that get filled and drained automatically.";}
a:4:{i:0;s:25:"event_buffer_priority_set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:66:"bool event_buffer_priority_set ( resource $bevent, int $priority )";i:3;s:26:"Assign a priority to the .";}
a:4:{i:0;s:17:"event_buffer_read";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:61:"string event_buffer_read ( resource $bevent, int $data_size )";i:3;s:55:"Reads data from the input buffer of the buffered event.";}
a:4:{i:0;s:25:"event_buffer_set_callback";i:1;s:24:"(PECL libevent >= 0.0.4)";i:2;s:113:"bool event_buffer_set_callback ( resource $event, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg ] )";i:3;s:53:"Sets or changes existing callbacks for the buffered .";}
a:4:{i:0;s:24:"event_buffer_timeout_set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:89:"void event_buffer_timeout_set ( resource $bevent, int $read_timeout, int $write_timeout )";i:3;s:66:"Sets the read and write timeouts for the specified buffered event.";}
a:4:{i:0;s:26:"event_buffer_watermark_set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:94:"void event_buffer_watermark_set ( resource $bevent, int $events, int $lowmark, int $highmark )";i:3;s:277:"Sets the watermarks for read and write events. Libevent does not invoke read callback unless there is at least bytes in the input buffer; if the read buffer is beyond the, reading is stopped. On output, the write callback is invoked whenever the buffered data falls below the .";}
a:4:{i:0;s:18:"event_buffer_write";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:83:"bool event_buffer_write ( resource $bevent, string $data [, int $data_size = -1 ] )";i:3;s:155:"Writes data to the specified buffered event. The data is appended to the output buffer and written to the descriptor when it becomes available for writing.";}
a:4:{i:0;s:9:"event_del";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:34:"bool event_del ( resource $event )";i:3;s:13:"Cancels the .";}
a:4:{i:0;s:10:"event_free";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:35:"void event_free ( resource $event )";i:3;s:40:"Frees previously created event resource.";}
a:4:{i:0;s:9:"event_new";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:27:"resource event_new ( void )";i:3;s:41:"Creates and returns a new event resource.";}
a:4:{i:0;s:9:"event_set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:91:"bool event_set ( resource $event, mixed $fd, int $events, mixed $callback [, mixed $arg ] )";i:3;s:181:"Prepares the event to be used in . The event is prepared to call the function specified by the on the events specified in parameter, which is a set of the following flags:, ,, and .";}
a:4:{i:0;s:11:"pcntl_alarm";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:32:"int pcntl_alarm ( int $seconds )";i:3;s:139:"Creates a timer that will send a signal to the process after the given number of seconds. Any call to will cancel any previously set alarm.";}
a:4:{i:0;s:11:"pcntl_errno";i:1;s:16:"(PHP 5 >= 5.3.4)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:10:"pcntl_exec";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:65:"void pcntl_exec ( string $path [, array $args [, array $envs ]] )";i:3;s:46:"Executes the program with the given arguments.";}
a:4:{i:0;s:10:"pcntl_fork";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:23:"int pcntl_fork ( void )";i:3;s:199:"The function creates a child process that differs from the parent process only in its PID and PPID. Please see your system's fork(2) man page for specific details as to how fork works on your system.";}
a:4:{i:0;s:20:"pcntl_get_last_error";i:1;s:16:"(PHP 5 >= 5.3.4)";i:2;s:33:"int pcntl_get_last_error ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"pcntl_getpriority";i:1;s:7:"(PHP 5)";i:2;s:93:"int pcntl_getpriority ([ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )";i:3;s:170:"gets the priority of . Because priority levels can differ between system types and kernel versions, please see your system's getpriority(2) man page for specific details.";}
a:4:{i:0;s:17:"pcntl_setpriority";i:1;s:7:"(PHP 5)";i:2;s:110:"bool pcntl_setpriority ( int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )";i:3;s:22:"sets the priority of .";}
a:4:{i:0;s:21:"pcntl_signal_dispatch";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:35:"bool pcntl_signal_dispatch ( void )";i:3;s:76:"The function calls the signal handlers installed by for each pending signal.";}
a:4:{i:0;s:12:"pcntl_signal";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:90:"bool pcntl_signal ( int $signo, callable|int $handler [, bool $restart_syscalls = true ] )";i:3;s:111:"The function installs a new signal handler or replaces the current signal handler for the signal indicated by .";}
a:4:{i:0;s:17:"pcntl_sigprocmask";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:67:"bool pcntl_sigprocmask ( int $how, array $set [, array &$oldset ] )";i:3;s:79:"The function adds, removes or sets blocked signals, depending on the parameter.";}
a:4:{i:0;s:18:"pcntl_sigtimedwait";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:104:"int pcntl_sigtimedwait ( array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0 ]]] )";i:3;s:189:"The function operates in exactly the same way as except that it takes two additional parameters, and, which enable an upper bound to be placed on the time for which the script is suspended.";}
a:4:{i:0;s:17:"pcntl_sigwaitinfo";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:57:"int pcntl_sigwaitinfo ( array $set [, array &$siginfo ] )";i:3;s:187:"The function suspends execution of the calling script until one of the signals given in are delivered. If one of the signal is already pending (e.g. blocked by ), will return immediately.";}
a:4:{i:0;s:14:"pcntl_strerror";i:1;s:16:"(PHP 5 >= 5.3.4)";i:2;s:36:"string pcntl_strerror ( int $errno )";i:3;s:0:"";}
a:4:{i:0;s:10:"pcntl_wait";i:1;s:7:"(PHP 5)";i:2;s:53:"int pcntl_wait ( int &$status [, int $options = 0 ] )";i:3;s:474:"The wait function suspends execution of the current process until a child has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function. If a child has already exited by the time of the call (a so-called "zombie" process), the function returns immediately. Any system resources used by the child are freed. Please see your system's wait(2) man page for specific details as to how wait works on your system.";}
a:4:{i:0;s:13:"pcntl_waitpid";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:66:"int pcntl_waitpid ( int $pid, int &$status [, int $options = 0 ] )";i:3;s:215:"Suspends execution of the current process until a child as specified by the argument has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function.";}
a:4:{i:0;s:17:"pcntl_wexitstatus";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:37:"int pcntl_wexitstatus ( int $status )";i:3;s:89:"Returns the return code of a terminated child. This function is only useful if returned .";}
a:4:{i:0;s:15:"pcntl_wifexited";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:36:"bool pcntl_wifexited ( int $status )";i:3;s:62:"Checks whether the child status code represents a normal exit.";}
a:4:{i:0;s:17:"pcntl_wifsignaled";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:38:"bool pcntl_wifsignaled ( int $status )";i:3;s:81:"Checks whether the child process exited because of a signal which was not caught.";}
a:4:{i:0;s:16:"pcntl_wifstopped";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:37:"bool pcntl_wifstopped ( int $status )";i:3;s:143:"Checks whether the child process which caused the return is currently stopped; this is only possible if the call to was done using the option .";}
a:4:{i:0;s:14:"pcntl_wstopsig";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:34:"int pcntl_wstopsig ( int $status )";i:3;s:107:"Returns the number of the signal which caused the child to stop. This function is only useful if returned .";}
a:4:{i:0;s:14:"pcntl_wtermsig";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:34:"int pcntl_wtermsig ( int $status )";i:3;s:119:"Returns the number of the signal that caused the child process to terminate. This function is only useful if returned .";}
a:4:{i:0;s:12:"posix_access";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:62:"bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )";i:3;s:39:"checks the user's permission of a file.";}
a:4:{i:0;s:13:"posix_ctermid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"string posix_ctermid ( void )";i:3;s:144:"Generates a which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using";}
a:4:{i:0;s:11:"posix_errno";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:20:"posix_get_last_error";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:33:"int posix_get_last_error ( void )";i:3;s:142:"Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with .";}
a:4:{i:0;s:12:"posix_getcwd";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"string posix_getcwd ( void )";i:3;s:120:"Gets the absolute pathname of the script's current working directory. On error, it sets errno which can be checked using";}
a:4:{i:0;s:13:"posix_getegid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int posix_getegid ( void )";i:3;s:61:"Return the numeric effective group ID of the current process.";}
a:4:{i:0;s:13:"posix_geteuid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int posix_geteuid ( void )";i:3;s:133:"Return the numeric effective user ID of the current process. See also for information on how to convert this into a useable username.";}
a:4:{i:0;s:12:"posix_getgid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"int posix_getgid ( void )";i:3;s:56:"Return the numeric real group ID of the current process.";}
a:4:{i:0;s:14:"posix_getgrgid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"array posix_getgrgid ( int $gid )";i:3;s:47:"Gets information about a group provided its id.";}
a:4:{i:0;s:14:"posix_getgrnam";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"array posix_getgrnam ( string $name )";i:3;s:49:"Gets information about a group provided its name.";}
a:4:{i:0;s:15:"posix_getgroups";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"array posix_getgroups ( void )";i:3;s:42:"Gets the group set of the current process.";}
a:4:{i:0;s:14:"posix_getlogin";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"string posix_getlogin ( void )";i:3;s:62:"Returns the login name of the user owning the current process.";}
a:4:{i:0;s:13:"posix_getpgid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"int posix_getpgid ( int $pid )";i:3;s:66:"Returns the process group identifier of the process or on failure.";}
a:4:{i:0;s:13:"posix_getpgrp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int posix_getpgrp ( void )";i:3;s:59:"Return the process group identifier of the current process.";}
a:4:{i:0;s:12:"posix_getpid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"int posix_getpid ( void )";i:3;s:53:"Return the process identifier of the current process.";}
a:4:{i:0;s:13:"posix_getppid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int posix_getppid ( void )";i:3;s:75:"Return the process identifier of the parent process of the current process.";}
a:4:{i:0;s:14:"posix_getpwnam";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"array posix_getpwnam ( string $username )";i:3;s:47:"Returns an of information about the given user.";}
a:4:{i:0;s:14:"posix_getpwuid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"array posix_getpwuid ( int $uid )";i:3;s:73:"Returns an of information about the user referenced by the given user ID.";}
a:4:{i:0;s:15:"posix_getrlimit";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"array posix_getrlimit ( void )";i:3;s:76:"returns an of information about the current resource's soft and hard limits.";}
a:4:{i:0;s:12:"posix_getsid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"int posix_getsid ( int $pid )";i:3;s:113:"Return the session id of the process . The session id of a process is the process group id of the session leader.";}
a:4:{i:0;s:12:"posix_getuid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"int posix_getuid ( void )";i:3;s:55:"Return the numeric real user ID of the current process.";}
a:4:{i:0;s:16:"posix_initgroups";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:58:"bool posix_initgroups ( string $name, int $base_group_id )";i:3;s:64:"Calculates the group access list for the user specified in name.";}
a:4:{i:0;s:12:"posix_isatty";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"bool posix_isatty ( int $fd )";i:3;s:73:"Determines if the file descriptor refers to a valid terminal type device.";}
a:4:{i:0;s:10:"posix_kill";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"bool posix_kill ( int $pid, int $sig )";i:3;s:60:"Send the signal to the process with the process identifier .";}
a:4:{i:0;s:12:"posix_mkfifo";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"bool posix_mkfifo ( string $pathname, int $mode )";i:3;s:120:"creates a special file which exists in the file system and acts as a bidirectional communication endpoint for processes.";}
a:4:{i:0;s:11:"posix_mknod";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:87:"bool posix_mknod ( string $pathname, int $mode [, int $major = 0 [, int $minor = 0 ]] )";i:3;s:35:"Creates a special or ordinary file.";}
a:4:{i:0;s:13:"posix_setegid";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:31:"bool posix_setegid ( int $gid )";i:3;s:179:"Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.";}
a:4:{i:0;s:13:"posix_seteuid";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:31:"bool posix_seteuid ( int $uid )";i:3;s:173:"Set the real user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.";}
a:4:{i:0;s:12:"posix_setgid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"bool posix_setgid ( int $gid )";i:3;s:230:"Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function. The appropriate order of function calls is first, last.";}
a:4:{i:0;s:13:"posix_setpgid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"bool posix_setpgid ( int $pid, int $pgid )";i:3;s:40:"Let the process join the process group .";}
a:4:{i:0;s:12:"posix_setsid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"int posix_setsid ( void )";i:3;s:42:"Make the current process a session leader.";}
a:4:{i:0;s:12:"posix_setuid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"bool posix_setuid ( int $uid )";i:3;s:174:"Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.";}
a:4:{i:0;s:14:"posix_strerror";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:36:"string posix_strerror ( int $errno )";i:3;s:105:"Returns the POSIX system error message associated with the given . You may get the parameter by calling .";}
a:4:{i:0;s:11:"posix_times";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"array posix_times ( void )";i:3;s:45:"Gets information about the current CPU usage.";}
a:4:{i:0;s:13:"posix_ttyname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string posix_ttyname ( int $fd )";i:3;s:100:"Returns a for the absolute path to the current terminal device that is open on the file descriptor .";}
a:4:{i:0;s:11:"posix_uname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"array posix_uname ( void )";i:3;s:34:"Gets information about the system.";}
a:4:{i:0;s:14:"escapeshellarg";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:37:"string escapeshellarg ( string $arg )";i:3;s:333:"adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include, and the .";}
a:4:{i:0;s:14:"escapeshellcmd";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"string escapeshellcmd ( string $command )";i:3;s:263:"escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the or functions, or to the .";}
a:4:{i:0;s:4:"exec";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:72:"string exec ( string $command [, array &$output [, int &$return_var ]] )";i:3;s:20:"executes the given .";}
a:4:{i:0;s:8:"passthru";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"void passthru ( string $command [, int &$return_var ] )";i:3;s:469:"The function is similar to the function in that it executes a . This function should be used in place of or when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.";}
a:4:{i:0;s:10:"proc_close";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:36:"int proc_close ( resource $process )";i:3;s:313:"is similar to except that it only works on processes opened by . waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.";}
a:4:{i:0;s:15:"proc_get_status";i:1;s:7:"(PHP 5)";i:2;s:43:"array proc_get_status ( resource $process )";i:3;s:43:"fetches data about a process opened using .";}
a:4:{i:0;s:9:"proc_nice";i:1;s:7:"(PHP 5)";i:2;s:33:"bool proc_nice ( int $increment )";i:3;s:175:"changes the priority of the current process by the amount specified in . A positive will lower the priority of the current process, whereas a negative will raise the priority.";}
a:4:{i:0;s:9:"proc_open";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:129:"resource proc_open ( string $cmd, array $descriptorspec, array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )";i:3;s:87:"is similar to but provides a much greater degree of control over the program execution.";}
a:4:{i:0;s:14:"proc_terminate";i:1;s:7:"(PHP 5)";i:2;s:63:"bool proc_terminate ( resource $process [, int $signal = 15 ] )";i:3;s:120:"Signals a (created using ) that it should terminate. returns immediately and does not wait for the process to terminate.";}
a:4:{i:0;s:10:"shell_exec";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"string shell_exec ( string $cmd )";i:3;s:35:"This function is identical to the .";}
a:4:{i:0;s:6:"system";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"string system ( string $command [, int &$return_var ] )";i:3;s:96:"is just like the C version of the function in that it executes the given and outputs the result.";}
a:4:{i:0;s:13:"Thread::chunk";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:68:"final public boolean Thread::chunk ( long $size, boolean $preserve )";i:3;s:89:"Fetches a chunk of the objects member table of the given size, optionally preserving keys";}
a:4:{i:0;s:20:"Thread::getCreatorId";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:47:"final public long Thread::getCreatorId ( void )";i:3;s:73:"Will return the identity of the Thread that created the referenced Thread";}
a:4:{i:0;s:19:"Thread::getThreadId";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:46:"final public long Thread::getThreadId ( void )";i:3;s:49:"Will return the identity of the referenced Thread";}
a:4:{i:0;s:16:"Thread::isJoined";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:46:"final public boolean Thread::isJoined ( void )";i:3;s:64:"Tell if the referenced Thread has been joined by another context";}
a:4:{i:0;s:17:"Thread::isRunning";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:47:"final public boolean Thread::isRunning ( void )";i:3;s:42:"Tell if the referenced Thread is executing";}
a:4:{i:0;s:17:"Thread::isStarted";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:47:"final public boolean Thread::isStarted ( void )";i:3;s:46:"Tell if the referenced Thread has been started";}
a:4:{i:0;s:20:"Thread::isTerminated";i:1;s:23:"(PECL pthreads >= 0.43)";i:2;s:50:"final public boolean Thread::isTerminated ( void )";i:3;s:106:"Tell if the referenced Thread exited, suffered fatal errors, or threw uncaught exceptions during execution";}
a:4:{i:0;s:17:"Thread::isWaiting";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:47:"final public boolean Thread::isWaiting ( void )";i:3;s:57:"Tell if the referenced Thread is waiting for notification";}
a:4:{i:0;s:12:"Thread::join";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:42:"final public boolean Thread::join ( void )";i:3;s:80:"Causes the calling context to wait for the referenced Thread to finish executing";}
a:4:{i:0;s:12:"Thread::lock";i:1;s:23:"(PECL pthreads >= 0.40)";i:2;s:42:"final public boolean Thread::lock ( void )";i:3;s:59:"Lock the referenced objects storage for the calling context";}
a:4:{i:0;s:13:"Thread::merge";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:72:"final public boolean Thread::merge ( mixed $from [, mixed $overwrite ] )";i:3;s:35:"Merges data into the current object";}
a:4:{i:0;s:14:"Thread::notify";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:44:"final public boolean Thread::notify ( void )";i:3;s:42:"Send notification to the referenced Thread";}
a:4:{i:0;s:11:"Thread::pop";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:41:"final public boolean Thread::pop ( void )";i:3;s:42:"Pops an item from the objects member table";}
a:4:{i:0;s:11:"Thread::run";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:41:"abstract public void Thread::run ( void )";i:3;s:87:"The run method of a Thread is executed in a Thread when a call to Thread::start is made";}
a:4:{i:0;s:13:"Thread::shift";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:43:"final public boolean Thread::shift ( void )";i:3;s:44:"Shifts an item from the objects member table";}
a:4:{i:0;s:13:"Thread::start";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:55:"final public boolean Thread::start ([ long $options ] )";i:3;s:61:"Will start a new Thread to execute the implemented run method";}
a:4:{i:0;s:20:"Thread::synchronized";i:1;s:23:"(PECL pthreads >= 0.40)";i:2;s:74:"final public mixed Thread::synchronized ( Closure $block [, mixed $... ] )";i:3;s:84:"Executes the block while retaining the synchronization lock for the current context.";}
a:4:{i:0;s:14:"Thread::unlock";i:1;s:23:"(PECL pthreads >= 0.40)";i:2;s:44:"final public boolean Thread::unlock ( void )";i:3;s:61:"Unlock the referenced objects storage for the calling context";}
a:4:{i:0;s:12:"Thread::wait";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:54:"final public boolean Thread::wait ([ long $timeout ] )";i:3;s:81:"Will cause the calling Thread to wait for notification from the referenced Thread";}
a:4:{i:0;s:13:"Worker::chunk";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:68:"final public boolean Worker::chunk ( long $size, boolean $preserve )";i:3;s:89:"Fetches a chunk of the objects member table of the given size, optionally preserving keys";}
a:4:{i:0;s:20:"Worker::getCreatorId";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:47:"final public long Worker::getCreatorId ( void )";i:3;s:73:"Will return the identity of the Thread that created the referenced Thread";}
a:4:{i:0;s:18:"Worker::getStacked";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:44:"final public int Worker::getStacked ( void )";i:3;s:80:"Returns the number of Stackables waiting to be executed by the referenced Worker";}
a:4:{i:0;s:19:"Worker::getThreadId";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:46:"final public long Worker::getThreadId ( void )";i:3;s:49:"Will return the identity of the referenced Worker";}
a:4:{i:0;s:18:"Worker::isShutdown";i:1;s:23:"(PECL pthreads >= 0.37)";i:2;s:48:"final public boolean Worker::isShutdown ( void )";i:3;s:47:"Tell if the referenced Worker has been shutdown";}
a:4:{i:0;s:17:"Worker::isWorking";i:1;s:23:"(PECL pthreads >= 0.37)";i:2;s:47:"final public boolean Worker::isWorking ( void )";i:3;s:40:"Tell if a Worker is executing Stackables";}
a:4:{i:0;s:13:"Worker::merge";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:72:"final public boolean Worker::merge ( mixed $from [, mixed $overwrite ] )";i:3;s:35:"Merges data into the current object";}
a:4:{i:0;s:11:"Worker::pop";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:41:"final public boolean Worker::pop ( void )";i:3;s:42:"Pops an item from the objects member table";}
a:4:{i:0;s:11:"Worker::run";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:41:"abstract public void Worker::run ( void )";i:3;s:158:"The run method should prepare the Workers members ( and resources ) - Stackables have access to the Worker and it's methods/members/resources during execution";}
a:4:{i:0;s:13:"Worker::shift";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:43:"final public boolean Worker::shift ( void )";i:3;s:44:"Shifts an item from the objects member table";}
a:4:{i:0;s:16:"Worker::shutdown";i:1;s:23:"(PECL pthreads >= 0.37)";i:2;s:46:"final public boolean Worker::shutdown ( void )";i:3;s:75:"Shuts down the Worker after executing all the Stackables previously stacked";}
a:4:{i:0;s:13:"Worker::stack";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:50:"final public int Worker::stack ( Stackable $work )";i:3;s:70:"Appends the referenced Stackable to the stack of the referenced Worker";}
a:4:{i:0;s:13:"Worker::start";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:55:"final public boolean Worker::start ([ long $options ] )";i:3;s:78:"Will start a new Thread, executing Worker::run and then waiting for Stackables";}
a:4:{i:0;s:15:"Worker::unstack";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:55:"final public int Worker::unstack ([ Stackable $work ] )";i:3;s:113:"Removes the referenced Stackable ( or all Stackables if parameters are void ) from stack of the referenced Worker";}
a:4:{i:0;s:16:"Stackable::chunk";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:71:"final public boolean Stackable::chunk ( long $size, boolean $preserve )";i:3;s:89:"Fetches a chunk of the objects member table of the given size, optionally preserving keys";}
a:4:{i:0;s:20:"Stackable::isRunning";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:50:"final public boolean Stackable::isRunning ( void )";i:3;s:59:"A Stackable is running when a Worker Thread is executing it";}
a:4:{i:0;s:23:"Stackable::isTerminated";i:1;s:23:"(PECL pthreads >= 0.43)";i:2;s:53:"final public boolean Stackable::isTerminated ( void )";i:3;s:109:"Tell if the referenced Stackable exited, suffered fatal errors, or threw uncaught exceptions during execution";}
a:4:{i:0;s:20:"Stackable::isWaiting";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:50:"final public boolean Stackable::isWaiting ( void )";i:3;s:60:"Tell if the referenced Stackable is waiting for notification";}
a:4:{i:0;s:15:"Stackable::lock";i:1;s:23:"(PECL pthreads >= 0.40)";i:2;s:45:"final public boolean Stackable::lock ( void )";i:3;s:59:"Lock the referenced objects storage for the calling context";}
a:4:{i:0;s:16:"Stackable::merge";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:75:"final public boolean Stackable::merge ( mixed $from [, mixed $overwrite ] )";i:3;s:35:"Merges data into the current object";}
a:4:{i:0;s:17:"Stackable::notify";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:47:"final public boolean Stackable::notify ( void )";i:3;s:49:"Sends notification to a Stackable that is waiting";}
a:4:{i:0;s:14:"Stackable::pop";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:44:"final public boolean Stackable::pop ( void )";i:3;s:42:"Pops an item from the objects member table";}
a:4:{i:0;s:14:"Stackable::run";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:44:"abstract public void Stackable::run ( void )";i:3;s:62:"The run method of a Stackable is executed by the Worker Thread";}
a:4:{i:0;s:16:"Stackable::shift";i:1;s:23:"(PECL pthreads >= 0.45)";i:2;s:46:"final public boolean Stackable::shift ( void )";i:3;s:44:"Shifts an item from the objects member table";}
a:4:{i:0;s:23:"Stackable::synchronized";i:1;s:23:"(PECL pthreads >= 0.40)";i:2;s:77:"final public mixed Stackable::synchronized ( Closure $block [, mixed $... ] )";i:3;s:84:"Executes the block while retaining the synchronization lock for the current context.";}
a:4:{i:0;s:17:"Stackable::unlock";i:1;s:23:"(PECL pthreads >= 0.40)";i:2;s:47:"final public boolean Stackable::unlock ( void )";i:3;s:61:"Unlock the referenced objects storage for the calling context";}
a:4:{i:0;s:15:"Stackable::wait";i:1;s:23:"(PECL pthreads >= 0.36)";i:2;s:59:"final public boolean Stackable::wait ([ string $timeout ] )";i:3;s:41:"Waits for notification from the Stackable";}
a:4:{i:0;s:13:"Mutex::create";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:59:"final public static long Mutex::create ([ boolean $lock ] )";i:3;s:54:"Create, and optionally lock a new Mutex for the caller";}
a:4:{i:0;s:14:"Mutex::destroy";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:58:"final public static boolean Mutex::destroy ( long $mutex )";i:3;s:119:"Destroying Mutex handles must be carried out explicitly by the programmer when they are finished with the Mutex handle.";}
a:4:{i:0;s:11:"Mutex::lock";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:55:"final public static boolean Mutex::lock ( long $mutex )";i:3;s:41:"Attempt to lock the Mutex for the caller.";}
a:4:{i:0;s:14:"Mutex::trylock";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:58:"final public static boolean Mutex::trylock ( long $mutex )";i:3;s:107:"Attempt to lock the Mutex for the caller without blocking if the Mutex is owned (locked) by another Thread.";}
a:4:{i:0;s:13:"Mutex::unlock";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:79:"final public static boolean Mutex::unlock ( long $mutex [, boolean $destroy ] )";i:3;s:149:"Attempts to unlock the Mutex for the caller, optionally destroying the Mutex handle. The calling thread should own the Mutex at the time of the call.";}
a:4:{i:0;s:15:"Cond::broadcast";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:63:"final public static boolean Cond::broadcast ( long $condition )";i:3;s:48:"Broadcast to all Threads blocking on a call to .";}
a:4:{i:0;s:12:"Cond::create";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:46:"final public static long Cond::create ( void )";i:3;s:48:"Creates a new Condition Variable for the caller.";}
a:4:{i:0;s:13:"Cond::destroy";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:61:"final public static boolean Cond::destroy ( long $condition )";i:3;s:211:"Destroying Condition Variable handles must be carried out explicitly by the programmer when they are finished with the Condition Variable. No Threads should be blocking on a call to when the call to takes place.";}
a:4:{i:0;s:12:"Cond::signal";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:60:"final public static boolean Cond::signal ( long $condition )";i:3;s:0:"";}
a:4:{i:0;s:10:"Cond::wait";i:1;s:23:"(PECL pthreads >= 0.34)";i:2;s:90:"final public static boolean Cond::wait ( long $condition, long $mutex [, long $timeout ] )";i:3;s:97:"Wait for a signal on a Condition Variable, optionally specifying a timeout to limit waiting time.";}
a:4:{i:0;s:4:"ftok";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:43:"int ftok ( string $pathname, string $proj )";i:3;s:143:"The function converts the of an existing accessible file and a project identifier into an for use with for example and other System V IPC keys.";}
a:4:{i:0;s:13:"msg_get_queue";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:58:"resource msg_get_queue ( int $key [, int $perms = 0666 ] )";i:3;s:288:"returns an id that can be used to access the System V message queue with the given . The first call creates the message queue with the optional . A second call to for the same will return a different message queue identifier, but both identifiers access the same underlying message queue.";}
a:4:{i:0;s:16:"msg_queue_exists";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:34:"bool msg_queue_exists ( int $key )";i:3;s:40:"Checks whether the message queue exists.";}
a:4:{i:0;s:11:"msg_receive";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:172:"bool msg_receive ( resource $queue, int $desiredmsgtype, int &$msgtype, int $maxsize, mixed &$message [, bool $unserialize = true [, int $flags = 0 [, int &$errorcode ]]] )";i:3;s:76:"will receive the first message from the specified of the type specified by .";}
a:4:{i:0;s:16:"msg_remove_queue";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:41:"bool msg_remove_queue ( resource $queue )";i:3;s:189:"destroys the message queue specified by the . Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it.";}
a:4:{i:0;s:8:"msg_send";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:137:"bool msg_send ( resource $queue, int $msgtype, mixed $message [, bool $serialize = true [, bool $blocking = true [, int &$errorcode ]]] )";i:3;s:82:"sends a of type (which MUST be greater than 0) to the message queue specified by .";}
a:4:{i:0;s:13:"msg_set_queue";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:51:"bool msg_set_queue ( resource $queue, array $data )";i:3;s:150:"allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure.";}
a:4:{i:0;s:14:"msg_stat_queue";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:40:"array msg_stat_queue ( resource $queue )";i:3;s:173:"returns the message queue meta data for the message queue specified by the . This is useful, for example, to determine which process sent the message that was just received.";}
a:4:{i:0;s:11:"sem_acquire";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"bool sem_acquire ( resource $sem_identifier )";i:3;s:238:"blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded.";}
a:4:{i:0;s:7:"sem_get";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:102:"resource sem_get ( int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1 ]]] )";i:3;s:80:"returns an id that can be used to access the System V semaphore with the given .";}
a:4:{i:0;s:11:"sem_release";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"bool sem_release ( resource $sem_identifier )";i:3;s:108:"releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated.";}
a:4:{i:0;s:10:"sem_remove";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:44:"bool sem_remove ( resource $sem_identifier )";i:3;s:28:"removes the given semaphore.";}
a:4:{i:0;s:10:"shm_attach";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"resource shm_attach ( int $key [, int $memsize [, int $perm = 0666 ]] )";i:3;s:166:"returns an id that can be used to access the System V shared memory with the given, the first call creates the shared memory segment with and the optional perm-bits .";}
a:4:{i:0;s:10:"shm_detach";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"bool shm_detach ( resource $shm_identifier )";i:3;s:151:"disconnects from the shared memory given by the created by . Remember, that shared memory still exist in the Unix system and the data is still present.";}
a:4:{i:0;s:11:"shm_get_var";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"mixed shm_get_var ( resource $shm_identifier, int $variable_key )";i:3;s:122:"returns the variable with a given, in the given shared memory segment. The variable is still present in the shared memory.";}
a:4:{i:0;s:11:"shm_has_var";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:64:"bool shm_has_var ( resource $shm_identifier, int $variable_key )";i:3;s:68:"Checks whether a specific key exists inside a shared memory segment.";}
a:4:{i:0;s:11:"shm_put_var";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"bool shm_put_var ( resource $shm_identifier, int $variable_key, mixed $variable )";i:3;s:39:"inserts or updates the with the given .";}
a:4:{i:0;s:14:"shm_remove_var";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"bool shm_remove_var ( resource $shm_identifier, int $variable_key )";i:3;s:62:"Removes a variable with a given and frees the occupied memory.";}
a:4:{i:0;s:10:"shm_remove";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"bool shm_remove ( resource $shm_identifier )";i:3;s:55:"removes the shared memory . All data will be destroyed.";}
a:4:{i:0;s:11:"shmop_close";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:31:"void shmop_close ( int $shmid )";i:3;s:39:"is used to close a shared memory block.";}
a:4:{i:0;s:12:"shmop_delete";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:32:"bool shmop_delete ( int $shmid )";i:3;s:40:"is used to delete a shared memory block.";}
a:4:{i:0;s:10:"shmop_open";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:64:"int shmop_open ( int $key, string $flags, int $mode, int $size )";i:3;s:41:"can create or open a shared memory block.";}
a:4:{i:0;s:10:"shmop_read";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:56:"string shmop_read ( int $shmid, int $start, int $count )";i:3;s:44:"will read a string from shared memory block.";}
a:4:{i:0;s:10:"shmop_size";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:29:"int shmop_size ( int $shmid )";i:3;s:61:"is used to get the size, in bytes of the shared memory block.";}
a:4:{i:0;s:11:"shmop_write";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:57:"int shmop_write ( int $shmid, string $data, int $offset )";i:3;s:45:"will write a string into shared memory block.";}
a:4:{i:0;s:28:"geoip_continent_code_by_name";i:1;s:21:"(PECL geoip >= 1.0.3)";i:2;s:56:"string geoip_continent_code_by_name ( string $hostname )";i:3;s:100:"The function will return the two letter continent code corresponding to a hostname or an IP address.";}
a:4:{i:0;s:26:"geoip_country_code_by_name";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:54:"string geoip_country_code_by_name ( string $hostname )";i:3;s:98:"The function will return the two letter country code corresponding to a hostname or an IP address.";}
a:4:{i:0;s:27:"geoip_country_code3_by_name";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:55:"string geoip_country_code3_by_name ( string $hostname )";i:3;s:100:"The function will return the three letter country code corresponding to a hostname or an IP address.";}
a:4:{i:0;s:26:"geoip_country_name_by_name";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:54:"string geoip_country_name_by_name ( string $hostname )";i:3;s:92:"The function will return the full country name corresponding to a hostname or an IP address.";}
a:4:{i:0;s:19:"geoip_database_info";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:71:"string geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] )";i:3;s:102:"The function returns the corresponding GeoIP Database version as it is defined inside the binary file.";}
a:4:{i:0;s:14:"geoip_db_avail";i:1;s:21:"(PECL geoip >= 1.0.1)";i:2;s:37:"bool geoip_db_avail ( int $database )";i:3;s:96:"The function returns if the corresponding GeoIP Database is available and can be opened on disk.";}
a:4:{i:0;s:17:"geoip_db_filename";i:1;s:21:"(PECL geoip >= 1.0.1)";i:2;s:42:"string geoip_db_filename ( int $database )";i:3;s:70:"The function returns the filename of the corresponding GeoIP Database.";}
a:4:{i:0;s:21:"geoip_db_get_all_info";i:1;s:21:"(PECL geoip >= 1.0.1)";i:2;s:36:"array geoip_db_get_all_info ( void )";i:3;s:110:"The function will return detailed information as a multi-dimensional array about all the GeoIP database types.";}
a:4:{i:0;s:16:"geoip_id_by_name";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:41:"int geoip_id_by_name ( string $hostname )";i:3;s:99:"The function will return the Internet connection type corresponding to a hostname or an IP address.";}
a:4:{i:0;s:17:"geoip_isp_by_name";i:1;s:21:"(PECL geoip >= 1.0.2)";i:2;s:45:"string geoip_isp_by_name ( string $hostname )";i:3;s:99:"The function will return the name of the Internet Service Provider (ISP) that an IP is assigned to.";}
a:4:{i:0;s:17:"geoip_org_by_name";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:45:"string geoip_org_by_name ( string $hostname )";i:3;s:80:"The function will return the name of the organization that an IP is assigned to.";}
a:4:{i:0;s:20:"geoip_record_by_name";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:47:"array geoip_record_by_name ( string $hostname )";i:3;s:93:"The function will return the record information corresponding to a hostname or an IP address.";}
a:4:{i:0;s:20:"geoip_region_by_name";i:1;s:21:"(PECL geoip >= 0.2.0)";i:2;s:47:"array geoip_region_by_name ( string $hostname )";i:3;s:93:"The function will return the country and region corresponding to a hostname or an IP address.";}
a:4:{i:0;s:25:"geoip_region_name_by_code";i:1;s:21:"(PECL geoip >= 1.0.4)";i:2;s:78:"string geoip_region_name_by_code ( string $country_code, string $region_code )";i:3;s:90:"The function will return the region name corresponding to a country and region code combo.";}
a:4:{i:0;s:37:"geoip_time_zone_by_country_and_region";i:1;s:21:"(PECL geoip >= 1.0.4)";i:2;s:94:"string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] )";i:3;s:88:"The function will return the time zone corresponding to a country and region code combo.";}
a:4:{i:0;s:25:"fann_cascadetrain_on_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:134:"bool fann_cascadetrain_on_data ( resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error )";i:3;s:329:"The cascade output change fraction is a number between 0 and 1 determining how large a fraction the value should change within during training of the output connections, in order for the training not to stagnate. If the training stagnates, the training of the output connections will be ended and new candidates will be prepared.";}
a:4:{i:0;s:25:"fann_cascadetrain_on_file";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:136:"bool fann_cascadetrain_on_file ( resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error )";i:3;s:67:"Does the same as, but reads the training data directly from a file.";}
a:4:{i:0;s:25:"fann_clear_scaling_params";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"bool fann_clear_scaling_params ( resource $ann )";i:3;s:26:"Clears scaling parameters.";}
a:4:{i:0;s:9:"fann_copy";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:36:"resource fann_copy ( resource $ann )";i:3;s:35:"Creates a copy of a fann structure.";}
a:4:{i:0;s:21:"fann_create_from_file";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:61:"resource fann_create_from_file ( string $configuration_file )";i:3;s:97:"Constructs a backpropagation neural network from a configuration file, which have been saved by .";}
a:4:{i:0;s:26:"fann_create_shortcut_array";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:70:"resource fann_create_shortcut_array ( int $num_layers, array $layers )";i:3;s:142:"Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections using an array of layers sizes.";}
a:4:{i:0;s:20:"fann_create_shortcut";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:102:"reference fann_create_shortcut ( int $num_layers, int $num_neurons1, int $num_neurons2 [, int $... ] )";i:3;s:120:"Creates a standard backpropagation neural network, which is not fully connected and which also has shortcut connections.";}
a:4:{i:0;s:24:"fann_create_sparse_array";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:94:"ReturnType fann_create_sparse_array ( float $connection_rate, int $num_layers, array $layers )";i:3;s:110:"Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes.";}
a:4:{i:0;s:18:"fann_create_sparse";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:125:"ReturnType fann_create_sparse ( float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2 [, int $... ] )";i:3;s:80:"Creates a standard backpropagation neural network, which is not fully connected.";}
a:4:{i:0;s:26:"fann_create_standard_array";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:70:"resource fann_create_standard_array ( int $num_layers, array $layers )";i:3;s:66:"Creates a standard fully connected backpropagation neural network.";}
a:4:{i:0;s:20:"fann_create_standard";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:101:"resource fann_create_standard ( int $num_layers, int $num_neurons1, int $num_neurons2 [, int $... ] )";i:3;s:66:"Creates a standard fully connected backpropagation neural network.";}
a:4:{i:0;s:31:"fann_create_train_from_callback";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:116:"resource fann_create_train_from_callback ( int $num_data, int $num_input, int $num_output, collable $user_function )";i:3;s:237:"Creates the training data struct from a user supplied function. As the training data are numerable (data 1, data 2...), the user must write a function that receives the number of the training data set (input, output) and returns the set.";}
a:4:{i:0;s:17:"fann_create_train";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:77:"resource fann_create_train ( int $num_data, int $num_input, int $num_output )";i:3;s:38:"Creates an empty training data struct.";}
a:4:{i:0;s:18:"fann_descale_input";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:62:"bool fann_descale_input ( resource $ann, array $input_vector )";i:3;s:91:"Scale data in input vector after get it from ann based on previously calculated parameters.";}
a:4:{i:0;s:19:"fann_descale_output";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:64:"bool fann_descale_output ( resource $ann, array $output_vector )";i:3;s:92:"Scale data in output vector after get it from ann based on previously calculated parameters.";}
a:4:{i:0;s:18:"fann_descale_train";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:63:"bool fann_descale_train ( resource $ann, resource $train_data )";i:3;s:72:"Descale input and output data based on previously calculated parameters.";}
a:4:{i:0;s:18:"fann_destroy_train";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"bool fann_destroy_train ( resource $train_data )";i:3;s:27:"Destructs the training data";}
a:4:{i:0;s:12:"fann_destroy";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:35:"bool fann_destroy ( resource $ann )";i:3;s:75:"Destroys the entire network and properly freeing all the associated memory.";}
a:4:{i:0;s:25:"fann_duplicate_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:53:"resource fann_duplicate_train_data ( resource $data )";i:3;s:44:"Returns an exact copy of a fann train data .";}
a:4:{i:0;s:28:"fann_get_activation_function";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:75:"int fann_get_activation_function ( resource $ann, int $layer, int $neuron )";i:3;s:99:"Get the activation function for neuron number in layer number, counting the input layer as layer 0.";}
a:4:{i:0;s:29:"fann_get_activation_steepness";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:78:"float fann_get_activation_steepness ( resource $ann, int $layer, int $neuron )";i:3;s:100:"Get the activation steepness for neuron number in layer number, counting the input layer as layer 0.";}
a:4:{i:0;s:19:"fann_get_bias_array";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:43:"array fann_get_bias_array ( resource $ann )";i:3;s:52:"Get the number of bias in each layer in the network.";}
a:4:{i:0;s:23:"fann_get_bit_fail_limit";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:47:"float fann_get_bit_fail_limit ( resource $ann )";i:3;s:48:"Returns the bit fail limit used during training.";}
a:4:{i:0;s:17:"fann_get_bit_fail";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:39:"int fann_get_bit_fail ( resource $ann )";i:3;s:223:"The number of fail bits; means the number of output neurons which differ more than the bit fail limit (see, ). The bits are counted in all of the training data, so this number can be higher than the number of training data.";}
a:4:{i:0;s:44:"
fann_get_cascade_activation_functions_count";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:65:"int fann_get_cascade_activation_functions_count ( resource $ann )";i:3;s:48:"The number of activation functions in the array.";}
a:4:{i:0;s:37:"fann_get_cascade_activation_functions";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:61:"array fann_get_cascade_activation_functions ( resource $ann )";i:3;s:111:"The cascade activation functions array is an array of the different activation functions used by the candidates";}
a:4:{i:0;s:46:"
fann_get_cascade_activation_steepnesses_count";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:67:"int fann_get_cascade_activation_steepnesses_count ( resource $ann )";i:3;s:50:"The number of activation steepnesses in the array.";}
a:4:{i:0;s:39:"fann_get_cascade_activation_steepnesses";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:63:"array fann_get_cascade_activation_steepnesses ( resource $ann )";i:3;s:114:"The cascade activation steepnesses array is an array of the different activation functions used by the candidates.";}
a:4:{i:0;s:42:"fann_get_cascade_candidate_change_fraction";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:66:"float fann_get_cascade_candidate_change_fraction ( resource $ann )";i:3;s:334:"The cascade candidate change fraction is a number between 0 and 1 determining how large a fraction the value should change within during training of the candidate neurons, in order for the training not to stagnate. If the training stagnates, the training of the candidate neurons will be ended and the best candidate will be selected.";}
a:4:{i:0;s:32:"fann_get_cascade_candidate_limit";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:56:"float fann_get_cascade_candidate_limit ( resource $ann )";i:3;s:156:"The candidate limit is a limit for how much the candidate neuron may be trained. The limit is a limit on the proportion between the MSE and candidate score.";}
a:4:{i:0;s:45:"
fann_get_cascade_candidate_stagnation_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:68:"float fann_get_cascade_candidate_stagnation_epochs ( resource $ann )";i:3;s:157:"The number of cascade candidate stagnation epochs determines the number of epochs training is allowed to continue without changing the MSE by a fraction of .";}
a:4:{i:0;s:32:"fann_get_cascade_max_cand_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:54:"int fann_get_cascade_max_cand_epochs ( resource $ann )";i:3;s:161:"The maximum candidate epochs determines the maximum number of epochs the input connections to the candidates may be trained before adding a new candidate neuron.";}
a:4:{i:0;s:31:"fann_get_cascade_max_out_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:53:"int fann_get_cascade_max_out_epochs ( resource $ann )";i:3;s:137:"The maximum out epochs determines the maximum number of epochs the output connections may be trained after adding a new candidate neuron.";}
a:4:{i:0;s:32:"fann_get_cascade_min_cand_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:54:"int fann_get_cascade_min_cand_epochs ( resource $ann )";i:3;s:161:"The minimum candidate epochs determines the minimum number of epochs the input connections to the candidates may be trained before adding a new candidate neuron.";}
a:4:{i:0;s:31:"fann_get_cascade_min_out_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:53:"int fann_get_cascade_min_out_epochs ( resource $ann )";i:3;s:138:"The minimum out epochs determines the minimum number of epochs the output connections must be trained after adding a new candidate neuron.";}
a:4:{i:0;s:37:"fann_get_cascade_num_candidate_groups";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:59:"int fann_get_cascade_num_candidate_groups ( resource $ann )";i:3;s:114:"The number of candidate groups is the number of groups of identical candidates which will be used during training.";}
a:4:{i:0;s:31:"fann_get_cascade_num_candidates";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:53:"int fann_get_cascade_num_candidates ( resource $ann )";i:3;s:80:"The number of candidates used during training (calculated by multiplying, and ).";}
a:4:{i:0;s:39:"fann_get_cascade_output_change_fraction";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:63:"float fann_get_cascade_output_change_fraction ( resource $ann )";i:3;s:332:"The cascade output change fraction is a number between 0 and 1 determining how large a fraction of the value should change within during training of the output connections, in order for the training not to stagnate. If the training stagnates, the training of the output connections will be ended and new candidates will be prepared.";}
a:4:{i:0;s:41:"fann_get_cascade_output_stagnation_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:63:"int fann_get_cascade_output_stagnation_epochs ( resource $ann )";i:3;s:154:"The number of cascade output stagnation epochs determines the number of epochs training is allowed to continue without changing the MSE by a fraction of .";}
a:4:{i:0;s:34:"fann_get_cascade_weight_multiplier";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:58:"float fann_get_cascade_weight_multiplier ( resource $ann )";i:3;s:247:"The weight multiplier is a parameter which is used to multiply the weights from the candidate neuron before adding the neuron to the neural network. This parameter is usually between 0 and 1, and is used to make the training a bit less aggressive.";}
a:4:{i:0;s:25:"fann_get_connection_array";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:49:"array fann_get_connection_array ( resource $ann )";i:3;s:31:"Get connections in the network.";}
a:4:{i:0;s:24:"fann_get_connection_rate";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"float fann_get_connection_rate ( resource $ann )";i:3;s:58:"Get the connection rate used when the network was created.";}
a:4:{i:0;s:14:"fann_get_errno";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:39:"int fann_get_errno ( resource $errdat )";i:3;s:30:"Returns the last error number.";}
a:4:{i:0;s:15:"fann_get_errstr";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:43:"string fann_get_errstr ( resource $errdat )";i:3;s:24:"Returns the last errstr.";}
a:4:{i:0;s:20:"fann_get_layer_array";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:44:"array fann_get_layer_array ( resource $ann )";i:3;s:62:"Get the number of neurons in each layer in the neural network.";}
a:4:{i:0;s:26:"fann_get_learning_momentum";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:50:"float fann_get_learning_momentum ( resource $ann )";i:3;s:250:"The learning momentum can be used to speed up training. A too high momentum will however not benefit training. Setting momentum to 0 will be the same as not using the momentum parameter. The recommended value of this parameter is between 0.0 and 1.0.";}
a:4:{i:0;s:22:"fann_get_learning_rate";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:46:"float fann_get_learning_rate ( resource $ann )";i:3;s:156:"The learning rate is used to determine how aggressive training should be for some of the training algorithms (,, ). Do however note that it is not used in .";}
a:4:{i:0;s:12:"fann_get_MSE";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:36:"float fann_get_MSE ( resource $ann )";i:3;s:45:"Reads the mean square error from the network.";}
a:4:{i:0;s:21:"fann_get_network_type";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:43:"int fann_get_network_type ( resource $ann )";i:3;s:49:"Get the type of neural network it was created as.";}
a:4:{i:0;s:18:"fann_get_num_input";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:40:"int fann_get_num_input ( resource $ann )";i:3;s:32:"Get the number of input neurons.";}
a:4:{i:0;s:19:"fann_get_num_layers";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:41:"int fann_get_num_layers ( resource $ann )";i:3;s:47:"Get the number of layers in the neural network.";}
a:4:{i:0;s:19:"fann_get_num_output";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:41:"int fann_get_num_output ( resource $ann )";i:3;s:33:"Get the number of output neurons.";}
a:4:{i:0;s:24:"fann_get_quickprop_decay";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"float fann_get_quickprop_decay ( resource $ann )";i:3;s:222:"The decay is a small negative valued number which is a factor that the weights should decrease in each iteration during quickprop training. This is used to make sure that the weights do not become too high during training.";}
a:4:{i:0;s:21:"fann_get_quickprop_mu";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:45:"float fann_get_quickprop_mu ( resource $ann )";i:3;s:211:"The mu factor is used to increase and decrease the step-size during quickprop training. The mu factor should always be above 1, since it would otherwise decrease the step-size when it was suppose to increase it.";}
a:4:{i:0;s:30:"fann_get_rprop_decrease_factor";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:54:"float fann_get_rprop_decrease_factor ( resource $ann )";i:3;s:109:"The decrease factor is a value smaller than 1, which is used to decrease the step-size during RPROP training.";}
a:4:{i:0;s:24:"fann_get_rprop_delta_max";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"float fann_get_rprop_delta_max ( resource $ann )";i:3;s:94:"The maximum step-size is a positive number determining how large the maximum step-size may be.";}
a:4:{i:0;s:24:"fann_get_rprop_delta_min";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"float fann_get_rprop_delta_min ( resource $ann )";i:3;s:100:"The minimum step-size is a small positive number determining how small the minimum step-size may be.";}
a:4:{i:0;s:25:"fann_get_rprop_delta_zero";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:54:"ReturnType fann_get_rprop_delta_zero ( resource $ann )";i:3;s:77:"The initial step-size is a positive number determining the initial step size.";}
a:4:{i:0;s:30:"fann_get_rprop_increase_factor";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:54:"float fann_get_rprop_increase_factor ( resource $ann )";i:3;s:108:"The increase factor is a value larger than 1, which is used to increase the step-size during RPROP training.";}
a:4:{i:0;s:33:"fann_get_sarprop_step_error_shift";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:57:"float fann_get_sarprop_step_error_shift ( resource $ann )";i:3;s:37:"Returns the sarprop step error shift.";}
a:4:{i:0;s:45:"
fann_get_sarprop_step_error_threshold_factor";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:68:"float fann_get_sarprop_step_error_threshold_factor ( resource $ann )";i:3;s:40:"The sarprop step error threshold factor.";}
a:4:{i:0;s:28:"fann_get_sarprop_temperature";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:52:"float fann_get_sarprop_temperature ( resource $ann )";i:3;s:32:"Returns the sarprop temperature.";}
a:4:{i:0;s:35:"fann_get_sarprop_weight_decay_shift";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:59:"float fann_get_sarprop_weight_decay_shift ( resource $ann )";i:3;s:31:"The sarprop weight decay shift.";}
a:4:{i:0;s:26:"fann_get_total_connections";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"int fann_get_total_connections ( resource $ann )";i:3;s:58:"Get the total number of connections in the entire network.";}
a:4:{i:0;s:22:"fann_get_total_neurons";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:44:"int fann_get_total_neurons ( resource $ann )";i:3;s:154:"Get the total number of neurons in the entire network. This number does also include the bias neurons, so a 2-4-2 network has 2+4+2 +2(bias) = 10 neurons.";}
a:4:{i:0;s:29:"fann_get_train_error_function";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:51:"int fann_get_train_error_function ( resource $ann )";i:3;s:48:"Returns the error function used during training.";}
a:4:{i:0;s:28:"fann_get_train_stop_function";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:50:"int fann_get_train_stop_function ( resource $ann )";i:3;s:51:"Returns the the stop function used during training.";}
a:4:{i:0;s:27:"fann_get_training_algorithm";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:49:"int fann_get_training_algorithm ( resource $ann )";i:3;s:92:"Returns the training algorithm. This training algorithm is used by and associated functions.";}
a:4:{i:0;s:17:"fann_init_weights";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:62:"bool fann_init_weights ( resource $ann, resource $train_data )";i:3;s:64:"Initialize the weights using Widrow + NguyenÃ¢â‚¬â„¢s algorithm.";}
a:4:{i:0;s:22:"fann_length_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:45:"int fann_length_train_data ( resource $data )";i:3;s:59:"Returns the number of training patterns in the train data .";}
a:4:{i:0;s:21:"fann_merge_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:67:"resource fann_merge_train_data ( resource $data1, resource $data2 )";i:3;s:60:"Merges the data from data1 and data2 into a new train data .";}
a:4:{i:0;s:25:"fann_num_input_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:48:"int fann_num_input_train_data ( resource $data )";i:3;s:81:"Returns the number of inputs in each of the training patterns in the train data .";}
a:4:{i:0;s:26:"fann_num_output_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:49:"int fann_num_output_train_data ( resource $data )";i:3;s:82:"Returns the number of outputs in each of the training patterns in the train data .";}
a:4:{i:0;s:16:"fann_print_error";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:40:"void fann_print_error ( string $errdat )";i:3;s:24:"Prints the error string.";}
a:4:{i:0;s:22:"fann_randomize_weights";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:83:"bool fann_randomize_weights ( resource $ann, float $min_weight, float $max_weight )";i:3;s:48:"Give each connection a random weight between and";}
a:4:{i:0;s:25:"fann_read_train_from_file";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:55:"resource fann_read_train_from_file ( string $filename )";i:3;s:39:"Reads a file that stores training data.";}
a:4:{i:0;s:16:"fann_reset_errno";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:42:"void fann_reset_errno ( resource $errdat )";i:3;s:29:"Resets the last error number.";}
a:4:{i:0;s:17:"fann_reset_errstr";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:43:"void fann_reset_errstr ( resource $errdat )";i:3;s:29:"Resets the last error string.";}
a:4:{i:0;s:14:"fann_reset_MSE";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:35:"bool fann_reset_MSE ( string $ann )";i:3;s:46:"Resets the mean square error from the network.";}
a:4:{i:0;s:8:"fann_run";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:46:"array fann_run ( resource $ann, array $input )";i:3;s:151:"Will run input through the neural network, returning an array of outputs, the number of which being equal to the number of neurons in the output layer.";}
a:4:{i:0;s:15:"fann_save_train";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:58:"bool fann_save_train ( resource $data, string $file_name )";i:3;s:67:"Save the training data to a file, with the format as specified in .";}
a:4:{i:0;s:9:"fann_save";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:60:"bool fann_save ( resource $ann, string $configuration_file )";i:3;s:49:"Saves the entire network to a configuration file.";}
a:4:{i:0;s:27:"fann_scale_input_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:89:"bool fann_scale_input_train_data ( resource $train_data, float $new_min, float $new_max )";i:3;s:62:"Scales the inputs in the training data to the specified range.";}
a:4:{i:0;s:16:"fann_scale_input";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:60:"bool fann_scale_input ( resource $ann, array $input_vector )";i:3;s:91:"Scale data in input vector before feed it to ann based on previously calculated parameters.";}
a:4:{i:0;s:28:"fann_scale_output_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:90:"bool fann_scale_output_train_data ( resource $train_data, float $new_min, float $new_max )";i:3;s:63:"Scales the outputs in the training data to the specified range.";}
a:4:{i:0;s:17:"fann_scale_output";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:62:"bool fann_scale_output ( resource $ann, array $output_vector )";i:3;s:92:"Scale data in output vector before feed it to ann based on previously calculated parameters.";}
a:4:{i:0;s:21:"fann_scale_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:83:"bool fann_scale_train_data ( resource $train_data, float $new_min, float $new_max )";i:3;s:74:"Scales the inputs and outputs in the training data to the specified range.";}
a:4:{i:0;s:16:"fann_scale_train";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:61:"bool fann_scale_train ( resource $ann, resource $train_data )";i:3;s:70:"Scale input and output data based on previously calculated parameters.";}
a:4:{i:0;s:35:"fann_set_activation_function_hidden";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:84:"bool fann_set_activation_function_hidden ( resource $ann, int $activation_function )";i:3;s:58:"Sets the activation function for all of the hidden layers.";}
a:4:{i:0;s:34:"fann_set_activation_function_layer";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:95:"bool fann_set_activation_function_layer ( resource $ann, int $activation_function, int $layer )";i:3;s:105:"Set the activation function for all the neurons in the layer number, counting the input layer as layer 0.";}
a:4:{i:0;s:35:"fann_set_activation_function_output";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:84:"bool fann_set_activation_function_output ( resource $ann, int $activation_function )";i:3;s:50:"Sets the activation function for the output layer.";}
a:4:{i:0;s:28:"fann_set_activation_function";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:102:"bool fann_set_activation_function ( resource $ann, int $activation_function, int $layer, int $neuron )";i:3;s:99:"Set the activation function for neuron number in layer number, counting the input layer as layer 0.";}
a:4:{i:0;s:36:"fann_set_activation_steepness_hidden";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:88:"bool fann_set_activation_steepness_hidden ( resource $ann, float $activation_steepness )";i:3;s:88:"Sets the steepness of the activation steepness for all neurons in the all hidden layers.";}
a:4:{i:0;s:35:"fann_set_activation_steepness_layer";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:99:"bool fann_set_activation_steepness_layer ( resource $ann, float $activation_steepness, int $layer )";i:3;s:105:"Set the activation steepness for all of the neurons in layer number, counting the input layer as layer 0.";}
a:4:{i:0;s:36:"fann_set_activation_steepness_output";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:88:"bool fann_set_activation_steepness_output ( resource $ann, float $activation_steepness )";i:3;s:67:"Sets the steepness of the activation steepness in the output layer.";}
a:4:{i:0;s:29:"fann_set_activation_steepness";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:106:"bool fann_set_activation_steepness ( resource $ann, float $activation_steepness, int $layer, int $neuron )";i:3;s:100:"Set the activation steepness for neuron number in layer number, counting the input layer as layer 0.";}
a:4:{i:0;s:23:"fann_set_bit_fail_limit";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:69:"bool fann_set_bit_fail_limit ( resource $ann, float $bit_fail_limit )";i:3;s:44:"Set the bit fail limit used during training.";}
a:4:{i:0;s:17:"fann_set_callback";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:60:"bool fann_set_callback ( resource $ann, collable $callback )";i:3;s:88:"Sets the callback function for use during training. It means that it is called from or .";}
a:4:{i:0;s:37:"fann_set_cascade_activation_functions";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:97:"bool fann_set_cascade_activation_functions ( resource $ann, array $cascade_activation_functions )";i:3;s:57:"Sets the array of cascade candidate activation functions.";}
a:4:{i:0;s:39:"fann_set_cascade_activation_steepnesses";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:107:"bool fann_set_cascade_activation_steepnesses ( resource $ann, array $cascade_activation_steepnesses_count )";i:3;s:59:"Sets the array of cascade candidate activation steepnesses.";}
a:4:{i:0;s:42:"fann_set_cascade_candidate_change_fraction";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:107:"bool fann_set_cascade_candidate_change_fraction ( resource $ann, float $cascade_candidate_change_fraction )";i:3;s:43:"Sets the cascade candidate change fraction.";}
a:4:{i:0;s:32:"fann_set_cascade_candidate_limit";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:87:"bool fann_set_cascade_candidate_limit ( resource $ann, float $cascade_candidate_limit )";i:3;s:25:"Sets the candidate limit.";}
a:4:{i:0;s:45:"
fann_set_cascade_candidate_stagnation_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:109:"bool fann_set_cascade_candidate_stagnation_epochs ( resource $ann, int $cascade_candidate_stagnation_epochs )";i:3;s:55:"Sets the number of cascade candidate stagnation epochs.";}
a:4:{i:0;s:32:"fann_set_cascade_max_cand_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:85:"bool fann_set_cascade_max_cand_epochs ( resource $ann, int $cascade_max_cand_epochs )";i:3;s:30:"Sets the max candidate epochs.";}
a:4:{i:0;s:31:"fann_set_cascade_max_out_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:83:"bool fann_set_cascade_max_out_epochs ( resource $ann, int $cascade_max_out_epochs )";i:3;s:28:"Sets the maximum out epochs.";}
a:4:{i:0;s:32:"fann_set_cascade_min_cand_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:85:"bool fann_set_cascade_min_cand_epochs ( resource $ann, int $cascade_min_cand_epochs )";i:3;s:30:"Sets the min candidate epochs.";}
a:4:{i:0;s:31:"fann_set_cascade_min_out_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:83:"bool fann_set_cascade_min_out_epochs ( resource $ann, int $cascade_min_out_epochs )";i:3;s:28:"Sets the minimum out epochs.";}
a:4:{i:0;s:37:"fann_set_cascade_num_candidate_groups";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:95:"bool fann_set_cascade_num_candidate_groups ( resource $ann, int $cascade_num_candidate_groups )";i:3;s:36:"Sets the number of candidate groups.";}
a:4:{i:0;s:39:"fann_set_cascade_output_change_fraction";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:101:"bool fann_set_cascade_output_change_fraction ( resource $ann, float $cascade_output_change_fraction )";i:3;s:40:"Sets the cascade output change fraction.";}
a:4:{i:0;s:41:"fann_set_cascade_output_stagnation_epochs";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:103:"bool fann_set_cascade_output_stagnation_epochs ( resource $ann, int $cascade_output_stagnation_epochs )";i:3;s:52:"Sets the number of cascade output stagnation epochs.";}
a:4:{i:0;s:34:"fann_set_cascade_weight_multiplier";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:91:"bool fann_set_cascade_weight_multiplier ( resource $ann, float $cascade_weight_multiplier )";i:3;s:27:"Sets the weight multiplier.";}
a:4:{i:0;s:18:"fann_set_error_log";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:62:"void fann_set_error_log ( resource $errdat, string $log_file )";i:3;s:36:"Sets where the errors are logged to.";}
a:4:{i:0;s:29:"fann_set_input_scaling_params";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:118:"bool fann_set_input_scaling_params ( resource $ann, resource $train_data, float $new_input_min, float $new_input_max )";i:3;s:73:"Calculate input scaling parameters for future use based on training data.";}
a:4:{i:0;s:26:"fann_set_learning_momentum";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:75:"bool fann_set_learning_momentum ( resource $ann, float $learning_momentum )";i:3;s:27:"Sets the learning momentum.";}
a:4:{i:0;s:22:"fann_set_learning_rate";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:67:"bool fann_set_learning_rate ( resource $ann, float $learning_rate )";i:3;s:23:"Sets the learning rate.";}
a:4:{i:0;s:30:"fann_set_output_scaling_params";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:121:"bool fann_set_output_scaling_params ( resource $ann, resource $train_data, float $new_output_min, float $new_output_max )";i:3;s:74:"Calculate output scaling parameters for future use based on training data.";}
a:4:{i:0;s:24:"fann_set_quickprop_decay";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:71:"bool fann_set_quickprop_decay ( resource $ann, float $quickprop_decay )";i:3;s:32:"Sets the quickprop decay factor.";}
a:4:{i:0;s:21:"fann_set_quickprop_mu";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:65:"bool fann_set_quickprop_mu ( resource $ann, float $quickprop_mu )";i:3;s:29:"Sets the quickprop mu factor.";}
a:4:{i:0;s:30:"fann_set_rprop_decrease_factor";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:83:"bool fann_set_rprop_decrease_factor ( resource $ann, float $rprop_decrease_factor )";i:3;s:52:"Sets the decrease factor used during RPROP training.";}
a:4:{i:0;s:24:"fann_set_rprop_delta_max";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:71:"bool fann_set_rprop_delta_max ( resource $ann, float $rprop_delta_max )";i:3;s:94:"The maximum step-size is a positive number determining how large the maximum step-size may be.";}
a:4:{i:0;s:24:"fann_set_rprop_delta_min";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:71:"bool fann_set_rprop_delta_min ( resource $ann, float $rprop_delta_min )";i:3;s:100:"The minimum step-size is a small positive number determining how small the minimum step-size may be.";}
a:4:{i:0;s:25:"fann_set_rprop_delta_zero";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:73:"bool fann_set_rprop_delta_zero ( resource $ann, float $rprop_delta_zero )";i:3;s:77:"The initial step-size is a positive number determining the initial step size.";}
a:4:{i:0;s:30:"fann_set_rprop_increase_factor";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:83:"bool fann_set_rprop_increase_factor ( resource $ann, float $rprop_increase_factor )";i:3;s:52:"Sets the increase factor used during RPROP training.";}
a:4:{i:0;s:33:"fann_set_sarprop_step_error_shift";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:89:"bool fann_set_sarprop_step_error_shift ( resource $ann, float $sarprop_step_error_shift )";i:3;s:34:"Sets the sarprop step error shift.";}
a:4:{i:0;s:45:"
fann_set_sarprop_step_error_threshold_factor";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:111:"bool fann_set_sarprop_step_error_threshold_factor ( resource $ann, float $sarprop_step_error_threshold_factor )";i:3;s:45:"Sets the sarprop step error threshold factor.";}
a:4:{i:0;s:28:"fann_set_sarprop_temperature";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:79:"bool fann_set_sarprop_temperature ( resource $ann, float $sarprop_temperature )";i:3;s:29:"Sets the sarprop temperature.";}
a:4:{i:0;s:35:"fann_set_sarprop_weight_decay_shift";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:93:"bool fann_set_sarprop_weight_decay_shift ( resource $ann, float $sarprop_weight_decay_shift )";i:3;s:36:"Sets the sarprop weight decay shift.";}
a:4:{i:0;s:23:"fann_set_scaling_params";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:158:"bool fann_set_scaling_params ( resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max )";i:3;s:84:"Calculate input and output scaling parameters for future use based on training data.";}
a:4:{i:0;s:29:"fann_set_train_error_function";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:73:"bool fann_set_train_error_function ( resource $ann, int $error_function )";i:3;s:45:"Sets the error function used during training.";}
a:4:{i:0;s:28:"fann_set_train_stop_function";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:71:"bool fann_set_train_stop_function ( resource $ann, int $stop_function )";i:3;s:44:"Sets the stop function used during training.";}
a:4:{i:0;s:27:"fann_set_training_algorithm";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:75:"bool fann_set_training_algorithm ( resource $ann, int $training_algorithm )";i:3;s:28:"Sets the training algorithm.";}
a:4:{i:0;s:21:"fann_set_weight_array";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:64:"bool fann_set_weight_array ( resource $ann, array $connections )";i:3;s:31:"Set connections in the network.";}
a:4:{i:0;s:15:"fann_set_weight";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:87:"bool fann_set_weight ( resource $ann, int $from_neuron, int $to_neuron, float $weight )";i:3;s:33:"Set a connections in the network.";}
a:4:{i:0;s:23:"fann_shuffle_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:53:"bool fann_shuffle_train_data ( resource $train_data )";i:3;s:142:"Shuffles training data, randomizing the order. This is recommended for incremental training, while it have no influence during batch training.";}
a:4:{i:0;s:22:"fann_subset_train_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:73:"resource fann_subset_train_data ( resource $data, int $pos, int $length )";i:3;s:89:"Returns an copy of a subset of the train data, starting at position and elements forward.";}
a:4:{i:0;s:14:"fann_test_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:54:"float fann_test_data ( resource $ann, resource $data )";i:3;s:73:"Test a set of training data and calculates the MSE for the training data.";}
a:4:{i:0;s:9:"fann_test";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:69:"bool fann_test ( resource $ann, array $input, array $desired_output )";i:3;s:146:"Test with a set of inputs, and a set of desired outputs. This operation updates the mean square error, but does not change the network in any way.";}
a:4:{i:0;s:16:"fann_train_epoch";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:56:"float fann_train_epoch ( resource $ann, resource $data )";i:3;s:126:"Train one epoch with the training data stored in data. One epoch is where all of the training data is considered exactly once.";}
a:4:{i:0;s:18:"fann_train_on_data";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:125:"bool fann_train_on_data ( resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error )";i:3;s:49:"Trains on an entire dataset for a period of time.";}
a:4:{i:0;s:18:"fann_train_on_file";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:127:"bool fann_train_on_file ( resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error )";i:3;s:75:"Trains on an entire dataset, which is read from file, for a period of time.";}
a:4:{i:0;s:10:"fann_train";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:70:"bool fann_train ( resource $ann, array $input, array $desired_output )";i:3;s:154:"Train one iteration with a set of inputs, and a set of desired outputs. This training is always incremental training, since only one pattern is presented.";}
a:4:{i:0;s:27:"FANNConnection::__construct";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:86:"public FANNConnection::__construct ( int $from_neuron, int $to_neuron, float $weight )";i:3;s:107:"Create new connection and initialize its params. After creating the connection, only weight can be changed.";}
a:4:{i:0;s:29:"FANNConnection::getFromNeuron";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:49:"public int FANNConnection::getFromNeuron ( void )";i:3;s:40:"Returns the postions of starting neuron.";}
a:4:{i:0;s:27:"FANNConnection::getToNeuron";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:47:"public int FANNConnection::getToNeuron ( void )";i:3;s:43:"Returns the postions of terminating neuron.";}
a:4:{i:0;s:25:"FANNConnection::getWeight";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:46:"public void FANNConnection::getWeight ( void )";i:3;s:30:"Returns the connection weight.";}
a:4:{i:0;s:25:"FANNConnection::setWeight";i:1;s:20:"(PECL fann >= 1.0.0)";i:2;s:55:"public bool FANNConnection::setWeight ( float $weight )";i:3;s:27:"Sets the connection weight.";}
a:4:{i:0;s:31:"JsonSerializable::jsonSerialize";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:62:"abstract public mixed JsonSerializable::jsonSerialize ( void )";i:3;s:69:"Serializes the object to a value that can be serialized natively by .";}
a:4:{i:0;s:11:"json_decode";i:1;s:36:"(PHP 5 >= 5.2.0, PECL json >= 1.2.0)";i:2;s:101:"mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )";i:3;s:64:"Takes a JSON encoded string and converts it into a PHP variable.";}
a:4:{i:0;s:11:"json_encode";i:1;s:36:"(PHP 5 >= 5.2.0, PECL json >= 1.2.0)";i:2;s:78:"string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )";i:3;s:56:"Returns a string containing the JSON representation of .";}
a:4:{i:0;s:19:"json_last_error_msg";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:35:"string json_last_error_msg ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"json_last_error";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:28:"int json_last_error ( void )";i:3;s:80:"Returns the last error (if any) occurred during the last JSON encoding/decoding.";}
a:4:{i:0;s:13:"Judy::byCount";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:43:"public int Judy::byCount ( int $nth_index )";i:3;s:42:"Locate the Nth index present in the array.";}
a:4:{i:0;s:17:"Judy::__construct";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:43:"public Judy::__construct ( int $judy_type )";i:3;s:76:"Construct a new Judy object. A Judy object can be accessed like a PHP Array.";}
a:4:{i:0;s:11:"Judy::count";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:74:"public int Judy::count ([ int $index_start = 0 [, int $index_end = -1 ]] )";i:3;s:42:"Count the number of elements in the array.";}
a:4:{i:0;s:16:"Judy::__destruct";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:37:"public void Judy::__destruct ( void )";i:3;s:23:"Destruct a Judy object.";}
a:4:{i:0;s:11:"Judy::first";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:44:"public mixed Judy::first ([ mixed $index ] )";i:3;s:97:"Search (inclusive) for the first index present that is equal to or greater than the passed Index.";}
a:4:{i:0;s:16:"Judy::firstEmpty";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:51:"public int Judy::firstEmpty ([ mixed $index = 0 ] )";i:3;s:96:"Search (inclusive) for the first absent index that is equal to or greater than the passed Index.";}
a:4:{i:0;s:10:"Judy::free";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:30:"public int Judy::free ( void )";i:3;s:22:"Free the entire array.";}
a:4:{i:0;s:13:"Judy::getType";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:33:"public int Judy::getType ( void )";i:3;s:66:"Return an integer corresponding to the Judy of the current object.";}
a:4:{i:0;s:10:"Judy::last";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:43:"public void Judy::last ([ string $index ] )";i:3;s:93:"Search (inclusive) for the last index present that is equal to or less than the passed Index.";}
a:4:{i:0;s:15:"Judy::lastEmpty";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:49:"public int Judy::lastEmpty ([ int $index = -1 ] )";i:3;s:92:"Search (inclusive) for the last absent index that is equal to or less than the passed Index.";}
a:4:{i:0;s:17:"Judy::memoryUsage";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:37:"public int Judy::memoryUsage ( void )";i:3;s:36:"Return the memory used by the array.";}
a:4:{i:0;s:10:"Judy::next";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:40:"public mixed Judy::next ( mixed $index )";i:3;s:84:"Search (exclusive) for the next index present that is greater than the passed Index.";}
a:4:{i:0;s:15:"Judy::nextEmpty";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:41:"public int Judy::nextEmpty ( int $index )";i:3;s:83:"Search (exclusive) for the next absent index that is greater than the passed Index.";}
a:4:{i:0;s:18:"Judy::offsetExists";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:48:"public bool Judy::offsetExists ( mixed $offset )";i:3;s:32:"Whether or not an offset exists.";}
a:4:{i:0;s:15:"Judy::offsetGet";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:46:"public mixed Judy::offsetGet ( mixed $offset )";i:3;s:38:"Returns the value at specified offset.";}
a:4:{i:0;s:15:"Judy::offsetSet";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:59:"public bool Judy::offsetSet ( mixed $offset, mixed $value )";i:3;s:40:"Assigns a value to the specified offset.";}
a:4:{i:0;s:17:"Judy::offsetUnset";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:47:"public bool Judy::offsetUnset ( mixed $offset )";i:3;s:17:"Unsets an offset.";}
a:4:{i:0;s:10:"Judy::prev";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:40:"public mixed Judy::prev ( mixed $index )";i:3;s:85:"Search (exclusive) for the previous index present that is less than the passed Index.";}
a:4:{i:0;s:15:"Judy::prevEmpty";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:43:"public int Judy::prevEmpty ( mixed $index )";i:3;s:84:"Search (exclusive) for the previous index absent that is less than the passed Index.";}
a:4:{i:0;s:10:"Judy::size";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:31:"public void Judy::size ( void )";i:3;s:39:"This method is an alias of Judy::count.";}
a:4:{i:0;s:9:"judy_type";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:29:"int judy_type ( Judy $array )";i:3;s:67:"return an integer corresponding to the Judy of the specified Judy .";}
a:4:{i:0;s:12:"judy_version";i:1;s:20:"(PECL judy >= 0.1.1)";i:2;s:28:"string judy_version ( void )";i:3;s:101:"Return a string of the PHP Judy version. If the return value is not used, the string will be printed.";}
a:4:{i:0;s:11:"Lua::assign";i:1;s:18:"(PECL lua >=0.9.0)";i:2;s:56:"public mixed Lua::assign ( string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:9:"Lua::call";i:1;s:18:"(PECL lua >=0.9.0)";i:2;s:84:"public mixed Lua::call ( callable $lua_func [, array $args [, int $use_self = 0 ]] )";i:3;s:0:"";}
a:4:{i:0;s:16:"Lua::__construct";i:1;s:18:"(PECL lua >=0.9.0)";i:2;s:58:"public Lua::__construct ( string $lua_script_file = NULL )";i:3;s:0:"";}
a:4:{i:0;s:9:"Lua::eval";i:1;s:18:"(PECL lua >=0.9.0)";i:2;s:45:"public mixed Lua::eval ( string $statements )";i:3;s:0:"";}
a:4:{i:0;s:15:"Lua::getVersion";i:1;s:18:"(PECL lua >=0.9.0)";i:2;s:38:"public string Lua::getVersion ( void )";i:3;s:0:"";}
a:4:{i:0;s:12:"Lua::include";i:1;s:18:"(PECL lua >=0.9.0)";i:2;s:42:"public mixed Lua::include ( string $file )";i:3;s:0:"";}
a:4:{i:0;s:21:"Lua::registerCallback";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:71:"public mixed Lua::registerCallback ( string $name, callable $function )";i:3;s:58:"Register a PHP function to Lua as a function named "$name"";}
a:4:{i:0;s:20:"LuaClosure::__invoke";i:1;s:18:"(PECL lua >=0.9.0)";i:2;s:63:"public void LuaClosure::__invoke ( mixed $arg [, mixed $... ] )";i:3;s:0:"";}
a:4:{i:0;s:18:"connection_aborted";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"int connection_aborted ( void )";i:3;s:39:"Checks whether the client disconnected.";}
a:4:{i:0;s:17:"connection_status";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"int connection_status ( void )";i:3;s:36:"Gets the connection status bitfield.";}
a:4:{i:0;s:18:"connection_timeout";i:1;s:16:"(PHP 4 <= 4.0.4)";i:2;s:31:"int connection_timeout ( void )";i:3;s:40:"Determines whether the script timed out.";}
a:4:{i:0;s:8:"constant";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:31:"mixed constant ( string $name )";i:3;s:47:"Return the value of the constant indicated by .";}
a:4:{i:0;s:6:"define";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:78:"bool define ( string $name, mixed $value [, bool $case_insensitive = false ] )";i:3;s:36:"Defines a named constant at runtime.";}
a:4:{i:0;s:7:"defined";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"bool defined ( string $name )";i:3;s:56:"Checks whether the given constant exists and is defined.";}
a:4:{i:0;s:3:"die";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:42:"This language construct is equivalent to .";}
a:4:{i:0;s:4:"eval";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"mixed eval ( string $code )";i:3;s:27:"Evaluates the given as PHP.";}
a:4:{i:0;s:4:"exit";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"void exit ([ string $status ] )";i:3;s:82:"Terminates execution of the script. and will always be executed even if is called.";}
a:4:{i:0;s:11:"get_browser";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"mixed get_browser ([ string $user_agent [, bool $return_array = false ]] )";i:3;s:114:"Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the file.";}
a:4:{i:0;s:15:"__halt_compiler";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:29:"void __halt_compiler ( void )";i:3;s:114:"Halts the execution of the compiler. This can be useful to embed data in PHP scripts, like the installation files.";}
a:4:{i:0;s:14:"highlight_file";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"mixed highlight_file ( string $filename [, bool $return = false ] )";i:3;s:144:"Prints out or returns a syntax highlighted version of the code contained in using the colors defined in the built-in syntax highlighter for PHP.";}
a:4:{i:0;s:16:"highlight_string";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"mixed highlight_string ( string $str [, bool $return = false ] )";i:3;s:138:"Outputs or returns a syntax highlighted version of the given PHP code using the colors defined in the built-in syntax highlighter for PHP.";}
a:4:{i:0;s:17:"ignore_user_abort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"int ignore_user_abort ([ string $value ] )";i:3;s:69:"Sets whether a client disconnect should cause a script to be aborted.";}
a:4:{i:0;s:4:"pack";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"string pack ( string $format [, mixed $args [, mixed $... ]] )";i:3;s:56:"Pack given arguments into a binary string according to .";}
a:4:{i:0;s:16:"php_check_syntax";i:1;s:16:"(PHP 5 <= 5.0.4)";i:2;s:70:"bool php_check_syntax ( string $filename [, string &$error_message ] )";i:3;s:77:"Performs a syntax (lint) check on the specified testing for scripting errors.";}
a:4:{i:0;s:20:"php_strip_whitespace";i:1;s:7:"(PHP 5)";i:2;s:48:"string php_strip_whitespace ( string $filename )";i:3;s:223:"Returns the PHP source code in with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using from the .";}
a:4:{i:0;s:11:"show_source";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:5:"sleep";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int sleep ( int $seconds )";i:3;s:54:"Delays the program execution for the given number of .";}
a:4:{i:0;s:14:"sys_getloadavg";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:29:"array sys_getloadavg ( void )";i:3;s:157:"Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.";}
a:4:{i:0;s:14:"time_nanosleep";i:1;s:7:"(PHP 5)";i:2;s:55:"mixed time_nanosleep ( int $seconds, int $nanoseconds )";i:3;s:54:"Delays program execution for the given number of and .";}
a:4:{i:0;s:16:"time_sleep_until";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"bool time_sleep_until ( float $timestamp )";i:3;s:44:"Makes the script sleep until the specified .";}
a:4:{i:0;s:6:"uniqid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"string uniqid ([ string $prefix = "" [, bool $more_entropy = false ]] )";i:3;s:76:"Gets a prefixed unique identifier based on the current time in microseconds.";}
a:4:{i:0;s:6:"unpack";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"array unpack ( string $format, string $data )";i:3;s:67:"Unpacks from a binary string into an array according to the given .";}
a:4:{i:0;s:6:"usleep";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"void usleep ( int $micro_seconds )";i:3;s:63:"Delays program execution for the given number of micro seconds.";}
a:4:{i:0;s:21:"parsekit_compile_file";i:1;s:24:"(PECL parsekit >= 0.2.0)";i:2;s:102:"array parsekit_compile_file ( string $filename [, array &$errors [, int $options = PARSEKIT_QUIET ]] )";i:3;s:0:"";}
a:4:{i:0;s:23:"parsekit_compile_string";i:1;s:24:"(PECL parsekit >= 0.2.0)";i:2;s:103:"array parsekit_compile_string ( string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET ]] )";i:3;s:0:"";}
a:4:{i:0;s:21:"parsekit_func_arginfo";i:1;s:24:"(PECL parsekit >= 0.3.0)";i:2;s:47:"array parsekit_func_arginfo ( mixed $function )";i:3;s:0:"";}
a:4:{i:0;s:27:"SplDoublyLinkedList::bottom";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:49:"public mixed SplDoublyLinkedList::bottom ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"SplDoublyLinkedList::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:50:"public SplDoublyLinkedList::__construct() ( void )";i:3;s:47:"This constructs a new empty doubly linked list.";}
a:4:{i:0;s:26:"SplDoublyLinkedList::count";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public int SplDoublyLinkedList::count ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"SplDoublyLinkedList::current";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:50:"public mixed SplDoublyLinkedList::current ( void )";i:3;s:40:"Get the current doubly linked list node.";}
a:4:{i:0;s:36:"SplDoublyLinkedList::getIteratorMode";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:56:"public int SplDoublyLinkedList::getIteratorMode ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"SplDoublyLinkedList::isEmpty";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:49:"public bool SplDoublyLinkedList::isEmpty ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"SplDoublyLinkedList::key";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public mixed SplDoublyLinkedList::key ( void )";i:3;s:44:"This function returns the current node index";}
a:4:{i:0;s:25:"SplDoublyLinkedList::next";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public void SplDoublyLinkedList::next ( void )";i:3;s:35:"Move the iterator to the next node.";}
a:4:{i:0;s:33:"SplDoublyLinkedList::offsetExists";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:62:"public bool SplDoublyLinkedList::offsetExists ( mixed $index )";i:3;s:0:"";}
a:4:{i:0;s:30:"SplDoublyLinkedList::offsetGet";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:60:"public mixed SplDoublyLinkedList::offsetGet ( mixed $index )";i:3;s:0:"";}
a:4:{i:0;s:30:"SplDoublyLinkedList::offsetSet";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:74:"public void SplDoublyLinkedList::offsetSet ( mixed $index, mixed $newval )";i:3;s:36:"Sets the value at the specified to .";}
a:4:{i:0;s:32:"SplDoublyLinkedList::offsetUnset";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:61:"public void SplDoublyLinkedList::offsetUnset ( mixed $index )";i:3;s:40:"Unsets the value at the specified index.";}
a:4:{i:0;s:24:"SplDoublyLinkedList::pop";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public mixed SplDoublyLinkedList::pop ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"SplDoublyLinkedList::prev";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public void SplDoublyLinkedList::prev ( void )";i:3;s:39:"Move the iterator to the previous node.";}
a:4:{i:0;s:25:"SplDoublyLinkedList::push";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:54:"public void SplDoublyLinkedList::push ( mixed $value )";i:3;s:44:"Pushes at the end of the doubly linked list.";}
a:4:{i:0;s:27:"SplDoublyLinkedList::rewind";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:48:"public void SplDoublyLinkedList::rewind ( void )";i:3;s:43:"This rewinds the iterator to the beginning.";}
a:4:{i:0;s:30:"SplDoublyLinkedList::serialize";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:53:"public string SplDoublyLinkedList::serialize ( void )";i:3;s:23:"Serializes the storage.";}
a:4:{i:0;s:36:"SplDoublyLinkedList::setIteratorMode";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:62:"public void SplDoublyLinkedList::setIteratorMode ( int $mode )";i:3;s:0:"";}
a:4:{i:0;s:26:"SplDoublyLinkedList::shift";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:48:"public mixed SplDoublyLinkedList::shift ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"SplDoublyLinkedList::top";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public mixed SplDoublyLinkedList::top ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"SplDoublyLinkedList::unserialize";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:67:"public void SplDoublyLinkedList::unserialize ( string $serialized )";i:3;s:32:"Unserializes the storage, from .";}
a:4:{i:0;s:28:"SplDoublyLinkedList::unshift";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:57:"public void SplDoublyLinkedList::unshift ( mixed $value )";i:3;s:52:"Prepends at the beginning of the doubly linked list.";}
a:4:{i:0;s:26:"SplDoublyLinkedList::valid";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public bool SplDoublyLinkedList::valid ( void )";i:3;s:57:"Checks if the doubly linked list contains any more nodes.";}
a:4:{i:0;s:21:"SplStack::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:32:"SplStack::__construct() ( void )";i:3;s:34:"This constructs a new empty stack.";}
a:4:{i:0;s:25:"SplStack::setIteratorMode";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"void SplStack::setIteratorMode ( int $mode )";i:3;s:0:"";}
a:4:{i:0;s:21:"SplQueue::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:32:"SplQueue::__construct() ( void )";i:3;s:34:"This constructs a new empty queue.";}
a:4:{i:0;s:17:"SplQueue::dequeue";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:32:"mixed SplQueue::dequeue ( void )";i:3;s:35:"Dequeues from the top of the queue.";}
a:4:{i:0;s:17:"SplQueue::enqueue";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:39:"void SplQueue::enqueue ( mixed $value )";i:3;s:33:"Enqueues at the end of the queue.";}
a:4:{i:0;s:25:"SplQueue::setIteratorMode";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"void SplQueue::setIteratorMode ( int $mode )";i:3;s:0:"";}
a:4:{i:0;s:16:"SplHeap::compare";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:72:"abstract protected int SplHeap::compare ( mixed $value1, mixed $value2 )";i:3;s:14:"Compare with .";}
a:4:{i:0;s:20:"SplHeap::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:38:"public SplHeap::__construct() ( void )";i:3;s:33:"This constructs a new empty heap.";}
a:4:{i:0;s:14:"SplHeap::count";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:34:"public int SplHeap::count ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"SplHeap::current";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:38:"public mixed SplHeap::current ( void )";i:3;s:35:"Get the current datastructure node.";}
a:4:{i:0;s:16:"SplHeap::extract";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:38:"public mixed SplHeap::extract ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"SplHeap::insert";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public void SplHeap::insert ( mixed $value )";i:3;s:19:"Insert in the heap.";}
a:4:{i:0;s:16:"SplHeap::isEmpty";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:37:"public bool SplHeap::isEmpty ( void )";i:3;s:0:"";}
a:4:{i:0;s:12:"SplHeap::key";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:34:"public mixed SplHeap::key ( void )";i:3;s:44:"This function returns the current node index";}
a:4:{i:0;s:13:"SplHeap::next";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:34:"public void SplHeap::next ( void )";i:3;s:22:"Move to the next node.";}
a:4:{i:0;s:30:"SplHeap::recoverFromCorruption";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:51:"public void SplHeap::recoverFromCorruption ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"SplHeap::rewind";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:36:"public void SplHeap::rewind ( void )";i:3;s:146:"This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.";}
a:4:{i:0;s:12:"SplHeap::top";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:34:"public mixed SplHeap::top ( void )";i:3;s:0:"";}
a:4:{i:0;s:14:"SplHeap::valid";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:35:"public bool SplHeap::valid ( void )";i:3;s:43:"Checks if the heap contains any more nodes.";}
a:4:{i:0;s:19:"SplMaxHeap::compare";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:66:"protected int SplMaxHeap::compare ( mixed $value1, mixed $value2 )";i:3;s:14:"Compare with .";}
a:4:{i:0;s:19:"SplMinHeap::compare";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:66:"protected int SplMinHeap::compare ( mixed $value1, mixed $value2 )";i:3;s:14:"Compare with .";}
a:4:{i:0;s:25:"SplPriorityQueue::compare";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:75:"public int SplPriorityQueue::compare ( mixed $priority1, mixed $priority2 )";i:3;s:14:"Compare with .";}
a:4:{i:0;s:29:"SplPriorityQueue::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public SplPriorityQueue::__construct() ( void )";i:3;s:34:"This constructs a new empty queue.";}
a:4:{i:0;s:23:"SplPriorityQueue::count";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public int SplPriorityQueue::count ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"SplPriorityQueue::current";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public mixed SplPriorityQueue::current ( void )";i:3;s:35:"Get the current datastructure node.";}
a:4:{i:0;s:25:"SplPriorityQueue::extract";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public mixed SplPriorityQueue::extract ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"SplPriorityQueue::insert";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:70:"public void SplPriorityQueue::insert ( mixed $value, mixed $priority )";i:3;s:38:"Insert with the priority in the queue.";}
a:4:{i:0;s:25:"SplPriorityQueue::isEmpty";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public bool SplPriorityQueue::isEmpty ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"SplPriorityQueue::key";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public mixed SplPriorityQueue::key ( void )";i:3;s:44:"This function returns the current node index";}
a:4:{i:0;s:22:"SplPriorityQueue::next";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public void SplPriorityQueue::next ( void )";i:3;s:37:"Extracts the top node from the queue.";}
a:4:{i:0;s:39:"SplPriorityQueue::recoverFromCorruption";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:60:"public void SplPriorityQueue::recoverFromCorruption ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"SplPriorityQueue::rewind";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:45:"public void SplPriorityQueue::rewind ( void )";i:3;s:146:"This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.";}
a:4:{i:0;s:33:"SplPriorityQueue::setExtractFlags";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:60:"public void SplPriorityQueue::setExtractFlags ( int $flags )";i:3;s:0:"";}
a:4:{i:0;s:21:"SplPriorityQueue::top";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public mixed SplPriorityQueue::top ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"SplPriorityQueue::valid";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public bool SplPriorityQueue::valid ( void )";i:3;s:44:"Checks if the queue contains any more nodes.";}
a:4:{i:0;s:26:"SplFixedArray::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:56:"public SplFixedArray::__construct() ([ int $size = 0 ] )";i:3;s:60:"Initializes a fixed array with a number of values equal to .";}
a:4:{i:0;s:20:"SplFixedArray::count";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:40:"public int SplFixedArray::count ( void )";i:3;s:30:"Returns the size of the array.";}
a:4:{i:0;s:22:"SplFixedArray::current";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public mixed SplFixedArray::current ( void )";i:3;s:30:"Get the current array element.";}
a:4:{i:0;s:24:"SplFixedArray::fromArray";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:100:"public static SplFixedArray SplFixedArray::fromArray ( array $array [, bool $save_indexes = true ] )";i:3;s:38:"Import the PHP array in a new instance";}
a:4:{i:0;s:22:"SplFixedArray::getSize";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:42:"public int SplFixedArray::getSize ( void )";i:3;s:27:"Gets the size of the array.";}
a:4:{i:0;s:18:"SplFixedArray::key";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:38:"public int SplFixedArray::key ( void )";i:3;s:32:"Returns the current array index.";}
a:4:{i:0;s:19:"SplFixedArray::next";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:40:"public void SplFixedArray::next ( void )";i:3;s:42:"Move the iterator to the next array entry.";}
a:4:{i:0;s:27:"SplFixedArray::offsetExists";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:54:"public bool SplFixedArray::offsetExists ( int $index )";i:3;s:42:"Checks whether the requested index exists.";}
a:4:{i:0;s:24:"SplFixedArray::offsetGet";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:52:"public mixed SplFixedArray::offsetGet ( int $index )";i:3;s:32:"Returns the value at the index .";}
a:4:{i:0;s:24:"SplFixedArray::offsetSet";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:66:"public void SplFixedArray::offsetSet ( int $index, mixed $newval )";i:3;s:36:"Sets the value at the specified to .";}
a:4:{i:0;s:26:"SplFixedArray::offsetUnset";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public void SplFixedArray::offsetUnset ( int $index )";i:3;s:40:"Unsets the value at the specified index.";}
a:4:{i:0;s:21:"SplFixedArray::rewind";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:42:"public void SplFixedArray::rewind ( void )";i:3;s:38:"Rewinds the iterator to the beginning.";}
a:4:{i:0;s:22:"SplFixedArray::setSize";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public int SplFixedArray::setSize ( int $size )";i:3;s:218:"Change the size of an array to the new size of . If is less than the current array size, any values after the new size will be discarded. If is greater than the current array size, the array will be padded with values.";}
a:4:{i:0;s:22:"SplFixedArray::toArray";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public array SplFixedArray::toArray ( void )";i:3;s:41:"Returns a PHP array from the fixed array.";}
a:4:{i:0;s:20:"SplFixedArray::valid";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:41:"public bool SplFixedArray::valid ( void )";i:3;s:47:"Checks if the array contains any more elements.";}
a:4:{i:0;s:23:"SplFixedArray::__wakeup";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:44:"public void SplFixedArray::__wakeup ( void )";i:3;s:49:"Reinitialises the array after being unserialised.";}
a:4:{i:0;s:24:"SplObjectStorage::addAll";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:66:"public void SplObjectStorage::addAll ( SplObjectStorage $storage )";i:3;s:76:"Adds all objects-data pairs from a different storage in the current storage.";}
a:4:{i:0;s:24:"SplObjectStorage::attach";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:79:"public void SplObjectStorage::attach ( object $object [, mixed $data = NULL ] )";i:3;s:69:"Adds an inside the storage, and optionally associate it to some data.";}
a:4:{i:0;s:26:"SplObjectStorage::contains";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public bool SplObjectStorage::contains ( object $object )";i:3;s:44:"Checks if the storage contains the provided.";}
a:4:{i:0;s:23:"SplObjectStorage::count";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public int SplObjectStorage::count ( void )";i:3;s:44:"Counts the number of objects in the storage.";}
a:4:{i:0;s:25:"SplObjectStorage::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"public object SplObjectStorage::current ( void )";i:3;s:34:"Returns the current storage entry.";}
a:4:{i:0;s:24:"SplObjectStorage::detach";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:55:"public void SplObjectStorage::detach ( object $object )";i:3;s:29:"Removes the from the storage.";}
a:4:{i:0;s:25:"SplObjectStorage::getHash";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:58:"public string SplObjectStorage::getHash ( object $object )";i:3;s:72:"This method calculates an identifier for the objects added to an object.";}
a:4:{i:0;s:25:"SplObjectStorage::getInfo";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public mixed SplObjectStorage::getInfo ( void )";i:3;s:95:"Returns the data, or info, associated with the object pointed by the current iterator position.";}
a:4:{i:0;s:21:"SplObjectStorage::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public int SplObjectStorage::key ( void )";i:3;s:53:"Returns the index at which the iterator currently is.";}
a:4:{i:0;s:22:"SplObjectStorage::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void SplObjectStorage::next ( void )";i:3;s:46:"Moves the iterator to the next in the storage.";}
a:4:{i:0;s:30:"SplObjectStorage::offsetExists";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:61:"public bool SplObjectStorage::offsetExists ( object $object )";i:3;s:40:"Checks whether an exists in the storage.";}
a:4:{i:0;s:27:"SplObjectStorage::offsetGet";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:59:"public mixed SplObjectStorage::offsetGet ( object $object )";i:3;s:51:"Returns the data associated with an in the storage.";}
a:4:{i:0;s:27:"SplObjectStorage::offsetSet";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:82:"public void SplObjectStorage::offsetSet ( object $object [, mixed $data = NULL ] )";i:3;s:36:"Associate data to an in the storage.";}
a:4:{i:0;s:29:"SplObjectStorage::offsetUnset";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:60:"public void SplObjectStorage::offsetUnset ( object $object )";i:3;s:28:"Removes an from the storage.";}
a:4:{i:0;s:27:"SplObjectStorage::removeAll";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:69:"public void SplObjectStorage::removeAll ( SplObjectStorage $storage )";i:3;s:70:"Removes objects contained in another storage from the current storage.";}
a:4:{i:0;s:33:"SplObjectStorage::removeAllExcept";i:1;s:16:"(PHP 5 >= 5.3.6)";i:2;s:75:"public void SplObjectStorage::removeAllExcept ( SplObjectStorage $storage )";i:3;s:91:"Removes all objects except for those contained in another storage from the current storage.";}
a:4:{i:0;s:24:"SplObjectStorage::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public void SplObjectStorage::rewind ( void )";i:3;s:49:"Rewind the iterator to the first storage element.";}
a:4:{i:0;s:27:"SplObjectStorage::serialize";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:50:"public string SplObjectStorage::serialize ( void )";i:3;s:47:"Returns a string representation of the storage.";}
a:4:{i:0;s:25:"SplObjectStorage::setInfo";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public void SplObjectStorage::setInfo ( mixed $data )";i:3;s:79:"Associates data, or info, with the object currently pointed to by the iterator.";}
a:4:{i:0;s:29:"SplObjectStorage::unserialize";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:64:"public void SplObjectStorage::unserialize ( string $serialized )";i:3;s:68:"Unserializes storage entries and attach them to the current storage.";}
a:4:{i:0;s:23:"SplObjectStorage::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public bool SplObjectStorage::valid ( void )";i:3;s:47:"Returns if the current iterator entry is valid.";}
a:4:{i:0;s:22:"AppendIterator::append";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public void AppendIterator::append ( Iterator $iterator )";i:3;s:20:"Appends an iterator.";}
a:4:{i:0;s:27:"AppendIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public AppendIterator::__construct() ( void )";i:3;s:29:"Constructs an AppendIterator.";}
a:4:{i:0;s:23:"AppendIterator::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public mixed AppendIterator::current ( void )";i:3;s:23:"Gets the current value.";}
a:4:{i:0;s:32:"AppendIterator::getArrayIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:53:"public void AppendIterator::getArrayIterator ( void )";i:3;s:69:"This method gets the that is used to store the iterators added with .";}
a:4:{i:0;s:32:"AppendIterator::getInnerIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public Iterator AppendIterator::getInnerIterator ( void )";i:3;s:47:"This method returns the current inner iterator.";}
a:4:{i:0;s:32:"AppendIterator::getIteratorIndex";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:52:"public int AppendIterator::getIteratorIndex ( void )";i:3;s:45:"Gets the index of the current inner iterator.";}
a:4:{i:0;s:19:"AppendIterator::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public scalar AppendIterator::key ( void )";i:3;s:20:"Get the current key.";}
a:4:{i:0;s:20:"AppendIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public void AppendIterator::next ( void )";i:3;s:91:"Moves to the next element. If this means to another Iterator then it rewinds that Iterator.";}
a:4:{i:0;s:22:"AppendIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void AppendIterator::rewind ( void )";i:3;s:56:"Rewind to the first element of the first inner Iterator.";}
a:4:{i:0;s:21:"AppendIterator::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public bool AppendIterator::valid ( void )";i:3;s:39:"Checks validity of the current element.";}
a:4:{i:0;s:21:"ArrayIterator::append";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:50:"public void ArrayIterator::append ( mixed $value )";i:3;s:34:"Appends value as the last element.";}
a:4:{i:0;s:20:"ArrayIterator::asort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:41:"public void ArrayIterator::asort ( void )";i:3;s:25:"Sorts an array by values.";}
a:4:{i:0;s:26:"ArrayIterator::__construct";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:82:"public ArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]] )";i:3;s:15:"Constructs an .";}
a:4:{i:0;s:20:"ArrayIterator::count";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:40:"public int ArrayIterator::count ( void )";i:3;s:79:"Gets the number of elements in the, or the number of public properties in the .";}
a:4:{i:0;s:22:"ArrayIterator::current";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:44:"public mixed ArrayIterator::current ( void )";i:3;s:22:"Get the current entry.";}
a:4:{i:0;s:27:"ArrayIterator::getArrayCopy";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:49:"public array ArrayIterator::getArrayCopy ( void )";i:3;s:23:"Get a copy of an array.";}
a:4:{i:0;s:23:"ArrayIterator::getFlags";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public void ArrayIterator::getFlags ( void )";i:3;s:22:"Get the current flags.";}
a:4:{i:0;s:18:"ArrayIterator::key";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:40:"public mixed ArrayIterator::key ( void )";i:3;s:43:"This function returns the current array key";}
a:4:{i:0;s:20:"ArrayIterator::ksort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:41:"public void ArrayIterator::ksort ( void )";i:3;s:27:"Sorts an array by the keys.";}
a:4:{i:0;s:26:"ArrayIterator::natcasesort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:47:"public void ArrayIterator::natcasesort ( void )";i:3;s:78:"Sort the entries by values using a case insensitive "natural order" algorithm.";}
a:4:{i:0;s:22:"ArrayIterator::natsort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:43:"public void ArrayIterator::natsort ( void )";i:3;s:59:"Sort the entries by values using "natural order" algorithm.";}
a:4:{i:0;s:19:"ArrayIterator::next";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:40:"public void ArrayIterator::next ( void )";i:3;s:31:"The iterator to the next entry.";}
a:4:{i:0;s:27:"ArrayIterator::offsetExists";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:57:"public void ArrayIterator::offsetExists ( string $index )";i:3;s:28:"Checks if the offset exists.";}
a:4:{i:0;s:24:"ArrayIterator::offsetGet";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:55:"public mixed ArrayIterator::offsetGet ( string $index )";i:3;s:40:"Gets the value from the provided offset.";}
a:4:{i:0;s:24:"ArrayIterator::offsetSet";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:70:"public void ArrayIterator::offsetSet ( string $index, string $newval )";i:3;s:32:"Sets a value for a given offset.";}
a:4:{i:0;s:26:"ArrayIterator::offsetUnset";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:56:"public void ArrayIterator::offsetUnset ( string $index )";i:3;s:29:"Unsets a value for an offset.";}
a:4:{i:0;s:21:"ArrayIterator::rewind";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:42:"public void ArrayIterator::rewind ( void )";i:3;s:43:"This rewinds the iterator to the beginning.";}
a:4:{i:0;s:19:"ArrayIterator::seek";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:49:"public void ArrayIterator::seek ( int $position )";i:3;s:0:"";}
a:4:{i:0;s:24:"ArrayIterator::serialize";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public string ArrayIterator::serialize ( void )";i:3;s:10:"Serialize.";}
a:4:{i:0;s:23:"ArrayIterator::setFlags";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:53:"public void ArrayIterator::setFlags ( string $flags )";i:3;s:21:"Sets behaviour flags.";}
a:4:{i:0;s:21:"ArrayIterator::uasort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:58:"public void ArrayIterator::uasort ( string $cmp_function )";i:3;s:55:"Sort the entries by values using user defined function.";}
a:4:{i:0;s:21:"ArrayIterator::uksort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:58:"public void ArrayIterator::uksort ( string $cmp_function )";i:3;s:52:"Sort the entries by key using user defined function.";}
a:4:{i:0;s:26:"ArrayIterator::unserialize";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:63:"public string ArrayIterator::unserialize ( string $serialized )";i:3;s:12:"Unserialize.";}
a:4:{i:0;s:20:"ArrayIterator::valid";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:41:"public bool ArrayIterator::valid ( void )";i:3;s:40:"Checks if the contains any more entries.";}
a:4:{i:0;s:28:"CachingIterator::__construct";i:1;s:7:"(PHP 5)";i:2;s:99:"public CachingIterator::__construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"CachingIterator::count";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:42:"public int CachingIterator::count ( void )";i:3;s:50:"May return the number of elements in the iterator.";}
a:4:{i:0;s:24:"CachingIterator::current";i:1;s:7:"(PHP 5)";i:2;s:45:"public void CachingIterator::current ( void )";i:3;s:48:"May return the current element in the iteration.";}
a:4:{i:0;s:25:"CachingIterator::getCache";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:46:"public void CachingIterator::getCache ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"CachingIterator::getFlags";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:46:"public void CachingIterator::getFlags ( void )";i:3;s:68:"Get the bitmask of the flags used for this CachingIterator instance.";}
a:4:{i:0;s:33:"CachingIterator::getInnerIterator";i:1;s:7:"(PHP 5)";i:2;s:58:"public Iterator CachingIterator::getInnerIterator ( void )";i:3;s:45:"Returns the iterator sent to the constructor.";}
a:4:{i:0;s:24:"CachingIterator::hasNext";i:1;s:7:"(PHP 5)";i:2;s:45:"public void CachingIterator::hasNext ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"CachingIterator::key";i:1;s:7:"(PHP 5)";i:2;s:43:"public scalar CachingIterator::key ( void )";i:3;s:53:"This method may return a key for the current element.";}
a:4:{i:0;s:21:"CachingIterator::next";i:1;s:7:"(PHP 5)";i:2;s:42:"public void CachingIterator::next ( void )";i:3;s:26:"Move the iterator forward.";}
a:4:{i:0;s:29:"CachingIterator::offsetExists";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:59:"public void CachingIterator::offsetExists ( string $index )";i:3;s:0:"";}
a:4:{i:0;s:26:"CachingIterator::offsetGet";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:56:"public void CachingIterator::offsetGet ( string $index )";i:3;s:0:"";}
a:4:{i:0;s:26:"CachingIterator::offsetSet";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:72:"public void CachingIterator::offsetSet ( string $index, string $newval )";i:3;s:0:"";}
a:4:{i:0;s:28:"CachingIterator::offsetUnset";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:58:"public void CachingIterator::offsetUnset ( string $index )";i:3;s:0:"";}
a:4:{i:0;s:23:"CachingIterator::rewind";i:1;s:7:"(PHP 5)";i:2;s:44:"public void CachingIterator::rewind ( void )";i:3;s:20:"Rewind the iterator.";}
a:4:{i:0;s:25:"CachingIterator::setFlags";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:56:"public void CachingIterator::setFlags ( bitmask $flags )";i:3;s:45:"Set the flags for the CachingIterator object.";}
a:4:{i:0;s:27:"CachingIterator::__toString";i:1;s:7:"(PHP 5)";i:2;s:48:"public void CachingIterator::__toString ( void )";i:3;s:53:"Get the string representation of the current element.";}
a:4:{i:0;s:22:"CachingIterator::valid";i:1;s:7:"(PHP 5)";i:2;s:43:"public void CachingIterator::valid ( void )";i:3;s:43:"Check whether the current element is valid.";}
a:4:{i:0;s:30:"CallbackFilterIterator::accept";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:53:"public string CallbackFilterIterator::accept ( void )";i:3;s:90:"This method calls the callback with the current value, current key and the inner iterator.";}
a:4:{i:0;s:35:"CallbackFilterIterator::__construct";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:87:"public CallbackFilterIterator::__construct() ( Iterator $iterator, callable $callback )";i:3;s:88:"Creates a filtered iterator using the to determine which items are accepted or rejected.";}
a:4:{i:0;s:30:"DirectoryIterator::__construct";i:1;s:7:"(PHP 5)";i:2;s:56:"public DirectoryIterator::__construct() ( string $path )";i:3;s:48:"Constructs a new directory iterator from a path.";}
a:4:{i:0;s:26:"DirectoryIterator::current";i:1;s:7:"(PHP 5)";i:2;s:60:"public DirectoryIterator DirectoryIterator::current ( void )";i:3;s:21:"Get the current item.";}
a:4:{i:0;s:27:"DirectoryIterator::getATime";i:1;s:7:"(PHP 5)";i:2;s:47:"public int DirectoryIterator::getATime ( void )";i:3;s:45:"Get the last access time of the current item.";}
a:4:{i:0;s:30:"DirectoryIterator::getBasename";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:66:"public string DirectoryIterator::getBasename ([ string $suffix ] )";i:3;s:38:"Get the base name of the current item.";}
a:4:{i:0;s:27:"DirectoryIterator::getCTime";i:1;s:7:"(PHP 5)";i:2;s:47:"public int DirectoryIterator::getCTime ( void )";i:3;s:47:"Get the inode change time for the current item.";}
a:4:{i:0;s:31:"DirectoryIterator::getExtension";i:1;s:16:"(PHP 5 >= 5.3.6)";i:2;s:54:"public string DirectoryIterator::getExtension ( void )";i:3;s:29:"Retrieves the file extension.";}
a:4:{i:0;s:30:"DirectoryIterator::getFilename";i:1;s:7:"(PHP 5)";i:2;s:53:"public string DirectoryIterator::getFilename ( void )";i:3;s:38:"Get the file name of the current item.";}
a:4:{i:0;s:27:"DirectoryIterator::getGroup";i:1;s:7:"(PHP 5)";i:2;s:47:"public int DirectoryIterator::getGroup ( void )";i:3;s:29:"Get the group id of the file.";}
a:4:{i:0;s:27:"DirectoryIterator::getInode";i:1;s:7:"(PHP 5)";i:2;s:47:"public int DirectoryIterator::getInode ( void )";i:3;s:42:"Get the inode number for the current item.";}
a:4:{i:0;s:27:"DirectoryIterator::getMTime";i:1;s:7:"(PHP 5)";i:2;s:47:"public int DirectoryIterator::getMTime ( void )";i:3;s:72:"Get the last modification time of the current item, as a Unix timestamp.";}
a:4:{i:0;s:27:"DirectoryIterator::getOwner";i:1;s:7:"(PHP 5)";i:2;s:47:"public int DirectoryIterator::getOwner ( void )";i:3;s:55:"Get the owner of the current item, in numerical format.";}
a:4:{i:0;s:26:"DirectoryIterator::getPath";i:1;s:7:"(PHP 5)";i:2;s:49:"public string DirectoryIterator::getPath ( void )";i:3;s:33:"Get the path to the current item.";}
a:4:{i:0;s:30:"DirectoryIterator::getPathname";i:1;s:7:"(PHP 5)";i:2;s:53:"public string DirectoryIterator::getPathname ( void )";i:3;s:47:"Get the path and file name of the current file.";}
a:4:{i:0;s:27:"DirectoryIterator::getPerms";i:1;s:7:"(PHP 5)";i:2;s:47:"public int DirectoryIterator::getPerms ( void )";i:3;s:40:"Get the permissions of the current item.";}
a:4:{i:0;s:26:"DirectoryIterator::getSize";i:1;s:7:"(PHP 5)";i:2;s:46:"public int DirectoryIterator::getSize ( void )";i:3;s:39:"Get the file size for the current item.";}
a:4:{i:0;s:26:"DirectoryIterator::getType";i:1;s:7:"(PHP 5)";i:2;s:49:"public string DirectoryIterator::getType ( void )";i:3;s:70:"Determines which file type the current item belongs to. One of, , or .";}
a:4:{i:0;s:24:"DirectoryIterator::isDir";i:1;s:7:"(PHP 5)";i:2;s:45:"public bool DirectoryIterator::isDir ( void )";i:3;s:46:"Determines if the current item is a directory.";}
a:4:{i:0;s:24:"DirectoryIterator::isDot";i:1;s:7:"(PHP 5)";i:2;s:45:"public bool DirectoryIterator::isDot ( void )";i:3;s:61:"Determines if the current item is a directory and either or .";}
a:4:{i:0;s:31:"DirectoryIterator::isExecutable";i:1;s:7:"(PHP 5)";i:2;s:52:"public bool DirectoryIterator::isExecutable ( void )";i:3;s:45:"Determines if the current item is executable.";}
a:4:{i:0;s:25:"DirectoryIterator::isFile";i:1;s:7:"(PHP 5)";i:2;s:46:"public bool DirectoryIterator::isFile ( void )";i:3;s:49:"Determines if the current item is a regular file.";}
a:4:{i:0;s:25:"DirectoryIterator::isLink";i:1;s:7:"(PHP 5)";i:2;s:46:"public bool DirectoryIterator::isLink ( void )";i:3;s:50:"Determines if the current item is a symbolic link.";}
a:4:{i:0;s:29:"DirectoryIterator::isReadable";i:1;s:7:"(PHP 5)";i:2;s:50:"public bool DirectoryIterator::isReadable ( void )";i:3;s:43:"Determines if the current item is readable.";}
a:4:{i:0;s:29:"DirectoryIterator::isWritable";i:1;s:7:"(PHP 5)";i:2;s:50:"public bool DirectoryIterator::isWritable ( void )";i:3;s:43:"Determines if the current item is writable.";}
a:4:{i:0;s:22:"DirectoryIterator::key";i:1;s:7:"(PHP 5)";i:2;s:45:"public string DirectoryIterator::key ( void )";i:3;s:33:"Get the key for the current item.";}
a:4:{i:0;s:23:"DirectoryIterator::next";i:1;s:7:"(PHP 5)";i:2;s:44:"public void DirectoryIterator::next ( void )";i:3;s:30:"Move forward to the next item.";}
a:4:{i:0;s:25:"DirectoryIterator::rewind";i:1;s:7:"(PHP 5)";i:2;s:46:"public void DirectoryIterator::rewind ( void )";i:3;s:29:"Rewind the back to the start.";}
a:4:{i:0;s:23:"DirectoryIterator::seek";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public void DirectoryIterator::seek ( int $position )";i:3;s:33:"Seek to a given position in the .";}
a:4:{i:0;s:29:"DirectoryIterator::__toString";i:1;s:7:"(PHP 5)";i:2;s:52:"public string DirectoryIterator::__toString ( void )";i:3;s:38:"Get the file name of the current item.";}
a:4:{i:0;s:24:"DirectoryIterator::valid";i:1;s:7:"(PHP 5)";i:2;s:45:"public bool DirectoryIterator::valid ( void )";i:3;s:47:"Check whether current position is a valid file.";}
a:4:{i:0;s:22:"EmptyIterator::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void EmptyIterator::current ( void )";i:3;s:69:"This function must not be called. It throws an exception upon access.";}
a:4:{i:0;s:18:"EmptyIterator::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:39:"public void EmptyIterator::key ( void )";i:3;s:69:"This function must not be called. It throws an exception upon access.";}
a:4:{i:0;s:19:"EmptyIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:40:"public void EmptyIterator::next ( void )";i:3;s:28:"No operation, nothing to do.";}
a:4:{i:0;s:21:"EmptyIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public void EmptyIterator::rewind ( void )";i:3;s:28:"No operation, nothing to do.";}
a:4:{i:0;s:20:"EmptyIterator::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public void EmptyIterator::valid ( void )";i:3;s:33:"The EmptyIterator valid() method.";}
a:4:{i:0;s:31:"FilesystemIterator::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:183:"public FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )";i:3;s:47:"Constructs a new filesystem iterator from the .";}
a:4:{i:0;s:27:"FilesystemIterator::current";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:49:"public mixed FilesystemIterator::current ( void )";i:3;s:44:"Get file information of the current element.";}
a:4:{i:0;s:28:"FilesystemIterator::getFlags";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:48:"public int FilesystemIterator::getFlags ( void )";i:3;s:39:"Gets the handling flags, as set in or .";}
a:4:{i:0;s:23:"FilesystemIterator::key";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"public string FilesystemIterator::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"FilesystemIterator::next";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:45:"public void FilesystemIterator::next ( void )";i:3;s:22:"Move to the next file.";}
a:4:{i:0;s:26:"FilesystemIterator::rewind";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public void FilesystemIterator::rewind ( void )";i:3;s:40:"Rewinds the directory back to the start.";}
a:4:{i:0;s:28:"FilesystemIterator::setFlags";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:58:"public void FilesystemIterator::setFlags ([ int $flags ] )";i:3;s:20:"Sets handling flags.";}
a:4:{i:0;s:22:"FilterIterator::accept";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:52:"public abstract bool FilterIterator::accept ( void )";i:3;s:86:"Returns whether the current element of the iterator is acceptable through this filter.";}
a:4:{i:0;s:27:"FilterIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public FilterIterator::__construct ( Iterator $iterator )";i:3;s:75:"Constructs a new, which consists of a passed in with filters applied to it.";}
a:4:{i:0;s:23:"FilterIterator::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public mixed FilterIterator::current ( void )";i:3;s:30:"Get the current element value.";}
a:4:{i:0;s:32:"FilterIterator::getInnerIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public Iterator FilterIterator::getInnerIterator ( void )";i:3;s:23:"Get the inner iterator.";}
a:4:{i:0;s:19:"FilterIterator::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public mixed FilterIterator::key ( void )";i:3;s:20:"Get the current key.";}
a:4:{i:0;s:20:"FilterIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public void FilterIterator::next ( void )";i:3;s:26:"Move the iterator forward.";}
a:4:{i:0;s:22:"FilterIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void FilterIterator::rewind ( void )";i:3;s:20:"Rewind the iterator.";}
a:4:{i:0;s:21:"FilterIterator::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public bool FilterIterator::valid ( void )";i:3;s:44:"Checks whether the current element is valid.";}
a:4:{i:0;s:25:"GlobIterator::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:145:"public GlobIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )";i:3;s:59:"Constructs a new directory iterator from a glob expression.";}
a:4:{i:0;s:19:"GlobIterator::count";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:39:"public int GlobIterator::count ( void )";i:3;s:70:"Gets the number of directories and files found by the glob expression.";}
a:4:{i:0;s:29:"InfiniteIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:59:"public InfiniteIterator::__construct ( Iterator $iterator )";i:3;s:23:"Constructs an from an .";}
a:4:{i:0;s:22:"InfiniteIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void InfiniteIterator::next ( void )";i:3;s:111:"Moves the inner forward to its next element if there is one, otherwise rewinds the inner back to the beginning.";}
a:4:{i:0;s:29:"IteratorIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:62:"public IteratorIterator::__construct ( Traversable $iterator )";i:3;s:54:"Creates an iterator from anything that is traversable.";}
a:4:{i:0;s:25:"IteratorIterator::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:47:"public mixed IteratorIterator::current ( void )";i:3;s:37:"Get the value of the current element.";}
a:4:{i:0;s:34:"IteratorIterator::getInnerIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:62:"public Traversable IteratorIterator::getInnerIterator ( void )";i:3;s:23:"Get the inner iterator.";}
a:4:{i:0;s:21:"IteratorIterator::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public scalar IteratorIterator::key ( void )";i:3;s:35:"Get the key of the current element.";}
a:4:{i:0;s:22:"IteratorIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void IteratorIterator::next ( void )";i:3;s:28:"Forward to the next element.";}
a:4:{i:0;s:24:"IteratorIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public void IteratorIterator::rewind ( void )";i:3;s:29:"Rewinds to the first element.";}
a:4:{i:0;s:23:"IteratorIterator::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public bool IteratorIterator::valid ( void )";i:3;s:32:"Checks if the iterator is valid.";}
a:4:{i:0;s:26:"LimitIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:97:"public LimitIterator::__construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )";i:3;s:60:"Constructs a new from an with a given starting and maximum .";}
a:4:{i:0;s:22:"LimitIterator::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public mixed LimitIterator::current ( void )";i:3;s:39:"Gets the current element of the inner .";}
a:4:{i:0;s:31:"LimitIterator::getInnerIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:56:"public Iterator LimitIterator::getInnerIterator ( void )";i:3;s:16:"Gets the inner .";}
a:4:{i:0;s:26:"LimitIterator::getPosition";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:46:"public int LimitIterator::getPosition ( void )";i:3;s:51:"Gets the current zero-based position of the inner .";}
a:4:{i:0;s:18:"LimitIterator::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:40:"public mixed LimitIterator::key ( void )";i:3;s:48:"Gets the key for the current item in the inner .";}
a:4:{i:0;s:19:"LimitIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:40:"public void LimitIterator::next ( void )";i:3;s:27:"Moves the iterator forward.";}
a:4:{i:0;s:21:"LimitIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public void LimitIterator::rewind ( void )";i:3;s:58:"Rewinds the iterator to the starting offset specified in .";}
a:4:{i:0;s:19:"LimitIterator::seek";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"public int LimitIterator::seek ( int $position )";i:3;s:47:"Moves the iterator to the offset specified by .";}
a:4:{i:0;s:20:"LimitIterator::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public bool LimitIterator::valid ( void )";i:3;s:44:"Checks whether the current element is valid.";}
a:4:{i:0;s:32:"MultipleIterator::attachIterator";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:86:"public void MultipleIterator::attachIterator ( Iterator $iterator [, string $infos ] )";i:3;s:30:"Attaches iterator information.";}
a:4:{i:0;s:29:"MultipleIterator::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:124:"public MultipleIterator::__construct() ([ int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC ] )";i:3;s:33:"Construct a new MultipleIterator.";}
a:4:{i:0;s:34:"MultipleIterator::containsIterator";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:69:"public void MultipleIterator::containsIterator ( Iterator $iterator )";i:3;s:41:"Checks if an iterator is attached or not.";}
a:4:{i:0;s:32:"MultipleIterator::countIterators";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public void MultipleIterator::countIterators ( void )";i:3;s:47:"Gets the number of attached iterator instances.";}
a:4:{i:0;s:25:"MultipleIterator::current";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public array MultipleIterator::current ( void )";i:3;s:55:"Get the registered iterator instances current() result.";}
a:4:{i:0;s:32:"MultipleIterator::detachIterator";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:67:"public void MultipleIterator::detachIterator ( Iterator $iterator )";i:3;s:21:"Detaches an iterator.";}
a:4:{i:0;s:26:"MultipleIterator::getFlags";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:47:"public void MultipleIterator::getFlags ( void )";i:3;s:33:"Gets information about the flags.";}
a:4:{i:0;s:21:"MultipleIterator::key";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public array MultipleIterator::key ( void )";i:3;s:51:"Get the registered iterator instances key() result.";}
a:4:{i:0;s:22:"MultipleIterator::next";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public void MultipleIterator::next ( void )";i:3;s:46:"Moves all attached iterator instances forward.";}
a:4:{i:0;s:24:"MultipleIterator::rewind";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:45:"public void MultipleIterator::rewind ( void )";i:3;s:40:"Rewinds all attached iterator instances.";}
a:4:{i:0;s:26:"MultipleIterator::setFlags";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public void MultipleIterator::setFlags ( int $flags )";i:3;s:11:"Sets flags.";}
a:4:{i:0;s:23:"MultipleIterator::valid";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:44:"public void MultipleIterator::valid ( void )";i:3;s:37:"Checks the validity of sub iterators.";}
a:4:{i:0;s:29:"NoRewindIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:59:"public NoRewindIterator::__construct ( Iterator $iterator )";i:3;s:30:"Constructs a NoRewindIterator.";}
a:4:{i:0;s:25:"NoRewindIterator::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:47:"public mixed NoRewindIterator::current ( void )";i:3;s:23:"Gets the current value.";}
a:4:{i:0;s:34:"NoRewindIterator::getInnerIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:59:"public iterator NoRewindIterator::getInnerIterator ( void )";i:3;s:48:"Gets the inner iterator, that was passed in to .";}
a:4:{i:0;s:21:"NoRewindIterator::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public mixed NoRewindIterator::key ( void )";i:3;s:21:"Gets the current key.";}
a:4:{i:0;s:22:"NoRewindIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void NoRewindIterator::next ( void )";i:3;s:29:"Forwards to the next element.";}
a:4:{i:0;s:24:"NoRewindIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public void NoRewindIterator::rewind ( void )";i:3;s:52:"Prevents the rewind operation on the inner iterator.";}
a:4:{i:0;s:23:"NoRewindIterator::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public bool NoRewindIterator::valid ( void )";i:3;s:37:"Checks whether the iterator is valid.";}
a:4:{i:0;s:22:"ParentIterator::accept";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public bool ParentIterator::accept ( void )";i:3;s:47:"Determines if the current element has children.";}
a:4:{i:0;s:27:"ParentIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:66:"public ParentIterator::__construct ( RecursiveIterator $iterator )";i:3;s:28:"Constructs a on an iterator.";}
a:4:{i:0;s:27:"ParentIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:58:"public ParentIterator ParentIterator::getChildren ( void )";i:3;s:64:"Get the inner iterator's children contained in a ParentIterator.";}
a:4:{i:0;s:27:"ParentIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"public bool ParentIterator::hasChildren ( void )";i:3;s:64:"Check whether the inner iterator's current element has children.";}
a:4:{i:0;s:20:"ParentIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public void ParentIterator::next ( void )";i:3;s:27:"Moves the iterator forward.";}
a:4:{i:0;s:22:"ParentIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public void ParentIterator::rewind ( void )";i:3;s:21:"Rewinds the iterator.";}
a:4:{i:0;s:35:"RecursiveArrayIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:74:"public RecursiveArrayIterator RecursiveArrayIterator::getChildren ( void )";i:3;s:51:"Returns an iterator for the current iterator entry.";}
a:4:{i:0;s:35:"RecursiveArrayIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:56:"public bool RecursiveArrayIterator::hasChildren ( void )";i:3;s:85:"Returns whether current entry is an or an for which an iterator can be obtained via .";}
a:4:{i:0;s:37:"RecursiveCachingIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:108:"public RecursiveCachingIterator::__construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ] )";i:3;s:49:"Constructs a new, which consists of a passed in .";}
a:4:{i:0;s:37:"RecursiveCachingIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:78:"public RecursiveCachingIterator RecursiveCachingIterator::getChildren ( void )";i:3;s:0:"";}
a:4:{i:0;s:37:"RecursiveCachingIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:58:"public bool RecursiveCachingIterator::hasChildren ( void )";i:3;s:0:"";}
a:4:{i:0;s:45:"
RecursiveCallbackFilterIterator::__construct";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:103:"public RecursiveCallbackFilterIterator::__construct() ( RecursiveIterator $iterator, string $callback )";i:3;s:95:"Creates a filtered iterator from a using the to determine which items are accepted or rejected.";}
a:4:{i:0;s:45:"
RecursiveCallbackFilterIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:92:"public RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator::getChildren ( void )";i:3;s:52:"Fetches the filtered children of the inner iterator.";}
a:4:{i:0;s:45:"
RecursiveCallbackFilterIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:65:"public void RecursiveCallbackFilterIterator::hasChildren ( void )";i:3;s:55:"Returns if the current element has children, otherwise.";}
a:4:{i:0;s:39:"RecursiveDirectoryIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:159:"public RecursiveDirectoryIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )";i:3;s:31:"Constructs a for the provided .";}
a:4:{i:0;s:39:"RecursiveDirectoryIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:61:"public mixed RecursiveDirectoryIterator::getChildren ( void )";i:3;s:0:"";}
a:4:{i:0;s:38:"RecursiveDirectoryIterator::getSubPath";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:61:"public string RecursiveDirectoryIterator::getSubPath ( void )";i:3;s:18:"Gets the sub path.";}
a:4:{i:0;s:42:"RecursiveDirectoryIterator::getSubPathname";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:65:"public string RecursiveDirectoryIterator::getSubPathname ( void )";i:3;s:31:"Gets the sub path and filename.";}
a:4:{i:0;s:39:"RecursiveDirectoryIterator::hasChildren";i:1;s:7:"(PHP 5)";i:2;s:84:"public bool RecursiveDirectoryIterator::hasChildren ([ bool $allow_links = false ] )";i:3;s:0:"";}
a:4:{i:0;s:31:"RecursiveDirectoryIterator::key";i:1;s:7:"(PHP 5)";i:2;s:54:"public string RecursiveDirectoryIterator::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"RecursiveDirectoryIterator::next";i:1;s:7:"(PHP 5)";i:2;s:53:"public void RecursiveDirectoryIterator::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"RecursiveDirectoryIterator::rewind";i:1;s:7:"(PHP 5)";i:2;s:55:"public void RecursiveDirectoryIterator::rewind ( void )";i:3;s:0:"";}
a:4:{i:0;s:36:"RecursiveFilterIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:75:"public RecursiveFilterIterator::__construct ( RecursiveIterator $iterator )";i:3;s:17:"Create a from a .";}
a:4:{i:0;s:36:"RecursiveFilterIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public void RecursiveFilterIterator::getChildren ( void )";i:3;s:53:"Return the inner iterator's children contained in a .";}
a:4:{i:0;s:36:"RecursiveFilterIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public void RecursiveFilterIterator::hasChildren ( void )";i:3;s:64:"Check whether the inner iterator's current element has children.";}
a:4:{i:0;s:40:"RecursiveIteratorIterator::beginChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:61:"public void RecursiveIteratorIterator::beginChildren ( void )";i:3;s:45:"Is called after calling, and its associated .";}
a:4:{i:0;s:41:"RecursiveIteratorIterator::beginIteration";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:62:"public void RecursiveIteratorIterator::beginIteration ( void )";i:3;s:51:"Called when iteration begins (after the first call.";}
a:4:{i:0;s:42:"RecursiveIteratorIterator::callGetChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:76:"public RecursiveIterator RecursiveIteratorIterator::callGetChildren ( void )";i:3;s:36:"Get children of the current element.";}
a:4:{i:0;s:42:"RecursiveIteratorIterator::callHasChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:63:"public bool RecursiveIteratorIterator::callHasChildren ( void )";i:3;s:56:"Called for each element to test whether it has children.";}
a:4:{i:0;s:38:"RecursiveIteratorIterator::__construct";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:146:"public RecursiveIteratorIterator::__construct ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]] )";i:3;s:18:"Creates a from a .";}
a:4:{i:0;s:34:"RecursiveIteratorIterator::current";i:1;s:7:"(PHP 5)";i:2;s:56:"public mixed RecursiveIteratorIterator::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:38:"RecursiveIteratorIterator::endChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:59:"public void RecursiveIteratorIterator::endChildren ( void )";i:3;s:36:"Called when end recursing one level.";}
a:4:{i:0;s:39:"RecursiveIteratorIterator::endIteration";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:60:"public void RecursiveIteratorIterator::endIteration ( void )";i:3;s:52:"Called when the iteration ends (when first returns .";}
a:4:{i:0;s:35:"RecursiveIteratorIterator::getDepth";i:1;s:7:"(PHP 5)";i:2;s:55:"public int RecursiveIteratorIterator::getDepth ( void )";i:3;s:0:"";}
a:4:{i:0;s:44:"
RecursiveIteratorIterator::getInnerIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:68:"public iterator RecursiveIteratorIterator::getInnerIterator ( void )";i:3;s:37:"Gets the current active sub iterator.";}
a:4:{i:0;s:38:"RecursiveIteratorIterator::getMaxDepth";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:60:"public mixed RecursiveIteratorIterator::getMaxDepth ( void )";i:3;s:33:"Gets the maximum allowable depth.";}
a:4:{i:0;s:41:"RecursiveIteratorIterator::getSubIterator";i:1;s:7:"(PHP 5)";i:2;s:84:"public RecursiveIterator RecursiveIteratorIterator::getSubIterator ([ int $level ] )";i:3;s:0:"";}
a:4:{i:0;s:30:"RecursiveIteratorIterator::key";i:1;s:7:"(PHP 5)";i:2;s:52:"public mixed RecursiveIteratorIterator::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"RecursiveIteratorIterator::next";i:1;s:7:"(PHP 5)";i:2;s:52:"public void RecursiveIteratorIterator::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:38:"RecursiveIteratorIterator::nextElement";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:59:"public void RecursiveIteratorIterator::nextElement ( void )";i:3;s:42:"Called when the next element is available.";}
a:4:{i:0;s:33:"RecursiveIteratorIterator::rewind";i:1;s:7:"(PHP 5)";i:2;s:54:"public void RecursiveIteratorIterator::rewind ( void )";i:3;s:0:"";}
a:4:{i:0;s:38:"RecursiveIteratorIterator::setMaxDepth";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:80:"public void RecursiveIteratorIterator::setMaxDepth ([ string $max_depth = -1 ] )";i:3;s:30:"Set the maximum allowed depth.";}
a:4:{i:0;s:32:"RecursiveIteratorIterator::valid";i:1;s:7:"(PHP 5)";i:2;s:53:"public bool RecursiveIteratorIterator::valid ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"RecursiveRegexIterator::__construct";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:163:"public RecursiveRegexIterator::__construct() ( RecursiveIterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )";i:3;s:42:"Creates a new regular expression iterator.";}
a:4:{i:0;s:35:"RecursiveRegexIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:74:"public RecursiveRegexIterator RecursiveRegexIterator::getChildren ( void )";i:3;s:51:"Returns an iterator for the current iterator entry.";}
a:4:{i:0;s:35:"RecursiveRegexIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:56:"public bool RecursiveRegexIterator::hasChildren ( void )";i:3;s:102:"Returns whether an iterator can be obtained for the current entry. This iterator can be obtained via .";}
a:4:{i:0;s:36:"RecursiveTreeIterator::beginChildren";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:57:"public void RecursiveTreeIterator::beginChildren ( void )";i:3;s:37:"Called when recursing one level down.";}
a:4:{i:0;s:37:"RecursiveTreeIterator::beginIteration";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:71:"public RecursiveIterator RecursiveTreeIterator::beginIteration ( void )";i:3;s:52:"Called when iteration begins (after the first call).";}
a:4:{i:0;s:38:"RecursiveTreeIterator::callGetChildren";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:72:"public RecursiveIterator RecursiveTreeIterator::callGetChildren ( void )";i:3;s:37:"Gets children of the current element.";}
a:4:{i:0;s:38:"RecursiveTreeIterator::callHasChildren";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:59:"public bool RecursiveTreeIterator::callHasChildren ( void )";i:3;s:56:"Called for each element to test whether it has children.";}
a:4:{i:0;s:34:"RecursiveTreeIterator::__construct";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:245:"public RecursiveTreeIterator::__construct ( RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]] )";i:3;s:54:"Constructs a new from the supplied recursive iterator.";}
a:4:{i:0;s:30:"RecursiveTreeIterator::current";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:53:"public string RecursiveTreeIterator::current ( void )";i:3;s:48:"Gets the current element prefixed and postfixed.";}
a:4:{i:0;s:34:"RecursiveTreeIterator::endChildren";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:55:"public void RecursiveTreeIterator::endChildren ( void )";i:3;s:36:"Called when end recursing one level.";}
a:4:{i:0;s:35:"RecursiveTreeIterator::endIteration";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:56:"public void RecursiveTreeIterator::endIteration ( void )";i:3;s:52:"Called when the iteration ends (when first returns )";}
a:4:{i:0;s:31:"RecursiveTreeIterator::getEntry";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:54:"public string RecursiveTreeIterator::getEntry ( void )";i:3;s:56:"Gets the part of the tree built for the current element.";}
a:4:{i:0;s:33:"RecursiveTreeIterator::getPostfix";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:54:"public void RecursiveTreeIterator::getPostfix ( void )";i:3;s:51:"Gets the string to place after the current element.";}
a:4:{i:0;s:32:"RecursiveTreeIterator::getPrefix";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:55:"public string RecursiveTreeIterator::getPrefix ( void )";i:3;s:52:"Gets the string to place in front of current element";}
a:4:{i:0;s:26:"RecursiveTreeIterator::key";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:49:"public string RecursiveTreeIterator::key ( void )";i:3;s:44:"Gets the current key prefixed and postfixed.";}
a:4:{i:0;s:27:"RecursiveTreeIterator::next";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:48:"public void RecursiveTreeIterator::next ( void )";i:3;s:34:"Moves forward to the next element.";}
a:4:{i:0;s:34:"RecursiveTreeIterator::nextElement";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:55:"public void RecursiveTreeIterator::nextElement ( void )";i:3;s:42:"Called when the next element is available.";}
a:4:{i:0;s:29:"RecursiveTreeIterator::rewind";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:50:"public void RecursiveTreeIterator::rewind ( void )";i:3;s:74:"Rewinds the iterator to the first element of the top level inner iterator.";}
a:4:{i:0;s:36:"RecursiveTreeIterator::setPrefixPart";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:77:"public void RecursiveTreeIterator::setPrefixPart ( int $part, string $value )";i:3;s:51:"Sets a part of the prefix used in the graphic tree.";}
a:4:{i:0;s:28:"RecursiveTreeIterator::valid";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:49:"public bool RecursiveTreeIterator::valid ( void )";i:3;s:44:"Check whether the current position is valid.";}
a:4:{i:0;s:21:"RegexIterator::accept";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:42:"public bool RegexIterator::accept ( void )";i:3;s:63:"Matches (or if the flag is set) against the regular expression.";}
a:4:{i:0;s:26:"RegexIterator::__construct";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:145:"public RegexIterator::__construct() ( Iterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )";i:3;s:57:"Create a new which filters an using a regular expression.";}
a:4:{i:0;s:23:"RegexIterator::getFlags";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:43:"public int RegexIterator::getFlags ( void )";i:3;s:53:"Returns the flags, see for a list of available flags.";}
a:4:{i:0;s:22:"RegexIterator::getMode";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:42:"public int RegexIterator::getMode ( void )";i:3;s:64:"Returns the operation mode, see for the list of operation modes.";}
a:4:{i:0;s:27:"RegexIterator::getPregFlags";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:47:"public int RegexIterator::getPregFlags ( void )";i:3;s:64:"Returns the regular expression flags, see for the list of flags.";}
a:4:{i:0;s:23:"RegexIterator::getRegex";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:46:"public string RegexIterator::getRegex ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"RegexIterator::setFlags";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:50:"public void RegexIterator::setFlags ( int $flags )";i:3;s:15:"Sets the flags.";}
a:4:{i:0;s:22:"RegexIterator::setMode";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:48:"public void RegexIterator::setMode ( int $mode )";i:3;s:24:"Sets the operation mode.";}
a:4:{i:0;s:27:"RegexIterator::setPregFlags";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:59:"public void RegexIterator::setPregFlags ( int $preg_flags )";i:3;s:34:"Sets the regular expression flags.";}
a:4:{i:0;s:16:"Countable::count";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"abstract public int Countable::count ( void )";i:3;s:75:"This method is executed when using the function on an object implementing .";}
a:4:{i:0;s:31:"OuterIterator::getInnerIterator";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:56:"public Iterator OuterIterator::getInnerIterator ( void )";i:3;s:58:"Returns the inner iterator for the current iterator entry.";}
a:4:{i:0;s:30:"RecursiveIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:64:"public RecursiveIterator RecursiveIterator::getChildren ( void )";i:3;s:51:"Returns an iterator for the current iterator entry.";}
a:4:{i:0;s:30:"RecursiveIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:51:"public bool RecursiveIterator::hasChildren ( void )";i:3;s:62:"Returns if an iterator can be created for the current entry. .";}
a:4:{i:0;s:22:"SeekableIterator::seek";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:61:"abstract public void SeekableIterator::seek ( int $position )";i:3;s:42:"Seeks to a given position in the iterator.";}
a:4:{i:0;s:16:"class_implements";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:66:"array class_implements ( mixed $class [, bool $autoload = true ] )";i:3;s:105:"This function returns an array with the names of the interfaces that the given and its parents implement.";}
a:4:{i:0;s:13:"class_parents";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:63:"array class_parents ( mixed $class [, bool $autoload = true ] )";i:3;s:81:"This function returns an array with the name of the parent classes of the given .";}
a:4:{i:0;s:10:"class_uses";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:60:"array class_uses ( mixed $class [, bool $autoload = true ] )";i:3;s:145:"This function returns an array with the names of the traits that the given uses. This does however not include any traits used by a parent class.";}
a:4:{i:0;s:14:"iterator_apply";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:81:"int iterator_apply ( Traversable $iterator, callable $function [, array $args ] )";i:3;s:50:"Calls a function for every element in an iterator.";}
a:4:{i:0;s:14:"iterator_count";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"int iterator_count ( Traversable $iterator )";i:3;s:34:"Count the elements in an iterator.";}
a:4:{i:0;s:17:"iterator_to_array";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:76:"array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ] )";i:3;s:47:"Copy the elements of an iterator into an array.";}
a:4:{i:0;s:17:"spl_autoload_call";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:45:"void spl_autoload_call ( string $class_name )";i:3;s:112:"This function can be used to manually search for a class or interface using the registered __autoload functions.";}
a:4:{i:0;s:23:"spl_autoload_extensions";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:61:"string spl_autoload_extensions ([ string $file_extensions ] )";i:3;s:105:"This function can modify and check the file extensions that the built in fallback function will be using.";}
a:4:{i:0;s:22:"spl_autoload_functions";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:37:"array spl_autoload_functions ( void )";i:3;s:42:"Get all registered __autoload() functions.";}
a:4:{i:0;s:21:"spl_autoload_register";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:110:"bool spl_autoload_register ([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]] )";i:3;s:115:"Register a function with the spl provided __autoload stack. If the stack is not yet activated it will be activated.";}
a:4:{i:0;s:23:"spl_autoload_unregister";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:57:"bool spl_autoload_unregister ( mixed $autoload_function )";i:3;s:165:"Unregister a function from the spl provided __autoload stack. If the stack is activated and empty after unregistering the given function then it will be deactivated.";}
a:4:{i:0;s:12:"spl_autoload";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:97:"void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )";i:3;s:192:"This function is intended to be used as a default implementation for . If nothing else is specified and is called without any parameters then this function will be used for any later call to .";}
a:4:{i:0;s:11:"spl_classes";i:1;s:7:"(PHP 5)";i:2;s:26:"array spl_classes ( void )";i:3;s:70:"This function returns an array with the current available SPL classes.";}
a:4:{i:0;s:15:"spl_object_hash";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:38:"string spl_object_hash ( object $obj )";i:3;s:141:"This function returns a unique identifier for the object. This id can be used as a hash key for storing objects or for identifying an object.";}
a:4:{i:0;s:24:"SplFileInfo::__construct";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:53:"public SplFileInfo::__construct ( string $file_name )";i:3;s:110:"Creates a new SplFileInfo object for the file_name specified. The file does not need to exist, or be readable.";}
a:4:{i:0;s:21:"SplFileInfo::getATime";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:41:"public int SplFileInfo::getATime ( void )";i:3;s:39:"Gets the last access time for the file.";}
a:4:{i:0;s:24:"SplFileInfo::getBasename";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:60:"public string SplFileInfo::getBasename ([ string $suffix ] )";i:3;s:84:"This method returns the base name of the file, directory, or link without path info.";}
a:4:{i:0;s:21:"SplFileInfo::getCTime";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:41:"public int SplFileInfo::getCTime ( void )";i:3;s:82:"Returns the inode change time for the file. The time returned is a Unix timestamp.";}
a:4:{i:0;s:25:"SplFileInfo::getExtension";i:1;s:16:"(PHP 5 >= 5.3.6)";i:2;s:48:"public string SplFileInfo::getExtension ( void )";i:3;s:29:"Retrieves the file extension.";}
a:4:{i:0;s:24:"SplFileInfo::getFileInfo";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:69:"public SplFileInfo SplFileInfo::getFileInfo ([ string $class_name ] )";i:3;s:51:"This method gets an object for the referenced file.";}
a:4:{i:0;s:24:"SplFileInfo::getFilename";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:47:"public string SplFileInfo::getFilename ( void )";i:3;s:47:"Gets the filename without any path information.";}
a:4:{i:0;s:21:"SplFileInfo::getGroup";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:41:"public int SplFileInfo::getGroup ( void )";i:3;s:66:"Gets the file group. The group ID is returned in numerical format.";}
a:4:{i:0;s:21:"SplFileInfo::getInode";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:41:"public int SplFileInfo::getInode ( void )";i:3;s:48:"Gets the inode number for the filesystem object.";}
a:4:{i:0;s:26:"SplFileInfo::getLinkTarget";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:49:"public string SplFileInfo::getLinkTarget ( void )";i:3;s:37:"Gets the target of a filesystem link.";}
a:4:{i:0;s:21:"SplFileInfo::getMTime";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:41:"public int SplFileInfo::getMTime ( void )";i:3;s:99:"Returns the time when the contents of the file were changed. The time returned is a Unix timestamp.";}
a:4:{i:0;s:21:"SplFileInfo::getOwner";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:41:"public int SplFileInfo::getOwner ( void )";i:3;s:66:"Gets the file owner. The owner ID is returned in numerical format.";}
a:4:{i:0;s:20:"SplFileInfo::getPath";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:43:"public string SplFileInfo::getPath ( void )";i:3;s:75:"Returns the path to the file, omitting the filename and any trailing slash.";}
a:4:{i:0;s:24:"SplFileInfo::getPathInfo";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:69:"public SplFileInfo SplFileInfo::getPathInfo ([ string $class_name ] )";i:3;s:50:"Gets an object for the parent of the current file.";}
a:4:{i:0;s:24:"SplFileInfo::getPathname";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:47:"public string SplFileInfo::getPathname ( void )";i:3;s:29:"Returns the path to the file.";}
a:4:{i:0;s:21:"SplFileInfo::getPerms";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:41:"public int SplFileInfo::getPerms ( void )";i:3;s:39:"Gets the file permissions for the file.";}
a:4:{i:0;s:24:"SplFileInfo::getRealPath";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:47:"public string SplFileInfo::getRealPath ( void )";i:3;s:107:"This method expands all symbolic links, resolves relative references and returns the real path to the file.";}
a:4:{i:0;s:20:"SplFileInfo::getSize";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:40:"public int SplFileInfo::getSize ( void )";i:3;s:54:"Returns the filesize in bytes for the file referenced.";}
a:4:{i:0;s:20:"SplFileInfo::getType";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:43:"public string SplFileInfo::getType ( void )";i:3;s:40:"Returns the type of the file referenced.";}
a:4:{i:0;s:18:"SplFileInfo::isDir";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:39:"public bool SplFileInfo::isDir ( void )";i:3;s:64:"This method can be used to determine if the file is a directory.";}
a:4:{i:0;s:25:"SplFileInfo::isExecutable";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:46:"public bool SplFileInfo::isExecutable ( void )";i:3;s:33:"Checks if the file is executable.";}
a:4:{i:0;s:19:"SplFileInfo::isFile";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:40:"public bool SplFileInfo::isFile ( void )";i:3;s:86:"Checks if the file referenced by this SplFileInfo object exists and is a regular file.";}
a:4:{i:0;s:19:"SplFileInfo::isLink";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:40:"public bool SplFileInfo::isLink ( void )";i:3;s:84:"Use this method to check if the file referenced by the SplFileInfo object is a link.";}
a:4:{i:0;s:23:"SplFileInfo::isReadable";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:44:"public bool SplFileInfo::isReadable ( void )";i:3;s:30:"Check if the file is readable.";}
a:4:{i:0;s:23:"SplFileInfo::isWritable";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:44:"public bool SplFileInfo::isWritable ( void )";i:3;s:40:"Checks if the current entry is writable.";}
a:4:{i:0;s:21:"SplFileInfo::openFile";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:135:"public SplFileObject SplFileInfo::openFile ([ string $open_mode = r [, bool $use_include_path = false [, resource $context = NULL ]]] )";i:3;s:183:"Creates an of the file. This is useful because contains additional methods for manipulating the file whereas is only useful for gaining information, like whether the file is writable.";}
a:4:{i:0;s:25:"SplFileInfo::setFileClass";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:63:"public void SplFileInfo::setFileClass ([ string $class_name ] )";i:3;s:164:"Set the class name which SplFileInfo will use to open files with when openFile() is called. The class name passed to this method must be derived from SplFileObject.";}
a:4:{i:0;s:25:"SplFileInfo::setInfoClass";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:63:"public void SplFileInfo::setInfoClass ([ string $class_name ] )";i:3;s:172:"Use this method to set a custom class which will be used when getFileInfo and getPathInfo are called. The class name passed to this method must be derived from SplFileInfo.";}
a:4:{i:0;s:23:"SplFileInfo::__toString";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:44:"public void SplFileInfo::__toString ( void )";i:3;s:61:"This method will return the file name of the referenced file.";}
a:4:{i:0;s:26:"SplFileObject::__construct";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:140:"public SplFileObject::__construct ( string $filename [, string $open_mode = "r" [, bool $use_include_path = false [, resource $context ]]] )";i:3;s:28:"Construct a new file object.";}
a:4:{i:0;s:22:"SplFileObject::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:51:"public string|array SplFileObject::current ( void )";i:3;s:39:"Retrieves the current line of the file.";}
a:4:{i:0;s:18:"SplFileObject::eof";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:39:"public bool SplFileObject::eof ( void )";i:3;s:50:"Determine whether the end of file has been reached";}
a:4:{i:0;s:21:"SplFileObject::fflush";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public bool SplFileObject::fflush ( void )";i:3;s:50:"Forces a write of all buffered output to the file.";}
a:4:{i:0;s:20:"SplFileObject::fgetc";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public string SplFileObject::fgetc ( void )";i:3;s:31:"Gets a character from the file.";}
a:4:{i:0;s:22:"SplFileObject::fgetcsv";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:121:"public array SplFileObject::fgetcsv ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] )";i:3;s:93:"Gets a line from the file which is in format and returns an array containing the fields read.";}
a:4:{i:0;s:20:"SplFileObject::fgets";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public string SplFileObject::fgets ( void )";i:3;s:26:"Gets a line from the file.";}
a:4:{i:0;s:21:"SplFileObject::fgetss";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:65:"public string SplFileObject::fgetss ([ string $allowable_tags ] )";i:3;s:89:"Identical to, except that attempts to strip any HTML and PHP tags from the text it reads.";}
a:4:{i:0;s:20:"SplFileObject::flock";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:73:"public bool SplFileObject::flock ( int $operation [, int &$wouldblock ] )";i:3;s:55:"Locks or unlocks the file in the same portable way as .";}
a:4:{i:0;s:24:"SplFileObject::fpassthru";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public int SplFileObject::fpassthru ( void )";i:3;s:109:"Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.";}
a:4:{i:0;s:22:"SplFileObject::fputcsv";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:108:"public int SplFileObject::fputcsv ( array $fields [, string $delimiter = ',' [, string $enclosure = '"' ]] )";i:3;s:43:"Writes the array to the file as a CSV line.";}
a:4:{i:0;s:21:"SplFileObject::fscanf";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:70:"public mixed SplFileObject::fscanf ( string $format [, mixed &$... ] )";i:3;s:118:"Reads a line from the file and interprets it according to the specified, which is described in the documentation for .";}
a:4:{i:0;s:20:"SplFileObject::fseek";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:75:"public int SplFileObject::fseek ( int $offset [, int $whence = SEEK_SET ] )";i:3;s:130:"Seek to a position in the file measured in bytes from the beginning of the file, obtained by adding to the position specified by .";}
a:4:{i:0;s:20:"SplFileObject::fstat";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public array SplFileObject::fstat ( void )";i:3;s:60:"Gathers the statistics of the file. Behaves identically to .";}
a:4:{i:0;s:20:"SplFileObject::ftell";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:40:"public int SplFileObject::ftell ( void )";i:3;s:96:"Returns the position of the file pointer which represents the current offset in the file stream.";}
a:4:{i:0;s:24:"SplFileObject::ftruncate";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:50:"public bool SplFileObject::ftruncate ( int $size )";i:3;s:28:"Truncates the file to bytes.";}
a:4:{i:0;s:21:"SplFileObject::fwrite";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:65:"public int SplFileObject::fwrite ( string $str [, int $length ] )";i:3;s:34:"Writes the contents of to the file";}
a:4:{i:0;s:26:"SplFileObject::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:47:"public void SplFileObject::getChildren ( void )";i:3;s:50:"An does not have children so this method returns .";}
a:4:{i:0;s:28:"SplFileObject::getCsvControl";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:50:"public array SplFileObject::getCsvControl ( void )";i:3;s:71:"Gets the delimiter and enclosure character used for parsing CSV fields.";}
a:4:{i:0;s:29:"SplFileObject::getCurrentLine";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:0:"";i:3;s:28:"This method is an alias of .";}
a:4:{i:0;s:23:"SplFileObject::getFlags";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:43:"public int SplFileObject::getFlags ( void )";i:3;s:59:"Gets the flags set for an instance of SplFileObject as an .";}
a:4:{i:0;s:28:"SplFileObject::getMaxLineLen";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"public int SplFileObject::getMaxLineLen ( void )";i:3;s:40:"Gets the maximum line length as set by .";}
a:4:{i:0;s:26:"SplFileObject::hasChildren";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:47:"public bool SplFileObject::hasChildren ( void )";i:3;s:56:"An does not have children so this method always return .";}
a:4:{i:0;s:18:"SplFileObject::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:38:"public int SplFileObject::key ( void )";i:3;s:29:"Gets the current line number.";}
a:4:{i:0;s:19:"SplFileObject::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:40:"public void SplFileObject::next ( void )";i:3;s:41:"Moves ahead to the next line in the file.";}
a:4:{i:0;s:21:"SplFileObject::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"public void SplFileObject::rewind ( void )";i:3;s:40:"Rewinds the file back to the first line.";}
a:4:{i:0;s:19:"SplFileObject::seek";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:49:"public void SplFileObject::seek ( int $line_pos )";i:3;s:35:"Seek to specified line in the file.";}
a:4:{i:0;s:28:"SplFileObject::setCsvControl";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:126:"public void SplFileObject::setCsvControl ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] )";i:3;s:66:"Sets the delimiter and enclosure character for parsing CSV fields.";}
a:4:{i:0;s:23:"SplFileObject::setFlags";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:50:"public void SplFileObject::setFlags ( int $flags )";i:3;s:34:"Sets the flags to be used by the .";}
a:4:{i:0;s:28:"SplFileObject::setMaxLineLen";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public void SplFileObject::setMaxLineLen ( int $max_len )";i:3;s:45:"Sets the maximum length of a line to be read.";}
a:4:{i:0;s:25:"SplFileObject::__toString";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:46:"public void SplFileObject::__toString ( void )";i:3;s:28:"This method is an alias of .";}
a:4:{i:0;s:20:"SplFileObject::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public bool SplFileObject::valid ( void )";i:3;s:35:"Check whether EOF has been reached.";}
a:4:{i:0;s:30:"SplTempFileObject::__construct";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:60:"public SplTempFileObject::__construct ([ int $max_memory ] )";i:3;s:38:"Construct a new temporary file object.";}
a:4:{i:0;s:19:"ArrayObject::append";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:48:"public void ArrayObject::append ( mixed $value )";i:3;s:40:"Appends a new value as the last element.";}
a:4:{i:0;s:18:"ArrayObject::asort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:39:"public void ArrayObject::asort ( void )";i:3;s:205:"Sorts the entries such that the keys maintain their correlation with the entries they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.";}
a:4:{i:0;s:24:"ArrayObject::__construct";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:117:"public ArrayObject::__construct() ([ mixed $input [, int $flags = 0 [, string $iterator_class = "ArrayIterator" ]]] )";i:3;s:29:"This constructs a new array .";}
a:4:{i:0;s:18:"ArrayObject::count";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:38:"public int ArrayObject::count ( void )";i:3;s:44:"Get the number of public properties in the .";}
a:4:{i:0;s:26:"ArrayObject::exchangeArray";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:56:"public array ArrayObject::exchangeArray ( mixed $input )";i:3;s:38:"Exchange the current with another or .";}
a:4:{i:0;s:25:"ArrayObject::getArrayCopy";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:47:"public array ArrayObject::getArrayCopy ( void )";i:3;s:24:"Exports the to an array.";}
a:4:{i:0;s:21:"ArrayObject::getFlags";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:41:"public int ArrayObject::getFlags ( void )";i:3;s:82:"Gets the behavior flags of the . See the method for a list of the available flags.";}
a:4:{i:0;s:24:"ArrayObject::getIterator";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:54:"public ArrayIterator ArrayObject::getIterator ( void )";i:3;s:39:"Create a new iterator from an instance.";}
a:4:{i:0;s:29:"ArrayObject::getIteratorClass";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:52:"public string ArrayObject::getIteratorClass ( void )";i:3;s:59:"Gets the class name of the array iterator that is used by .";}
a:4:{i:0;s:18:"ArrayObject::ksort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:39:"public void ArrayObject::ksort ( void )";i:3;s:110:"Sorts the entries by key, maintaining key to entry correlations. This is useful mainly for associative arrays.";}
a:4:{i:0;s:24:"ArrayObject::natcasesort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:45:"public void ArrayObject::natcasesort ( void )";i:3;s:46:"This method is a case insensitive version of .";}
a:4:{i:0;s:20:"ArrayObject::natsort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:41:"public void ArrayObject::natsort ( void )";i:3;s:343:"This method implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in ) method can be seen in the example below.";}
a:4:{i:0;s:25:"ArrayObject::offsetExists";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:54:"public bool ArrayObject::offsetExists ( mixed $index )";i:3;s:0:"";}
a:4:{i:0;s:22:"ArrayObject::offsetGet";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:52:"public mixed ArrayObject::offsetGet ( mixed $index )";i:3;s:0:"";}
a:4:{i:0;s:22:"ArrayObject::offsetSet";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:66:"public void ArrayObject::offsetSet ( mixed $index, mixed $newval )";i:3;s:48:"Sets the value at the specified index to newval.";}
a:4:{i:0;s:24:"ArrayObject::offsetUnset";i:1;s:16:"(PHP 5 >= 5.0.0)";i:2;s:53:"public void ArrayObject::offsetUnset ( mixed $index )";i:3;s:40:"Unsets the value at the specified index.";}
a:4:{i:0;s:22:"ArrayObject::serialize";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public void ArrayObject::serialize ( void )";i:3;s:15:"Serializes an .";}
a:4:{i:0;s:21:"ArrayObject::setFlags";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"public void ArrayObject::setFlags ( int $flags )";i:3;s:58:"Set the flags that change the behavior of the ArrayObject.";}
a:4:{i:0;s:29:"ArrayObject::setIteratorClass";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:68:"public void ArrayObject::setIteratorClass ( string $iterator_class )";i:3;s:58:"Sets the classname of the array iterator that is used by .";}
a:4:{i:0;s:19:"ArrayObject::uasort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:58:"public void ArrayObject::uasort ( callable $cmp_function )";i:3;s:161:"This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function.";}
a:4:{i:0;s:19:"ArrayObject::uksort";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:58:"public void ArrayObject::uksort ( callable $cmp_function )";i:3;s:136:"This function sorts the keys of the entries using a user-supplied comparison function. The key to entry correlations will be maintained.";}
a:4:{i:0;s:24:"ArrayObject::unserialize";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:59:"public void ArrayObject::unserialize ( string $serialized )";i:3;s:27:"Unserializes a serialized .";}
a:4:{i:0;s:19:"SplObserver::update";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:64:"abstract public void SplObserver::update ( SplSubject $subject )";i:3;s:72:"This method is called when any to which the observer is attached calls .";}
a:4:{i:0;s:18:"SplSubject::attach";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:65:"abstract public void SplSubject::attach ( SplObserver $observer )";i:3;s:50:"Attaches an so that it can be notified of updates.";}
a:4:{i:0;s:18:"SplSubject::detach";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:65:"abstract public void SplSubject::detach ( SplObserver $observer )";i:3;s:72:"Detaches an observer from the subject to no longer notify it of updates.";}
a:4:{i:0;s:18:"SplSubject::notify";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"abstract public void SplSubject::notify ( void )";i:3;s:32:"Notifies all attached observers.";}
a:4:{i:0;s:20:"SplType::__construct";i:1;s:25:"(PECL spl_types >= 0.1.0)";i:2;s:65:"SplType::__construct ([ mixed $initial_value [, bool $strict ]] )";i:3;s:0:"";}
a:4:{i:0;s:21:"SplEnum::getConstList";i:1;s:25:"(PECL spl_types >= 0.1.0)";i:2;s:71:"public array SplEnum::getConstList ([ bool $include_default = false ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"php_user_filter::filter";i:1;s:7:"(PHP 5)";i:2;s:97:"public int php_user_filter::filter ( resource $in, resource $out, int &$consumed, bool $closing )";i:3;s:102:"This method is called whenever data is read from or written to the attached stream (such as with or ).";}
a:4:{i:0;s:24:"php_user_filter::onClose";i:1;s:7:"(PHP 5)";i:2;s:45:"public void php_user_filter::onClose ( void )";i:3;s:238:"This method is called upon filter shutdown (typically, this is also during stream shutdown), and is executed the method is called. If any resources were allocated or initialized during this would be the time to destroy or dispose of them.";}
a:4:{i:0;s:25:"php_user_filter::onCreate";i:1;s:7:"(PHP 5)";i:2;s:46:"public bool php_user_filter::onCreate ( void )";i:3;s:178:"This method is called during instantiation of the filter class object. If your filter allocates or initializes any other resources (such as a buffer), this is the place to do it.";}
a:4:{i:0;s:26:"streamWrapper::__construct";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:35:"streamWrapper::__construct ( void )";i:3;s:54:"Called when opening the stream wrapper, right before .";}
a:4:{i:0;s:25:"streamWrapper::__destruct";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:34:"streamWrapper::__destruct ( void )";i:3;s:54:"Called when closing the stream wrapper, right before .";}
a:4:{i:0;s:27:"streamWrapper::dir_closedir";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:48:"public bool streamWrapper::dir_closedir ( void )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:26:"streamWrapper::dir_opendir";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:69:"public bool streamWrapper::dir_opendir ( string $path, int $options )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:26:"streamWrapper::dir_readdir";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:49:"public string streamWrapper::dir_readdir ( void )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:28:"streamWrapper::dir_rewinddir";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:49:"public bool streamWrapper::dir_rewinddir ( void )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:20:"streamWrapper::mkdir";i:1;s:7:"(PHP 5)";i:2;s:74:"public bool streamWrapper::mkdir ( string $path, int $mode, int $options )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:21:"streamWrapper::rename";i:1;s:7:"(PHP 5)";i:2;s:72:"public bool streamWrapper::rename ( string $path_from, string $path_to )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:20:"streamWrapper::rmdir";i:1;s:7:"(PHP 5)";i:2;s:63:"public bool streamWrapper::rmdir ( string $path, int $options )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:26:"streamWrapper::stream_cast";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:59:"public resource streamWrapper::stream_cast ( int $cast_as )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:27:"streamWrapper::stream_close";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:48:"public void streamWrapper::stream_close ( void )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:25:"streamWrapper::stream_eof";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:46:"public bool streamWrapper::stream_eof ( void )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:27:"streamWrapper::stream_flush";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:48:"public bool streamWrapper::stream_flush ( void )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:26:"streamWrapper::stream_lock";i:1;s:7:"(PHP 5)";i:2;s:57:"public bool streamWrapper::stream_lock ( int $operation )";i:3;s:92:"This method is called in response to, when (when contains ), and when closing the stream ().";}
a:4:{i:0;s:30:"streamWrapper::stream_metadata";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:86:"public bool streamWrapper::stream_metadata ( string $path, int $option, mixed $value )";i:3;s:128:"This method is called to set metadata on the stream. It is called when one of the following functions is called on a stream URL:";}
a:4:{i:0;s:26:"streamWrapper::stream_open";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:105:"public bool streamWrapper::stream_open ( string $path, string $mode, int $options, string &$opened_path )";i:3;s:82:"This method is called immediately after the wrapper is initialized (f.e. by and ).";}
a:4:{i:0;s:26:"streamWrapper::stream_read";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:55:"public string streamWrapper::stream_read ( int $count )";i:3;s:42:"This method is called in response to and .";}
a:4:{i:0;s:26:"streamWrapper::stream_seek";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:78:"public bool streamWrapper::stream_seek ( int $offset, int $whence = SEEK_SET )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:32:"streamWrapper::stream_set_option";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:82:"public bool streamWrapper::stream_set_option ( int $option, int $arg1, int $arg2 )";i:3;s:51:"This method is called to set options on the stream.";}
a:4:{i:0;s:26:"streamWrapper::stream_stat";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:48:"public array streamWrapper::stream_stat ( void )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:26:"streamWrapper::stream_tell";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:46:"public int streamWrapper::stream_tell ( void )";i:3;s:71:"This method is called in response to to determine the current position.";}
a:4:{i:0;s:30:"streamWrapper::stream_truncate";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:60:"public bool streamWrapper::stream_truncate ( int $new_size )";i:3;s:43:"Will respond to truncation, e.g., through .";}
a:4:{i:0;s:27:"streamWrapper::stream_write";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:55:"public int streamWrapper::stream_write ( string $data )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:21:"streamWrapper::unlink";i:1;s:7:"(PHP 5)";i:2;s:50:"public bool streamWrapper::unlink ( string $path )";i:3;s:38:"This method is called in response to .";}
a:4:{i:0;s:23:"streamWrapper::url_stat";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:65:"public array streamWrapper::url_stat ( string $path, int $flags )";i:3;s:68:"This method is called in response to all related functions, such as:";}
a:4:{i:0;s:19:"set_socket_blocking";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:100:"Warning This alias has been DEPRECATED as of PHP 5.3.0. Relying on this alias is highly discouraged.";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:20:"stream_bucket_append";i:1;s:7:"(PHP 5)";i:2;s:65:"void stream_bucket_append ( resource $brigade, resource $bucket )";i:3;s:0:"";}
a:4:{i:0;s:28:"stream_bucket_make_writeable";i:1;s:7:"(PHP 5)";i:2;s:57:"object stream_bucket_make_writeable ( resource $brigade )";i:3;s:0:"";}
a:4:{i:0;s:17:"stream_bucket_new";i:1;s:7:"(PHP 5)";i:2;s:61:"object stream_bucket_new ( resource $stream, string $buffer )";i:3;s:0:"";}
a:4:{i:0;s:21:"stream_bucket_prepend";i:1;s:7:"(PHP 5)";i:2;s:66:"void stream_bucket_prepend ( resource $brigade, resource $bucket )";i:3;s:98:"This function can be called to prepend a bucket to a bucket brigade. It is typically called from .";}
a:4:{i:0;s:21:"stream_context_create";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:70:"resource stream_context_create ([ array $options [, array $params ]] )";i:3;s:73:"Creates and returns a stream context with any options supplied in preset.";}
a:4:{i:0;s:26:"stream_context_get_default";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"resource stream_context_get_default ([ array $options ] )";i:3;s:232:"Returns the default stream context which is used whenever file operations (, , etc...) are called without a context parameter. Options for the default context can optionally be specified with this function using the same syntax as .";}
a:4:{i:0;s:26:"stream_context_get_options";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:64:"array stream_context_get_options ( resource $stream_or_context )";i:3;s:63:"Returns an array of options on the specified stream or context.";}
a:4:{i:0;s:25:"stream_context_get_params";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:63:"array stream_context_get_params ( resource $stream_or_context )";i:3;s:71:"Retrieves parameter and options information from the stream or context.";}
a:4:{i:0;s:26:"stream_context_set_default";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:54:"resource stream_context_set_default ( array $options )";i:3;s:153:"Set the default stream context which will be used whenever file operations (, , etc...) are called without a context parameter. Uses the same syntax as .";}
a:4:{i:0;s:25:"stream_context_set_option";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:109:"bool stream_context_set_option ( resource $stream_or_context, string $wrapper, string $option, mixed $value )";i:3;s:54:"Sets an option on the specified context. is set to for";}
a:4:{i:0;s:25:"stream_context_set_params";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:77:"bool stream_context_set_params ( resource $stream_or_context, array $params )";i:3;s:41:"Sets parameters on the specified context.";}
a:4:{i:0;s:21:"stream_copy_to_stream";i:1;s:7:"(PHP 5)";i:2;s:107:"int stream_copy_to_stream ( resource $source, resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )";i:3;s:168:"Makes a copy of up to bytes of data from the current position (or from the position, if specified) in to . If is not specified, all remaining content in will be copied.";}
a:4:{i:0;s:15:"stream_encoding";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:63:"bool stream_encoding ( resource $stream [, string $encoding ] )";i:3;s:0:"";}
a:4:{i:0;s:20:"stream_filter_append";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:109:"resource stream_filter_append ( resource $stream, string $filtername [, int $read_write [, mixed $params ]] )";i:3;s:41:"Adds to the list of filters attached to .";}
a:4:{i:0;s:21:"stream_filter_prepend";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:110:"resource stream_filter_prepend ( resource $stream, string $filtername [, int $read_write [, mixed $params ]] )";i:3;s:41:"Adds to the list of filters attached to .";}
a:4:{i:0;s:22:"stream_filter_register";i:1;s:7:"(PHP 5)";i:2;s:69:"bool stream_filter_register ( string $filtername, string $classname )";i:3;s:126:"allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as, etc.).";}
a:4:{i:0;s:20:"stream_filter_remove";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:53:"bool stream_filter_remove ( resource $stream_filter )";i:3;s:176:"Removes a stream filter previously added to a stream with or . Any data remaining in the filter's internal buffer will be flushed through to the next filter before removing it.";}
a:4:{i:0;s:19:"stream_get_contents";i:1;s:7:"(PHP 5)";i:2;s:93:"string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )";i:3;s:161:"Identical to, except that operates on an already open stream resource and returns the remaining contents in a string, up to bytes and starting at the specified .";}
a:4:{i:0;s:18:"stream_get_filters";i:1;s:7:"(PHP 5)";i:2;s:33:"array stream_get_filters ( void )";i:3;s:62:"Retrieve the list of registered filters on the running system.";}
a:4:{i:0;s:15:"stream_get_line";i:1;s:7:"(PHP 5)";i:2;s:76:"string stream_get_line ( resource $handle, int $length [, string $ending ] )";i:3;s:34:"Gets a line from the given handle.";}
a:4:{i:0;s:20:"stream_get_meta_data";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:47:"array stream_get_meta_data ( resource $stream )";i:3;s:39:"Returns information about an existing .";}
a:4:{i:0;s:21:"stream_get_transports";i:1;s:7:"(PHP 5)";i:2;s:36:"array stream_get_transports ( void )";i:3;s:102:"Returns an indexed array containing the name of all socket transports available on the running system.";}
a:4:{i:0;s:19:"stream_get_wrappers";i:1;s:7:"(PHP 5)";i:2;s:34:"array stream_get_wrappers ( void )";i:3;s:68:"Retrieve list of registered streams available on the running system.";}
a:4:{i:0;s:15:"stream_is_local";i:1;s:16:"(PHP 5 >= 5.2.4)";i:2;s:45:"bool stream_is_local ( mixed $stream_or_url )";i:3;s:52:"Checks if a stream, or a URL, is a local one or not.";}
a:4:{i:0;s:28:"stream_notification_callback";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:151:"void stream_notification_callback ( int $notification_code, int $severity, string $message, int $message_code, int $bytes_transferred, int $bytes_max )";i:3;s:48:"A function, used by the, called during an event.";}
a:4:{i:0;s:23:"stream_register_wrapper";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:27:"stream_resolve_include_path";i:1;s:16:"(PHP 5 >= 5.3.2)";i:2;s:55:"string stream_resolve_include_path ( string $filename )";i:3;s:67:"Resolve against the include path according to the same rules as / .";}
a:4:{i:0;s:13:"stream_select";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:100:"int stream_select ( array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0 ] )";i:3;s:162:"The function accepts arrays of streams and waits for them to change status. Its operation is equivalent to that of the function except in that it acts on streams.";}
a:4:{i:0;s:19:"stream_set_blocking";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:56:"bool stream_set_blocking ( resource $stream, int $mode )";i:3;s:41:"Sets blocking or non-blocking mode on a .";}
a:4:{i:0;s:21:"stream_set_chunk_size";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:59:"int stream_set_chunk_size ( resource $fp, int $chunk_size )";i:3;s:26:"Set the stream chunk size.";}
a:4:{i:0;s:22:"stream_set_read_buffer";i:1;s:16:"(PHP 5 >= 5.3.3)";i:2;s:60:"int stream_set_read_buffer ( resource $stream, int $buffer )";i:3;s:70:"Sets the read buffer. It's the equivalent of, but for read operations.";}
a:4:{i:0;s:18:"stream_set_timeout";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:85:"bool stream_set_timeout ( resource $stream, int $seconds [, int $microseconds = 0 ] )";i:3;s:56:"Sets the timeout value on, expressed in the sum of and .";}
a:4:{i:0;s:23:"stream_set_write_buffer";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:61:"int stream_set_write_buffer ( resource $stream, int $buffer )";i:3;s:62:"Sets the buffering for write operations on the given to bytes.";}
a:4:{i:0;s:20:"stream_socket_accept";i:1;s:7:"(PHP 5)";i:2;s:135:"resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] )";i:3;s:55:"Accept a connection on a socket previously created by .";}
a:4:{i:0;s:20:"stream_socket_client";i:1;s:7:"(PHP 5)";i:2;s:208:"resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )";i:3;s:434:"Initiates a stream or datagram connection to the destination specified by . The type of socket created is determined by the transport specified using standard URL formatting: . For Internet Domain sockets (AF_INET) such as TCP and UDP, the portion of the parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the portion should point to the socket file on the filesystem.";}
a:4:{i:0;s:27:"stream_socket_enable_crypto";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:119:"mixed stream_socket_enable_crypto ( resource $stream, bool $enable [, int $crypto_type [, resource $session_stream ]] )";i:3;s:43:"Enable or disable encryption on the stream.";}
a:4:{i:0;s:22:"stream_socket_get_name";i:1;s:7:"(PHP 5)";i:2;s:67:"string stream_socket_get_name ( resource $handle, bool $want_peer )";i:3;s:62:"Returns the local or remote name of a given socket connection.";}
a:4:{i:0;s:18:"stream_socket_pair";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:66:"array stream_socket_pair ( int $domain, int $type, int $protocol )";i:3;s:131:"creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).";}
a:4:{i:0;s:22:"stream_socket_recvfrom";i:1;s:7:"(PHP 5)";i:2;s:104:"string stream_socket_recvfrom ( resource $socket, int $length [, int $flags = 0 [, string &$address ]] )";i:3;s:46:"accepts data from a remote socket up to bytes.";}
a:4:{i:0;s:20:"stream_socket_sendto";i:1;s:7:"(PHP 5)";i:2;s:99:"int stream_socket_sendto ( resource $socket, string $data [, int $flags = 0 [, string $address ]] )";i:3;s:33:"Sends the specified through the .";}
a:4:{i:0;s:20:"stream_socket_server";i:1;s:7:"(PHP 5)";i:2;s:172:"resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )";i:3;s:54:"Creates a stream or datagram socket on the specified .";}
a:4:{i:0;s:22:"stream_socket_shutdown";i:1;s:16:"(PHP 5 >= 5.2.1)";i:2;s:58:"bool stream_socket_shutdown ( resource $stream, int $how )";i:3;s:54:"Shutdowns (partially or not) a full-duplex connection.";}
a:4:{i:0;s:20:"stream_supports_lock";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"bool stream_supports_lock ( resource $stream )";i:3;s:51:"Tells whether the stream supports locking through .";}
a:4:{i:0;s:23:"stream_wrapper_register";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:88:"bool stream_wrapper_register ( string $protocol, string $classname [, int $flags = 0 ] )";i:3;s:127:"Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as, etc.).";}
a:4:{i:0;s:22:"stream_wrapper_restore";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"bool stream_wrapper_restore ( string $protocol )";i:3;s:58:"Restores a built-in wrapper previously unregistered with .";}
a:4:{i:0;s:25:"stream_wrapper_unregister";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:51:"bool stream_wrapper_unregister ( string $protocol )";i:3;s:176:"Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using or reenable it later on with .";}
a:4:{i:0;s:10:"tidy::body";i:1;s:28:"(PHP 5, PECL tidy 0.5.2-1.0)";i:2;s:28:"tidyNode tidy::body ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"tidy::cleanRepair";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:31:"bool tidy::cleanRepair ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"tidy::__construct";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:107:"tidy::__construct ([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]] )";i:3;s:24:"Constructs a new object.";}
a:4:{i:0;s:14:"tidy::diagnose";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:28:"bool tidy::diagnose ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"tidy::$errorBuffer";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:26:"string $tidy->errorBuffer;";i:3;s:33:"Object oriented style (property):";}
a:4:{i:0;s:15:"tidy::getConfig";i:1;s:27:"(PHP 5, PECL tidy >= 0.7.0)";i:2;s:30:"array tidy::getConfig ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:16:"tidy::getHtmlVer";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:29:"int tidy::getHtmlVer ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:12:"tidy::getOpt";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:37:"mixed tidy::getOpt ( string $option )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"tidy::getoptdoc";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"string tidy::getOptDoc ( string $optname )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:16:"tidy::getRelease";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:32:"string tidy::getRelease ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"tidy::getStatus";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:28:"int tidy::getStatus ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:10:"tidy::head";i:1;s:30:"(PHP 5, PECL tidy 0.5.2-1.0.0)";i:2;s:28:"tidyNode tidy::head ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:10:"tidy::html";i:1;s:30:"(PHP 5, PECL tidy 0.5.2-1.0.0)";i:2;s:28:"tidyNode tidy::html ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:13:"tidy::isXhtml";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:27:"bool tidy::isXhtml ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:11:"tidy::isXml";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:25:"bool tidy::isXml ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"tidy::parseFile";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:116:"bool tidy::parseFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"tidy::parseString";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:80:"bool tidy::parseString ( string $input [, mixed $config [, string $encoding ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:16:"tidy::repairFile";i:1;s:27:"(PHP 5, PECL tidy >= 0.7.0)";i:2;s:119:"string tidy::repairFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = false ]]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"tidy::repairString";i:1;s:27:"(PHP 5, PECL tidy >= 0.7.0)";i:2;s:82:"string tidy::repairString ( string $data [, mixed $config [, string $encoding ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:10:"tidy::root";i:1;s:30:"(PHP 5, PECL tidy 0.5.2-1.0.0)";i:2;s:28:"tidyNode tidy::root ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"tidyNode::getParent";i:1;s:16:"(PHP 5 >= 5.2.2)";i:2;s:37:"tidyNode tidyNode::getParent ( void )";i:3;s:44:"Returns the parent node of the current node.";}
a:4:{i:0;s:21:"tidyNode::hasChildren";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:35:"bool tidyNode::hasChildren ( void )";i:3;s:31:"Tells if the node has children.";}
a:4:{i:0;s:21:"tidyNode::hasSiblings";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:35:"bool tidyNode::hasSiblings ( void )";i:3;s:31:"Tells if the node has siblings.";}
a:4:{i:0;s:15:"tidyNode::isAsp";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:29:"bool tidyNode::isAsp ( void )";i:3;s:38:"Tells whether the current node is ASP.";}
a:4:{i:0;s:19:"tidyNode::isComment";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:33:"bool tidyNode::isComment ( void )";i:3;s:31:"Tells if the node is a comment.";}
a:4:{i:0;s:16:"tidyNode::isHtml";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:30:"bool tidyNode::isHtml ( void )";i:3;s:43:"Tells if the node is part of HTML document.";}
a:4:{i:0;s:16:"tidyNode::isJste";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:30:"bool tidyNode::isJste ( void )";i:3;s:26:"Tells if the node is JSTE.";}
a:4:{i:0;s:15:"tidyNode::isPhp";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:29:"bool tidyNode::isPhp ( void )";i:3;s:25:"Tells if the node is PHP.";}
a:4:{i:0;s:16:"tidyNode::isText";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:30:"bool tidyNode::isText ( void )";i:3;s:57:"Tells if the node represents a text (without any markup).";}
a:4:{i:0;s:14:"ob_tidyhandler";i:1;s:7:"(PHP 5)";i:2;s:54:"string ob_tidyhandler ( string $input [, int $mode ] )";i:3;s:43:"Callback function for to repair the buffer.";}
a:4:{i:0;s:17:"tidy_access_count";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:38:"int tidy_access_count ( tidy $object )";i:3;s:78:"returns the number of accessibility warnings found for the specified document.";}
a:4:{i:0;s:17:"tidy_config_count";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:38:"int tidy_config_count ( tidy $object )";i:3;s:85:"Returns the number of errors encountered in the configuration of the specified tidy .";}
a:4:{i:0;s:16:"tidy_error_count";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:37:"int tidy_error_count ( tidy $object )";i:3;s:73:"Returns the number of Tidy errors encountered for the specified document.";}
a:4:{i:0;s:15:"tidy_get_output";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:39:"string tidy_get_output ( tidy $object )";i:3;s:37:"Gets a string with the repaired html.";}
a:4:{i:0;s:16:"tidy_load_config";i:1;s:20:"(PECL tidy >= 0.5.2)";i:2;s:60:"void tidy_load_config ( string $filename, string $encoding )";i:3;s:53:"Loads a Tidy configuration file, with the specified .";}
a:4:{i:0;s:17:"tidy_reset_config";i:1;s:20:"(PECL tidy >= 0.7.0)";i:2;s:31:"bool tidy_reset_config ( void )";i:3;s:68:"This function restores the Tidy configuration to the default values.";}
a:4:{i:0;s:16:"tidy_save_config";i:1;s:20:"(PECL tidy >= 0.5.2)";i:2;s:42:"bool tidy_save_config ( string $filename )";i:3;s:82:"Saves current settings to the specified file. Only non-default values are written.";}
a:4:{i:0;s:17:"tidy_set_encoding";i:1;s:20:"(PECL tidy >= 0.5.2)";i:2;s:43:"bool tidy_set_encoding ( string $encoding )";i:3;s:45:"Sets the encoding for input/output documents.";}
a:4:{i:0;s:11:"tidy_setopt";i:1;s:20:"(PECL tidy >= 0.5.2)";i:2;s:49:"bool tidy_setopt ( string $option, mixed $value )";i:3;s:34:"updates the specified with a new .";}
a:4:{i:0;s:18:"tidy_warning_count";i:1;s:27:"(PHP 5, PECL tidy >= 0.5.2)";i:2;s:39:"int tidy_warning_count ( tidy $object )";i:3;s:75:"Returns the number of Tidy warnings encountered for the specified document.";}
a:4:{i:0;s:13:"token_get_all";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:38:"array token_get_all ( string $source )";i:3;s:89:"parses the given string into PHP language tokens using the Zend engine's lexical scanner.";}
a:4:{i:0;s:10:"token_name";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:32:"string token_name ( int $token )";i:3;s:39:"gets the symbolic name for a PHP value.";}
a:4:{i:0;s:13:"base64_decode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"string base64_decode ( string $data [, bool $strict = false ] )";i:3;s:26:"Decodes a base64 encoded .";}
a:4:{i:0;s:13:"base64_encode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"string base64_encode ( string $data )";i:3;s:30:"Encodes the given with base64.";}
a:4:{i:0;s:11:"get_headers";i:1;s:7:"(PHP 5)";i:2;s:54:"array get_headers ( string $url [, int $format = 0 ] )";i:3;s:83:"returns an array with the headers sent by the server in response to a HTTP request.";}
a:4:{i:0;s:13:"get_meta_tags";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"array get_meta_tags ( string $filename [, bool $use_include_path = false ] )";i:3;s:77:"Opens and parses it line by line for tags in the file. The parsing stops at .";}
a:4:{i:0;s:16:"http_build_query";i:1;s:7:"(PHP 5)";i:2;s:137:"string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )";i:3;s:86:"Generates a URL-encoded query string from the associative (or indexed) array provided.";}
a:4:{i:0;s:9:"parse_url";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:56:"mixed parse_url ( string $url [, int $component = -1 ] )";i:3;s:129:"This function parses a URL and returns an associative array containing any of the various components of the URL that are present.";}
a:4:{i:0;s:12:"rawurldecode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string rawurldecode ( string $str )";i:3;s:132:"Returns a string in which the sequences with percent () signs followed by two hex digits have been replaced with literal characters.";}
a:4:{i:0;s:12:"rawurlencode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string rawurlencode ( string $str )";i:3;s:39:"Encodes the given string according to .";}
a:4:{i:0;s:9:"urldecode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string urldecode ( string $str )";i:3;s:93:"Decodes any encoding in the given string. Plus symbols ('') are decoded to a space character.";}
a:4:{i:0;s:9:"urlencode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string urlencode ( string $str )";i:3;s:143:"This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.";}
a:4:{i:0;s:17:"V8Js::__construct";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:166:"public V8Js::__construct ([ string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE ]]]] )";i:3;s:24:"Constructs a new object.";}
a:4:{i:0;s:19:"V8Js::executeString";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:134:"public mixed V8Js::executeString ( string $script [, string $identifier = "V8Js::executeString()" [, int $flags = V8Js::FLAG_NONE ]] )";i:3;s:64:"Compiles and executes the string passed with as Javascript code.";}
a:4:{i:0;s:19:"V8Js::getExtensions";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:48:"public static array V8Js::getExtensions ( void )";i:3;s:71:"This function returns array of Javascript extensions registered using .";}
a:4:{i:0;s:25:"V8Js::getPendingException";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:55:"public V8JsException V8Js::getPendingException ( void )";i:3;s:79:"Returns any pending uncaught Javascript exception as left from earlier call(s).";}
a:4:{i:0;s:23:"V8Js::registerExtension";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:150:"public static bool V8Js::registerExtension ( string $extension_name, string $script [, array $dependencies = array() [, bool $auto_enable = FALSE ]] )";i:3;s:64:"Registers passed Javascript as extension to be used in contexts.";}
a:4:{i:0;s:28:"V8JsException::getJsFileName";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:57:"final public string V8JsException::getJsFileName ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"V8JsException::getJsLineNumber";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:56:"final public int V8JsException::getJsLineNumber ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"V8JsException::getJsSourceLine";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:56:"final public int V8JsException::getJsSourceLine ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"V8JsException::getJsTrace";i:1;s:20:"(PECL v8js >= 0.1.0)";i:2;s:54:"final public string V8JsException::getJsTrace ( void )";i:3;s:0:"";}
a:4:{i:0;s:14:"yaml_emit_file";i:1;s:20:"(PECL yaml >= 0.5.0)";i:2;s:149:"bool yaml_emit_file ( string $filename, mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )";i:3;s:55:"Generate a YAML representation of the provided in the .";}
a:4:{i:0;s:9:"yaml_emit";i:1;s:20:"(PECL yaml >= 0.5.0)";i:2;s:128:"string yaml_emit ( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )";i:3;s:48:"Generate a YAML representation of the provided .";}
a:4:{i:0;s:15:"yaml_parse_file";i:1;s:20:"(PECL yaml >= 0.4.0)";i:2;s:97:"mixed yaml_parse_file ( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )";i:3;s:81:"Convert all or part of a YAML document stream read from a file to a PHP variable.";}
a:4:{i:0;s:14:"yaml_parse_url";i:1;s:20:"(PECL yaml >= 0.4.0)";i:2;s:91:"mixed yaml_parse_url ( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )";i:3;s:80:"Convert all or part of a YAML document stream read from a URL to a PHP variable.";}
a:4:{i:0;s:10:"yaml_parse";i:1;s:20:"(PECL yaml >= 0.4.0)";i:2;s:89:"mixed yaml_parse ( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )";i:3;s:64:"Convert all or part of a YAML document stream to a PHP variable.";}
a:4:{i:0;s:20:"Yaf_Application::app";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public static void Yaf_Application::app ( void )";i:3;s:57:"Retrieve the instance. Alternatively, we also could use .";}
a:4:{i:0;s:26:"Yaf_Application::bootstrap";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:79:"public void Yaf_Application::bootstrap ([ Yaf_Bootstrap_Abstract $bootstrap ] )";i:3;s:243:"Run a Bootstrap, all the methods defined in the Bootstrap and named with prefix "_init" will be called according to their declaration order, if the parameter bootstrap is not supplied, Yaf will look for a Bootstrap under application.directory.";}
a:4:{i:0;s:31:"Yaf_Application::clearLastError";i:1;s:13:"(Yaf >=2.1.2)";i:2;s:63:"public Yaf_Application Yaf_Application::clearLastError ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Application::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:46:"private void Yaf_Application::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Application::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:74:"public Yaf_Application::__construct ( mixed $config [, string $envrion ] )";i:3;s:12:"Instance a .";}
a:4:{i:0;s:27:"Yaf_Application::__destruct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public void Yaf_Application::__destruct ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Application::environ";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"public void Yaf_Application::environ ( void )";i:3;s:85:"Retrive environ which was defined in yaf.environ which has a default value "product".";}
a:4:{i:0;s:24:"Yaf_Application::execute";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:69:"public void Yaf_Application::execute ( callable $entry, string $... )";i:3;s:146:"This method is typically used to run Yaf_Application in a crontab work. Make the crontab work can also use the autoloader and Bootstrap mechanism.";}
a:4:{i:0;s:32:"Yaf_Application::getAppDirectory";i:1;s:13:"(Yaf >=2.1.4)";i:2;s:64:"public Yaf_Application Yaf_Application::getAppDirectory ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Application::getConfig";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:62:"public Yaf_Config_Abstract Yaf_Application::getConfig ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Application::getDispatcher";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:61:"public Yaf_Dispatcher Yaf_Application::getDispatcher ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Application::getLastErrorMsg";i:1;s:13:"(Yaf >=2.1.2)";i:2;s:55:"public string Yaf_Application::getLastErrorMsg ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Application::getLastErrorNo";i:1;s:13:"(Yaf >=2.1.2)";i:2;s:51:"public int Yaf_Application::getLastErrorNo ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Application::getModules";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public array Yaf_Application::getModules ( void )";i:3;s:103:"Get the modules list defined in config, if no one defined, there will always be a module named "Index".";}
a:4:{i:0;s:20:"Yaf_Application::run";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:41:"public void Yaf_Application::run ( void )";i:3;s:182:"Run a Yaf_Application, let the Yaf_Application accept a request and route this request, dispatch to controller/action and render response. Finally, return the response to the client.";}
a:4:{i:0;s:32:"Yaf_Application::setAppDirectory";i:1;s:13:"(Yaf >=2.1.4)";i:2;s:77:"public Yaf_Application Yaf_Application::setAppDirectory ( string $directory )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Application::__sleep";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:46:"private void Yaf_Application::__sleep ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Application::__wakeup";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:47:"private void Yaf_Application::__wakeup ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Dispatcher::autoRender";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:66:"public Yaf_Dispatcher Yaf_Dispatcher::autoRender ([ bool $flag ] )";i:3;s:120:"will render automatically after dispatches a incoming request, you can prevent the rendering by calling this method with";}
a:4:{i:0;s:30:"Yaf_Dispatcher::catchException";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:70:"public Yaf_Dispatcher Yaf_Dispatcher::catchException ([ bool $flag ] )";i:3;s:161:"While the application.dispatcher.throwException is On(you can also calling to to enable it), Yaf will throw Exception whe error occurrs instead of trigger error.";}
a:4:{i:0;s:23:"Yaf_Dispatcher::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"private void Yaf_Dispatcher::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Dispatcher::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:43:"public Yaf_Dispatcher::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Dispatcher::disableView";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public bool Yaf_Dispatcher::disableView ( void )";i:3;s:72:"disable view engine, used in some app that user will output by theirself";}
a:4:{i:0;s:24:"Yaf_Dispatcher::dispatch";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:87:"public Yaf_Response_Abstract Yaf_Dispatcher::dispatch ( Yaf_Request_Abstract $request )";i:3;s:66:"This method does the heavy work of the . It take a request object.";}
a:4:{i:0;s:26:"Yaf_Dispatcher::enableView";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:57:"public Yaf_Dispatcher Yaf_Dispatcher::enableView ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Dispatcher::flushInstantly";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:70:"public Yaf_Dispatcher Yaf_Dispatcher::flushInstantly ([ bool $flag ] )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Dispatcher::getApplication";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:62:"public Yaf_Application Yaf_Dispatcher::getApplication ( void )";i:3;s:31:"Retrive the instance. same as .";}
a:4:{i:0;s:27:"Yaf_Dispatcher::getInstance";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:65:"public static Yaf_Dispatcher Yaf_Dispatcher::getInstance ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Dispatcher::getRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:63:"public Yaf_Request_Abstract Yaf_Dispatcher::getRequest ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Dispatcher::getRouter";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public Yaf_Router Yaf_Dispatcher::getRouter ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Dispatcher::initView";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:96:"public Yaf_View_Interface Yaf_Dispatcher::initView ( string $templates_dir [, array $options ] )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Dispatcher::registerPlugin";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:84:"public Yaf_Dispatcher Yaf_Dispatcher::registerPlugin ( Yaf_Plugin_Abstract $plugin )";i:3;s:75:"Register a plugin(see ). Generally, we register plugins in Bootstrap(see ).";}
a:4:{i:0;s:30:"Yaf_Dispatcher::returnResponse";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:67:"public Yaf_Dispatcher Yaf_Dispatcher::returnResponse ( bool $flag )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Dispatcher::setDefaultAction";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:73:"public Yaf_Dispatcher Yaf_Dispatcher::setDefaultAction ( string $action )";i:3;s:0:"";}
a:4:{i:0;s:36:"Yaf_Dispatcher::setDefaultController";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:81:"public Yaf_Dispatcher Yaf_Dispatcher::setDefaultController ( string $controller )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Dispatcher::setDefaultModule";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:73:"public Yaf_Dispatcher Yaf_Dispatcher::setDefaultModule ( string $module )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Dispatcher::setErrorHandler";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:90:"public Yaf_Dispatcher Yaf_Dispatcher::setErrorHandler ( call $callback, int $error_types )";i:3;s:105:"Set error handler for Yaf. when is off, Yaf will trigger catchable error while unexpected errors occrred.";}
a:4:{i:0;s:26:"Yaf_Dispatcher::setRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:82:"public Yaf_Dispatcher Yaf_Dispatcher::setRequest ( Yaf_Request_Abstract $request )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Dispatcher::setView";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:74:"public Yaf_Dispatcher Yaf_Dispatcher::setView ( Yaf_View_Interface $view )";i:3;s:88:"This method proviods a solution for that if you want use a custom view engine instead of";}
a:4:{i:0;s:23:"Yaf_Dispatcher::__sleep";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"private void Yaf_Dispatcher::__sleep ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Dispatcher::throwException";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:70:"public Yaf_Dispatcher Yaf_Dispatcher::throwException ([ bool $flag ] )";i:3;s:152:"Siwtch on/off exception throwing while unexpected error occurring. When this is on, Yaf will throwing exceptions instead of triggering catchable errors.";}
a:4:{i:0;s:24:"Yaf_Dispatcher::__wakeup";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:46:"private void Yaf_Dispatcher::__wakeup ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Config_Abstract::get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:77:"abstract public mixed Yaf_Config_Abstract::get ( string $name, mixed $value )";i:3;s:0:"";}
a:4:{i:0;s:29:"Yaf_Config_Abstract::readonly";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:59:"abstract public bool Yaf_Config_Abstract::readonly ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Config_Abstract::set";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:69:"abstract public Yaf_Config_Abstract Yaf_Config_Abstract::set ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Config_Abstract::toArray";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:59:"abstract public array Yaf_Config_Abstract::toArray ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Config_Ini::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:79:"public Yaf_Config_Ini::__construct ( string $config_file [, string $section ] )";i:3;s:11:"constructor";}
a:4:{i:0;s:21:"Yaf_Config_Ini::count";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:42:"public void Yaf_Config_Ini::count ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Config_Ini::current";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:44:"public void Yaf_Config_Ini::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"Yaf_Config_Ini::__get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public void Yaf_Config_Ini::__get ([ string $name ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Config_Ini::__isset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public void Yaf_Config_Ini::__isset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:19:"Yaf_Config_Ini::key";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:40:"public void Yaf_Config_Ini::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Config_Ini::next";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:41:"public void Yaf_Config_Ini::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Config_Ini::offsetExists";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:57:"public void Yaf_Config_Ini::offsetExists ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Config_Ini::offsetGet";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:54:"public void Yaf_Config_Ini::offsetGet ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Config_Ini::offsetSet";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:69:"public void Yaf_Config_Ini::offsetSet ( string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Config_Ini::offsetUnset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:56:"public void Yaf_Config_Ini::offsetUnset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Config_Ini::readonly";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"public void Yaf_Config_Ini::readonly ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"Yaf_Config_Ini::rewind";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:43:"public void Yaf_Config_Ini::rewind ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"Yaf_Config_Ini::__set";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:64:"public void Yaf_Config_Ini::__set ( string $name, mixed $value )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Config_Ini::toArray";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"public array Yaf_Config_Ini::toArray ( void )";i:3;s:28:"Returns a PHP array from the";}
a:4:{i:0;s:21:"Yaf_Config_Ini::valid";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:42:"public void Yaf_Config_Ini::valid ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Config_Simple::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:82:"public Yaf_Config_Simple::__construct ( string $config_file [, string $section ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Config_Simple::count";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"public void Yaf_Config_Simple::count ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Config_Simple::current";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:47:"public void Yaf_Config_Simple::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Config_Simple::__get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:56:"public void Yaf_Config_Simple::__get ([ string $name ] )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Config_Simple::__isset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:55:"public void Yaf_Config_Simple::__isset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:22:"Yaf_Config_Simple::key";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:43:"public void Yaf_Config_Simple::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Config_Simple::next";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:44:"public void Yaf_Config_Simple::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Config_Simple::offsetExists";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:60:"public void Yaf_Config_Simple::offsetExists ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Config_Simple::offsetGet";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:57:"public void Yaf_Config_Simple::offsetGet ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Config_Simple::offsetSet";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:72:"public void Yaf_Config_Simple::offsetSet ( string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Config_Simple::offsetUnset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:59:"public void Yaf_Config_Simple::offsetUnset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Config_Simple::readonly";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public void Yaf_Config_Simple::readonly ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Config_Simple::rewind";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:46:"public void Yaf_Config_Simple::rewind ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Config_Simple::__set";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:68:"public void Yaf_Config_Simple::__set ( string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Config_Simple::toArray";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public array Yaf_Config_Simple::toArray ( void )";i:3;s:28:"Returns a PHP array from the";}
a:4:{i:0;s:24:"Yaf_Config_Simple::valid";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"public void Yaf_Config_Simple::valid ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Controller_Abstract::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:60:"final private void Yaf_Controller_Abstract::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:36:"Yaf_Controller_Abstract::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:59:"final private Yaf_Controller_Abstract::__construct ( void )";i:3;s:76:"is final, which means it can not be overridden. You may want to see instead.";}
a:4:{i:0;s:32:"Yaf_Controller_Abstract::display";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:86:"protected bool Yaf_Controller_Abstract::display ( string $tpl [, array $parameters ] )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Controller_Abstract::forward";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:85:"public void Yaf_Controller_Abstract::forward ( string $action [, array $paramters ] )";i:3;s:50:"forward current execution process to other action.";}
a:4:{i:0;s:37:"Yaf_Controller_Abstract::getInvokeArg";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:66:"public void Yaf_Controller_Abstract::getInvokeArg ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:38:"Yaf_Controller_Abstract::getInvokeArgs";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:59:"public void Yaf_Controller_Abstract::getInvokeArgs ( void )";i:3;s:0:"";}
a:4:{i:0;s:38:"Yaf_Controller_Abstract::getModuleName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:61:"public string Yaf_Controller_Abstract::getModuleName ( void )";i:3;s:32:"get the controller's module name";}
a:4:{i:0;s:35:"Yaf_Controller_Abstract::getRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:72:"public Yaf_Request_Abstract Yaf_Controller_Abstract::getRequest ( void )";i:3;s:31:"retrieve current request object";}
a:4:{i:0;s:36:"Yaf_Controller_Abstract::getResponse";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:74:"public Yaf_Response_Abstract Yaf_Controller_Abstract::getResponse ( void )";i:3;s:32:"retrieve current response object";}
a:4:{i:0;s:32:"Yaf_Controller_Abstract::getView";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:67:"public Yaf_View_Interface Yaf_Controller_Abstract::getView ( void )";i:3;s:20:"retrieve view engine";}
a:4:{i:0;s:36:"Yaf_Controller_Abstract::getViewpath";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:57:"public void Yaf_Controller_Abstract::getViewpath ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"Yaf_Controller_Abstract::init";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:50:"public void Yaf_Controller_Abstract::init ( void )";i:3;s:132:"is final, which means users can not override it. but users can define, which will be called after controller object is instantiated.";}
a:4:{i:0;s:33:"Yaf_Controller_Abstract::initView";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:67:"public void Yaf_Controller_Abstract::initView ([ array $options ] )";i:3;s:0:"";}
a:4:{i:0;s:33:"Yaf_Controller_Abstract::redirect";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:61:"public bool Yaf_Controller_Abstract::redirect ( string $url )";i:3;s:41:"redirect to a URL by sending a 302 header";}
a:4:{i:0;s:31:"Yaf_Controller_Abstract::render";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:87:"protected string Yaf_Controller_Abstract::render ( string $tpl [, array $parameters ] )";i:3;s:0:"";}
a:4:{i:0;s:36:"Yaf_Controller_Abstract::setViewpath";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:75:"public void Yaf_Controller_Abstract::setViewpath ( string $view_directory )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Action_Abstract::execute";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:82:"abstract publicmixed Yaf_Action_Abstract::execute ([ mixed $arg [, mixed $... ]] )";i:3;s:109:"user should always define this method for a action, this is the entry point of an action. may have agruments.";}
a:4:{i:0;s:34:"Yaf_Action_Abstract::getController";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:73:"publicYaf_Controller_Abstract Yaf_Action_Abstract::getController ( void )";i:3;s:35:"retrieve current controller object.";}
a:4:{i:0;s:26:"Yaf_View_Interface::assign";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:83:"abstract public bool Yaf_View_Interface::assign ( string $name [, string $value ] )";i:3;s:86:"Assigan values to View engine, then the value can access directly by name in template.";}
a:4:{i:0;s:27:"Yaf_View_Interface::display";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:85:"abstract public bool Yaf_View_Interface::display ( string $tpl [, array $tpl_vars ] )";i:3;s:51:"Render a template and output the result immediatly.";}
a:4:{i:0;s:33:"Yaf_View_Interface::getScriptPath";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:63:"abstract public void Yaf_View_Interface::getScriptPath ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_View_Interface::render";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:86:"abstract public string Yaf_View_Interface::render ( string $tpl [, array $tpl_vars ] )";i:3;s:40:"Render a template and return the result.";}
a:4:{i:0;s:33:"Yaf_View_Interface::setScriptPath";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:79:"abstract public void Yaf_View_Interface::setScriptPath ( string $template_dir )";i:3;s:59:"Set the templates base directory, this is usually called by";}
a:4:{i:0;s:23:"Yaf_View_Simple::assign";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:70:"public bool Yaf_View_Simple::assign ( string $name [, mixed $value ] )";i:3;s:30:"assign variable to view engine";}
a:4:{i:0;s:26:"Yaf_View_Simple::assignRef";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:70:"public bool Yaf_View_Simple::assignRef ( string $name, mixed &$value )";i:3;s:49:"unlike, this method assign a ref value to engine.";}
a:4:{i:0;s:22:"Yaf_View_Simple::clear";i:1;s:13:"(Yaf >=2.2.0)";i:2;s:54:"public bool Yaf_View_Simple::clear ([ string $name ] )";i:3;s:23:"clear assigned variable";}
a:4:{i:0;s:28:"Yaf_View_Simple::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:86:"final public Yaf_View_Simple::__construct ( string $tempalte_dir [, array $options ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_View_Simple::display";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:73:"public bool Yaf_View_Simple::display ( string $tpl [, array $tpl_vars ] )";i:3;s:51:"Render a template and display the result instantly.";}
a:4:{i:0;s:21:"Yaf_View_Simple::eval";i:1;s:13:"(Yaf >=2.2.0)";i:2;s:80:"public string Yaf_View_Simple::eval ( string $tpl_content [, array $tpl_vars ] )";i:3;s:47:"Render a string tempalte and return the result.";}
a:4:{i:0;s:22:"Yaf_View_Simple::__get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:54:"public void Yaf_View_Simple::__get ([ string $name ] )";i:3;s:27:"Retrieve assigned varaiable";}
a:4:{i:0;s:30:"Yaf_View_Simple::getScriptPath";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public string Yaf_View_Simple::getScriptPath ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_View_Simple::__isset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public void Yaf_View_Simple::__isset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_View_Simple::render";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:74:"public string Yaf_View_Simple::render ( string $tpl [, array $tpl_vars ] )";i:3;s:40:"Render a tempalte and return the result.";}
a:4:{i:0;s:22:"Yaf_View_Simple::__set";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:65:"public void Yaf_View_Simple::__set ( string $name, mixed $value )";i:3;s:41:"This is a alternative and easier way to .";}
a:4:{i:0;s:30:"Yaf_View_Simple::setScriptPath";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:67:"public bool Yaf_View_Simple::setScriptPath ( string $template_dir )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Loader::autoload";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:41:"public void Yaf_Loader::autoload ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Loader::clearLocalNamespace";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public void Yaf_Loader::clearLocalNamespace ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"Yaf_Loader::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:41:"private void Yaf_Loader::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Loader::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:39:"public Yaf_Loader::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Loader::getInstance";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:51:"public static void Yaf_Loader::getInstance ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Loader::getLibraryPath";i:1;s:13:"(Yaf >=2.1.4)";i:2;s:75:"public Yaf_Loader Yaf_Loader::getLibraryPath ([ bool $is_global = false ] )";i:3;s:0:"";}
a:4:{i:0;s:29:"Yaf_Loader::getLocalNamespace";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:50:"public void Yaf_Loader::getLocalNamespace ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"Yaf_Loader::import";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:46:"public static void Yaf_Loader::import ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Loader::isLocalName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:44:"public void Yaf_Loader::isLocalName ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"Yaf_Loader::registerLocalNamespace";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:64:"public void Yaf_Loader::registerLocalNamespace ( mixed $prefix )";i:3;s:313:"Register local class prefix name, search classes in two library directories, the one is configured via (in application.ini) which is called local libraray directory; the other is configured via (in php.ini) which is callled global library directory, since it can be shared by many applications in the same server.";}
a:4:{i:0;s:26:"Yaf_Loader::setLibraryPath";i:1;s:13:"(Yaf >=2.1.4)";i:2;s:95:"public Yaf_Loader Yaf_Loader::setLibraryPath ( string $directory [, bool $is_global = false ] )";i:3;s:0:"";}
a:4:{i:0;s:19:"Yaf_Loader::__sleep";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:41:"private void Yaf_Loader::__sleep ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Loader::__wakeup";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:42:"private void Yaf_Loader::__wakeup ( void )";i:3;s:0:"";}
a:4:{i:0;s:41:"Yaf_Plugin_Abstract::dispatchLoopShutdown";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:120:"public void Yaf_Plugin_Abstract::dispatchLoopShutdown ( Yaf_Request_Abstract $request, Yaf_Response_Abstract $response )";i:3;s:149:"This is the latest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called after the dispatch loop finished.";}
a:4:{i:0;s:40:"Yaf_Plugin_Abstract::dispatchLoopStartup";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:119:"public void Yaf_Plugin_Abstract::dispatchLoopStartup ( Yaf_Request_Abstract $request, Yaf_Response_Abstract $response )";i:3;s:0:"";}
a:4:{i:0;s:33:"Yaf_Plugin_Abstract::postDispatch";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:112:"public void Yaf_Plugin_Abstract::postDispatch ( Yaf_Request_Abstract $request, Yaf_Response_Abstract $response )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Plugin_Abstract::preDispatch";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:111:"public void Yaf_Plugin_Abstract::preDispatch ( Yaf_Request_Abstract $request, Yaf_Response_Abstract $response )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Plugin_Abstract::preResponse";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:111:"public void Yaf_Plugin_Abstract::preResponse ( Yaf_Request_Abstract $request, Yaf_Response_Abstract $response )";i:3;s:0:"";}
a:4:{i:0;s:35:"Yaf_Plugin_Abstract::routerShutdown";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:114:"public void Yaf_Plugin_Abstract::routerShutdown ( Yaf_Request_Abstract $request, Yaf_Response_Abstract $response )";i:3;s:102:"This hook will be trigged after the route process finished, this hook is usually used for login check.";}
a:4:{i:0;s:34:"Yaf_Plugin_Abstract::routerStartup";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:113:"public void Yaf_Plugin_Abstract::routerStartup ( Yaf_Request_Abstract $request, Yaf_Response_Abstract $response )";i:3;s:143:"This is the earliest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called before routing a request.";}
a:4:{i:0;s:21:"Yaf_Registry::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:43:"private void Yaf_Registry::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Registry::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:34:"Yaf_Registry::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"Yaf_Registry::del";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public static void Yaf_Registry::del ( string $name )";i:3;s:28:"Remove an item from registry";}
a:4:{i:0;s:17:"Yaf_Registry::get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:54:"public static mixed Yaf_Registry::get ( string $name )";i:3;s:30:"Retrieve an item from registry";}
a:4:{i:0;s:17:"Yaf_Registry::has";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public static bool Yaf_Registry::has ( string $name )";i:3;s:28:"Check whether an item exists";}
a:4:{i:0;s:17:"Yaf_Registry::set";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:68:"public static bool Yaf_Registry::set ( string $name, string $value )";i:3;s:25:"Add an item into registry";}
a:4:{i:0;s:35:"Yaf_Request_Abstract::getActionName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:56:"public void Yaf_Request_Abstract::getActionName ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Request_Abstract::getBaseUri";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public void Yaf_Request_Abstract::getBaseUri ( void )";i:3;s:0:"";}
a:4:{i:0;s:39:"Yaf_Request_Abstract::getControllerName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:60:"public void Yaf_Request_Abstract::getControllerName ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Request_Abstract::getEnv";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:78:"public void Yaf_Request_Abstract::getEnv ( string $name [, string $default ] )";i:3;s:21:"Retrieve ENV variable";}
a:4:{i:0;s:34:"Yaf_Request_Abstract::getException";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:55:"public void Yaf_Request_Abstract::getException ( void )";i:3;s:0:"";}
a:4:{i:0;s:33:"Yaf_Request_Abstract::getLanguage";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:54:"public void Yaf_Request_Abstract::getLanguage ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Request_Abstract::getMethod";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public void Yaf_Request_Abstract::getMethod ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"Yaf_Request_Abstract::getModuleName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:56:"public void Yaf_Request_Abstract::getModuleName ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Request_Abstract::getParam";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:80:"public void Yaf_Request_Abstract::getParam ( string $name [, string $default ] )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Request_Abstract::getParams";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public void Yaf_Request_Abstract::getParams ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"Yaf_Request_Abstract::getRequestUri";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:56:"public void Yaf_Request_Abstract::getRequestUri ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Request_Abstract::getServer";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:81:"public void Yaf_Request_Abstract::getServer ( string $name [, string $default ] )";i:3;s:24:"Retrieve SERVER variable";}
a:4:{i:0;s:27:"Yaf_Request_Abstract::isCli";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public void Yaf_Request_Abstract::isCli ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"Yaf_Request_Abstract::isDispatched";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:55:"public void Yaf_Request_Abstract::isDispatched ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Request_Abstract::isGet";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public void Yaf_Request_Abstract::isGet ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Request_Abstract::isHead";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public void Yaf_Request_Abstract::isHead ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Request_Abstract::isOptions";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public void Yaf_Request_Abstract::isOptions ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Request_Abstract::isPost";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public void Yaf_Request_Abstract::isPost ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Request_Abstract::isPut";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public void Yaf_Request_Abstract::isPut ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Request_Abstract::isRouted";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:51:"public void Yaf_Request_Abstract::isRouted ( void )";i:3;s:0:"";}
a:4:{i:0;s:38:"Yaf_Request_Abstract::isXmlHttpRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:59:"public void Yaf_Request_Abstract::isXmlHttpRequest ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"Yaf_Request_Abstract::setActionName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:66:"public void Yaf_Request_Abstract::setActionName ( string $action )";i:3;s:0:"";}
a:4:{i:0;s:32:"Yaf_Request_Abstract::setBaseUri";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:60:"public bool Yaf_Request_Abstract::setBaseUri ( string $uir )";i:3;s:310:"Set base URI, base URI is used when doing routing, in routing phase request URI is used to route a request, while base URI is used to skip the leadding part(base URI) of request URI. That is, if comes a request with request URI a/b/c, then if you set base URI to "a/b", only "/c" will be used in routing phase.";}
a:4:{i:0;s:39:"Yaf_Request_Abstract::setControllerName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:74:"public void Yaf_Request_Abstract::setControllerName ( string $controller )";i:3;s:0:"";}
a:4:{i:0;s:35:"Yaf_Request_Abstract::setDispatched";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:56:"public void Yaf_Request_Abstract::setDispatched ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"Yaf_Request_Abstract::setModuleName";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:66:"public void Yaf_Request_Abstract::setModuleName ( string $module )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Request_Abstract::setParam";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:78:"public void Yaf_Request_Abstract::setParam ( string $name [, string $value ] )";i:3;s:0:"";}
a:4:{i:0;s:35:"Yaf_Request_Abstract::setRequestUri";i:1;s:13:"(Yaf >=2.1.0)";i:2;s:63:"public void Yaf_Request_Abstract::setRequestUri ( string $uir )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Request_Abstract::setRouted";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:63:"public void Yaf_Request_Abstract::setRouted ([ string $flag ] )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Request_Http::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:47:"private void Yaf_Request_Http::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"Yaf_Request_Http::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:38:"Yaf_Request_Http::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"Yaf_Request_Http::get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:72:"public mixed Yaf_Request_Http::get ( string $name [, string $default ] )";i:3;s:149:"Retrieve variable from client, this method will search the in request pramas, if the name is not found, then will search in POST, GET, Cookie, Server";}
a:4:{i:0;s:27:"Yaf_Request_Http::getCookie";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:78:"public mixed Yaf_Request_Http::getCookie ( string $name [, string $default ] )";i:3;s:24:"Retrieve Cookie variable";}
a:4:{i:0;s:26:"Yaf_Request_Http::getFiles";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:47:"public void Yaf_Request_Http::getFiles ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Request_Http::getPost";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:76:"public mixed Yaf_Request_Http::getPost ( string $name [, string $default ] )";i:3;s:22:"Retrieve POST variable";}
a:4:{i:0;s:26:"Yaf_Request_Http::getQuery";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:77:"public mixed Yaf_Request_Http::getQuery ( string $name [, string $default ] )";i:3;s:21:"Retrieve GET variable";}
a:4:{i:0;s:28:"Yaf_Request_Http::getRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public void Yaf_Request_Http::getRequest ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"Yaf_Request_Http::isXmlHttpRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:55:"public bool Yaf_Request_Http::isXmlHttpRequest ( void )";i:3;s:47:"Check the request whether it is a Ajax Request.";}
a:4:{i:0;s:27:"Yaf_Request_Simple::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"private void Yaf_Request_Simple::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Request_Simple::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:40:"Yaf_Request_Simple::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Request_Simple::get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:44:"public void Yaf_Request_Simple::get ( void )";i:3;s:0:"";}
a:4:{i:0;s:29:"Yaf_Request_Simple::getCookie";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:50:"public void Yaf_Request_Simple::getCookie ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Request_Simple::getFiles";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public void Yaf_Request_Simple::getFiles ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Request_Simple::getPost";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:48:"public void Yaf_Request_Simple::getPost ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Request_Simple::getQuery";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public void Yaf_Request_Simple::getQuery ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Request_Simple::getRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:51:"public void Yaf_Request_Simple::getRequest ( void )";i:3;s:0:"";}
a:4:{i:0;s:36:"Yaf_Request_Simple::isXmlHttpRequest";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:57:"public void Yaf_Request_Simple::isXmlHttpRequest ( void )";i:3;s:0:"";}
a:4:{i:0;s:33:"Yaf_Response_Abstract::appendBody";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:82:"public bool Yaf_Response_Abstract::appendBody ( string $content [, string $key ] )";i:3;s:42:"append a content to a exists content block";}
a:4:{i:0;s:32:"Yaf_Response_Abstract::clearBody";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:63:"public bool Yaf_Response_Abstract::clearBody ([ string $key ] )";i:3;s:22:"Clear existsed content";}
a:4:{i:0;s:35:"Yaf_Response_Abstract::clearHeaders";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:56:"public void Yaf_Response_Abstract::clearHeaders ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Response_Abstract::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"private void Yaf_Response_Abstract::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"Yaf_Response_Abstract::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:50:"public Yaf_Response_Abstract::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:33:"Yaf_Response_Abstract::__destruct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:54:"public void Yaf_Response_Abstract::__destruct ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Response_Abstract::getBody";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:62:"public mixed Yaf_Response_Abstract::getBody ([ string $key ] )";i:3;s:25:"Retrieve a exists content";}
a:4:{i:0;s:32:"Yaf_Response_Abstract::getHeader";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public void Yaf_Response_Abstract::getHeader ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"Yaf_Response_Abstract::prependBody";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:83:"public bool Yaf_Response_Abstract::prependBody ( string $content [, string $key ] )";i:3;s:43:"prepend a content to a exists content block";}
a:4:{i:0;s:31:"Yaf_Response_Abstract::response";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public void Yaf_Response_Abstract::response ( void )";i:3;s:13:"send response";}
a:4:{i:0;s:36:"Yaf_Response_Abstract::setAllHeaders";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:60:"protected void Yaf_Response_Abstract::setAllHeaders ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"Yaf_Response_Abstract::setBody";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:79:"public bool Yaf_Response_Abstract::setBody ( string $content [, string $key ] )";i:3;s:23:"Set content to response";}
a:4:{i:0;s:32:"Yaf_Response_Abstract::setHeader";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public void Yaf_Response_Abstract::setHeader ( void )";i:3;s:0:"";}
a:4:{i:0;s:34:"Yaf_Response_Abstract::setRedirect";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:55:"public void Yaf_Response_Abstract::setRedirect ( void )";i:3;s:0:"";}
a:4:{i:0;s:33:"Yaf_Response_Abstract::__toString";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:55:"private void Yaf_Response_Abstract::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Route_Interface::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:81:"abstract public bool Yaf_Route_Interface::route ( Yaf_Request_Abstract $request )";i:3;s:56:"is the only method that a custom route should implement.";}
a:4:{i:0;s:26:"Yaf_Route_Map::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:101:"public Yaf_Route_Map::__construct ([ string $controller_prefer = false [, string $delimiter = '' ]] )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Route_Map::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:66:"public bool Yaf_Route_Map::route ( Yaf_Request_Abstract $request )";i:3;s:0:"";}
a:4:{i:0;s:28:"Yaf_Route_Regex::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:101:"public Yaf_Route_Regex::__construct ( string $match, array $route [, array $map [, array $verify ]] )";i:3;s:0:"";}
a:4:{i:0;s:22:"Yaf_Route_Regex::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:68:"public bool Yaf_Route_Regex::route ( Yaf_Request_Abstract $request )";i:3;s:25:"Route a incoming request.";}
a:4:{i:0;s:30:"Yaf_Route_Rewrite::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:88:"public Yaf_Route_Rewrite::__construct ( string $match, array $route [, array $verify ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Route_Rewrite::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:70:"public bool Yaf_Route_Rewrite::route ( Yaf_Request_Abstract $request )";i:3;s:0:"";}
a:4:{i:0;s:21:"Yaf_Router::addConfig";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:65:"public bool Yaf_Router::addConfig ( Yaf_Config_Abstract $config )";i:3;s:49:"Add routes defined by configs into 's route stack";}
a:4:{i:0;s:20:"Yaf_Router::addRoute";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:76:"public bool Yaf_Router::addRoute ( string $name, Yaf_Route_Abstract $route )";i:3;s:124:"defaultly, Yaf_Router using a as its defualt route. you can add new routes into router's route stack by calling this method.";}
a:4:{i:0;s:23:"Yaf_Router::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:39:"public Yaf_Router::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:27:"Yaf_Router::getCurrentRoute";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:50:"public string Yaf_Router::getCurrentRoute ( void )";i:3;s:66:"Get the name of the route which is effective in the route process.";}
a:4:{i:0;s:20:"Yaf_Router::getRoute";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:64:"public Yaf_Route_Interface Yaf_Router::getRoute ( string $name )";i:3;s:34:"Retrieve a route by name, see also";}
a:4:{i:0;s:21:"Yaf_Router::getRoutes";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:43:"public mixed Yaf_Router::getRoutes ( void )";i:3;s:26:"Retrieve registered routes";}
a:4:{i:0;s:17:"Yaf_Router::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:63:"public bool Yaf_Router::route ( Yaf_Request_Abstract $request )";i:3;s:0:"";}
a:4:{i:0;s:29:"Yaf_Route_Simple::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:106:"public Yaf_Route_Simple::__construct ( string $module_name, string $controller_name, string $action_name )";i:3;s:140:"will get route info from query string. and the parameters of this constructor will used as keys while searching for the route info in $_GET.";}
a:4:{i:0;s:23:"Yaf_Route_Simple::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:69:"public bool Yaf_Route_Simple::route ( Yaf_Request_Abstract $request )";i:3;s:3:"see";}
a:4:{i:0;s:23:"Yaf_Route_Static::match";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:51:"public void Yaf_Route_Static::match ( string $uri )";i:3;s:0:"";}
a:4:{i:0;s:23:"Yaf_Route_Static::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:69:"public bool Yaf_Route_Static::route ( Yaf_Request_Abstract $request )";i:3;s:0:"";}
a:4:{i:0;s:31:"Yaf_Route_Supervar::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:64:"public Yaf_Route_Supervar::__construct ( string $supervar_name )";i:3;s:105:"is similar with, the difference is will look for path info in query string, and the parameter is the key.";}
a:4:{i:0;s:25:"Yaf_Route_Supervar::route";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:71:"public bool Yaf_Route_Supervar::route ( Yaf_Request_Abstract $request )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Session::__clone";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:42:"private void Yaf_Session::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Session::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:33:"Yaf_Session::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"Yaf_Session::count";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:39:"public void Yaf_Session::count ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Session::current";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:41:"public void Yaf_Session::current ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"Yaf_Session::del";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"public void Yaf_Session::del ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:18:"Yaf_Session::__get";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:47:"public void Yaf_Session::__get ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Session::getInstance";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:52:"public static void Yaf_Session::getInstance ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"Yaf_Session::has";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:45:"public void Yaf_Session::has ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Session::__isset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public void Yaf_Session::__isset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:16:"Yaf_Session::key";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:37:"public void Yaf_Session::key ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"Yaf_Session::next";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:38:"public void Yaf_Session::next ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"Yaf_Session::offsetExists";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:54:"public void Yaf_Session::offsetExists ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:22:"Yaf_Session::offsetGet";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:51:"public void Yaf_Session::offsetGet ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:22:"Yaf_Session::offsetSet";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:66:"public void Yaf_Session::offsetSet ( string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:24:"Yaf_Session::offsetUnset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:53:"public void Yaf_Session::offsetUnset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:19:"Yaf_Session::rewind";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:40:"public void Yaf_Session::rewind ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"Yaf_Session::__set";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:62:"public void Yaf_Session::__set ( string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Session::__sleep";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:42:"private void Yaf_Session::__sleep ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"Yaf_Session::start";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:39:"public void Yaf_Session::start ( void )";i:3;s:0:"";}
a:4:{i:0;s:20:"Yaf_Session::__unset";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:49:"public void Yaf_Session::__unset ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:18:"Yaf_Session::valid";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:39:"public void Yaf_Session::valid ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"Yaf_Session::__wakeup";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:43:"private void Yaf_Session::__wakeup ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Exception::__construct";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:42:"public Yaf_Exception::__construct ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"Yaf_Exception::getPrevious";i:1;s:13:"(Yaf >=1.0.0)";i:2;s:47:"public void Yaf_Exception::getPrevious ( void )";i:3;s:0:"";}
a:4:{i:0;s:10:"is_tainted";i:1;s:20:"(PECL taint >=0.1.0)";i:2;s:34:"bool is_tainted ( string $string )";i:3;s:34:"Checks whether a string is tainted";}
a:4:{i:0;s:5:"taint";i:1;s:20:"(PECL taint >=0.1.0)";i:2;s:47:"bool taint ( string &$string [, string $... ] )";i:3;s:61:"Make a string tainted. This is used for testing purpose only.";}
a:4:{i:0;s:7:"untaint";i:1;s:20:"(PECL taint >=0.1.0)";i:2;s:49:"bool untaint ( string &$string [, string $... ] )";i:3;s:15:"Untaint strings";}
a:4:{i:0;s:23:"AMQPConnection::connect";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:44:"public bool AMQPConnection::connect ( void )";i:3;s:60:"This method will initiate a connection with the AMQP broker.";}
a:4:{i:0;s:27:"AMQPConnection::__construct";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:70:"public AMQPConnection::__construct ([ array $credentials = array() ] )";i:3;s:64:"Creates an instance representing a connection to an AMQP broker.";}
a:4:{i:0;s:26:"AMQPConnection::disconnect";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:47:"public bool AMQPConnection::disconnect ( void )";i:3;s:63:"This method will close an open connection with the AMQP broker.";}
a:4:{i:0;s:23:"AMQPConnection::getHost";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:46:"public string AMQPConnection::getHost ( void )";i:3;s:37:"Get the value of the configured host.";}
a:4:{i:0;s:24:"AMQPConnection::getLogin";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:47:"public string AMQPConnection::getLogin ( void )";i:3;s:25:"Get the configured login.";}
a:4:{i:0;s:27:"AMQPConnection::getPassword";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:50:"public string AMQPConnection::getPassword ( void )";i:3;s:28:"Get the configured password.";}
a:4:{i:0;s:23:"AMQPConnection::getPort";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:43:"public int AMQPConnection::getPort ( void )";i:3;s:43:"Return the port configured for this object.";}
a:4:{i:0;s:26:"AMQPConnection::getTimeout";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:46:"public int AMQPConnection::getTimeout ( void )";i:3;s:63:"Get the current timeout setting for this instance of an object.";}
a:4:{i:0;s:24:"AMQPConnection::getVhost";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:47:"public string AMQPConnection::getVhost ( void )";i:3;s:25:"Get the configured vhost.";}
a:4:{i:0;s:27:"AMQPConnection::isConnected";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:48:"public bool AMQPConnection::isConnected ( void )";i:3;s:142:"This method will check whether the connection to the AMQP broker is still valid. It does so by checking the return status of the last command.";}
a:4:{i:0;s:25:"AMQPConnection::reconnect";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:46:"public bool AMQPConnection::reconnect ( void )";i:3;s:95:"This method will close any open connections and initiate a new connection with the AMQP broker.";}
a:4:{i:0;s:23:"AMQPConnection::setHost";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:52:"public bool AMQPConnection::setHost ( string $host )";i:3;s:69:"This method will set the hostname used to connect to the AMQP broker.";}
a:4:{i:0;s:24:"AMQPConnection::setLogin";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:54:"public bool AMQPConnection::setLogin ( string $login )";i:3;s:73:"This method will set the login string used to connect to the AMQP broker.";}
a:4:{i:0;s:27:"AMQPConnection::setPassword";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:60:"public bool AMQPConnection::setPassword ( string $password )";i:3;s:76:"This method will set the password string used to connect to the AMQP broker.";}
a:4:{i:0;s:23:"AMQPConnection::setPort";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:49:"public bool AMQPConnection::setPort ( int $port )";i:3;s:65:"This method will set the port used to connect to the AMQP broker.";}
a:4:{i:0;s:26:"AMQPConnection::setTimeout";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:57:"public bool AMQPConnection::setTimeout ( float $timeout )";i:3;s:241:"Set the amount of time, in seconds, after which this instance of an object times out a request to the broker. Setting this value will override the default value specified by the INI setting. To specify a timeout of 500ms, simply pass in 0.5.";}
a:4:{i:0;s:24:"AMQPConnection::setVhost";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:54:"public bool AMQPConnection::setVhost ( string $vhost )";i:3;s:61:"Sets the virtual host to which to connect on the AMQP broker.";}
a:4:{i:0;s:30:"AMQPChannel::commitTransaction";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:51:"public void AMQPChannel::commitTransaction ( void )";i:3;s:61:"Commit an existing transaction. must be called prior to this.";}
a:4:{i:0;s:24:"AMQPChannel::__construct";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:60:"AMQPChannel::__construct ( AMQPConnection $amqp_connection )";i:3;s:67:"Creates an instance representing a channel on the given connection.";}
a:4:{i:0;s:24:"AMQPChannel::isConnected";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:45:"public void AMQPChannel::isConnected ( void )";i:3;s:43:"Indicates whether the channel is connected.";}
a:4:{i:0;s:16:"AMQPChannel::qos";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:54:"public void AMQPChannel::qos ( int $size, int $count )";i:3;s:233:"Specify the amount of data to prefetch in terms of window size (octets) or number of messages from a queue during a or method call. The client will prefetch data up to octets or messages from the server, whichever limit is hit first.";}
a:4:{i:0;s:32:"AMQPChannel::rollbackTransaction";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"public void AMQPChannel::rollbackTransaction ( void )";i:3;s:63:"Rollback an existing transaction. must be called prior to this.";}
a:4:{i:0;s:29:"AMQPChannel::setPrefetchCount";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:56:"public void AMQPChannel::setPrefetchCount ( int $count )";i:3;s:217:"Set the number of messages to prefetch from the broker during a call to or . Any call to this method will automatically set the prefetch window size to 0, meaning that the prefetch window size setting will be ignored.";}
a:4:{i:0;s:28:"AMQPChannel::setPrefetchSize";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:54:"public void AMQPChannel::setPrefetchSize ( int $size )";i:3;s:207:"Set the prefetch window size, in octets, during a call to or . Any call to this method will automatically set the prefetch message count to 0, meaning that the prefetch message count setting will be ignored.";}
a:4:{i:0;s:29:"AMQPChannel::startTransaction";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:50:"public void AMQPChannel::startTransaction ( void )";i:3;s:90:"Start a transaction. This method must be called on the given channel prior to calling or .";}
a:4:{i:0;s:18:"AMQPExchange::bind";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:119:"public bool AMQPExchange::bind ( string $destination_exchange_name, string $source_exchange_name, string $routing_key )";i:3;s:69:"Bind an exchange to another exchange using the specified routing key.";}
a:4:{i:0;s:25:"AMQPExchange::__construct";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:62:"public AMQPExchange::__construct ( AMQPChannel $amqp_channel )";i:3;s:95:"Returns a new instance of an AMQPExchange object, associated with the given AMQPChannel object.";}
a:4:{i:0;s:21:"AMQPExchange::declare";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:41:"public int AMQPExchange::declare ( void )";i:3;s:37:"Declare a new exchange on the broker.";}
a:4:{i:0;s:20:"AMQPExchange::delete";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:65:"public bool AMQPExchange::delete ([ int $flags = AMQP_NOPARAM ] )";i:3;s:36:"Delete and exchange from the broker.";}
a:4:{i:0;s:25:"AMQPExchange::getArgument";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:54:"public mixed AMQPExchange::getArgument ( string $key )";i:3;s:47:"Get the argument associated with the given key.";}
a:4:{i:0;s:26:"AMQPExchange::getArguments";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:48:"public array AMQPExchange::getArguments ( void )";i:3;s:94:"Get all arguments as an array of key/value pairs that are currently set on the given exchange.";}
a:4:{i:0;s:22:"AMQPExchange::getFlags";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:42:"public int AMQPExchange::getFlags ( void )";i:3;s:54:"Get all the flags currently set on the given exchange.";}
a:4:{i:0;s:21:"AMQPExchange::getName";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:44:"public string AMQPExchange::getName ( void )";i:3;s:24:"Get the configured name.";}
a:4:{i:0;s:21:"AMQPExchange::getType";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:44:"public string AMQPExchange::getType ( void )";i:3;s:24:"Get the configured type.";}
a:4:{i:0;s:21:"AMQPExchange::publish";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:137:"public bool AMQPExchange::publish ( string $message, string $routing_key [, int $flags = AMQP_NOPARAM [, array $attributes = array() ]] )";i:3;s:60:"Publish a message to the exchange represented by the object.";}
a:4:{i:0;s:25:"AMQPExchange::setArgument";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:67:"public void AMQPExchange::setArgument ( string $key, mixed $value )";i:3;s:31:"Set the key to the given value.";}
a:4:{i:0;s:26:"AMQPExchange::setArguments";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:59:"public void AMQPExchange::setArguments ( array $arguments )";i:3;s:83:"Set all arguments on the given exchange. All other argument settings will be wiped.";}
a:4:{i:0;s:22:"AMQPExchange::setFlags";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:49:"public void AMQPExchange::setFlags ( int $flags )";i:3;s:29:"Set the flags on an exchange.";}
a:4:{i:0;s:21:"AMQPExchange::setName";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:59:"public void AMQPExchange::setName ( string $exchange_name )";i:3;s:29:"Set the name of the exchange.";}
a:4:{i:0;s:21:"AMQPExchange::setType";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:61:"public string AMQPExchange::setType ( string $exchange_type )";i:3;s:56:"Set the type of the exchange. This can be any of, , or .";}
a:4:{i:0;s:14:"AMQPQueue::ack";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:79:"public bool AMQPQueue::ack ( int $delivery_tag [, int $flags = AMQP_NOPARAM ] )";i:3;s:97:"This method allows the acknowledgement of a message that is retrieved without the flag through or";}
a:4:{i:0;s:15:"AMQPQueue::bind";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:74:"public bool AMQPQueue::bind ( string $exchange_name, string $routing_key )";i:3;s:93:"The bind method will bind the given queue to the specified routing key on the given exchange.";}
a:4:{i:0;s:17:"AMQPQueue::cancel";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:62:"public bool AMQPQueue::cancel ([ string $consumer_tag = "" ] )";i:3;s:68:"Cancel a queue that is already bound to an exchange and routing key.";}
a:4:{i:0;s:22:"AMQPQueue::__construct";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:59:"public AMQPQueue::__construct ( AMQPChannel $amqp_channel )";i:3;s:61:"Creates an instance representing an AMQP queue on the broker.";}
a:4:{i:0;s:18:"AMQPQueue::consume";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:84:"public void AMQPQueue::consume ( callable $callback [, int $flags = AMQP_NOPARAM ] )";i:3;s:130:"Blocking function that will retrieve the next message from the queue as it becomes available and will pass it off to the callback.";}
a:4:{i:0;s:18:"AMQPQueue::declare";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:38:"public int AMQPQueue::declare ( void )";i:3;s:34:"Declare a new queue on the broker.";}
a:4:{i:0;s:17:"AMQPQueue::delete";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:37:"publicbool AMQPQueue::delete ( void )";i:3;s:99:"Delete a queue from the broker, including its entire contents of unread or unacknowledged messages.";}
a:4:{i:0;s:14:"AMQPQueue::get";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:45:"public mixed AMQPQueue::get ([ int $flags ] )";i:3;s:181:"Retrieve the next available message from the queue. If no messages are present in the queue, this function will return immediately. This is a non blocking alternative to the method.";}
a:4:{i:0;s:22:"AMQPQueue::getArgument";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:51:"public mixed AMQPQueue::getArgument ( string $key )";i:3;s:47:"Get the argument associated with the given key.";}
a:4:{i:0;s:23:"AMQPQueue::getArguments";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:45:"public array AMQPQueue::getArguments ( void )";i:3;s:91:"Get all arguments as an array of key/value pairs that are currently set on the given queue.";}
a:4:{i:0;s:19:"AMQPQueue::getFlags";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:39:"public int AMQPQueue::getFlags ( void )";i:3;s:51:"Get all the flags currently set on the given queue.";}
a:4:{i:0;s:18:"AMQPQueue::getName";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:41:"public string AMQPQueue::getName ( void )";i:3;s:24:"Get the configured name.";}
a:4:{i:0;s:15:"AMQPQueue::nack";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:86:"public void AMQPQueue::nack ( string $delivery_tag [, string $flags = AMQP_NOPARAM ] )";i:3;s:223:"Mark the message identified by as explicitly not acknowledged. This method can only be called on messages that have not yet been acknowledged, meaning that messages retrieved with by and and using the flag are not eligible.";}
a:4:{i:0;s:16:"AMQPQueue::purge";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:37:"public bool AMQPQueue::purge ( void )";i:3;s:30:"Purge the contents of a queue.";}
a:4:{i:0;s:22:"AMQPQueue::setArgument";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:64:"public void AMQPQueue::setArgument ( string $key, mixed $value )";i:3;s:31:"Set the key to the given value.";}
a:4:{i:0;s:23:"AMQPQueue::setArguments";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:56:"public void AMQPQueue::setArguments ( array $arguments )";i:3;s:80:"Set all arguments on the given queue. All other argument settings will be wiped.";}
a:4:{i:0;s:19:"AMQPQueue::setFlags";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:46:"public void AMQPQueue::setFlags ( int $flags )";i:3;s:27:"Set the flags on the queue.";}
a:4:{i:0;s:18:"AMQPQueue::setName";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:53:"public void AMQPQueue::setName ( string $queue_name )";i:3;s:25:"Set the name of the queue";}
a:4:{i:0;s:17:"AMQPQueue::unbind";i:1;s:22:"(PECL amqp >= Unknown)";i:2;s:76:"public bool AMQPQueue::unbind ( string $exchange_name, string $routing_key )";i:3;s:65:"Remove a routing key binding on an exchange from the given queue.";}
a:4:{i:0;s:22:"AMQPEnvelope::getAppId";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:45:"public string AMQPEnvelope::getAppId ( void )";i:3;s:38:"Get the application id of the message.";}
a:4:{i:0;s:21:"AMQPEnvelope::getBody";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:44:"public string AMQPEnvelope::getBody ( void )";i:3;s:28:"Get the body of the message.";}
a:4:{i:0;s:32:"AMQPEnvelope::getContentEncoding";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:55:"public string AMQPEnvelope::getContentEncoding ( void )";i:3;s:40:"Get the content encoding of the message.";}
a:4:{i:0;s:28:"AMQPEnvelope::getContentType";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:51:"public string AMQPEnvelope::getContentType ( void )";i:3;s:36:"Get the content type of the message.";}
a:4:{i:0;s:30:"AMQPEnvelope::getCorrelationId";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:53:"public string AMQPEnvelope::getCorrelationId ( void )";i:3;s:38:"Get the correlation id of the message.";}
a:4:{i:0;s:28:"AMQPEnvelope::getDeliveryTag";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:51:"public string AMQPEnvelope::getDeliveryTag ( void )";i:3;s:36:"Get the delivery tag of the message.";}
a:4:{i:0;s:25:"AMQPEnvelope::getExchange";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:48:"public string AMQPEnvelope::getExchange ( void )";i:3;s:57:"Get the exchange name on which the message was published.";}
a:4:{i:0;s:27:"AMQPEnvelope::getExpiration";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:50:"public string AMQPEnvelope::getExpiration ( void )";i:3;s:34:"Get the expiration of the message.";}
a:4:{i:0;s:23:"AMQPEnvelope::getHeader";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:60:"public string AMQPEnvelope::getHeader ( string $header_key )";i:3;s:47:"Get the header value for a specific header key.";}
a:4:{i:0;s:24:"AMQPEnvelope::getHeaders";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:46:"public array AMQPEnvelope::getHeaders ( void )";i:3;s:31:"Get the headers of the message.";}
a:4:{i:0;s:26:"AMQPEnvelope::getMessageId";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:49:"public string AMQPEnvelope::getMessageId ( void )";i:3;s:34:"Get the message id of the message.";}
a:4:{i:0;s:25:"AMQPEnvelope::getPriority";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:48:"public string AMQPEnvelope::getPriority ( void )";i:3;s:32:"Get the priority of the message.";}
a:4:{i:0;s:24:"AMQPEnvelope::getReplyTo";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:47:"public string AMQPEnvelope::getReplyTo ( void )";i:3;s:32:"Get the reply to of the message.";}
a:4:{i:0;s:27:"AMQPEnvelope::getRoutingKey";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:50:"public string AMQPEnvelope::getRoutingKey ( void )";i:3;s:35:"Get the routing key of the message.";}
a:4:{i:0;s:26:"AMQPEnvelope::getTimeStamp";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:49:"public string AMQPEnvelope::getTimeStamp ( void )";i:3;s:33:"Get the timestamp of the message.";}
a:4:{i:0;s:21:"AMQPEnvelope::getType";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:44:"public string AMQPEnvelope::getType ( void )";i:3;s:28:"Get the type of the message.";}
a:4:{i:0;s:23:"AMQPEnvelope::getUserId";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:46:"public string AMQPEnvelope::getUserId ( void )";i:3;s:31:"Get the user id of the message.";}
a:4:{i:0;s:26:"AMQPEnvelope::isRedelivery";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:47:"public bool AMQPEnvelope::isRedelivery ( void )";i:3;s:228:"Whether this is a redelivery of a message. If this message has been delivered and was called, the message will be put back on the queue to be redelivered, at which point the message will always return when this method is called.";}
a:4:{i:0;s:17:"chdb::__construct";i:1;s:20:"(PECL chdb >= 0.1.0)";i:2;s:45:"public chdb::__construct ( string $pathname )";i:3;s:45:"Loads a chdb file, by mapping it into memory.";}
a:4:{i:0;s:9:"chdb::get";i:1;s:20:"(PECL chdb >= 0.1.0)";i:2;s:39:"public string chdb::get ( string $key )";i:3;s:58:"Gets the value associated with a key from a chdb database.";}
a:4:{i:0;s:11:"chdb_create";i:1;s:20:"(PECL chdb >= 0.1.0)";i:2;s:50:"bool chdb_create ( string $pathname, array $data )";i:3;s:61:"creates a chdb file containing the specified key-value pairs.";}
a:4:{i:0;s:10:"curl_close";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:32:"void curl_close ( resource $ch )";i:3;s:81:"Closes a cURL session and frees all resources. The cURL handle,, is also deleted.";}
a:4:{i:0;s:16:"curl_copy_handle";i:1;s:7:"(PHP 5)";i:2;s:42:"resource curl_copy_handle ( resource $ch )";i:3;s:50:"Copies a cURL handle keeping the same preferences.";}
a:4:{i:0;s:10:"curl_errno";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:31:"int curl_errno ( resource $ch )";i:3;s:53:"Returns the error number for the last cURL operation.";}
a:4:{i:0;s:10:"curl_error";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:34:"string curl_error ( resource $ch )";i:3;s:63:"Returns a clear text error message for the last cURL operation.";}
a:4:{i:0;s:11:"curl_escape";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:48:"string curl_escape ( resource $ch, string $str )";i:3;s:57:"This function URL encodes the given string according to .";}
a:4:{i:0;s:9:"curl_exec";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:32:"mixed curl_exec ( resource $ch )";i:3;s:31:"Execute the given cURL session.";}
a:4:{i:0;s:16:"curl_file_create";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:89:"CURLFile curl_file_create ( string $filename [, string $mimetype [, string $postname ]] )";i:3;s:46:"Creates a object, used to upload a file with .";}
a:4:{i:0;s:12:"curl_getinfo";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:53:"mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )";i:3;s:41:"Gets information about the last transfer.";}
a:4:{i:0;s:9:"curl_init";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:44:"resource curl_init ([ string $url = NULL ] )";i:3;s:85:"Initializes a new session and return a cURL handle for use with the, , and functions.";}
a:4:{i:0;s:21:"curl_multi_add_handle";i:1;s:7:"(PHP 5)";i:2;s:56:"int curl_multi_add_handle ( resource $mh, resource $ch )";i:3;s:35:"Adds the handle to the multi handle";}
a:4:{i:0;s:16:"curl_multi_close";i:1;s:7:"(PHP 5)";i:2;s:38:"void curl_multi_close ( resource $mh )";i:3;s:29:"Closes a set of cURL handles.";}
a:4:{i:0;s:15:"curl_multi_exec";i:1;s:7:"(PHP 5)";i:2;s:57:"int curl_multi_exec ( resource $mh, int &$still_running )";i:3;s:122:"Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.";}
a:4:{i:0;s:21:"curl_multi_getcontent";i:1;s:7:"(PHP 5)";i:2;s:45:"string curl_multi_getcontent ( resource $ch )";i:3;s:138:"If is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.";}
a:4:{i:0;s:20:"curl_multi_info_read";i:1;s:7:"(PHP 5)";i:2;s:75:"array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )";i:3;s:212:"Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed.";}
a:4:{i:0;s:15:"curl_multi_init";i:1;s:7:"(PHP 5)";i:2;s:33:"resource curl_multi_init ( void )";i:3;s:59:"Allows the processing of multiple cURL handles in parallel.";}
a:4:{i:0;s:24:"curl_multi_remove_handle";i:1;s:7:"(PHP 5)";i:2;s:59:"int curl_multi_remove_handle ( resource $mh, resource $ch )";i:3;s:238:"Removes a given handle from the given handle. When the handle has been removed, it is again perfectly legal to run on this handle. Removing the handle while being used, will effectively halt the transfer in progress involving that handle.";}
a:4:{i:0;s:17:"curl_multi_select";i:1;s:7:"(PHP 5)";i:2;s:64:"int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )";i:3;s:68:"Blocks until there is activity on any of the curl_multi connections.";}
a:4:{i:0;s:17:"curl_multi_setopt";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:66:"bool curl_multi_setopt ( resource $mh, int $option, mixed $value )";i:3;s:0:"";}
a:4:{i:0;s:19:"curl_multi_strerror";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:44:"string curl_multi_strerror ( int $errornum )";i:3;s:67:"Returns a text error message describing the given CURLM error code.";}
a:4:{i:0;s:10:"curl_pause";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:45:"int curl_pause ( resource $ch, int $bitmask )";i:3;s:0:"";}
a:4:{i:0;s:10:"curl_reset";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:32:"void curl_reset ( resource $ch )";i:3;s:92:"This function re-initializes all options set on the given cURL handle to the default values.";}
a:4:{i:0;s:17:"curl_setopt_array";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:55:"bool curl_setopt_array ( resource $ch, array $options )";i:3;s:139:"Sets multiple options for a cURL session. This function is useful for setting a large amount of cURL options without repetitively calling .";}
a:4:{i:0;s:11:"curl_setopt";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:60:"bool curl_setopt ( resource $ch, int $option, mixed $value )";i:3;s:48:"Sets an option on the given cURL session handle.";}
a:4:{i:0;s:16:"curl_share_close";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:38:"void curl_share_close ( resource $sh )";i:3;s:51:"Closes a cURL share handle and frees all resources.";}
a:4:{i:0;s:15:"curl_share_init";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:33:"resource curl_share_init ( void )";i:3;s:42:"Allows to share data between cURL handles.";}
a:4:{i:0;s:17:"curl_share_setopt";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:67:"bool curl_share_setopt ( resource $sh, int $option, string $value )";i:3;s:46:"Sets an option on the given cURL share handle.";}
a:4:{i:0;s:13:"curl_strerror";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:38:"string curl_strerror ( int $errornum )";i:3;s:61:"Returns a text error message describing the given error code.";}
a:4:{i:0;s:13:"curl_unescape";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:50:"string curl_unescape ( resource $ch, string $str )";i:3;s:51:"This function decodes the given URL encoded string.";}
a:4:{i:0;s:12:"curl_version";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:52:"array curl_version ([ int $age = CURLVERSION_NOW ] )";i:3;s:43:"Returns information about the cURL version.";}
a:4:{i:0;s:21:"CURLFile::__construct";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:92:"public CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )";i:3;s:0:"";}
a:4:{i:0;s:21:"CURLFile::getFilename";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:44:"public string CURLFile::getFilename ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"CURLFile::getMimeType";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:44:"public string CURLFile::getMimeType ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"CURLFile::getPostFilename";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:48:"public string CURLFile::getPostFilename ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"CURLFile::setMimeType";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:50:"public void CURLFile::setMimeType ( string $mime )";i:3;s:0:"";}
a:4:{i:0;s:25:"CURLFile::setPostFilename";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:58:"public void CURLFile::setPostFilename ( string $postname )";i:3;s:0:"";}
a:4:{i:0;s:18:"CURLFile::__wakeup";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:39:"public void CURLFile::__wakeup ( void )";i:3;s:0:"";}
a:4:{i:0;s:10:"Event::add";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:45:"public void Event::add ([ double $timeout ] )";i:3;s:172:"Marks event pending. Non-pending event will never occur, and the event callback will never be called. In conjuction with an event could be re-scheduled by user at any time.";}
a:4:{i:0;s:16:"Event::addSignal";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:51:"public bool Event::addSignal ([ double $timeout ] )";i:3;s:14:"is an alias of";}
a:4:{i:0;s:15:"Event::addTimer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:50:"public bool Event::addTimer ([ double $timeout ] )";i:3;s:14:"is an alias of";}
a:4:{i:0;s:18:"Event::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:104:"public Event::__construct ( EventBase $base, mixed $fd, int $what, callable $cb [, mixed $arg = NULL ] )";i:3;s:24:"Constructs Event object.";}
a:4:{i:0;s:10:"Event::del";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:31:"public void Event::del ( void )";i:3;s:77:"Removes an event from the set of monitored events, i.e. makes it non-pending.";}
a:4:{i:0;s:16:"Event::delSignal";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:37:"public bool Event::delSignal ( void )";i:3;s:14:"is an alias of";}
a:4:{i:0;s:15:"Event::delTimer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:36:"public bool Event::delTimer ( void )";i:3;s:16:"is an alias of .";}
a:4:{i:0;s:11:"Event::free";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:32:"public void Event::free ( void )";i:3;s:104:"Removes event from the list of events monitored by libevent, and free resources allocated for the event.";}
a:4:{i:0;s:26:"Event::getSupportedMethods";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:54:"public static void Event::getSupportedMethods ( void )";i:3;s:95:"Returns array with of the names of the methods(backends) supported in this version of Libevent.";}
a:4:{i:0;s:14:"Event::pending";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:41:"public bool Event::pending ( int $flags )";i:3;s:45:"Detects whether event is pending or scheduled";}
a:4:{i:0;s:10:"Event::set";i:1;s:24:"(PECL libevent >= 0.0.1)";i:2;s:100:"public bool Event::set ( EventBase $base, mixed $fd [, int $what [, callable $cb [, mixed $arg ]]] )";i:3;s:117:"Re-configures event. Note, this function doesn't invoke obsolete libevent's event_set. It calls event_assign instead.";}
a:4:{i:0;s:18:"Event::setPriority";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:48:"public bool Event::setPriority ( int $priority )";i:3;s:19:"Set event priority.";}
a:4:{i:0;s:15:"Event::setTimer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:77:"public bool Event::setTimer ( EventBase $base, callable $cb [, mixed $arg ] )";i:3;s:101:"Re-configures timer event. Note, this function doesn't invoke obsolete libevent's . It calls instead.";}
a:4:{i:0;s:13:"Event::signal";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:96:"public static Event Event::signal ( EventBase $base, int $signum, callable $cb [, mixed $arg ] )";i:3;s:154:"Constructs signal event object. This is a straightforward method to create a signal event. Note, the generic method can contruct signal event objects too.";}
a:4:{i:0;s:12:"Event::timer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:82:"public static Event Event::timer ( EventBase $base, callable $cb [, mixed $arg ] )";i:3;s:152:"Constructs timer event object. This is a straightforward method to create a timer event. Note, the generic method can contruct signal event objects too.";}
a:4:{i:0;s:22:"EventBase::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:53:"public EventBase::__construct ([ EventConfig $cfg ] )";i:3;s:27:"Constructs EventBase object";}
a:4:{i:0;s:19:"EventBase::dispatch";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:40:"public void EventBase::dispatch ( void )";i:3;s:89:"Wait for events to become active, and run their callbacks. The same as with no flags set.";}
a:4:{i:0;s:15:"EventBase::exit";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:50:"public void EventBase::exit ([ double $timeout ] )";i:3;s:66:"Tells event base to stop optionally after given number of seconds.";}
a:4:{i:0;s:22:"EventBase::getFeatures";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:42:"public int EventBase::getFeatures ( void )";i:3;s:38:"Returns bitmask of features supported.";}
a:4:{i:0;s:20:"EventBase::getMethod";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:58:"public string EventBase::getMethod ([ EventConfig $cfg ] )";i:3;s:0:"";}
a:4:{i:0;s:29:"EventBase::getTimeOfDayCached";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:52:"public double EventBase::getTimeOfDayCached ( void )";i:3;s:155:"On success returns the current time(as returned by ), looking at the cached value in if possible, and calling or as appropriate if there is no cached time.";}
a:4:{i:0;s:18:"EventBase::gotExit";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:39:"public void EventBase::gotExit ( void )";i:3;s:46:"Checks if the event loop was told to exit by .";}
a:4:{i:0;s:18:"EventBase::gotStop";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:39:"public void EventBase::gotStop ( void )";i:3;s:46:"Checks if the event loop was told to exit by .";}
a:4:{i:0;s:15:"EventBase::loop";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:45:"public bool EventBase::loop ([ int $flags ] )";i:3;s:58:"Wait for events to become active, and run their callbacks.";}
a:4:{i:0;s:23:"EventBase::priorityInit";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:60:"public bool EventBase::priorityInit ( string $n_priorities )";i:3;s:41:"Sets number of priorities per event base.";}
a:4:{i:0;s:17:"EventBase::reInit";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:46:"public void EventBase::reInit ( string $base )";i:3;s:56:"Re-initialize event base. Should be called after a fork.";}
a:4:{i:0;s:15:"EventBase::stop";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:36:"public bool EventBase::stop ( void )";i:3;s:43:"Tells event_base to stop dispatching events";}
a:4:{i:0;s:16:"EventBuffer::add";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:45:"public bool EventBuffer::add ( string $data )";i:3;s:42:"Append data to the end of an event buffer.";}
a:4:{i:0;s:22:"EventBuffer::addBuffer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:55:"public bool EventBuffer::addBuffer ( EventBuffer $buf )";i:3;s:201:"Move all data from the buffer provided in parameter to the end of current . This is a destructive add. The data from one buffer moves into the other buffer. However, no unnecessary memory copies occur.";}
a:4:{i:0;s:23:"EventBuffer::appendFrom";i:1;s:21:"(PECL event >= 1.6.0)";i:2;s:65:"public int EventBuffer::appendFrom ( EventBuffer $buf, int $len )";i:3;s:183:"Moves the specified number of bytes from a source buffer to the end of the current buffer. If there are fewer number of bytes, it moves all the bytes available from the source buffer.";}
a:4:{i:0;s:24:"EventBuffer::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:40:"public EventBuffer::__construct ( void )";i:3;s:29:"Constructs EventBuffer object";}
a:4:{i:0;s:20:"EventBuffer::copyout";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:65:"public int EventBuffer::copyout ( string &$data, int $max_bytes )";i:3;s:216:"Behaves just like, but does not drain any data from the buffer. I.e. it copies the first bytes from the front of the buffer into . If there are fewer than bytes available, the function copies all the bytes there are.";}
a:4:{i:0;s:18:"EventBuffer::drain";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:43:"public void EventBuffer::drain ( int $len )";i:3;s:99:"Behaves as, except that it does not copy the data: it just removes it from the front of the buffer.";}
a:4:{i:0;s:26:"EventBuffer::enableLocking";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:47:"public void EventBuffer::enableLocking ( void )";i:3;s:234:"Enable locking on an so that it can safely be used by multiple threads at the same time. When locking is enabled, the lock will be held when callbacks are invoked. This could result in deadlock if you aren't careful. Plan accordingly!";}
a:4:{i:0;s:19:"EventBuffer::expand";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:44:"public bool EventBuffer::expand ( int $len )";i:3;s:158:"Alters the last chunk of memory in the buffer, or adds a new chunk, such that the buffer is now large enough to contain bytes without any further allocations.";}
a:4:{i:0;s:19:"EventBuffer::freeze";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:50:"public bool EventBuffer::freeze ( bool $at_front )";i:3;s:57:"Prevent calls that modify an event buffer from succeeding";}
a:4:{i:0;s:17:"EventBuffer::lock";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:38:"public void EventBuffer::lock ( void )";i:3;s:250:"Acquires a lock on buffer. Can be used in pair with to make a set of operations atomic, i.e. thread-safe. Note, it is not needed to lock buffers for operations. When locking is enabled(see ), individual operations on event buffers are already atomic.";}
a:4:{i:0;s:20:"EventBuffer::prepend";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:49:"public bool EventBuffer::prepend ( string $data )";i:3;s:40:"Prepend data to the front of the buffer.";}
a:4:{i:0;s:26:"EventBuffer::prependBuffer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:59:"public bool EventBuffer::prependBuffer ( EventBuffer $buf )";i:3;s:65:"Behaves as, except that it moves data to the front of the buffer.";}
a:4:{i:0;s:19:"EventBuffer::pullup";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:48:"public void EventBuffer::pullup ( string $size )";i:3;s:219:""Linearizes" the first bytes of the buffer, copying or moving them as needed to ensure that they are all contiguous and occupying the same chunk of memory. If size is negative, the function linearizes the entire buffer.";}
a:4:{i:0;s:17:"EventBuffer::read";i:1;s:21:"(PECL event >= 1.6.0)";i:2;s:50:"public string EventBuffer::read ( int $max_bytes )";i:3;s:157:"Read the first from the buffer and drain the bytes read. If more are requested than are available in the buffer, it only extracts as many bytes as available.";}
a:4:{i:0;s:21:"EventBuffer::readFrom";i:1;s:21:"(PECL event >= 1.7.0)";i:2;s:59:"public string EventBuffer::read ( mixed $fd, int $howmuch )";i:3;s:64:"Read data from the file specified by onto the end of the buffer.";}
a:4:{i:0;s:21:"EventBuffer::readLine";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:55:"public void EventBuffer::readLine ( string $eol_style )";i:3;s:207:"Extracts a line from the front of the buffer and returns it in a newly allocated string. If there is not a whole line to read, the function returns . The line terminator is not included in the copied string.";}
a:4:{i:0;s:19:"EventBuffer::search";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:88:"public mixed EventBuffer::search ( string $what [, int $start = -1 [, int $end = -1 ]] )";i:3;s:125:"Scans the buffer for an occurrence of the string . It returns numeric position of the string, or if the string was not found.";}
a:4:{i:0;s:22:"EventBuffer::searchEol";i:1;s:21:"(PECL event >= 1.5.0)";i:2;s:100:"public mixed EventBuffer::searchEol ([ int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY ]] )";i:3;s:152:"Scans the buffer for an occurrence of an end of line specified by parameter . It returns numeric position of the string, or if the string was not found.";}
a:4:{i:0;s:19:"EventBuffer::substr";i:1;s:21:"(PECL event >= 1.6.0)";i:2;s:65:"public string EventBuffer::substr ( int $start [, int $length ] )";i:3;s:64:"Substracts up to bytes of the buffer data beginning at position.";}
a:4:{i:0;s:21:"EventBuffer::unfreeze";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:52:"public bool EventBuffer::unfreeze ( bool $at_front )";i:3;s:44:"Re-enable calls that modify an event buffer.";}
a:4:{i:0;s:19:"EventBuffer::unlock";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:40:"public bool EventBuffer::unlock ( void )";i:3;s:27:"Releases lock acquired by .";}
a:4:{i:0;s:18:"EventBuffer::write";i:1;s:21:"(PECL event >= 1.6.0)";i:2;s:62:"public void EventBuffer::write ( mixed $fd [, int $howmuch ] )";i:3;s:125:"Write contents of the buffer to a file descriptor. The buffer will be drained after the bytes have been successfully written.";}
a:4:{i:0;s:25:"EventBufferEvent::connect";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:54:"public bool EventBufferEvent::connect ( string $addr )";i:3;s:103:"Connect buffer event's file descriptor to given address(optionally with port), or a UNIX domain socket.";}
a:4:{i:0;s:29:"EventBufferEvent::connectHost";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:137:"public bool EventBufferEvent::connectHost ( EventDnsBase $dns_base, string $hostname, int $port [, int $family = EventUtil::AF_UNSPEC ] )";i:3;s:220:"Resolves the DNS name hostname, looking for addresses of type ( constants). If the name resolution fails, it invokes the event callback with an error event. If it succeeds, it launches a connection attempt just as would.";}
a:4:{i:0;s:29:"EventBufferEvent::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:189:"public EventBufferEvent::__construct ( EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL ]]]]] )";i:3;s:140:"Create a buffer event on a socket, stream or a file descriptor. Passing to means that the socket should be created later, e.g. by means of .";}
a:4:{i:0;s:28:"EventBufferEvent::createPair";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:83:"public array EventBufferEvent::createPair ( EventBase $base [, int $options = 0 ] )";i:3;s:148:"Returns array of two objects connected to each other. All the usual options are supported, except for, which has no effect, and, which is always on.";}
a:4:{i:0;s:25:"EventBufferEvent::disable";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:53:"public bool EventBufferEvent::disable ( int $events )";i:3;s:39:"Disable events, , or on a buffer event.";}
a:4:{i:0;s:24:"EventBufferEvent::enable";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:55:"public bool EventBufferEvent::enable ( string $events )";i:3;s:39:"Disable events, , or on a buffer event.";}
a:4:{i:0;s:22:"EventBufferEvent::free";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:43:"public void EventBufferEvent::free ( void )";i:3;s:41:"Free resources allocated by buffer event.";}
a:4:{i:0;s:35:"EventBufferEvent::getDnsErrorString";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:58:"public string EventBufferEvent::getDnsErrorString ( void )";i:3;s:124:"Returns string describing the last failed DNS lookup attempt made by, or an empty string, if there is no DNS error detected.";}
a:4:{i:0;s:28:"EventBufferEvent::getEnabled";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:48:"public int EventBufferEvent::getEnabled ( void )";i:3;s:63:"Returns bitmask of events currently enabled on the buffer event";}
a:4:{i:0;s:26:"EventBufferEvent::getInput";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:54:"public EventBuffer EventBufferEvent::getInput ( void )";i:3;s:116:"Returns underlying input buffer associated with current buffer event. An input buffer is a storage for data to read.";}
a:4:{i:0;s:27:"EventBufferEvent::getOutput";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:55:"public EventBuffer EventBufferEvent::getOutput ( void )";i:3;s:124:"Returns underlying output buffer associated with current buffer event. An output buffer is a storage for data to be written.";}
a:4:{i:0;s:22:"EventBufferEvent::read";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:62:"public int EventBufferEvent::read ( string &$data, int $size )";i:3;s:62:"Removes up to bytes from the input buffer, storing them into .";}
a:4:{i:0;s:28:"EventBufferEvent::readBuffer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:61:"public bool EventBufferEvent::readBuffer ( EventBuffer $buf )";i:3;s:69:"Drains the entire contents of the input buffer and places them into .";}
a:4:{i:0;s:30:"EventBufferEvent::setCallbacks";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:118:"public void EventBufferEvent::setCallbacks ( callable $readcb, callable $writecb, callable $eventcb [, string $arg ] )";i:3;s:48:"Assigns read, write and event(status) callbacks.";}
a:4:{i:0;s:29:"EventBufferEvent::setPriority";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:59:"public bool EventBufferEvent::setPriority ( int $priority )";i:3;s:34:"Assign a priority to a bufferevent";}
a:4:{i:0;s:29:"EventBufferEvent::setTimeouts";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:83:"public bool EventBufferEvent::setTimeouts ( int $timeout_read, int $timeout_write )";i:3;s:49:"Set the read and write timeout for a buffer event";}
a:4:{i:0;s:30:"EventBufferEvent::setWatermark";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:87:"public void EventBufferEvent::setWatermark ( int $events, int $lowmark, int $highmark )";i:3;s:74:"Adjusts the read watermarks, the write, or both, of a single buffer event.";}
a:4:{i:0;s:26:"EventBufferEvent::sslError";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:47:"public void EventBufferEvent::sslError ( void )";i:3;s:63:"Returns most recent OpenSSL error reported on the buffer event.";}
a:4:{i:0;s:27:"EventBufferEvent::sslFilter";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:164:"public static EventBufferEvent EventBufferEvent::sslFilter ( EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state [, int $options = 0 ] )";i:3;s:72:"Create a new SSL buffer event to send its data over another buffer event";}
a:4:{i:0;s:32:"EventBufferEvent::sslRenegotiate";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:53:"public void EventBufferEvent::sslRenegotiate ( void )";i:3;s:47:"Tells a bufferevent to begin SSL renegotiation.";}
a:4:{i:0;s:27:"EventBufferEvent::sslSocket";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:145:"public static EventBufferEvent EventBufferEvent::sslSocket ( EventBase $base, mixed $socket, EventSslContext $ctx, int $state [, int $options ] )";i:3;s:72:"Creates a new SSL buffer event to send its data over an SSL on a socket.";}
a:4:{i:0;s:23:"EventBufferEvent::write";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:52:"public bool EventBufferEvent::write ( string $data )";i:3;s:38:"Adds to a buffer event's output buffer";}
a:4:{i:0;s:29:"EventBufferEvent::writeBuffer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:62:"public bool EventBufferEvent::writeBuffer ( EventBuffer $buf )";i:3;s:68:"Adds contents of the entire buffer to a buffer event's output buffer";}
a:4:{i:0;s:24:"EventConfig::avoidMethod";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:52:"public bool EventConfig::avoidMethod ( int $method )";i:3;s:61:"Tells libevent to avoid specific event method(backend). See .";}
a:4:{i:0;s:24:"EventConfig::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:40:"public EventConfig::__construct ( void )";i:3;s:67:"Constructs EventConfig object which could be passed to constructor.";}
a:4:{i:0;s:28:"EventConfig::requireFeatures";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:57:"public bool EventConfig::requireFeatures ( int $feature )";i:3;s:67:"Enters a required event method feature that the application demands";}
a:4:{i:0;s:35:"EventConfig::setMaxDispatchInterval";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:108:"public void EventConfig::setMaxDispatchInterval ( int $max_interval, int $max_callbacks, int $min_priority )";i:3;s:139:"Prevents priority inversion by limiting how many low-priority event callbacks can be invoked before checking for more high-priority events.";}
a:4:{i:0;s:29:"EventDnsBase::addNameserverIp";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:56:"public bool EventDnsBase::addNameserverIp ( string $ip )";i:3;s:36:"Adds a nameserver to the evdns_base.";}
a:4:{i:0;s:23:"EventDnsBase::addSearch";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:54:"public void EventDnsBase::addSearch ( string $domain )";i:3;s:43:"Adds a domain to the list of search domains";}
a:4:{i:0;s:25:"EventDnsBase::clearSearch";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:46:"public void EventDnsBase::clearSearch ( void )";i:3;s:82:"Removes all current search suffixes from the DNS base; the function adds a suffix.";}
a:4:{i:0;s:25:"EventDnsBase::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:70:"public EventDnsBase::__construct ( EventBase $base, bool $initialize )";i:3;s:31:"Constructs EventDnsBase object.";}
a:4:{i:0;s:30:"EventDnsBase::countNameservers";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:51:"public void EventDnsBase::countNameservers ( void )";i:3;s:41:"Gets the number of configured nameservers";}
a:4:{i:0;s:23:"EventDnsBase::loadHosts";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:53:"public bool EventDnsBase::loadHosts ( string $hosts )";i:3;s:60:"Loads a hosts file (in the same format as ) from hosts file.";}
a:4:{i:0;s:29:"EventDnsBase::parseResolvConf";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:74:"public bool EventDnsBase::parseResolvConf ( int $flags, string $filename )";i:3;s:117:"Scans the resolv.conf-formatted file stored in filename, and read in all the options from it that are listed in flags";}
a:4:{i:0;s:23:"EventDnsBase::setOption";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:69:"public bool EventDnsBase::setOption ( string $option, string $value )";i:3;s:40:"Set the value of a configuration option.";}
a:4:{i:0;s:28:"EventDnsBase::setSearchNdots";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:55:"public bool EventDnsBase::setSearchNdots ( int $ndots )";i:3;s:140:"Set the parameter for searches. Sets the number of dots which, when found in a name, causes the first query to be without any search domain.";}
a:4:{i:0;s:17:"EventHttp::accept";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:47:"public bool EventHttp::accept ( mixed $socket )";i:3;s:133:"Makes an HTTP server accept connections on the specified socket stream or resource. The socket should be ready to accept connections.";}
a:4:{i:0;s:25:"EventHttp::addServerAlias";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:55:"public bool EventHttp::addServerAlias ( string $alias )";i:3;s:46:"Adds a server alias to the HTTP server object.";}
a:4:{i:0;s:15:"EventHttp::bind";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:58:"public void EventHttp::bind ( string $address, int $port )";i:3;s:55:"Binds an HTTP server on the specified address and port.";}
a:4:{i:0;s:22:"EventHttp::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:49:"public EventHttp::__construct ( EventBase $base )";i:3;s:34:"Constructs the HTTP server object.";}
a:4:{i:0;s:28:"EventHttp::removeServerAlias";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:58:"public bool EventHttp::removeServerAlias ( string $alias )";i:3;s:31:"Removes server alias added with";}
a:4:{i:0;s:28:"EventHttp::setAllowedMethods";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:57:"public void EventHttp::setAllowedMethods ( int $methods )";i:3;s:106:"Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks";}
a:4:{i:0;s:22:"EventHttp::setCallback";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:80:"public void EventHttp::setCallback ( string $path, string $cb [, string $arg ] )";i:3;s:34:"Sets a callback for specified URI.";}
a:4:{i:0;s:29:"EventHttp::setDefaultCallback";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:73:"public void EventHttp::setDefaultCallback ( string $cb [, string $arg ] )";i:3;s:82:"Sets default callback to handle requests that are not caught by specific callbacks";}
a:4:{i:0;s:25:"EventHttp::setMaxBodySize";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:52:"public void EventHttp::setMaxBodySize ( int $value )";i:3;s:31:"Sets maximum request body size.";}
a:4:{i:0;s:28:"EventHttp::setMaxHeadersSize";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:55:"public void EventHttp::setMaxHeadersSize ( int $value )";i:3;s:30:"Sets maximum HTTP header size.";}
a:4:{i:0;s:21:"EventHttp::setTimeout";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:48:"public void EventHttp::setTimeout ( int $value )";i:3;s:37:"Sets the timeout for an HTTP request.";}
a:4:{i:0;s:32:"EventHttpConnection::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:111:"public EventHttpConnection::__construct ( EventBase $base, EventDnsBase $dns_base, string $address, int $port )";i:3;s:38:"Constructs EventHttpConnection object.";}
a:4:{i:0;s:28:"EventHttpConnection::getBase";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:54:"public EventBase EventHttpConnection::getBase ( void )";i:3;s:50:"Returns event base associated with the connection.";}
a:4:{i:0;s:28:"EventHttpConnection::getPeer";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:73:"public void EventHttpConnection::getPeer ( string &$address, int &$port )";i:3;s:63:"Gets the remote address and port associated with the connection";}
a:4:{i:0;s:32:"EventHttpConnection::makeRequest";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:94:"public bool EventHttpConnection::makeRequest ( EventHttpRequest $req, int $type, string $uri )";i:3;s:73:"Makes an HTTP request over the specified connection. is one of constants.";}
a:4:{i:0;s:36:"EventHttpConnection::setLocalAddress";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:68:"public void EventHttpConnection::setLocalAddress ( string $address )";i:3;s:57:"Sets the IP address from which http connections are made.";}
a:4:{i:0;s:33:"EventHttpConnection::setLocalPort";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:59:"public void EventHttpConnection::setLocalPort ( int $port )";i:3;s:52:"Sets the local port from which connections are made.";}
a:4:{i:0;s:35:"EventHttpConnection::setMaxBodySize";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:68:"public void EventHttpConnection::setMaxBodySize ( string $max_size )";i:3;s:42:"Sets maximum body size for the connection.";}
a:4:{i:0;s:38:"EventHttpConnection::setMaxHeadersSize";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:71:"public void EventHttpConnection::setMaxHeadersSize ( string $max_size )";i:3;s:44:"Sets maximum header size for the connection.";}
a:4:{i:0;s:31:"EventHttpConnection::setRetries";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:60:"public void EventHttpConnection::setRetries ( int $retries )";i:3;s:39:"Sets the retry limit for the connection";}
a:4:{i:0;s:31:"EventHttpConnection::setTimeout";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:60:"public void EventHttpConnection::setTimeout ( int $timeout )";i:3;s:35:"Sets the timeout for the connection";}
a:4:{i:0;s:27:"EventHttpRequest::addHeader";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:81:"public bool EventHttpRequest::addHeader ( string $key, string $value, int $type )";i:3;s:50:"Adds an HTTP header to the headers of the request.";}
a:4:{i:0;s:24:"EventHttpRequest::cancel";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:45:"public void EventHttpRequest::cancel ( void )";i:3;s:31:"Cancels a pending HTTP request.";}
a:4:{i:0;s:30:"EventHttpRequest::clearHeaders";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:51:"public void EventHttpRequest::clearHeaders ( void )";i:3;s:63:"Removes all output headers from the header list of the request.";}
a:4:{i:0;s:29:"EventHttpRequest::__construct";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:83:"public EventHttpRequest::__construct ( callable $callback [, mixed $data = NULL ] )";i:3;s:35:"Constructs EventHttpRequest object.";}
a:4:{i:0;s:28:"EventHttpRequest::findHeader";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:70:"public void EventHttpRequest::findHeader ( string $key, string $type )";i:3;s:35:"Finds the value belonging a header.";}
a:4:{i:0;s:22:"EventHttpRequest::free";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:43:"public void EventHttpRequest::free ( void )";i:3;s:47:"Frees the object and removes associated events.";}
a:4:{i:0;s:28:"EventHttpRequest::getCommand";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:49:"public void EventHttpRequest::getCommand ( void )";i:3;s:46:"Returns the request command, one of constants.";}
a:4:{i:0;s:25:"EventHttpRequest::getHost";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:48:"public string EventHttpRequest::getHost ( void )";i:3;s:25:"Returns the request host.";}
a:4:{i:0;s:32:"EventHttpRequest::getInputBuffer";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:60:"public EventBuffer EventHttpRequest::getInputBuffer ( void )";i:3;s:25:"Returns the input buffer.";}
a:4:{i:0;s:33:"EventHttpRequest::getInputHeaders";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:55:"public array EventHttpRequest::getInputHeaders ( void )";i:3;s:47:"Returns associative array of the input headers.";}
a:4:{i:0;s:33:"EventHttpRequest::getOutputBuffer";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:61:"public EventBuffer EventHttpRequest::getOutputBuffer ( void )";i:3;s:41:"Returns the output buffer of the request.";}
a:4:{i:0;s:34:"EventHttpRequest::getOutputHeaders";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:55:"public void EventHttpRequest::getOutputHeaders ( void )";i:3;s:47:"Returns associative array of the input headers.";}
a:4:{i:0;s:33:"EventHttpRequest::getResponseCode";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:53:"public int EventHttpRequest::getResponseCode ( void )";i:3;s:30:"Returns the the response code.";}
a:4:{i:0;s:24:"EventHttpRequest::getUri";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:47:"public string EventHttpRequest::getUri ( void )";i:3;s:23:"Returns the request URI";}
a:4:{i:0;s:30:"EventHttpRequest::removeHeader";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:72:"public void EventHttpRequest::removeHeader ( string $key, string $type )";i:3;s:55:"Removes an HTTP header from the headers of the request.";}
a:4:{i:0;s:27:"EventHttpRequest::sendError";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:81:"public void EventHttpRequest::sendError ( int $error [, string $reason = NULL ] )";i:3;s:41:"Send an HTML error message to the client.";}
a:4:{i:0;s:27:"EventHttpRequest::sendReply";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:91:"public void EventHttpRequest::sendReply ( int $code, string $reason [, EventBuffer $buf ] )";i:3;s:95:"Send an HTML reply to the client. The body of the reply consists of data in optional parameter.";}
a:4:{i:0;s:32:"EventHttpRequest::sendReplyChunk";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:65:"public void EventHttpRequest::sendReplyChunk ( EventBuffer $buf )";i:3;s:101:"Send another data chunk as part of an ongoing chunked reply. After calling this method will be empty.";}
a:4:{i:0;s:30:"EventHttpRequest::sendReplyEnd";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:51:"public void EventHttpRequest::sendReplyEnd ( void )";i:3;s:61:"Complete a chunked reply, freeing the request as appropriate.";}
a:4:{i:0;s:32:"EventHttpRequest::sendReplyStart";i:1;s:26:"(PECL event >= 1.4.0-beta)";i:2;s:74:"public void EventHttpRequest::sendReplyStart ( int $code, string $reason )";i:3;s:28:"Initiate a reply that uses .";}
a:4:{i:0;s:26:"EventListener::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:121:"public EventListener::__construct ( EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target )";i:3;s:62:"Creates new connection listener associated with an event base.";}
a:4:{i:0;s:22:"EventListener::disable";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:43:"public bool EventListener::disable ( void )";i:3;s:41:"Disables an event connect listener object";}
a:4:{i:0;s:21:"EventListener::enable";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:42:"public bool EventListener::enable ( void )";i:3;s:40:"Enables an event connect listener object";}
a:4:{i:0;s:22:"EventListener::getBase";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:43:"public void EventListener::getBase ( void )";i:3;s:54:"Returns event base associated with the event listener.";}
a:4:{i:0;s:28:"EventListener::getSocketName";i:1;s:21:"(PECL event >= 1.5.0)";i:2;s:86:"public static bool EventListener::getSocketName ( string &$address [, mixed &$port ] )";i:3;s:70:"Retreives the current address to which the listener's socket is bound.";}
a:4:{i:0;s:26:"EventListener::setCallback";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:78:"public void EventListener::setCallback ( callable $cb [, mixed $arg = NULL ] )";i:3;s:78:"Adjust event connect listener's callback and optionally the callback argument.";}
a:4:{i:0;s:31:"EventListener::setErrorCallback";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:58:"public void EventListener::setErrorCallback ( string $cb )";i:3;s:35:"Set event listener's error callback";}
a:4:{i:0;s:28:"EventSslContext::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:71:"public EventSslContext::__construct ( string $method, string $options )";i:3;s:63:"Creates SSL context holding pointer to (see the system manual).";}
a:4:{i:0;s:22:"EventUtil::__construct";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:47:"abstract public EventUtil::__construct ( void )";i:3;s:114:"is a singleton. Therefore the constructor is abstract, and it is impossible to create objects based on this class.";}
a:4:{i:0;s:29:"EventUtil::getLastSocketErrno";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:75:"public static int EventUtil::getLastSocketErrno ([ mixed $socket = NULL ] )";i:3;s:47:"Returns the most recent socket error number( ).";}
a:4:{i:0;s:29:"EventUtil::getLastSocketError";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:71:"public static string EventUtil::getLastSocketError ([ mixed $socket ] )";i:3;s:37:"Returns the most recent socket error.";}
a:4:{i:0;s:22:"EventUtil::getSocketFd";i:1;s:21:"(PECL event >= 1.7.0)";i:2;s:58:"public static int EventUtil::getSocketFd ( mixed $socket )";i:3;s:171:"Returns numeric file descriptor of a socket or stream specified by argument just like the extension does it internally for all methods accepting socket resource or stream.";}
a:4:{i:0;s:24:"EventUtil::getSocketName";i:1;s:21:"(PECL event >= 1.5.0)";i:2;s:97:"public static bool EventUtil::getSocketName ( mixed $socket, string &$address [, mixed &$port ] )";i:3;s:52:"Retreives the current address to which the is bound.";}
a:4:{i:0;s:26:"EventUtil::setSocketOption";i:1;s:21:"(PECL event >= 1.6.0)";i:2;s:104:"public static bool EventUtil::setSocketOption ( mixed $socket, int $level, int $optname, mixed $optval )";i:3;s:20:"Sets socket options.";}
a:4:{i:0;s:22:"EventUtil::sslRandPoll";i:1;s:26:"(PECL event >= 1.2.6-beta)";i:2;s:50:"public static void EventUtil::sslRandPoll ( void )";i:3;s:64:"Generates entropy by means of OpenSSL's (see the system manual).";}
a:4:{i:0;s:18:"fam_cancel_monitor";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:64:"bool fam_cancel_monitor ( resource $fam, resource $fam_monitor )";i:3;s:36:"Terminates monitoring on a resource.";}
a:4:{i:0;s:9:"fam_close";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:32:"void fam_close ( resource $fam )";i:3;s:39:"Closes a connection to the FAM service.";}
a:4:{i:0;s:22:"fam_monitor_collection";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:92:"resource fam_monitor_collection ( resource $fam, string $dirname, int $depth, string $mask )";i:3;s:65:"Requests monitoring for a collection of files within a directory.";}
a:4:{i:0;s:21:"fam_monitor_directory";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:65:"resource fam_monitor_directory ( resource $fam, string $dirname )";i:3;s:60:"Requests monitoring for a directory and all contained files.";}
a:4:{i:0;s:16:"fam_monitor_file";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:61:"resource fam_monitor_file ( resource $fam, string $filename )";i:3;s:145:"Requests monitoring for a single file. A FAM event will be generated whenever the file status changes (i.e. the result of function on that file).";}
a:4:{i:0;s:14:"fam_next_event";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:38:"array fam_next_event ( resource $fam )";i:3;s:35:"Returns the next pending FAM event.";}
a:4:{i:0;s:8:"fam_open";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:40:"resource fam_open ([ string $appname ] )";i:3;s:45:"Opens a connection to the FAM service daemon.";}
a:4:{i:0;s:11:"fam_pending";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:33:"int fam_pending ( resource $fam )";i:3;s:30:"Checks for pending FAM events.";}
a:4:{i:0;s:18:"fam_resume_monitor";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:64:"bool fam_resume_monitor ( resource $fam, resource $fam_monitor )";i:3;s:61:"Resumes monitoring of a resource previously suspended using .";}
a:4:{i:0;s:19:"fam_suspend_monitor";i:1;s:16:"(PHP 5 <= 5.0.5)";i:2;s:65:"bool fam_suspend_monitor ( resource $fam, resource $fam_monitor )";i:3;s:45:"temporarily suspend monitoring of a resource.";}
a:4:{i:0;s:9:"ftp_alloc";i:1;s:7:"(PHP 5)";i:2;s:75:"bool ftp_alloc ( resource $ftp_stream, int $filesize [, string &$result ] )";i:3;s:86:"Sends an command to the remote FTP server to allocate space for a file to be uploaded.";}
a:4:{i:0;s:8:"ftp_cdup";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:38:"bool ftp_cdup ( resource $ftp_stream )";i:3;s:32:"Changes to the parent directory.";}
a:4:{i:0;s:9:"ftp_chdir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"bool ftp_chdir ( resource $ftp_stream, string $directory )";i:3;s:51:"Changes the current directory to the specified one.";}
a:4:{i:0;s:9:"ftp_chmod";i:1;s:7:"(PHP 5)";i:2;s:67:"int ftp_chmod ( resource $ftp_stream, int $mode, string $filename )";i:3;s:54:"Sets the permissions on the specified remote file to .";}
a:4:{i:0;s:9:"ftp_close";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:39:"bool ftp_close ( resource $ftp_stream )";i:3;s:51:"closes the given link identifier and releases the .";}
a:4:{i:0;s:11:"ftp_connect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:79:"resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )";i:3;s:42:"opens an FTP connection to the specified .";}
a:4:{i:0;s:10:"ftp_delete";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:54:"bool ftp_delete ( resource $ftp_stream, string $path )";i:3;s:50:"deletes the file specified by from the FTP server.";}
a:4:{i:0;s:8:"ftp_exec";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:55:"bool ftp_exec ( resource $ftp_stream, string $command )";i:3;s:44:"Sends a SITE EXEC request to the FTP server.";}
a:4:{i:0;s:8:"ftp_fget";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:112:"bool ftp_fget ( resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0 ] )";i:3;s:71:"retrieves from the FTP server, and writes it to the given file pointer.";}
a:4:{i:0;s:8:"ftp_fput";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:111:"bool ftp_fput ( resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0 ] )";i:3;s:72:"uploads the data from a file pointer to a remote file on the FTP server.";}
a:4:{i:0;s:14:"ftp_get_option";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:58:"mixed ftp_get_option ( resource $ftp_stream, int $option )";i:3;s:84:"This function returns the value for the requested from the specified FTP connection.";}
a:4:{i:0;s:7:"ftp_get";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:113:"bool ftp_get ( resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0 ] )";i:3;s:76:"retrieves a remote file from the FTP server, and saves it into a local file.";}
a:4:{i:0;s:9:"ftp_login";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:75:"bool ftp_login ( resource $ftp_stream, string $username, string $password )";i:3;s:32:"Logs in to the given FTP stream.";}
a:4:{i:0;s:8:"ftp_mdtm";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"int ftp_mdtm ( resource $ftp_stream, string $remote_file )";i:3;s:46:"gets the last modified time for a remote file.";}
a:4:{i:0;s:9:"ftp_mkdir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:60:"string ftp_mkdir ( resource $ftp_stream, string $directory )";i:3;s:40:"Creates the specified on the FTP server.";}
a:4:{i:0;s:15:"ftp_nb_continue";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:44:"int ftp_nb_continue ( resource $ftp_stream )";i:3;s:49:"Continues retrieving/sending a file non-blocking.";}
a:4:{i:0;s:11:"ftp_nb_fget";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:114:"int ftp_nb_fget ( resource $ftp_stream, resource $handle, string $remote_file, int $mode [, int $resumepos = 0 ] )";i:3;s:44:"retrieves a remote file from the FTP server.";}
a:4:{i:0;s:11:"ftp_nb_fput";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:113:"int ftp_nb_fput ( resource $ftp_stream, string $remote_file, resource $handle, int $mode [, int $startpos = 0 ] )";i:3;s:72:"uploads the data from a file pointer to a remote file on the FTP server.";}
a:4:{i:0;s:10:"ftp_nb_get";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:115:"int ftp_nb_get ( resource $ftp_stream, string $local_file, string $remote_file, int $mode [, int $resumepos = 0 ] )";i:3;s:76:"retrieves a remote file from the FTP server, and saves it into a local file.";}
a:4:{i:0;s:10:"ftp_nb_put";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:114:"int ftp_nb_put ( resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0 ] )";i:3;s:38:"stores a local file on the FTP server.";}
a:4:{i:0;s:9:"ftp_nlist";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:59:"array ftp_nlist ( resource $ftp_stream, string $directory )";i:3;s:0:"";}
a:4:{i:0;s:8:"ftp_pasv";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"bool ftp_pasv ( resource $ftp_stream, bool $pasv )";i:3;s:170:"turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall.";}
a:4:{i:0;s:7:"ftp_put";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:112:"bool ftp_put ( resource $ftp_stream, string $remote_file, string $local_file, int $mode [, int $startpos = 0 ] )";i:3;s:38:"stores a local file on the FTP server.";}
a:4:{i:0;s:7:"ftp_pwd";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"string ftp_pwd ( resource $ftp_stream )";i:3;s:0:"";}
a:4:{i:0;s:8:"ftp_quit";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:7:"ftp_raw";i:1;s:7:"(PHP 5)";i:2;s:55:"array ftp_raw ( resource $ftp_stream, string $command )";i:3;s:37:"Sends an arbitrary to the FTP server.";}
a:4:{i:0;s:11:"ftp_rawlist";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:90:"array ftp_rawlist ( resource $ftp_stream, string $directory [, bool $recursive = false ] )";i:3;s:61:"executes the FTP command, and returns the result as an array.";}
a:4:{i:0;s:10:"ftp_rename";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"bool ftp_rename ( resource $ftp_stream, string $oldname, string $newname )";i:3;s:48:"renames a file or a directory on the FTP server.";}
a:4:{i:0;s:9:"ftp_rmdir";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"bool ftp_rmdir ( resource $ftp_stream, string $directory )";i:3;s:40:"Removes the specified on the FTP server.";}
a:4:{i:0;s:14:"ftp_set_option";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:71:"bool ftp_set_option ( resource $ftp_stream, int $option, mixed $value )";i:3;s:76:"This function controls various runtime options for the specified FTP stream.";}
a:4:{i:0;s:8:"ftp_site";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"bool ftp_site ( resource $ftp_stream, string $command )";i:3;s:42:"sends the given command to the FTP server.";}
a:4:{i:0;s:8:"ftp_size";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"int ftp_size ( resource $ftp_stream, string $remote_file )";i:3;s:44:"returns the size of the given file in bytes.";}
a:4:{i:0;s:15:"ftp_ssl_connect";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:83:"resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )";i:3;s:55:"opens an explicit SSL-FTP connection to the specified .";}
a:4:{i:0;s:11:"ftp_systype";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"string ftp_systype ( resource $ftp_stream )";i:3;s:60:"Returns the system type identifier of the remote FTP server.";}
a:4:{i:0;s:25:"GearmanClient::addOptions";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:54:"public bool GearmanClient::addOptions ( int $options )";i:3;s:46:"Adds one or more options to those already set.";}
a:4:{i:0;s:24:"GearmanClient::addServer";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:89:"public bool GearmanClient::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )";i:3;s:138:"Adds a job server to a list of servers that can be used to run a task. No socket I/O happens here; the server is simply added to the list.";}
a:4:{i:0;s:25:"GearmanClient::addServers";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:77:"public bool GearmanClient::addServers ([ string $servers = 127.0.0.1:4730 ] )";i:3;s:144:"Adds a list of job servers that can be used to run a task. No socket I/O happens here; the servers are simply added to the full list of servers.";}
a:4:{i:0;s:22:"GearmanClient::addTask";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:125:"public GearmanTask GearmanClient::addTask ( string $function_name, string $workload [, mixed &$context [, string $unique ]] )";i:3;s:224:"Adds a task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call to perform the work. Note that enough workers need to be available for the tasks to all run in parallel.";}
a:4:{i:0;s:32:"GearmanClient::addTaskBackground";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:135:"public GearmanTask GearmanClient::addTaskBackground ( string $function_name, string $workload [, mixed &$context [, string $unique ]] )";i:3;s:151:"Adds a background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call to perform the work.";}
a:4:{i:0;s:26:"GearmanClient::addTaskHigh";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:129:"public GearmanTask GearmanClient::addTaskHigh ( string $function_name, string $workload [, mixed &$context [, string $unique ]] )";i:3;s:267:"Adds a high priority task to be run in parallel with other tasks. Call this method for all the high priority tasks to be run in parallel, then call to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.";}
a:4:{i:0;s:36:"GearmanClient::addTaskHighBackground";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:139:"public GearmanTask GearmanClient::addTaskHighBackground ( string $function_name, string $workload [, mixed &$context [, string $unique ]] )";i:3;s:264:"Adds a high priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.";}
a:4:{i:0;s:25:"GearmanClient::addTaskLow";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:128:"public GearmanTask GearmanClient::addTaskLow ( string $function_name, string $workload [, mixed &$context [, string $unique ]] )";i:3;s:261:"Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call to perform the work. Tasks with a low priority will be selected from the queue after those of normal or low priority.";}
a:4:{i:0;s:35:"GearmanClient::addTaskLowBackground";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:138:"public GearmanTask GearmanClient::addTaskLowBackground ( string $function_name, string $workload [, mixed &$context [, string $unique ]] )";i:3;s:262:"Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call to perform the work. Tasks with a low priority will be selected from the queue after those of normal or high priority.";}
a:4:{i:0;s:28:"GearmanClient::addTaskStatus";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:92:"public GearmanTask GearmanClient::addTaskStatus ( string $job_handle [, string &$context ] )";i:3;s:119:"Used to request status information from the Gearman server, which will call the specified status callback (set using ).";}
a:4:{i:0;s:29:"GearmanClient::clearCallbacks";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:50:"public bool GearmanClient::clearCallbacks ( void )";i:3;s:69:"Clears all the task callback functions that have previously been set.";}
a:4:{i:0;s:20:"GearmanClient::clone";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:50:"public GearmanClient GearmanClient::clone ( void )";i:3;s:27:"Creates a copy of a object.";}
a:4:{i:0;s:26:"GearmanClient::__construct";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:42:"public GearmanClient::__construct ( void )";i:3;s:103:"Creates a instance representing a client that connects to the job server and submits tasks to complete.";}
a:4:{i:0;s:22:"GearmanClient::context";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:45:"public string GearmanClient::context ( void )";i:3;s:49:"Get the application context previously set with .";}
a:4:{i:0;s:19:"GearmanClient::data";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:42:"public string GearmanClient::data ( void )";i:3;s:46:"Get the application data previously set with .";}
a:4:{i:0;s:17:"GearmanClient::do";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:95:"public string GearmanClient::do ( string $function_name, string $workload [, string $unique ] )";i:3;s:56:"The method is deprecated as of pecl/gearman 1.0.0. Use .";}
a:4:{i:0;s:27:"GearmanClient::doBackground";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:105:"public string GearmanClient::doBackground ( string $function_name, string $workload [, string $unique ] )";i:3;s:110:"Runs a task in the background, returning a job handle which can be used to get the status of the running task.";}
a:4:{i:0;s:21:"GearmanClient::doHigh";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:99:"public string GearmanClient::doHigh ( string $function_name, string $workload [, string $unique ] )";i:3;s:234:"Runs a single high priority task and returns a string representation of the result. It is up to the and to agree on the format of the result. High priority tasks will get precedence over normal and low priority tasks in the job queue.";}
a:4:{i:0;s:31:"GearmanClient::doHighBackground";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:109:"public string GearmanClient::doHighBackground ( string $function_name, string $workload [, string $unique ] )";i:3;s:213:"Runs a high priority task in the background, returning a job handle which can be used to get the status of the running task. High priority tasks take precedence over normal and low priority tasks in the job queue.";}
a:4:{i:0;s:26:"GearmanClient::doJobHandle";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:49:"public string GearmanClient::doJobHandle ( void )";i:3;s:148:"Gets that job handle for a running task. This should be used between repeated calls. The job handle can then be used to get information on the task.";}
a:4:{i:0;s:20:"GearmanClient::doLow";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:98:"public string GearmanClient::doLow ( string $function_name, string $workload [, string $unique ] )";i:3;s:233:"Runs a single low priority task and returns a string representation of the result. It is up to the and to agree on the format of the result. Normal and high priority tasks will get precedence over low priority tasks in the job queue.";}
a:4:{i:0;s:30:"GearmanClient::doLowBackground";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:108:"public string GearmanClient::doLowBackground ( string $function_name, string $workload [, string $unique ] )";i:3;s:212:"Runs a low priority task in the background, returning a job handle which can be used to get the status of the running task. Normal and high priority tasks take precedence over low priority tasks in the job queue.";}
a:4:{i:0;s:23:"GearmanClient::doNormal";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:101:"public string GearmanClient::doNormal ( string $function_name, string $workload [, string $unique ] )";i:3;s:127:"Runs a single task and returns a string representation of the result. It is up to the and to agree on the format of the result.";}
a:4:{i:0;s:23:"GearmanClient::doStatus";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:45:"public array GearmanClient::doStatus ( void )";i:3;s:84:"Returns the status for the running task. This should be used between repeated calls.";}
a:4:{i:0;s:19:"GearmanClient::echo";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:52:"public bool GearmanClient::echo ( string $workload )";i:3;s:56:"The method is deprecated as of pecl/gearman 1.0.0. Use .";}
a:4:{i:0;s:20:"GearmanClient::error";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:43:"public string GearmanClient::error ( void )";i:3;s:55:"Returns an error string for the last error encountered.";}
a:4:{i:0;s:23:"GearmanClient::getErrno";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:43:"public int GearmanClient::getErrno ( void )";i:3;s:59:"Value of errno in the case of a GEARMAN_ERRNO return value.";}
a:4:{i:0;s:24:"GearmanClient::jobStatus";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:60:"public array GearmanClient::jobStatus ( string $job_handle )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"GearmanClient::ping";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:52:"public bool GearmanClient::ping ( string $workload )";i:3;s:172:"Sends some arbitrary data to all job servers to see if they echo it back. The data sent is not used or processed in any other way. Primarily used for testing and debugging.";}
a:4:{i:0;s:28:"GearmanClient::removeOptions";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:57:"public bool GearmanClient::removeOptions ( int $options )";i:3;s:37:"Removes (unsets) one or more options.";}
a:4:{i:0;s:25:"GearmanClient::returnCode";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:45:"public int GearmanClient::returnCode ( void )";i:3;s:37:"Returns the last Gearman return code.";}
a:4:{i:0;s:23:"GearmanClient::runTasks";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:44:"public bool GearmanClient::runTasks ( void )";i:3;s:99:"For a set of tasks previously added with, ,, ,, or, this call starts running the tasks in parallel.";}
a:4:{i:0;s:32:"GearmanClient::setClientCallback";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:67:"public void GearmanClient::setClientCallback ( callable $callback )";i:3;s:128:"Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a object.";}
a:4:{i:0;s:34:"GearmanClient::setCompleteCallback";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:69:"public bool GearmanClient::setCompleteCallback ( callable $callback )";i:3;s:124:"Use to set a function to be called when a task is completed. The callback function should accept a single argument, a oject.";}
a:4:{i:0;s:25:"GearmanClient::setContext";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:57:"public bool GearmanClient::setContext ( string $context )";i:3;s:88:"Sets an arbitrary string to provide application context that can later be retrieved by .";}
a:4:{i:0;s:33:"GearmanClient::setCreatedCallback";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:66:"public bool GearmanClient::setCreatedCallback ( string $callback )";i:3;s:145:"Sets a function to be called when a task is received and queued by the Gearman job server. The callback should accept a single argument, a oject.";}
a:4:{i:0;s:22:"GearmanClient::setData";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:51:"public bool GearmanClient::setData ( string $data )";i:3;s:69:"Sets some arbitrary application data that can later be retrieved by .";}
a:4:{i:0;s:30:"GearmanClient::setDataCallback";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:65:"public bool GearmanClient::setDataCallback ( callable $callback )";i:3;s:128:"Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a object.";}
a:4:{i:0;s:35:"GearmanClient::setExceptionCallback";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:70:"public bool GearmanClient::setExceptionCallback ( callable $callback )";i:3;s:73:"Specifies a function to call when a worker for a task sends an exception.";}
a:4:{i:0;s:30:"GearmanClient::setFailCallback";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:65:"public bool GearmanClient::setFailCallback ( callable $callback )";i:3;s:137:"Sets the callback function to be used when a task does not complete successfully. The function should accept a single argument, a object.";}
a:4:{i:0;s:25:"GearmanClient::setOptions";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:54:"public bool GearmanClient::setOptions ( int $options )";i:3;s:32:"Sets one or more client options.";}
a:4:{i:0;s:32:"GearmanClient::setStatusCallback";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:67:"public bool GearmanClient::setStatusCallback ( callable $callback )";i:3;s:139:"Sets a callback function used for getting updated status information from a worker. The function should accept a single argument, a object.";}
a:4:{i:0;s:25:"GearmanClient::setTimeout";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:54:"public bool GearmanClient::setTimeout ( int $timeout )";i:3;s:41:"Sets the timeout for socket I/O activity.";}
a:4:{i:0;s:33:"GearmanClient::setWarningCallback";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:68:"public bool GearmanClient::setWarningCallback ( callable $callback )";i:3;s:115:"Sets a function to be called when a worker sends a warning. The callback should accept a single argument, a object.";}
a:4:{i:0;s:34:"GearmanClient::setWorkloadCallback";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:69:"public bool GearmanClient::setWorkloadCallback ( callable $callback )";i:3;s:261:"Sets a function to be called when a worker needs to send back data prior to job completion. A worker can do this when it needs to send updates, send partial results, or flush data during long running jobs. The callback should accept a single argument, a object.";}
a:4:{i:0;s:22:"GearmanClient::timeout";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:42:"public int GearmanClient::timeout ( void )";i:3;s:61:"Returns the timeout in milliseconds to wait for I/O activity.";}
a:4:{i:0;s:20:"GearmanJob::complete";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:51:"public bool GearmanJob::complete ( string $result )";i:3;s:62:"Sends result data and the complete status update for this job.";}
a:4:{i:0;s:23:"GearmanJob::__construct";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:39:"public GearmanJob::__construct ( void )";i:3;s:64:"Creates a instance representing a job the worker is to complete.";}
a:4:{i:0;s:16:"GearmanJob::data";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:45:"public bool GearmanJob::data ( string $data )";i:3;s:70:"Sends data to the job server (and any listening clients) for this job.";}
a:4:{i:0;s:21:"GearmanJob::exception";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:55:"public bool GearmanJob::exception ( string $exception )";i:3;s:54:"Sends the supplied exception when this job is running.";}
a:4:{i:0;s:16:"GearmanJob::fail";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:37:"public bool GearmanJob::fail ( void )";i:3;s:131:"Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception).";}
a:4:{i:0;s:24:"GearmanJob::functionName";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:47:"public string GearmanJob::functionName ( void )";i:3;s:102:"Returns the function name for this job. This is the function the work will execute to perform the job.";}
a:4:{i:0;s:18:"GearmanJob::handle";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:41:"public string GearmanJob::handle ( void )";i:3;s:57:"Returns the opaque job handle assigned by the job server.";}
a:4:{i:0;s:22:"GearmanJob::returnCode";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:42:"public int GearmanJob::returnCode ( void )";i:3;s:54:"Returns the last return code issued by the job server.";}
a:4:{i:0;s:24:"GearmanJob::sendComplete";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:55:"public bool GearmanJob::sendComplete ( string $result )";i:3;s:62:"Sends result data and the complete status update for this job.";}
a:4:{i:0;s:20:"GearmanJob::sendData";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:49:"public bool GearmanJob::sendData ( string $data )";i:3;s:70:"Sends data to the job server (and any listening clients) for this job.";}
a:4:{i:0;s:25:"GearmanJob::sendException";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:59:"public bool GearmanJob::sendException ( string $exception )";i:3;s:54:"Sends the supplied exception when this job is running.";}
a:4:{i:0;s:20:"GearmanJob::sendFail";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:41:"public bool GearmanJob::sendFail ( void )";i:3;s:131:"Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception).";}
a:4:{i:0;s:22:"GearmanJob::sendStatus";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:71:"public bool GearmanJob::sendStatus ( int $numerator, int $denominator )";i:3;s:136:"Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed.";}
a:4:{i:0;s:23:"GearmanJob::sendWarning";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:55:"public bool GearmanJob::sendWarning ( string $warning )";i:3;s:49:"Sends a warning for this job while it is running.";}
a:4:{i:0;s:21:"GearmanJob::setReturn";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:59:"public bool GearmanJob::setReturn ( int $gearman_return_t )";i:3;s:68:"Sets the return value for this job, indicates how the job completed.";}
a:4:{i:0;s:18:"GearmanJob::status";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:67:"public bool GearmanJob::status ( int $numerator, int $denominator )";i:3;s:136:"Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed.";}
a:4:{i:0;s:18:"GearmanJob::unique";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:41:"public string GearmanJob::unique ( void )";i:3;s:86:"Returns the unique identifiter for this job. The identifier is assigned by the client.";}
a:4:{i:0;s:19:"GearmanJob::warning";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:51:"public bool GearmanJob::warning ( string $warning )";i:3;s:49:"Sends a warning for this job while it is running.";}
a:4:{i:0;s:20:"GearmanJob::workload";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:43:"public string GearmanJob::workload ( void )";i:3;s:96:"Returns the workload for the job. This is serialized data that is to be processed by the worker.";}
a:4:{i:0;s:24:"GearmanJob::workloadSize";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:44:"public int GearmanJob::workloadSize ( void )";i:3;s:85:"Returns the size of the job's work load (the data the worker is to process) in bytes.";}
a:4:{i:0;s:24:"GearmanTask::__construct";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:40:"public GearmanTask::__construct ( void )";i:3;s:71:"Creates a instance representing a task to be submitted to a job server.";}
a:4:{i:0;s:19:"GearmanTask::create";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:47:"public GearmanTask GearmanTask::create ( void )";i:3;s:21:"Returns a new object.";}
a:4:{i:0;s:17:"GearmanTask::data";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:40:"public string GearmanTask::data ( void )";i:3;s:51:"Returns data being returned for a task by a worker.";}
a:4:{i:0;s:21:"GearmanTask::dataSize";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:41:"public int GearmanTask::dataSize ( void )";i:3;s:55:"Returns the size of the data being returned for a task.";}
a:4:{i:0;s:21:"GearmanTask::function";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:44:"public string GearmanTask::function ( void )";i:3;s:107:"Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls.";}
a:4:{i:0;s:25:"GearmanTask::functionName";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:48:"public string GearmanTask::functionName ( void )";i:3;s:107:"Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls.";}
a:4:{i:0;s:20:"GearmanTask::isKnown";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:41:"public bool GearmanTask::isKnown ( void )";i:3;s:84:"Gets the status information for whether or not this task is known to the job server.";}
a:4:{i:0;s:22:"GearmanTask::isRunning";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:43:"public bool GearmanTask::isRunning ( void )";i:3;s:56:"Indicates whether or not this task is currently running.";}
a:4:{i:0;s:22:"GearmanTask::jobHandle";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:45:"public string GearmanTask::jobHandle ( void )";i:3;s:37:"Returns the job handle for this task.";}
a:4:{i:0;s:21:"GearmanTask::recvData";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:52:"public array GearmanTask::recvData ( int $data_len )";i:3;s:0:"";}
a:4:{i:0;s:23:"GearmanTask::returnCode";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:43:"public int GearmanTask::returnCode ( void )";i:3;s:51:"Returns the last Gearman return code for this task.";}
a:4:{i:0;s:21:"GearmanTask::sendData";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:49:"public int GearmanTask::sendData ( string $data )";i:3;s:0:"";}
a:4:{i:0;s:25:"GearmanTask::sendWorkload";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:53:"public int GearmanTask::sendWorkload ( string $data )";i:3;s:0:"";}
a:4:{i:0;s:28:"GearmanTask::taskDenominator";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:48:"public int GearmanTask::taskDenominator ( void )";i:3;s:95:"Returns the denominator of the percentage of the task that is complete expressed as a fraction.";}
a:4:{i:0;s:26:"GearmanTask::taskNumerator";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:46:"public int GearmanTask::taskNumerator ( void )";i:3;s:93:"Returns the numerator of the percentage of the task that is complete expressed as a fraction.";}
a:4:{i:0;s:19:"GearmanTask::unique";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:42:"public string GearmanTask::unique ( void )";i:3;s:138:"Returns the unique identifier for this task. This is assigned by the, as opposed to the job handle which is set by the Gearman job server.";}
a:4:{i:0;s:17:"GearmanTask::uuid";i:1;s:23:"(PECL gearman <= 0.5.0)";i:2;s:40:"public string GearmanTask::uuid ( void )";i:3;s:138:"Returns the unique identifier for this task. This is assigned by the, as opposed to the job handle which is set by the Gearman job server.";}
a:4:{i:0;s:26:"GearmanWorker::addFunction";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:122:"public bool GearmanWorker::addFunction ( string $function_name, callable $function [, mixed &$context [, int $timeout ]] )";i:3;s:206:"Registers a function name with the job server and specifies a callback corresponding to that function. Optionally specify extra application context data to be used when the callback is called and a timeout.";}
a:4:{i:0;s:25:"GearmanWorker::addOptions";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:53:"public bool GearmanWorker::addOptions ( int $option )";i:3;s:55:"Adds one or more options to the options previously set.";}
a:4:{i:0;s:24:"GearmanWorker::addServer";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:89:"public bool GearmanWorker::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )";i:3;s:124:"Adds a job server to this worker. This goes into a list of servers than can be used to run jobs. No socket I/O happens here.";}
a:4:{i:0;s:25:"GearmanWorker::addServers";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:74:"public bool GearmanWorker::addServers ( string $servers = 127.0.0.1:4730 )";i:3;s:134:"Adds one or more job servers to this worker. These go into a list of servers that can be used to run jobs. No socket I/O happens here.";}
a:4:{i:0;s:20:"GearmanWorker::clone";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:41:"public void GearmanWorker::clone ( void )";i:3;s:29:"Creates a copy of the worker.";}
a:4:{i:0;s:26:"GearmanWorker::__construct";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:42:"public GearmanWorker::__construct ( void )";i:3;s:98:"Creates a instance representing a worker that connects to the job server and accepts tasks to run.";}
a:4:{i:0;s:19:"GearmanWorker::echo";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:52:"public bool GearmanWorker::echo ( string $workload )";i:3;s:129:"Sends data to all job servers to see if they echo it back. This is a test function to see if job servers are responding properly.";}
a:4:{i:0;s:20:"GearmanWorker::error";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:43:"public string GearmanWorker::error ( void )";i:3;s:55:"Returns an error string for the last error encountered.";}
a:4:{i:0;s:23:"GearmanWorker::getErrno";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:43:"public int GearmanWorker::getErrno ( void )";i:3;s:71:"Returns the value of errno in the case of a GEARMAN_ERRNO return value.";}
a:4:{i:0;s:22:"GearmanWorker::options";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:42:"public int GearmanWorker::options ( void )";i:3;s:47:"Gets the options previously set for the worker.";}
a:4:{i:0;s:23:"GearmanWorker::register";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:79:"public bool GearmanWorker::register ( string $function_name [, int $timeout ] )";i:3;s:215:"Registers a function name with the job server with an optional timeout. The timeout specifies how many seconds the server will wait before marking a job as failed. If the timeout is set to zero, there is no timeout.";}
a:4:{i:0;s:28:"GearmanWorker::removeOptions";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:56:"public bool GearmanWorker::removeOptions ( int $option )";i:3;s:44:"Removes (unsets) one or more worker options.";}
a:4:{i:0;s:25:"GearmanWorker::returnCode";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:45:"public int GearmanWorker::returnCode ( void )";i:3;s:37:"Returns the last Gearman return code.";}
a:4:{i:0;s:20:"GearmanWorker::setId";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:47:"public bool GearmanWorker::setId ( string $id )";i:3;s:33:"Assigns the worker an identifier.";}
a:4:{i:0;s:25:"GearmanWorker::setOptions";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:53:"public bool GearmanWorker::setOptions ( int $option )";i:3;s:47:"Sets one or more options to the supplied value.";}
a:4:{i:0;s:25:"GearmanWorker::setTimeout";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:54:"public bool GearmanWorker::setTimeout ( int $timeout )";i:3;s:58:"Sets the interval of time to wait for socket I/O activity.";}
a:4:{i:0;s:22:"GearmanWorker::timeout";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:42:"public int GearmanWorker::timeout ( void )";i:3;s:75:"Returns the current time to wait, in milliseconds, for socket I/O activity.";}
a:4:{i:0;s:25:"GearmanWorker::unregister";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:63:"public bool GearmanWorker::unregister ( string $function_name )";i:3;s:120:"Unregisters a function name with the job servers ensuring that no more jobs (for that function) are sent to this worker.";}
a:4:{i:0;s:28:"GearmanWorker::unregisterAll";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:49:"public bool GearmanWorker::unregisterAll ( void )";i:3;s:100:"Unregisters all previously registered functions, ensuring that no more jobs are sent to this worker.";}
a:4:{i:0;s:19:"GearmanWorker::wait";i:1;s:23:"(PECL gearman >= 0.6.0)";i:2;s:40:"public bool GearmanWorker::wait ( void )";i:3;s:177:"Causes the worker to wait for activity from one of the Gearman job servers when operating in non-blocking I/O mode. On failure, issues a with the last Gearman error encountered.";}
a:4:{i:0;s:19:"GearmanWorker::work";i:1;s:23:"(PECL gearman >= 0.5.0)";i:2;s:40:"public bool GearmanWorker::work ( void )";i:3;s:159:"Waits for a job to be assigned and then calls the appropriate callback function. Issues an with the last Gearman error if the return code is not one of, , or .";}
a:4:{i:0;s:15:"gopher_parsedir";i:1;s:24:"(PECL net_gopher >= 0.1)";i:2;s:40:"array gopher_parsedir ( string $dirent )";i:3;s:68:"parses a gopher formatted directory entry into an associative array.";}
a:4:{i:0;s:25:"gupnp_context_get_host_ip";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:54:"string gupnp_context_get_host_ip ( resource $context )";i:3;s:51:"Get the IP address we advertise ourselves as using.";}
a:4:{i:0;s:22:"gupnp_context_get_port";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:48:"int gupnp_context_get_port ( resource $context )";i:3;s:48:"Get the port that the SOAP server is running on.";}
a:4:{i:0;s:38:"gupnp_context_get_subscription_timeout";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:64:"int gupnp_context_get_subscription_timeout ( resource $context )";i:3;s:82:"Get the event subscription timeout (in seconds), or 0 meaning there is no timeout.";}
a:4:{i:0;s:23:"gupnp_context_host_path";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:91:"bool gupnp_context_host_path ( resource $context, string $local_path, string $server_path )";i:3;s:146:"Start hosting at . Files with the path .LOCALE (if they exist) will be served up when LOCALE is specified in the request's Accept-Language header.";}
a:4:{i:0;s:17:"gupnp_context_new";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:67:"resource gupnp_context_new ([ string $host_ip [, int $port = 0 ]] )";i:3;s:57:"Create a new context with the specified host_ip and port.";}
a:4:{i:0;s:38:"gupnp_context_set_subscription_timeout";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:79:"void gupnp_context_set_subscription_timeout ( resource $context, int $timeout )";i:3;s:132:"Sets the event subscription timeout (in seconds) to time out. Note that any client side subscriptions will automatically be renewed.";}
a:4:{i:0;s:25:"gupnp_context_timeout_add";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:99:"bool gupnp_context_timeout_add ( resource $context, int $timeout, mixed $callback [, mixed $arg ] )";i:3;s:50:"Sets a function to be called at regular intervals.";}
a:4:{i:0;s:25:"gupnp_context_unhost_path";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:73:"bool gupnp_context_unhost_path ( resource $context, string $server_path )";i:3;s:36:"Stop hosting the file or folder at .";}
a:4:{i:0;s:32:"gupnp_control_point_browse_start";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:58:"bool gupnp_control_point_browse_start ( resource $cpoint )";i:3;s:49:"Start the search and calls user-defined callback.";}
a:4:{i:0;s:31:"gupnp_control_point_browse_stop";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:57:"bool gupnp_control_point_browse_stop ( resource $cpoint )";i:3;s:48:"Stop the search and calls user-defined callback.";}
a:4:{i:0;s:32:"gupnp_control_point_callback_set";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:104:"bool gupnp_control_point_callback_set ( resource $cpoint, int $signal, mixed $callback [, mixed $arg ] )";i:3;s:47:"Set control point callback function for signal.";}
a:4:{i:0;s:23:"gupnp_control_point_new";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:70:"resource gupnp_control_point_new ( resource $context, string $target )";i:3;s:53:"Create a new control point with the specified target.";}
a:4:{i:0;s:32:"gupnp_device_action_callback_set";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:130:"bool gupnp_device_action_callback_set ( resource $root_device, int $signal, string $action_name, mixed $callback [, mixed $arg ] )";i:3;s:51:"Set device callback function for signal and action.";}
a:4:{i:0;s:29:"gupnp_device_info_get_service";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:78:"resource gupnp_device_info_get_service ( resource $root_device, string $type )";i:3;s:63:"Get the service with type or false if no such device was found.";}
a:4:{i:0;s:21:"gupnp_device_info_get";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:53:"array gupnp_device_info_get ( resource $root_device )";i:3;s:24:"Get info of root device.";}
a:4:{i:0;s:31:"gupnp_root_device_get_available";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:62:"bool gupnp_root_device_get_available ( resource $root_device )";i:3;s:58:"Get whether or not is available (announcing its presence).";}
a:4:{i:0;s:39:"gupnp_root_device_get_relative_location";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:72:"string gupnp_root_device_get_relative_location ( resource $root_device )";i:3;s:41:"Get the relative location of root device.";}
a:4:{i:0;s:21:"gupnp_root_device_new";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:95:"resource gupnp_root_device_new ( resource $context, string $location, string $description_dir )";i:3;s:73:"Create a new root device, automatically downloading and parsing location.";}
a:4:{i:0;s:31:"gupnp_root_device_set_available";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:79:"bool gupnp_root_device_set_available ( resource $root_device, bool $available )";i:3;s:75:"Controls whether or not root_device is available (announcing its presence).";}
a:4:{i:0;s:23:"gupnp_root_device_start";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:54:"bool gupnp_root_device_start ( resource $root_device )";i:3;s:30:"Start root server's main loop.";}
a:4:{i:0;s:22:"gupnp_root_device_stop";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:53:"bool gupnp_root_device_stop ( resource $root_device )";i:3;s:29:"Stop root server's main loop.";}
a:4:{i:0;s:24:"gupnp_service_action_get";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:76:"mixed gupnp_service_action_get ( resource $action, string $name, int $type )";i:3;s:41:"Retrieves the specified action arguments.";}
a:4:{i:0;s:33:"gupnp_service_action_return_error";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:107:"bool gupnp_service_action_return_error ( resource $action, int $error_code [, string $error_description ] )";i:3;s:18:"Return error code.";}
a:4:{i:0;s:27:"gupnp_service_action_return";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:53:"bool gupnp_service_action_return ( resource $action )";i:3;s:20:"Return successfully.";}
a:4:{i:0;s:24:"gupnp_service_action_set";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:89:"bool gupnp_service_action_set ( resource $action, string $name, int $type, mixed $value )";i:3;s:40:"Sets the specified action return values.";}
a:4:{i:0;s:27:"gupnp_service_freeze_notify";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:54:"bool gupnp_service_freeze_notify ( resource $service )";i:3;s:57:"Causes new notifications to be queued up until is called.";}
a:4:{i:0;s:36:"gupnp_service_info_get_introspection";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:98:"mixed gupnp_service_info_get_introspection ( resource $proxy [, mixed $callback [, mixed $arg ]] )";i:3;s:97:"Get resource introspection of service or register callback if corresponding parameter was passed.";}
a:4:{i:0;s:22:"gupnp_service_info_get";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:48:"array gupnp_service_info_get ( resource $proxy )";i:3;s:25:"Get full info of service.";}
a:4:{i:0;s:47:"
gupnp_service_introspection_get_state_variable";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:103:"array gupnp_service_introspection_get_state_variable ( resource $introspection, string $variable_name )";i:3;s:60:"Returns the state variable data by the name in this service.";}
a:4:{i:0;s:20:"gupnp_service_notify";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:86:"bool gupnp_service_notify ( resource $service, string $name, int $type, mixed $value )";i:3;s:82:"Notifies listening clients that the property have changed to the specified values.";}
a:4:{i:0;s:30:"gupnp_service_proxy_action_get";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:97:"mixed gupnp_service_proxy_action_get ( resource $proxy, string $action, string $name, int $type )";i:3;s:88:"Send action with parameters to the service exposed by proxy synchronously and get value.";}
a:4:{i:0;s:30:"gupnp_service_proxy_action_set";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:110:"bool gupnp_service_proxy_action_set ( resource $proxy, string $action, string $name, mixed $value, int $type )";i:3;s:88:"Send action with parameters to the service exposed by proxy synchronously and set value.";}
a:4:{i:0;s:30:"gupnp_service_proxy_add_notify";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:114:"bool gupnp_service_proxy_add_notify ( resource $proxy, string $value, int $type, mixed $callback [, mixed $arg ] )";i:3;s:86:"Sets up callback to be called whenever a change notification for variable is recieved.";}
a:4:{i:0;s:32:"gupnp_service_proxy_callback_set";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:103:"bool gupnp_service_proxy_callback_set ( resource $proxy, int $signal, mixed $callback [, mixed $arg ] )";i:3;s:38:"Set service proxy callback for signal.";}
a:4:{i:0;s:34:"gupnp_service_proxy_get_subscribed";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:59:"bool gupnp_service_proxy_get_subscribed ( resource $proxy )";i:3;s:51:"Check whether subscription is valid to the service.";}
a:4:{i:0;s:33:"gupnp_service_proxy_remove_notify";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:73:"bool gupnp_service_proxy_remove_notify ( resource $proxy, string $value )";i:3;s:41:"Cancels the variable change notification.";}
a:4:{i:0;s:31:"gupnp_service_proxy_send_action";i:1;s:21:"(PECL gupnp >= 0.2.0)";i:2;s:110:"array gupnp_service_proxy_send_action ( resource $proxy, string $action, array $in_params, array $out_params )";i:3;s:116:"Send action action with parameters to the service exposed by proxy synchronously and return with values or on error.";}
a:4:{i:0;s:34:"gupnp_service_proxy_set_subscribed";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:77:"bool gupnp_service_proxy_set_subscribed ( resource $proxy, bool $subscribed )";i:3;s:30:"(Un)subscribes to the service.";}
a:4:{i:0;s:25:"gupnp_service_thaw_notify";i:1;s:21:"(PECL gupnp >= 0.1.0)";i:2;s:52:"bool gupnp_service_thaw_notify ( resource $service )";i:3;s:66:"Sends out any pending notifications and stops queuing of new ones.";}
a:4:{i:0;s:30:"HttpDeflateStream::__construct";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:59:"public HttpDeflateStream::__construct ([ int $flags = 0 ] )";i:3;s:30:"Creates a new object instance.";}
a:4:{i:0;s:26:"HttpDeflateStream::factory";i:1;s:25:"(PECL pecl_http >= 1.4.0)";i:2;s:125:"static public HttpDeflateStream HttpDeflateStream::factory ([ int $flags = 0 [, string $class_name = "HttpDeflateStream" ]] )";i:3;s:30:"Creates a new object instance.";}
a:4:{i:0;s:25:"HttpDeflateStream::finish";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:59:"public string HttpDeflateStream::finish ([ string $data ] )";i:3;s:80:"Finalizes the deflate stream. The deflate stream can be reused after finalizing.";}
a:4:{i:0;s:24:"HttpDeflateStream::flush";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:58:"public string HttpDeflateStream::flush ([ string $data ] )";i:3;s:27:"Flushes the deflate stream.";}
a:4:{i:0;s:25:"HttpDeflateStream::update";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:56:"public string HttpDeflateStream::update ( string $data )";i:3;s:44:"Passes more data through the deflate stream.";}
a:4:{i:0;s:30:"HttpInflateStream::__construct";i:1;s:25:"(PECL pecl_http >= 1.0.0)";i:2;s:59:"public HttpInflateStream::__construct ([ int $flags = 0 ] )";i:3;s:30:"Creates a new object instance.";}
a:4:{i:0;s:26:"HttpInflateStream::factory";i:1;s:25:"(PECL pecl_http >= 1.4.0)";i:2;s:118:"public HttpInflateStream HttpInflateStream::factory ([ int $flags = 0 [, string $class_name = "HttpInflateStream" ]] )";i:3;s:48:"Creates a new HttpInflateStream object instance.";}
a:4:{i:0;s:25:"HttpInflateStream::finish";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:59:"public string HttpInflateStream::finish ([ string $data ] )";i:3;s:80:"Finalizes the inflate stream. The inflate stream can be reused after finalizing.";}
a:4:{i:0;s:24:"HttpInflateStream::flush";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:58:"public string HttpInflateStream::flush ([ string $data ] )";i:3;s:27:"Flushes the inflate stream.";}
a:4:{i:0;s:25:"HttpInflateStream::update";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:56:"public string HttpInflateStream::update ( string $data )";i:3;s:44:"Passes more data through the inflate stream.";}
a:4:{i:0;s:23:"HttpMessage::addHeaders";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:80:"public void HttpMessage::addHeaders ( array $headers [, bool $append = false ] )";i:3;s:95:"Add headers. If append is true, headers with the same name will be separated, else overwritten.";}
a:4:{i:0;s:24:"HttpMessage::__construct";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:54:"public HttpMessage::__construct ([ string $message ] )";i:3;s:25:"Instantiate a new object.";}
a:4:{i:0;s:19:"HttpMessage::detach";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:47:"public HttpMessage HttpMessage::detach ( void )";i:3;s:63:"Returns a clone of an object detached from any parent messages.";}
a:4:{i:0;s:20:"HttpMessage::factory";i:1;s:25:"(PECL pecl_http >= 1.4.0)";i:2;s:112:"static public HttpMessage HttpMessage::factory ([ string $raw_message [, string $class_name = "HttpMessage" ]] )";i:3;s:31:"Create an object from a string.";}
a:4:{i:0;s:20:"HttpMessage::fromEnv";i:1;s:25:"(PECL pecl_http >= 1.5.0)";i:2;s:108:"static public HttpMessage HttpMessage::fromEnv ( int $message_type [, string $class_name = "HttpMessage" ] )";i:3;s:41:"Create an object from script environment.";}
a:4:{i:0;s:23:"HttpMessage::fromString";i:1;s:29:"(PECL pecl_http 0.10.0-1.3.3)";i:2;s:115:"static public HttpMessage HttpMessage::fromString ([ string $raw_message [, string $class_name = "HttpMessage" ]] )";i:3;s:31:"Create an object from a string.";}
a:4:{i:0;s:20:"HttpMessage::getBody";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:43:"public string HttpMessage::getBody ( void )";i:3;s:28:"Get the body of the parsed .";}
a:4:{i:0;s:22:"HttpMessage::getHeader";i:1;s:25:"(PECL pecl_http >= 1.1.0)";i:2;s:55:"public string HttpMessage::getHeader ( string $header )";i:3;s:19:"Get message header.";}
a:4:{i:0;s:23:"HttpMessage::getHeaders";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:45:"public array HttpMessage::getHeaders ( void )";i:3;s:20:"Get message headers.";}
a:4:{i:0;s:27:"HttpMessage::getHttpVersion";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:50:"public string HttpMessage::getHttpVersion ( void )";i:3;s:45:"Get the HTTP Protocol Version of the Message.";}
a:4:{i:0;s:29:"HttpMessage::getParentMessage";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:57:"public HttpMessage HttpMessage::getParentMessage ( void )";i:3;s:19:"Get parent Message.";}
a:4:{i:0;s:29:"HttpMessage::getRequestMethod";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:52:"public string HttpMessage::getRequestMethod ( void )";i:3;s:38:"Get the Request Method of the Message.";}
a:4:{i:0;s:26:"HttpMessage::getRequestUrl";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:49:"public string HttpMessage::getRequestUrl ( void )";i:3;s:35:"Get the Request URL of the Message.";}
a:4:{i:0;s:28:"HttpMessage::getResponseCode";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"public int HttpMessage::getResponseCode ( void )";i:3;s:37:"Get the Response Code of the Message.";}
a:4:{i:0;s:30:"HttpMessage::getResponseStatus";i:1;s:26:"(PECL pecl_http >= 0.23.0)";i:2;s:53:"public string HttpMessage::getResponseStatus ( void )";i:3;s:85:"Get the Response Status of the message (i.e. the string following the response code).";}
a:4:{i:0;s:20:"HttpMessage::getType";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:40:"public int HttpMessage::getType ( void )";i:3;s:30:"Get Message Type. Either, or .";}
a:4:{i:0;s:29:"HttpMessage::guessContentType";i:1;s:25:"(PECL pecl_http >= 1.0.0)";i:2;s:100:"public string HttpMessage::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )";i:3;s:72:"Attempts to guess the content type of the message body through libmagic.";}
a:4:{i:0;s:20:"HttpMessage::prepend";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:79:"public void HttpMessage::prepend ( HttpMessage $message [, bool $top = true ] )";i:3;s:40:"Prepends message(s) to the HTTP message.";}
a:4:{i:0;s:20:"HttpMessage::reverse";i:1;s:26:"(PECL pecl_http >= 0.23.0)";i:2;s:48:"public HttpMessage HttpMessage::reverse ( void )";i:3;s:44:"Reorders the message chain in reverse order.";}
a:4:{i:0;s:17:"HttpMessage::send";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:38:"public bool HttpMessage::send ( void )";i:3;s:62:"Send the Message according to its type as Response or Request.";}
a:4:{i:0;s:20:"HttpMessage::setBody";i:1;s:26:"(PECL pecl_http >= 0.14.0)";i:2;s:49:"public void HttpMessage::setBody ( string $body )";i:3;s:21:"Set the body of the .";}
a:4:{i:0;s:23:"HttpMessage::setHeaders";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:54:"public void HttpMessage::setHeaders ( array $headers )";i:3;s:17:"Sets new headers.";}
a:4:{i:0;s:27:"HttpMessage::setHttpVersion";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"public bool HttpMessage::setHttpVersion ( string $version )";i:3;s:45:"Set the HTTP Protocol version of the Message.";}
a:4:{i:0;s:29:"HttpMessage::setRequestMethod";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:60:"public bool HttpMessage::setRequestMethod ( string $method )";i:3;s:43:"Set the Request Method of the HTTP Message.";}
a:4:{i:0;s:26:"HttpMessage::setRequestUrl";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:54:"public bool HttpMessage::setRequestUrl ( string $url )";i:3;s:40:"Set the Request URL of the HTTP Message.";}
a:4:{i:0;s:28:"HttpMessage::setResponseCode";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:54:"public bool HttpMessage::setResponseCode ( int $code )";i:3;s:50:"Set the response code of an HTTP Response Message.";}
a:4:{i:0;s:30:"HttpMessage::setResponseStatus";i:1;s:26:"(PECL pecl_http >= 0.23.0)";i:2;s:61:"public bool HttpMessage::setResponseStatus ( string $status )";i:3;s:90:"Set the Response Status of the HTTP message (i.e. the string following the response code).";}
a:4:{i:0;s:20:"HttpMessage::setType";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:46:"public void HttpMessage::setType ( int $type )";i:3;s:30:"Set Message Type. Either, or .";}
a:4:{i:0;s:32:"HttpMessage::toMessageTypeObject";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:73:"public HttpRequest|HttpResponse HttpMessage::toMessageTypeObject ( void )";i:3;s:55:"Creates an object regarding to the type of the message.";}
a:4:{i:0;s:21:"HttpMessage::toString";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:71:"public string HttpMessage::toString ([ bool $include_parent = false ] )";i:3;s:45:"Get the string representation of the Message.";}
a:4:{i:0;s:28:"HttpQueryString::__construct";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:83:"final public HttpQueryString::__construct ([ bool $global = true [, mixed $add ]] )";i:3;s:30:"Creates a new object instance.";}
a:4:{i:0;s:20:"HttpQueryString::get";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:122:"public mixed HttpQueryString::get ([ string $key [, mixed $type = 0 [, mixed $defval = NULL [, bool $delete = false ]]]] )";i:3;s:31:"Get (part of) the query string.";}
a:4:{i:0;s:20:"HttpQueryString::mod";i:1;s:25:"(PECL pecl_http >= 1.1.0)";i:2;s:61:"public HttpQueryString HttpQueryString::mod ( mixed $params )";i:3;s:69:"Copies the query string object and sets provided params at the clone.";}
a:4:{i:0;s:20:"HttpQueryString::set";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:52:"public string HttpQueryString::set ( mixed $params )";i:3;s:63:"Set query string entry/entries. values will unset the variable.";}
a:4:{i:0;s:26:"HttpQueryString::singleton";i:1;s:26:"(PECL pecl_http >= 0.25.0)";i:2;s:83:"static public HttpQueryString HttpQueryString::singleton ([ bool $global = true ] )";i:3;s:66:"Get a single instance (differentiates between the global setting).";}
a:4:{i:0;s:24:"HttpQueryString::toArray";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:46:"public array HttpQueryString::toArray ( void )";i:3;s:54:"Get the query string represented as associative array.";}
a:4:{i:0;s:25:"HttpQueryString::toString";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:48:"public string HttpQueryString::toString ( void )";i:3;s:21:"Get the query string.";}
a:4:{i:0;s:22:"HttpQueryString::xlate";i:1;s:26:"(PECL pecl_http >= 0.25.0)";i:2;s:61:"public bool HttpQueryString::xlate ( string $ie, string $oe )";i:3;s:80:"Converts the query string from the source encoding ie to the target encoding oe.";}
a:4:{i:0;s:23:"HttpRequest::addCookies";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:54:"public bool HttpRequest::addCookies ( array $cookies )";i:3;s:19:"Add custom cookies.";}
a:4:{i:0;s:23:"HttpRequest::addHeaders";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:54:"public bool HttpRequest::addHeaders ( array $headers )";i:3;s:36:"Add request header name/value pairs.";}
a:4:{i:0;s:26:"HttpRequest::addPostFields";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"public bool HttpRequest::addPostFields ( array $post_data )";i:3;s:112:"Adds POST data entries, leaving previously set unchanged, unless a post entry with the same name already exists.";}
a:4:{i:0;s:24:"HttpRequest::addPostFile";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:123:"public bool HttpRequest::addPostFile ( string $name, string $file [, string $content_type = "application/x-octetstream" ] )";i:3;s:71:"Add a file to the POST request, leaving previously set files unchanged.";}
a:4:{i:0;s:23:"HttpRequest::addPutData";i:1;s:26:"(PECL pecl_http >= 0.25.0)";i:2;s:56:"public bool HttpRequest::addPutData ( string $put_data )";i:3;s:56:"Add PUT data, leaving previously set PUT data unchanged.";}
a:4:{i:0;s:25:"HttpRequest::addQueryData";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:61:"public bool HttpRequest::addQueryData ( array $query_params )";i:3;s:77:"Add parameters to the query parameter list, leaving previously set unchanged.";}
a:4:{i:0;s:27:"HttpRequest::addRawPostData";i:1;s:29:"(PECL pecl_http 0.14.0-1.4.1)";i:2;s:65:"public bool HttpRequest::addRawPostData ( string $raw_post_data )";i:3;s:66:"Add raw post data, leaving previously set raw post data unchanged.";}
a:4:{i:0;s:26:"HttpRequest::addSslOptions";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:57:"public bool HttpRequest::addSslOptions ( array $options )";i:3;s:27:"Set additional SSL options.";}
a:4:{i:0;s:25:"HttpRequest::clearHistory";i:1;s:26:"(PECL pecl_http >= 0.15.0)";i:2;s:46:"public void HttpRequest::clearHistory ( void )";i:3;s:28:"Clears all history messages.";}
a:4:{i:0;s:24:"HttpRequest::__construct";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:109:"public HttpRequest::__construct ([ string $url [, int $request_method = HTTP_METH_GET [, array $options ]]] )";i:3;s:25:"Instantiate a new object.";}
a:4:{i:0;s:26:"HttpRequest::enableCookies";i:1;s:25:"(PECL pecl_http >= 1.0.0)";i:2;s:47:"public bool HttpRequest::enableCookies ( void )";i:3;s:45:"Enable automatic sending of received cookies.";}
a:4:{i:0;s:27:"HttpRequest::getContentType";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:50:"public string HttpRequest::getContentType ( void )";i:3;s:36:"Get the previously set content type.";}
a:4:{i:0;s:23:"HttpRequest::getCookies";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:45:"public array HttpRequest::getCookies ( void )";i:3;s:27:"Get previously set cookies.";}
a:4:{i:0;s:23:"HttpRequest::getHeaders";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:45:"public array HttpRequest::getHeaders ( void )";i:3;s:35:"Get previously set request headers.";}
a:4:{i:0;s:23:"HttpRequest::getHistory";i:1;s:26:"(PECL pecl_http >= 0.15.0)";i:2;s:51:"public HttpMessage HttpRequest::getHistory ( void )";i:3;s:58:"Get all sent requests and received responses as an object.";}
a:4:{i:0;s:22:"HttpRequest::getMethod";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:42:"public int HttpRequest::getMethod ( void )";i:3;s:38:"Get the previously set request method.";}
a:4:{i:0;s:23:"HttpRequest::getOptions";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:45:"public array HttpRequest::getOptions ( void )";i:3;s:26:"Get currently set options.";}
a:4:{i:0;s:26:"HttpRequest::getPostFields";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"public array HttpRequest::getPostFields ( void )";i:3;s:29:"Get previously set POST data.";}
a:4:{i:0;s:25:"HttpRequest::getPostFiles";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:47:"public array HttpRequest::getPostFiles ( void )";i:3;s:36:"Get all previously added POST files.";}
a:4:{i:0;s:23:"HttpRequest::getPutData";i:1;s:26:"(PECL pecl_http >= 0.25.0)";i:2;s:46:"public string HttpRequest::getPutData ( void )";i:3;s:28:"Get previously set PUT data.";}
a:4:{i:0;s:23:"HttpRequest::getPutFile";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:46:"public string HttpRequest::getPutFile ( void )";i:3;s:28:"Get previously set put file.";}
a:4:{i:0;s:25:"HttpRequest::getQueryData";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"public string HttpRequest::getQueryData ( void )";i:3;s:65:"Get the current query data in form of an urlencoded query string.";}
a:4:{i:0;s:27:"HttpRequest::getRawPostData";i:1;s:29:"(PECL pecl_http 0.14.0-1.4.1)";i:2;s:50:"public string HttpRequest::getRawPostData ( void )";i:3;s:33:"Get previously set raw post data.";}
a:4:{i:0;s:33:"HttpRequest::getRawRequestMessage";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:56:"public string HttpRequest::getRawRequestMessage ( void )";i:3;s:22:"Get sent HTTP message.";}
a:4:{i:0;s:34:"HttpRequest::getRawResponseMessage";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:57:"public string HttpRequest::getRawResponseMessage ( void )";i:3;s:29:"Get the entire HTTP response.";}
a:4:{i:0;s:30:"HttpRequest::getRequestMessage";i:1;s:26:"(PECL pecl_http >= 0.11.0)";i:2;s:58:"public HttpMessage HttpRequest::getRequestMessage ( void )";i:3;s:22:"Get sent HTTP message.";}
a:4:{i:0;s:28:"HttpRequest::getResponseBody";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:51:"public string HttpRequest::getResponseBody ( void )";i:3;s:54:"Get the response body after the request has been sent.";}
a:4:{i:0;s:28:"HttpRequest::getResponseCode";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"public int HttpRequest::getResponseCode ( void )";i:3;s:54:"Get the response code after the request has been sent.";}
a:4:{i:0;s:31:"HttpRequest::getResponseCookies";i:1;s:26:"(PECL pecl_http >= 0.23.0)";i:2;s:92:"public array HttpRequest::getResponseCookies ([ int $flags = 0 [, array $allowed_extras ]] )";i:3;s:55:"Get response cookie(s) after the request has been sent.";}
a:4:{i:0;s:28:"HttpRequest::getResponseData";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:50:"public array HttpRequest::getResponseData ( void )";i:3;s:56:"* Get all response data after the request has been sent.";}
a:4:{i:0;s:30:"HttpRequest::getResponseHeader";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:63:"public mixed HttpRequest::getResponseHeader ([ string $name ] )";i:3;s:55:"Get response header(s) after the request has been sent.";}
a:4:{i:0;s:28:"HttpRequest::getResponseInfo";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:61:"public mixed HttpRequest::getResponseInfo ([ string $name ] )";i:3;s:50:"Get response info after the request has been sent.";}
a:4:{i:0;s:31:"HttpRequest::getResponseMessage";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"public HttpMessage HttpRequest::getResponseMessage ( void )";i:3;s:64:"Get the full response as object after the request has been sent.";}
a:4:{i:0;s:30:"HttpRequest::getResponseStatus";i:1;s:26:"(PECL pecl_http >= 0.23.0)";i:2;s:53:"public string HttpRequest::getResponseStatus ( void )";i:3;s:98:"Get the response status (i.e. the string after the response code) after the message has been sent.";}
a:4:{i:0;s:26:"HttpRequest::getSslOptions";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"public array HttpRequest::getSslOptions ( void )";i:3;s:31:"Get previously set SSL options.";}
a:4:{i:0;s:19:"HttpRequest::getUrl";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:42:"public string HttpRequest::getUrl ( void )";i:3;s:35:"Get the previously set request URL.";}
a:4:{i:0;s:25:"HttpRequest::resetCookies";i:1;s:25:"(PECL pecl_http >= 1.0.0)";i:2;s:71:"public bool HttpRequest::resetCookies ([ bool $session_only = false ] )";i:3;s:46:"Reset all automatically received/sent cookies.";}
a:4:{i:0;s:17:"HttpRequest::send";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:45:"public HttpMessage HttpRequest::send ( void )";i:3;s:22:"Send the HTTP request.";}
a:4:{i:0;s:20:"HttpRequest::setBody";i:1;s:25:"(PECL pecl_http >= 1.5.0)";i:2;s:58:"bool HttpRequest::setBody ([ string $request_body_data ] )";i:3;s:66:"Set request body to send, overwriting previously set request body.";}
a:4:{i:0;s:27:"HttpRequest::setContentType";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:64:"public bool HttpRequest::setContentType ( string $content_type )";i:3;s:50:"Set the content type the post request should have.";}
a:4:{i:0;s:23:"HttpRequest::setCookies";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:57:"public bool HttpRequest::setCookies ([ array $cookies ] )";i:3;s:19:"Set custom cookies.";}
a:4:{i:0;s:23:"HttpRequest::setHeaders";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:57:"public bool HttpRequest::setHeaders ([ array $headers ] )";i:3;s:36:"Set request header name/value pairs.";}
a:4:{i:0;s:22:"HttpRequest::setMethod";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:58:"public bool HttpRequest::setMethod ( int $request_method )";i:3;s:23:"Set the request method.";}
a:4:{i:0;s:23:"HttpRequest::setOptions";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:57:"public bool HttpRequest::setOptions ([ array $options ] )";i:3;s:31:"Set the request options to use.";}
a:4:{i:0;s:26:"HttpRequest::setPostFields";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"public bool HttpRequest::setPostFields ( array $post_data )";i:3;s:64:"Set the POST data entries, overwriting previously set POST data.";}
a:4:{i:0;s:25:"HttpRequest::setPostFiles";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"public bool HttpRequest::setPostFiles ( array $post_files )";i:3;s:57:"Set files to post, overwriting previously set post files.";}
a:4:{i:0;s:23:"HttpRequest::setPutData";i:1;s:26:"(PECL pecl_http >= 0.25.0)";i:2;s:59:"public bool HttpRequest::setPutData ([ string $put_data ] )";i:3;s:58:"Set PUT data to send, overwriting previously set PUT data.";}
a:4:{i:0;s:23:"HttpRequest::setPutFile";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:60:"public bool HttpRequest::setPutFile ([ string $file = "" ] )";i:3;s:43:"Set file to put. Affects only PUT requests.";}
a:4:{i:0;s:25:"HttpRequest::setQueryData";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"public bool HttpRequest::setQueryData ( mixed $query_data )";i:3;s:81:"Set the URL query parameters to use, overwriting previously set query parameters.";}
a:4:{i:0;s:27:"HttpRequest::setRawPostData";i:1;s:29:"(PECL pecl_http 0.14.0-1.4.1)";i:2;s:68:"public bool HttpRequest::setRawPostData ([ string $raw_post_data ] )";i:3;s:147:"Set raw post data to send, overwriting previously set raw post data. Don't forget to specify a content type. Affects only POST and custom requests.";}
a:4:{i:0;s:26:"HttpRequest::setSslOptions";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:60:"public bool HttpRequest::setSslOptions ([ array $options ] )";i:3;s:16:"Set SSL options.";}
a:4:{i:0;s:19:"HttpRequest::setUrl";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:47:"public bool HttpRequest::setUrl ( string $url )";i:3;s:20:"Set the request URL.";}
a:4:{i:0;s:23:"HttpRequestPool::attach";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:60:"public bool HttpRequestPool::attach ( HttpRequest $request )";i:3;s:26:"Attach an object to this .";}
a:4:{i:0;s:28:"HttpRequestPool::__construct";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:84:"public HttpRequestPool::__construct ([ HttpRequest $request [, HttpRequest $... ]] )";i:3;s:65:"Instantiate a new object. An is able to send several in parallel.";}
a:4:{i:0;s:27:"HttpRequestPool::__destruct";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:41:"void HttpRequestPool::__destruct ( void )";i:3;s:16:"Clean up object.";}
a:4:{i:0;s:23:"HttpRequestPool::detach";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:53:"bool HttpRequestPool::detach ( HttpRequest $request )";i:3;s:28:"Detach an object from this .";}
a:4:{i:0;s:36:"HttpRequestPool::getAttachedRequests";i:1;s:26:"(PECL pecl_http >= 0.16.0)";i:2;s:51:"array HttpRequestPool::getAttachedRequests ( void )";i:3;s:21:"Get attached objects.";}
a:4:{i:0;s:36:"HttpRequestPool::getFinishedRequests";i:1;s:26:"(PECL pecl_http >= 0.16.0)";i:2;s:51:"array HttpRequestPool::getFinishedRequests ( void )";i:3;s:59:"Get attached objects that already have finished their work.";}
a:4:{i:0;s:22:"HttpRequestPool::reset";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:36:"void HttpRequestPool::reset ( void )";i:3;s:28:"Detach all attached objects.";}
a:4:{i:0;s:21:"HttpRequestPool::send";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:35:"bool HttpRequestPool::send ( void )";i:3;s:38:"Send all attached objects in parallel.";}
a:4:{i:0;s:30:"HttpRequestPool::socketPerform";i:1;s:26:"(PECL pecl_http >= 0.15.0)";i:2;s:54:"protected bool HttpRequestPool::socketPerform ( void )";i:3;s:56:"Returns until each request has finished its transaction.";}
a:4:{i:0;s:29:"HttpRequestPool::socketSelect";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:70:"protected bool HttpRequestPool::socketSelect ([ float $timeout = 0 ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"HttpResponse::capture";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:42:"static void HttpResponse::capture ( void )";i:3;s:22:"Capture script output.";}
a:4:{i:0;s:27:"HttpResponse::getBufferSize";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:47:"static int HttpResponse::getBufferSize ( void )";i:3;s:24:"Get current buffer size.";}
a:4:{i:0;s:22:"HttpResponse::getCache";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:43:"static bool HttpResponse::getCache ( void )";i:3;s:28:"Get current caching setting.";}
a:4:{i:0;s:29:"HttpResponse::getCacheControl";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:52:"static string HttpResponse::getCacheControl ( void )";i:3;s:27:"Get current header setting.";}
a:4:{i:0;s:35:"HttpResponse::getContentDisposition";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:58:"static string HttpResponse::getContentDisposition ( void )";i:3;s:20:"Get current setting.";}
a:4:{i:0;s:28:"HttpResponse::getContentType";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:51:"static string HttpResponse::getContentType ( void )";i:3;s:27:"Get current header setting.";}
a:4:{i:0;s:21:"HttpResponse::getData";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:44:"static string HttpResponse::getData ( void )";i:3;s:39:"Get the previously set data to be sent.";}
a:4:{i:0;s:21:"HttpResponse::getETag";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:44:"static string HttpResponse::getETag ( void )";i:3;s:41:"Get calculated or previously set custom .";}
a:4:{i:0;s:21:"HttpResponse::getFile";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:44:"static string HttpResponse::getFile ( void )";i:3;s:39:"Get the previously set file to be sent.";}
a:4:{i:0;s:21:"HttpResponse::getGzip";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:42:"static bool HttpResponse::getGzip ( void )";i:3;s:29:"Get current gzip'ing setting.";}
a:4:{i:0;s:23:"HttpResponse::getHeader";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:56:"static mixed HttpResponse::getHeader ([ string $name ] )";i:3;s:31:"Get header(s) about to be sent.";}
a:4:{i:0;s:29:"HttpResponse::getLastModified";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:49:"static int HttpResponse::getLastModified ( void )";i:3;s:45:"Get calculated or previously set custom date.";}
a:4:{i:0;s:28:"HttpResponse::getRequestBody";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:51:"static string HttpResponse::getRequestBody ( void )";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:34:"HttpResponse::getRequestBodyStream";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"static resource HttpResponse::getRequestBodyStream ( void )";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:31:"HttpResponse::getRequestHeaders";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:53:"static array HttpResponse::getRequestHeaders ( void )";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:23:"HttpResponse::getStream";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"static resource HttpResponse::getStream ( void )";i:3;s:43:"Get the previously set resource to be sent.";}
a:4:{i:0;s:30:"HttpResponse::getThrottleDelay";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:52:"static float HttpResponse::getThrottleDelay ( void )";i:3;s:31:"Get the current throttle delay.";}
a:4:{i:0;s:30:"HttpResponse::guessContentType";i:1;s:26:"(PECL pecl_http >= 0.13.0)";i:2;s:101:"static string HttpResponse::guessContentType ( string $magic_file [, int $magic_mode = MAGIC_MIME ] )";i:3;s:72:"Attempts to guess the content type of supplied payload through libmagic.";}
a:4:{i:0;s:22:"HttpResponse::redirect";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:113:"static void HttpResponse::redirect ([ string $url [, array $params [, bool $session = false [, int $status ]]]] )";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:18:"HttpResponse::send";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:59:"static bool HttpResponse::send ([ bool $clean_ob = true ] )";i:3;s:24:"Finally send the entity.";}
a:4:{i:0;s:27:"HttpResponse::setBufferSize";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:54:"static bool HttpResponse::setBufferSize ( int $bytes )";i:3;s:54:"Sets the send buffer size of the throttling mechanism.";}
a:4:{i:0;s:22:"HttpResponse::setCache";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:50:"static bool HttpResponse::setCache ( bool $cache )";i:3;s:51:"Whether it should be attempted to cache the entity.";}
a:4:{i:0;s:29:"HttpResponse::setCacheControl";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:116:"static bool HttpResponse::setCacheControl ( string $control [, int $max_age = 0 [, bool $must_revalidate = true ]] )";i:3;s:42:"Define a custom header, usually being or ;";}
a:4:{i:0;s:35:"HttpResponse::setContentDisposition";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:94:"static bool HttpResponse::setContentDisposition ( string $filename [, bool $inline = false ] )";i:3;s:199:"Set the . The header is very useful if the data actually being sent came from a file or something similar, that should be "saved" by the client/user (i.e. by the browser's "Save as..." popup window).";}
a:4:{i:0;s:28:"HttpResponse::setContentType";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:65:"static bool HttpResponse::setContentType ( string $content_type )";i:3;s:27:"Set the of the sent entity.";}
a:4:{i:0;s:21:"HttpResponse::setData";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:49:"static bool HttpResponse::setData ( mixed $data )";i:3;s:24:"Set the data to be sent.";}
a:4:{i:0;s:21:"HttpResponse::setETag";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:50:"static bool HttpResponse::setETag ( string $etag )";i:3;s:59:"Set a custom . Use this only if you know what you're doing.";}
a:4:{i:0;s:21:"HttpResponse::setFile";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:50:"static bool HttpResponse::setFile ( string $file )";i:3;s:24:"Set the file to be sent.";}
a:4:{i:0;s:21:"HttpResponse::setGzip";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"static bool HttpResponse::setGzip ( bool $gzip )";i:3;s:46:"Enable on-thy-fly gzip'ing of the sent entity.";}
a:4:{i:0;s:23:"HttpResponse::setHeader";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:95:"static bool HttpResponse::setHeader ( string $name [, mixed $value [, bool $replace = true ]] )";i:3;s:20:"Send an HTTP header.";}
a:4:{i:0;s:29:"HttpResponse::setLastModified";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:60:"static bool HttpResponse::setLastModified ( int $timestamp )";i:3;s:18:"Set a custom date.";}
a:4:{i:0;s:23:"HttpResponse::setStream";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:56:"static bool HttpResponse::setStream ( resource $stream )";i:3;s:28:"Set the resource to be sent.";}
a:4:{i:0;s:30:"HttpResponse::setThrottleDelay";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:61:"static bool HttpResponse::setThrottleDelay ( float $seconds )";i:3;s:24:"Sets the throttle delay.";}
a:4:{i:0;s:20:"HttpResponse::status";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:48:"static bool HttpResponse::status ( int $status )";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:15:"http_cache_etag";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:40:"bool http_cache_etag ([ string $etag ] )";i:3;s:111:"Attempts to cache the sent entity by its, either supplied or generated by the hash algorithm specified by the .";}
a:4:{i:0;s:24:"http_cache_last_modified";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:62:"bool http_cache_last_modified ([ int $timestamp_or_expires ] )";i:3;s:64:"Attempts to cache the sent entity by its last modification date.";}
a:4:{i:0;s:19:"http_chunked_decode";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:46:"string http_chunked_decode ( string $encoded )";i:3;s:47:"Decodes a string which is HTTP-chunked encoded.";}
a:4:{i:0;s:12:"http_deflate";i:1;s:26:"(PECL pecl_http >= 0.15.0)";i:2;s:56:"string http_deflate ( string $data [, int $flags = 0 ] )";i:3;s:36:"Compress data with, AKA or encoding.";}
a:4:{i:0;s:12:"http_inflate";i:1;s:26:"(PECL pecl_http >= 0.15.0)";i:2;s:36:"string http_inflate ( string $data )";i:3;s:56:"Decompress data compressed with either, AKA or encoding.";}
a:4:{i:0;s:17:"http_build_cookie";i:1;s:25:"(PECL pecl_http >= 1.2.0)";i:2;s:42:"string http_build_cookie ( array $cookie )";i:3;s:61:"Build a cookie string from an array/object like returned by .";}
a:4:{i:0;s:9:"http_date";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:38:"string http_date ([ int $timestamp ] )";i:3;s:60:"Compose a valid HTTP date regarding RFC 1123 looking like: .";}
a:4:{i:0;s:28:"http_get_request_body_stream";i:1;s:26:"(PECL pecl_http >= 0.22.0)";i:2;s:46:"resource http_get_request_body_stream ( void )";i:3;s:69:"Create a stream to read the raw request body (e.g. POST or PUT data).";}
a:4:{i:0;s:21:"http_get_request_body";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:37:"string http_get_request_body ( void )";i:3;s:49:"Get the raw request body (e.g. POST or PUT data).";}
a:4:{i:0;s:24:"http_get_request_headers";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:39:"array http_get_request_headers ( void )";i:3;s:36:"Get a list of incoming HTTP headers.";}
a:4:{i:0;s:15:"http_match_etag";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:66:"bool http_match_etag ( string $etag [, bool $for_range = false ] )";i:3;s:57:"Matches the given against the clients resp. HTTP headers.";}
a:4:{i:0;s:19:"http_match_modified";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:79:"bool http_match_modified ([ int $timestamp = -1 [, bool $for_range = false ]] )";i:3;s:72:"Matches the given Unix timestamp against the clients resp. HTTP headers.";}
a:4:{i:0;s:25:"http_match_request_header";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:94:"bool http_match_request_header ( string $header, string $value [, bool $match_case = false ] )";i:3;s:30:"Match an incoming HTTP header.";}
a:4:{i:0;s:12:"http_support";i:1;s:26:"(PECL pecl_http >= 0.15.0)";i:2;s:40:"int http_support ([ int $feature = 0 ] )";i:3;s:51:"Check for features that require external libraries.";}
a:4:{i:0;s:22:"http_negotiate_charset";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:70:"string http_negotiate_charset ( array $supported [, array &$result ] )";i:3;s:158:"This function negotiates the clients preferred charset based on its HTTP header. The qualifier is recognized and charsets without qualifier are rated highest.";}
a:4:{i:0;s:27:"http_negotiate_content_type";i:1;s:26:"(PECL pecl_http >= 0.19.0)";i:2;s:75:"string http_negotiate_content_type ( array $supported [, array &$result ] )";i:3;s:168:"This function negotiates the clients preferred content type based on its HTTP header. The qualifier is recognized and content types without qualifier are rated highest.";}
a:4:{i:0;s:23:"http_negotiate_language";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:71:"string http_negotiate_language ( array $supported [, array &$result ] )";i:3;s:253:"This function negotiates the clients preferred language based on its HTTP header. The qualifier is recognized and languages without qualifier are rated highest. The qualifier will be decreased by 10% for partial matches (i.e. matching primary language).";}
a:4:{i:0;s:17:"ob_deflatehandler";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:52:"string ob_deflatehandler ( string $data, int $mode )";i:3;s:14:"For use with .";}
a:4:{i:0;s:14:"ob_etaghandler";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:49:"string ob_etaghandler ( string $data, int $mode )";i:3;s:14:"For use with .";}
a:4:{i:0;s:17:"ob_inflatehandler";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:52:"string ob_inflatehandler ( string $data, int $mode )";i:3;s:14:"For use with .";}
a:4:{i:0;s:17:"http_parse_cookie";i:1;s:26:"(PECL pecl_http >= 0.20.0)";i:2;s:85:"object http_parse_cookie ( string $cookie [, int $flags [, array $allowed_extras ]] )";i:3;s:58:"Parses HTTP cookies like sent in a response into a struct.";}
a:4:{i:0;s:18:"http_parse_headers";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:43:"array http_parse_headers ( string $header )";i:3;s:46:"Parses HTTP headers into an associative array.";}
a:4:{i:0;s:18:"http_parse_message";i:1;s:26:"(PECL pecl_http >= 0.12.0)";i:2;s:45:"object http_parse_message ( string $message )";i:3;s:41:"Parses the HTTP into a simple recursive .";}
a:4:{i:0;s:17:"http_parse_params";i:1;s:25:"(PECL pecl_http >= 1.0.0)";i:2;s:80:"object http_parse_params ( string $param [, int $flags = HTTP_PARAMS_DEFAULT ] )";i:3;s:21:"Parse parameter list.";}
a:4:{i:0;s:29:"http_persistent_handles_clean";i:1;s:25:"(PECL pecl_http >= 1.5.0)";i:2;s:57:"string http_persistent_handles_clean ([ string $ident ] )";i:3;s:70:"Clean up (close) persistent handles, optionally identified with ident.";}
a:4:{i:0;s:29:"http_persistent_handles_count";i:1;s:25:"(PECL pecl_http >= 1.5.0)";i:2;s:45:"object http_persistent_handles_count ( void )";i:3;s:47:"List statistics about persistent handles usage.";}
a:4:{i:0;s:29:"http_persistent_handles_ident";i:1;s:25:"(PECL pecl_http >= 1.5.0)";i:2;s:57:"string http_persistent_handles_ident ([ string $ident ] )";i:3;s:48:"Query or define the ident of persistent handles.";}
a:4:{i:0;s:8:"http_get";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:68:"string http_get ( string $url [, array $options [, array &$info ]] )";i:3;s:49:"Performs an HTTP GET request on the supplied url.";}
a:4:{i:0;s:9:"http_head";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:69:"string http_head ( string $url [, array $options [, array &$info ]] )";i:3;s:50:"Performs an HTTP HEAD request on the supplied url.";}
a:4:{i:0;s:14:"http_post_data";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:88:"string http_post_data ( string $url, string $data [, array $options [, array &$info ]] )";i:3;s:50:"Performs an HTTP POST request on the supplied url.";}
a:4:{i:0;s:16:"http_post_fields";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:106:"string http_post_fields ( string $url, array $data [, array $files [, array $options [, array &$info ]]] )";i:3;s:50:"Performs an HTTP POST request on the supplied url.";}
a:4:{i:0;s:13:"http_put_data";i:1;s:26:"(PECL pecl_http >= 0.25.0)";i:2;s:87:"string http_put_data ( string $url, string $data [, array $options [, array &$info ]] )";i:3;s:49:"Performs an HTTP PUT request on the supplied url.";}
a:4:{i:0;s:13:"http_put_file";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:87:"string http_put_file ( string $url, string $file [, array $options [, array &$info ]] )";i:3;s:49:"Performs an HTTP PUT request on the supplied url.";}
a:4:{i:0;s:15:"http_put_stream";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:93:"string http_put_stream ( string $url, resource $stream [, array $options [, array &$info ]] )";i:3;s:49:"Performs an HTTP PUT request on the supplied url.";}
a:4:{i:0;s:24:"http_request_body_encode";i:1;s:25:"(PECL pecl_http >= 1.0.0)";i:2;s:63:"string http_request_body_encode ( array $fields, array $files )";i:3;s:68:"Generate x-www-form-urlencoded resp. form-data encoded request body.";}
a:4:{i:0;s:26:"http_request_method_exists";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:48:"int http_request_method_exists ( mixed $method )";i:3;s:66:"Check if a request method is registered (or available by default).";}
a:4:{i:0;s:24:"http_request_method_name";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:47:"string http_request_method_name ( int $method )";i:3;s:81:"Get the literal string representation of a standard or registered request method.";}
a:4:{i:0;s:28:"http_request_method_register";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:51:"int http_request_method_register ( string $method )";i:3;s:33:"Register a custom request method.";}
a:4:{i:0;s:30:"http_request_method_unregister";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:53:"bool http_request_method_unregister ( mixed $method )";i:3;s:57:"Unregister a previously registered custom request method.";}
a:4:{i:0;s:12:"http_request";i:1;s:25:"(PECL pecl_http >= 1.0.0)";i:2;s:102:"string http_request ( int $method, string $url [, string $body [, array $options [, array &$info ]]] )";i:3;s:51:"Performs a custom HTTP request on the supplied url.";}
a:4:{i:0;s:13:"http_redirect";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:101:"bool http_redirect ([ string $url [, array $params [, bool $session = false [, int $status = 0 ]]]] )";i:3;s:26:"Redirect to the given url.";}
a:4:{i:0;s:29:"http_send_content_disposition";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:81:"bool http_send_content_disposition ( string $filename [, bool $inline = false ] )";i:3;s:200:"Send the . The header is very useful if the data actually being sent came from a file or something similar, that should be "saved" by the client/user (i.e. by the browser's "Save as..." popup window).";}
a:4:{i:0;s:22:"http_send_content_type";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:85:"bool http_send_content_type ([ string $content_type = "application/x-octetstream" ] )";i:3;s:28:"Send the of the sent entity.";}
a:4:{i:0;s:14:"http_send_data";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:36:"bool http_send_data ( string $data )";i:3;s:58:"Sends raw data with support for (multiple) range requests.";}
a:4:{i:0;s:14:"http_send_file";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:36:"bool http_send_file ( string $file )";i:3;s:56:"Sends a file with support for (multiple) range requests.";}
a:4:{i:0;s:23:"http_send_last_modified";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:59:"bool http_send_last_modified ([ int $timestamp = time() ] )";i:3;s:37:"Send a header with a valid HTTP date.";}
a:4:{i:0;s:16:"http_send_status";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:37:"bool http_send_status ( int $status )";i:3;s:22:"Send HTTP status code.";}
a:4:{i:0;s:16:"http_send_stream";i:1;s:25:"(PECL pecl_http >= 0.1.0)";i:2;s:42:"bool http_send_stream ( resource $stream )";i:3;s:74:"Sends an already opened stream with support for (multiple) range requests.";}
a:4:{i:0;s:13:"http_throttle";i:1;s:26:"(PECL pecl_http >= 0.10.0)";i:2;s:57:"void http_throttle ( float $sec [, int $bytes = 40960 ] )";i:3;s:45:"Sets the throttle delay and send buffer size.";}
a:4:{i:0;s:14:"http_build_str";i:1;s:26:"(PECL pecl_http >= 0.23.0)";i:2;s:118:"string http_build_str ( array $query [, string $prefix [, string $arg_separator = ini_get("arg_separator.output") ]] )";i:3;s:101:"Builds a query string from an array of query variables. In effect, this function is the opposite of .";}
a:4:{i:0;s:14:"http_build_url";i:1;s:26:"(PECL pecl_http >= 0.21.0)";i:2;s:110:"string http_build_url ([ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url ]]]] )";i:3;s:12:"Build a URL.";}
a:4:{i:0;s:15:"hw_Array2Objrec";i:1;s:7:"(PHP 4)";i:2;s:46:"string hw_array2objrec ( array $object_array )";i:3;s:112:"Converts an into an object record. Multiple attributes like 'Title' in different languages are treated properly.";}
a:4:{i:0;s:15:"hw_changeobject";i:1;s:7:"(PHP 4)";i:2;s:65:"bool hw_changeobject ( int $link, int $objid, array $attributes )";i:3;s:0:"";}
a:4:{i:0;s:11:"hw_Children";i:1;s:7:"(PHP 4)";i:2;s:52:"array hw_children ( int $connection, int $objectID )";i:3;s:51:"Returns the identifiers of the collection children.";}
a:4:{i:0;s:14:"hw_ChildrenObj";i:1;s:7:"(PHP 4)";i:2;s:55:"array hw_childrenobj ( int $connection, int $objectID )";i:3;s:54:"Returns the object records of the collection children.";}
a:4:{i:0;s:8:"hw_Close";i:1;s:7:"(PHP 4)";i:2;s:33:"bool hw_close ( int $connection )";i:3;s:49:"Closes down the connection to a Hyperwave server.";}
a:4:{i:0;s:10:"hw_Connect";i:1;s:7:"(PHP 4)";i:2;s:82:"int hw_connect ( string $host, int $port [, string $username ], string $password )";i:3;s:89:"Opens a connection to a Hyperwave server. You can have multiple connections open at once.";}
a:4:{i:0;s:18:"hw_connection_info";i:1;s:7:"(PHP 4)";i:2;s:37:"void hw_connection_info ( int $link )";i:3;s:0:"";}
a:4:{i:0;s:5:"hw_cp";i:1;s:7:"(PHP 4)";i:2;s:74:"int hw_cp ( int $connection, array $object_id_array, int $destination_id )";i:3;s:103:"Copies the objects with object ids as specified in the second parameter to the collection with the id .";}
a:4:{i:0;s:15:"hw_Deleteobject";i:1;s:7:"(PHP 4)";i:2;s:63:"bool hw_deleteobject ( int $connection, int $object_to_delete )";i:3;s:112:"Deletes the object with the given object id in the second parameter. It will delete all instances of the object.";}
a:4:{i:0;s:14:"hw_DocByAnchor";i:1;s:7:"(PHP 4)";i:2;s:53:"int hw_docbyanchor ( int $connection, int $anchorID )";i:3;s:57:"Returns an th object id of the document to which belongs.";}
a:4:{i:0;s:17:"hw_DocByAnchorObj";i:1;s:7:"(PHP 4)";i:2;s:59:"string hw_docbyanchorobj ( int $connection, int $anchorID )";i:3;s:61:"Returns an th object record of the document to which belongs.";}
a:4:{i:0;s:22:"hw_Document_Attributes";i:1;s:7:"(PHP 4)";i:2;s:50:"string hw_document_attributes ( int $hw_document )";i:3;s:42:"Returns the object record of the document.";}
a:4:{i:0;s:19:"hw_Document_BodyTag";i:1;s:7:"(PHP 4)";i:2;s:67:"string hw_document_bodytag ( int $hw_document [, string $prefix ] )";i:3;s:125:"Returns the BODY tag of the document. If the document is an HTML document the BODY tag should be printed before the document.";}
a:4:{i:0;s:19:"hw_Document_Content";i:1;s:7:"(PHP 4)";i:2;s:47:"string hw_document_content ( int $hw_document )";i:3;s:33:"Gets the content of the document.";}
a:4:{i:0;s:22:"hw_Document_SetContent";i:1;s:7:"(PHP 4)";i:2;s:65:"bool hw_document_setcontent ( int $hw_document, string $content )";i:3;s:464:"Sets or replaces the content of the document. If the document is an HTML document the content is everything after the BODY tag. Information from the HEAD and BODY tag is in the stored in the object record. If you provide this information in the content of the document too, the Hyperwave server will change the object record accordingly when the document is inserted. Probably not a very good idea. If this functions fails the document will retain its old content.";}
a:4:{i:0;s:16:"hw_Document_Size";i:1;s:7:"(PHP 4)";i:2;s:41:"int hw_document_size ( int $hw_document )";i:3;s:30:"Gets the size of the document.";}
a:4:{i:0;s:8:"hw_dummy";i:1;s:7:"(PHP 4)";i:2;s:50:"string hw_dummy ( int $link, int $id, int $msgid )";i:3;s:0:"";}
a:4:{i:0;s:11:"hw_EditText";i:1;s:7:"(PHP 4)";i:2;s:54:"bool hw_edittext ( int $connection, int $hw_document )";i:3;s:124:"Uploads the text document to the server. The object record of the document may not be modified while the document is edited.";}
a:4:{i:0;s:8:"hw_Error";i:1;s:7:"(PHP 4)";i:2;s:32:"int hw_error ( int $connection )";i:3;s:52:"Returns the last error number, for the last command.";}
a:4:{i:0;s:11:"hw_ErrorMsg";i:1;s:7:"(PHP 4)";i:2;s:38:"string hw_errormsg ( int $connection )";i:3;s:79:"Returns a string containing the last error message related to the last command.";}
a:4:{i:0;s:16:"hw_Free_Document";i:1;s:7:"(PHP 4)";i:2;s:42:"bool hw_free_document ( int $hw_document )";i:3;s:52:"Frees the memory occupied by the Hyperwave document.";}
a:4:{i:0;s:13:"hw_GetAnchors";i:1;s:7:"(PHP 4)";i:2;s:54:"array hw_getanchors ( int $connection, int $objectID )";i:3;s:70:"Returns an array of object ids with anchors of the specified document.";}
a:4:{i:0;s:16:"hw_GetAnchorsObj";i:1;s:7:"(PHP 4)";i:2;s:57:"array hw_getanchorsobj ( int $connection, int $objectID )";i:3;s:61:"Returns records with anchors of the document with object ID .";}
a:4:{i:0;s:13:"hw_GetAndLock";i:1;s:7:"(PHP 4)";i:2;s:55:"string hw_getandlock ( int $connection, int $objectID )";i:3;s:134:"Returns the object record for the object with ID . It will also lock the object, so other users cannot access it until it is unlocked.";}
a:4:{i:0;s:15:"hw_GetChildColl";i:1;s:7:"(PHP 4)";i:2;s:56:"array hw_getchildcoll ( int $connection, int $objectID )";i:3;s:138:"Returns object ids. Each object ID belongs to a child collection of the collection with ID . The function will not return child documents.";}
a:4:{i:0;s:18:"hw_GetChildCollObj";i:1;s:7:"(PHP 4)";i:2;s:59:"array hw_getchildcollobj ( int $connection, int $objectID )";i:3;s:147:"Returns object records. Each object records belongs to a child collection of the collection with ID . The function will not return child documents.";}
a:4:{i:0;s:18:"hw_GetChildDocColl";i:1;s:7:"(PHP 4)";i:2;s:59:"array hw_getchilddoccoll ( int $connection, int $objectID )";i:3;s:64:"Returns array of object ids for child documents of a collection.";}
a:4:{i:0;s:21:"hw_GetChildDocCollObj";i:1;s:7:"(PHP 4)";i:2;s:62:"array hw_getchilddoccollobj ( int $connection, int $objectID )";i:3;s:71:"Returns an array of object records for child documents of a collection.";}
a:4:{i:0;s:12:"hw_GetObject";i:1;s:7:"(PHP 4)";i:2;s:74:"mixed hw_getobject ( int $connection, mixed $objectID [, string $query ] )";i:3;s:87:"Gets an object record. If the second parameter is an array of integer the function will";}
a:4:{i:0;s:19:"hw_GetObjectByQuery";i:1;s:7:"(PHP 4)";i:2;s:75:"array hw_getobjectbyquery ( int $connection, string $query, int $max_hits )";i:3;s:76:"Searches for objects on the whole server and returns an array of object ids.";}
a:4:{i:0;s:23:"hw_GetObjectByQueryColl";i:1;s:7:"(PHP 4)";i:2;s:94:"array hw_getobjectbyquerycoll ( int $connection, int $objectID, string $query, int $max_hits )";i:3;s:78:"Searches for objects in collection with ID and returns an array of object ids.";}
a:4:{i:0;s:26:"hw_GetObjectByQueryCollObj";i:1;s:7:"(PHP 4)";i:2;s:97:"array hw_getobjectbyquerycollobj ( int $connection, int $objectID, string $query, int $max_hits )";i:3;s:82:"Searches for objects in collection with ID and returns an array of object records.";}
a:4:{i:0;s:22:"hw_GetObjectByQueryObj";i:1;s:7:"(PHP 4)";i:2;s:78:"array hw_getobjectbyqueryobj ( int $connection, string $query, int $max_hits )";i:3;s:80:"Searches for objects on the whole server and returns an array of object records.";}
a:4:{i:0;s:13:"hw_GetParents";i:1;s:7:"(PHP 4)";i:2;s:54:"array hw_getparents ( int $connection, int $objectID )";i:3;s:59:"Returns the object identifiers of the parents of an object.";}
a:4:{i:0;s:16:"hw_GetParentsObj";i:1;s:7:"(PHP 4)";i:2;s:57:"array hw_getparentsobj ( int $connection, int $objectID )";i:3;s:139:"Returns object records and statistical information about the object records. Each object record belongs to a parent of the object with ID .";}
a:4:{i:0;s:13:"hw_getrellink";i:1;s:7:"(PHP 4)";i:2;s:75:"string hw_getrellink ( int $link, int $rootid, int $sourceid, int $destid )";i:3;s:0:"";}
a:4:{i:0;s:12:"hw_GetRemote";i:1;s:7:"(PHP 4)";i:2;s:51:"int hw_getremote ( int $connection, int $objectID )";i:3;s:23:"Gets a remote document.";}
a:4:{i:0;s:20:"hw_getremotechildren";i:1;s:7:"(PHP 4)";i:2;s:69:"mixed hw_getremotechildren ( int $connection, string $object_record )";i:3;s:207:"Returns the children of a remote document. Children of a remote document are remote documents itself. This makes sense if a database query has to be narrowed and is explained in Hyperwave Programmers' Guide.";}
a:4:{i:0;s:18:"hw_GetSrcByDestObj";i:1;s:7:"(PHP 4)";i:2;s:59:"array hw_getsrcbydestobj ( int $connection, int $objectID )";i:3;s:71:"Gets the object records of all anchors pointing to the object with ID .";}
a:4:{i:0;s:10:"hw_GetText";i:1;s:7:"(PHP 4)";i:2;s:75:"int hw_gettext ( int $connection, int $objectID [, mixed $rootID/prefix ] )";i:3;s:119:"Returns the document with object ID . If the document has anchors which can be inserted, they will be inserted already.";}
a:4:{i:0;s:14:"hw_getusername";i:1;s:7:"(PHP 4)";i:2;s:41:"string hw_getusername ( int $connection )";i:3;s:39:"Returns the username of the connection.";}
a:4:{i:0;s:11:"hw_Identify";i:1;s:7:"(PHP 4)";i:2;s:68:"string hw_identify ( int $link, string $username, string $password )";i:3;s:219:"Identifies as user with and . Identification is only valid for the current session. I do not think this function will be needed very often. In most cases it will be easier to identify with the opening of the connection.";}
a:4:{i:0;s:16:"hw_InCollections";i:1;s:7:"(PHP 4)";i:2;s:119:"array hw_incollections ( int $connection, array $object_id_array, array $collection_id_array, int $return_collections )";i:3;s:114:"Checks whether a set of objects (documents or collections) specified by the is part of the collections listed in .";}
a:4:{i:0;s:7:"hw_Info";i:1;s:7:"(PHP 4)";i:2;s:34:"string hw_info ( int $connection )";i:3;s:49:"Returns information about the current connection.";}
a:4:{i:0;s:10:"hw_InsColl";i:1;s:7:"(PHP 4)";i:2;s:70:"int hw_inscoll ( int $connection, int $objectID, array $object_array )";i:3;s:79:"Inserts a new collection with attributes as in into collection with object ID .";}
a:4:{i:0;s:9:"hw_InsDoc";i:1;s:7:"(PHP 4)";i:2;s:94:"int hw_insdoc ( resource $connection, int $parentID, string $object_record [, string $text ] )";i:3;s:62:"Inserts a new document with attributes as in into acollection.";}
a:4:{i:0;s:16:"hw_insertanchors";i:1;s:16:"(PHP 4 >= 4.0.4)";i:2;s:91:"bool hw_insertanchors ( int $hwdoc, array $anchorecs, array $dest [, array $urlprefixes ] )";i:3;s:0:"";}
a:4:{i:0;s:17:"hw_InsertDocument";i:1;s:7:"(PHP 4)";i:2;s:75:"int hw_insertdocument ( int $connection, int $parent_id, int $hw_document )";i:3;s:45:"Uploads a document into the given collection.";}
a:4:{i:0;s:15:"hw_InsertObject";i:1;s:7:"(PHP 4)";i:2;s:78:"int hw_insertobject ( int $connection, string $object_rec, string $parameter )";i:3;s:34:"Inserts an object into the server.";}
a:4:{i:0;s:8:"hw_mapid";i:1;s:7:"(PHP 4)";i:2;s:64:"int hw_mapid ( int $connection, int $server_id, int $object_id )";i:3;s:114:"Maps a global object id on any hyperwave server, even those you did not connect to with, onto a virtual object id.";}
a:4:{i:0;s:15:"hw_Modifyobject";i:1;s:7:"(PHP 4)";i:2;s:105:"bool hw_modifyobject ( int $connection, int $object_to_change, array $remove, array $add [, int $mode ] )";i:3;s:348:"This command allows to remove, add, or modify individual attributes of an object record. The object is specified by the Object ID . In order to modify an attribute one will have to remove the old one and add a new one. will always remove the attributes before it adds attributes unless the value of the attribute to remove is not a string or array.";}
a:4:{i:0;s:5:"hw_mv";i:1;s:7:"(PHP 4)";i:2;s:90:"int hw_mv ( int $connection, array $object_id_array, int $source_id, int $destination_id )";i:3;s:57:"Moves the specified objects from a collection to another.";}
a:4:{i:0;s:15:"hw_New_Document";i:1;s:7:"(PHP 4)";i:2;s:88:"int hw_new_document ( string $object_record, string $document_data, int $document_size )";i:3;s:80:"Returns a new Hyperwave document with the given document data and object record.";}
a:4:{i:0;s:15:"hw_objrec2array";i:1;s:7:"(PHP 4)";i:2;s:66:"array hw_objrec2array ( string $object_record [, array $format ] )";i:3;s:33:"Converts an into an object array.";}
a:4:{i:0;s:18:"hw_Output_Document";i:1;s:7:"(PHP 4)";i:2;s:44:"bool hw_output_document ( int $hw_document )";i:3;s:41:"Prints the document without the BODY tag.";}
a:4:{i:0;s:11:"hw_pConnect";i:1;s:7:"(PHP 4)";i:2;s:83:"int hw_pconnect ( string $host, int $port [, string $username ], string $password )";i:3;s:111:"Opens a persistent connection to a Hyperwave server. You can have multiple persistent connections open at once.";}
a:4:{i:0;s:15:"hw_PipeDocument";i:1;s:7:"(PHP 4)";i:2;s:79:"int hw_pipedocument ( int $connection, int $objectID [, array $url_prefixes ] )";i:3;s:142:"Gets the Hyperwave document with the given object ID. If the document has anchors which can be inserted, they will have been inserted already.";}
a:4:{i:0;s:7:"hw_Root";i:1;s:7:"(PHP 4)";i:2;s:20:"int hw_root ( void )";i:3;s:164:"Returns the object ID of the hyperroot collection. Currently this is always 0. The child collection of the hyperroot is the root collection of the connected server.";}
a:4:{i:0;s:14:"hw_setlinkroot";i:1;s:7:"(PHP 4)";i:2;s:45:"int hw_setlinkroot ( int $link, int $rootid )";i:3;s:0:"";}
a:4:{i:0;s:7:"hw_stat";i:1;s:7:"(PHP 4)";i:2;s:28:"string hw_stat ( int $link )";i:3;s:0:"";}
a:4:{i:0;s:9:"hw_Unlock";i:1;s:7:"(PHP 4)";i:2;s:49:"bool hw_unlock ( int $connection, int $objectID )";i:3;s:49:"Unlocks a document, so other users regain access.";}
a:4:{i:0;s:6:"hw_Who";i:1;s:7:"(PHP 4)";i:2;s:32:"array hw_who ( int $connection )";i:3;s:43:"Gets the list of currently logged in users.";}
a:4:{i:0;s:15:"hw_api::checkin";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:41:"bool hw_api::checkin ( array $parameter )";i:3;s:421:"This function checks in an object or a whole hierarchy of objects. The parameters array contains the required element 'objectIdentifier' and the optional element 'version', 'comment', 'mode' and 'objectQuery'. 'version' sets the version of the object. It consists of the major and minor version separated by a period. If the version is not set, the minor version is incremented. 'mode' can be one of the following values:";}
a:4:{i:0;s:16:"hw_api::checkout";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:42:"bool hw_api::checkout ( array $parameter )";i:3;s:67:"This function checks out an object or a whole hierarchy of objects.";}
a:4:{i:0;s:16:"hw_api::children";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:43:"array hw_api::children ( array $parameter )";i:3;s:139:"Retrieves the children of a collection or the attributes of a document. The children can be further filtered by specifying an object query.";}
a:4:{i:0;s:15:"hw_api::content";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:51:"HW_API_Content hw_api::content ( array $parameter )";i:3;s:70:"This function returns the content of a document as an object of type .";}
a:4:{i:0;s:12:"hw_api::copy";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:48:"hw_api_content hw_api::copy ( array $parameter )";i:3;s:121:"This function will make a physical copy including the content if it exists and returns the new object or an error object.";}
a:4:{i:0;s:14:"hw_api::dbstat";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:49:"hw_api_object hw_api::dbstat ( array $parameter )";i:3;s:41:"Returns statistics about database server.";}
a:4:{i:0;s:14:"hw_api::dcstat";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:49:"hw_api_object hw_api::dcstat ( array $parameter )";i:3;s:47:"Returns statistics about document cache server.";}
a:4:{i:0;s:18:"hw_api::dstanchors";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:45:"array hw_api::dstanchors ( array $parameter )";i:3;s:47:"Retrieves all destination anchors of an object.";}
a:4:{i:0;s:22:"hw_api::dstofsrcanchor";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:57:"hw_api_object hw_api::dstofsrcanchor ( array $parameter )";i:3;s:152:"Retrieves the destination object pointed by the specified source anchors. The destination object can either be a destination anchor or a whole document.";}
a:4:{i:0;s:12:"hw_api::find";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:39:"array hw_api::find ( array $parameter )";i:3;s:425:"This functions searches for objects either by executing a key or/and full text query. The found objects can further be filtered by an optional object query. They are sorted by their importance. The second search operation is relatively slow and its result can be limited to a certain number of hits. This allows to perform an incremental search, each returning just a subset of all found documents, starting at a given index.";}
a:4:{i:0;s:14:"hw_api::ftstat";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:49:"hw_api_object hw_api::ftstat ( array $parameter )";i:3;s:41:"Returns statistics about fulltext server.";}
a:4:{i:0;s:14:"hw_api::hwstat";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:49:"hw_api_object hw_api::hwstat ( array $parameter )";i:3;s:42:"Returns statistics about Hyperwave server.";}
a:4:{i:0;s:16:"hw_api::identify";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:42:"bool hw_api::identify ( array $parameter )";i:3;s:31:"Logs into the Hyperwave Server.";}
a:4:{i:0;s:12:"hw_api::info";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:39:"array hw_api::info ( array $parameter )";i:3;s:47:"Returns information about server configuration.";}
a:4:{i:0;s:14:"hw_api::insert";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:49:"hw_api_object hw_api::insert ( array $parameter )";i:3;s:137:"Insert a new object. The object type can be user, group, document or anchor. Depending on the type other object attributes has to be set.";}
a:4:{i:0;s:20:"hw_api::insertanchor";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:55:"hw_api_object hw_api::insertanchor ( array $parameter )";i:3;s:125:"This function is a shortcut for . It inserts an object of type anchor and sets some of the attributes required for an anchor.";}
a:4:{i:0;s:24:"hw_api::insertcollection";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:59:"hw_api_object hw_api::insertcollection ( array $parameter )";i:3;s:132:"This function is a shortcut for . It inserts an object of type collection and sets some of the attributes required for a collection.";}
a:4:{i:0;s:22:"hw_api::insertdocument";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:57:"hw_api_object hw_api::insertdocument ( array $parameter )";i:3;s:124:"This function is a shortcut for . It inserts an object with content and sets some of the attributes required for a document.";}
a:4:{i:0;s:12:"hw_api::link";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:38:"bool hw_api::link ( array $parameter )";i:3;s:97:"Creates a link to an object. Accessing this link is like accessing the object to links points to.";}
a:4:{i:0;s:12:"hw_api::lock";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:38:"bool hw_api::lock ( array $parameter )";i:3;s:137:"Locks an object for exclusive editing by the user calling this function. The object can be only unlocked by this user or the system user.";}
a:4:{i:0;s:12:"hw_api::move";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:38:"bool hw_api::move ( array $parameter )";i:3;s:33:"Moves object between collections.";}
a:4:{i:0;s:14:"hw_api::object";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:49:"hw_api_object hw_api::object ( array $parameter )";i:3;s:119:"This function retrieves the attribute information of an object of any version. It will not return the document content.";}
a:4:{i:0;s:22:"hw_api::objectbyanchor";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:57:"hw_api_object hw_api::objectbyanchor ( array $parameter )";i:3;s:66:"This function retrieves an object the specified anchor belongs to.";}
a:4:{i:0;s:15:"hw_api::parents";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:42:"array hw_api::parents ( array $parameter )";i:3;s:102:"Retrieves the parents of an object. The parents can be further filtered by specifying an object query.";}
a:4:{i:0;s:14:"hw_api::remove";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:40:"bool hw_api::remove ( array $parameter )";i:3;s:85:"Removes an object from the specified parent. Collections will be removed recursively.";}
a:4:{i:0;s:15:"hw_api::replace";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:50:"hw_api_object hw_api::replace ( array $parameter )";i:3;s:53:"Replaces the attributes and the content of an object.";}
a:4:{i:0;s:27:"hw_api::setcommittedversion";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:62:"hw_api_object hw_api::setcommittedversion ( array $parameter )";i:3;s:163:"Commits a version of a document. The committed version is the one which is visible to users with read access. By default the last version is the committed version.";}
a:4:{i:0;s:18:"hw_api::srcanchors";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:45:"array hw_api::srcanchors ( array $parameter )";i:3;s:42:"Retrieves all source anchors of an object.";}
a:4:{i:0;s:17:"hw_api::srcsofdst";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:44:"array hw_api::srcsofdst ( array $parameter )";i:3;s:150:"Retrieves all the source anchors pointing to the specified destination. The destination object can either be a destination anchor or a whole document.";}
a:4:{i:0;s:14:"hw_api::unlock";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:40:"bool hw_api::unlock ( array $parameter )";i:3;s:106:"Unlocks a locked object. Only the user who has locked the object and the system user may unlock an object.";}
a:4:{i:0;s:12:"hw_api::user";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:47:"hw_api_object hw_api::user ( array $parameter )";i:3;s:28:"Returns the own user object.";}
a:4:{i:0;s:16:"hw_api::userlist";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:43:"array hw_api::userlist ( array $parameter )";i:3;s:38:"Returns a list of all logged in users.";}
a:4:{i:0;s:21:"hw_api_attribute::key";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:37:"string hw_api_attribute::key ( void )";i:3;s:34:"Returns the name of the attribute.";}
a:4:{i:0;s:30:"hw_api_attribute::langdepvalue";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:58:"string hw_api_attribute::langdepvalue ( string $language )";i:3;s:57:"Returns the value in the given language of the attribute.";}
a:4:{i:0;s:23:"hw_api_attribute::value";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:39:"string hw_api_attribute::value ( void )";i:3;s:32:"Gets the value of the attribute.";}
a:4:{i:0;s:24:"hw_api_attribute::values";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:39:"array hw_api_attribute::values ( void )";i:3;s:33:"Gets all values of the attribute.";}
a:4:{i:0;s:24:"hw_api_content::mimetype";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:40:"string hw_api_content::mimetype ( void )";i:3;s:36:"Returns the mimetype of the content.";}
a:4:{i:0;s:20:"hw_api_content::read";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:56:"string hw_api_content::read ( string $buffer, int $len )";i:3;s:51:"Reads bytes from the content into the given buffer.";}
a:4:{i:0;s:19:"hw_api_error::count";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:32:"int hw_api_error::count ( void )";i:3;s:36:"Returns the number of error reasons.";}
a:4:{i:0;s:20:"hw_api_error::reason";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:43:"HW_API_Reason hw_api_error::reason ( void )";i:3;s:31:"Returns the first error reason.";}
a:4:{i:0;s:21:"hw_api_object::assign";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:47:"bool hw_api_object::assign ( array $parameter )";i:3;s:35:"Clones the attributes of an object.";}
a:4:{i:0;s:27:"hw_api_object::attreditable";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:53:"bool hw_api_object::attreditable ( array $parameter )";i:3;s:40:"Checks whether an attribute is editable.";}
a:4:{i:0;s:20:"hw_api_object::count";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:45:"int hw_api_object::count ( array $parameter )";i:3;s:33:"Returns the number of attributes.";}
a:4:{i:0;s:21:"hw_api_object::insert";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:58:"bool hw_api_object::insert ( HW_API_Attribute $attribute )";i:3;s:32:"Adds an attribute to the object.";}
a:4:{i:0;s:21:"hw_api_object::remove";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:43:"bool hw_api_object::remove ( string $name )";i:3;s:42:"Removes the attribute with the given name.";}
a:4:{i:0;s:20:"hw_api_object::title";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:48:"string hw_api_object::title ( array $parameter )";i:3;s:28:"Returns the title attribute.";}
a:4:{i:0;s:20:"hw_api_object::value";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:44:"string hw_api_object::value ( string $name )";i:3;s:30:"Returns value of an attribute.";}
a:4:{i:0;s:26:"hw_api_reason::description";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:42:"string hw_api_reason::description ( void )";i:3;s:35:"Returns the description of a reason";}
a:4:{i:0;s:19:"hw_api_reason::type";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:42:"HW_API_Reason hw_api_reason::type ( void )";i:3;s:29:"Returns the type of a reason.";}
a:4:{i:0;s:19:"hwapi_attribute_new";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:74:"HW_API_Attribute hwapi_attribute_new ([ string $name [, string $value ]] )";i:3;s:73:"Creates a new instance of hw_api_attribute with the given name and value.";}
a:4:{i:0;s:17:"hwapi_content_new";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:70:"HW_API_Content hwapi_content_new ( string $content, string $mimetype )";i:3;s:46:"Creates a new content object from the string .";}
a:4:{i:0;s:11:"hwapi_hgcsp";i:1;s:38:"(PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN)";i:2;s:54:"HW_API hwapi_hgcsp ( string $hostname [, int $port ] )";i:3;s:80:"Opens a connection to the Hyperwave server on host . The protocol used is HGCSP.";}
a:4:{i:0;s:16:"hwapi_object_new";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:51:"hw_api_object hwapi_object_new ( array $parameter )";i:3;s:37:"Creates a new instance of the class .";}
a:4:{i:0;s:25:"java_last_exception_clear";i:1;s:16:"(PHP 4 >= 4.0.2)";i:2;s:39:"void java_last_exception_clear ( void )";i:3;s:27:"Clears last Java exception.";}
a:4:{i:0;s:23:"java_last_exception_get";i:1;s:16:"(PHP 4 >= 4.0.2)";i:2;s:39:"object java_last_exception_get ( void )";i:3;s:25:"Gets last Java exception.";}
a:4:{i:0;s:16:"ldap_8859_to_t61";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:41:"string ldap_8859_to_t61 ( string $value )";i:3;s:35:"Translate characters to characters.";}
a:4:{i:0;s:8:"ldap_add";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"bool ldap_add ( resource $link_identifier, string $dn, array $entry )";i:3;s:34:"Add entries in the LDAP directory.";}
a:4:{i:0;s:9:"ldap_bind";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:106:"bool ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] )";i:3;s:60:"Binds to the LDAP directory with specified RDN and password.";}
a:4:{i:0;s:10:"ldap_close";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:12:"ldap_compare";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:94:"mixed ldap_compare ( resource $link_identifier, string $dn, string $attribute, string $value )";i:3;s:67:"Compare of with value of same attribute in an LDAP directory entry.";}
a:4:{i:0;s:12:"ldap_connect";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:72:"resource ldap_connect ([ string $hostname = NULL [, int $port = 389 ]] )";i:3;s:62:"Establishes a connection to a LDAP server on a specified and .";}
a:4:{i:0;s:34:"ldap_control_paged_result_response";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:117:"bool ldap_control_paged_result_response ( resource $link, resource $result [, string &$cookie [, int &$estimated ]] )";i:3;s:55:"Retrieve the pagination information send by the server.";}
a:4:{i:0;s:25:"ldap_control_paged_result";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:118:"bool ldap_control_paged_result ( resource $link, int $pagesize [, bool $iscritical = false [, string $cookie = "" ]] )";i:3;s:80:"Enable LDAP pagination by sending the pagination control (page size, cookie...).";}
a:4:{i:0;s:18:"ldap_count_entries";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"int ldap_count_entries ( resource $link_identifier, resource $result_identifier )";i:3;s:81:"Returns the number of entries stored in the result of previous search operations.";}
a:4:{i:0;s:11:"ldap_delete";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"bool ldap_delete ( resource $link_identifier, string $dn )";i:3;s:45:"Deletes a particular entry in LDAP directory.";}
a:4:{i:0;s:11:"ldap_dn2ufn";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"string ldap_dn2ufn ( string $dn )";i:3;s:78:"Turns the specified, into a more user-friendly form, stripping off type names.";}
a:4:{i:0;s:12:"ldap_err2str";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"string ldap_err2str ( int $errno )";i:3;s:272:"Returns the string error message explaining the error number . While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.";}
a:4:{i:0;s:10:"ldap_errno";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"int ldap_errno ( resource $link_identifier )";i:3;s:138:"Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using .";}
a:4:{i:0;s:10:"ldap_error";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:47:"string ldap_error ( resource $link_identifier )";i:3;s:314:"Returns the string error message explaining the error generated by the last LDAP command for the given . While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.";}
a:4:{i:0;s:15:"ldap_explode_dn";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:54:"array ldap_explode_dn ( string $dn, int $with_attrib )";i:3;s:127:"Splits the DN returned by and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN.";}
a:4:{i:0;s:20:"ldap_first_attribute";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:92:"string ldap_first_attribute ( resource $link_identifier, resource $result_entry_identifier )";i:3;s:104:"Gets the first attribute in the given entry. Remaining attributes are retrieved by calling successively.";}
a:4:{i:0;s:16:"ldap_first_entry";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"resource ldap_first_entry ( resource $link_identifier, resource $result_identifier )";i:3;s:152:"Returns the entry identifier for first entry in the result. This entry identifier is then supplied to routine to get successive entries from the result.";}
a:4:{i:0;s:20:"ldap_first_reference";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:66:"resource ldap_first_reference ( resource $link, resource $result )";i:3;s:0:"";}
a:4:{i:0;s:16:"ldap_free_result";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"bool ldap_free_result ( resource $result_identifier )";i:3;s:135:"Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates.";}
a:4:{i:0;s:19:"ldap_get_attributes";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:90:"array ldap_get_attributes ( resource $link_identifier, resource $result_entry_identifier )";i:3;s:63:"Reads attributes and values from an entry in the search result.";}
a:4:{i:0;s:11:"ldap_get_dn";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"string ldap_get_dn ( resource $link_identifier, resource $result_entry_identifier )";i:3;s:43:"Finds out the DN of an entry in the result.";}
a:4:{i:0;s:16:"ldap_get_entries";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"array ldap_get_entries ( resource $link_identifier, resource $result_identifier )";i:3;s:98:"Reads multiple entries from the given result, and then reading the attributes and multiple values.";}
a:4:{i:0;s:15:"ldap_get_option";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:79:"bool ldap_get_option ( resource $link_identifier, int $option, mixed &$retval )";i:3;s:42:"Sets to the value of the specified option.";}
a:4:{i:0;s:19:"ldap_get_values_len";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:109:"array ldap_get_values_len ( resource $link_identifier, resource $result_entry_identifier, string $attribute )";i:3;s:65:"Reads all the values of the attribute in the entry in the result.";}
a:4:{i:0;s:15:"ldap_get_values";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:105:"array ldap_get_values ( resource $link_identifier, resource $result_entry_identifier, string $attribute )";i:3;s:65:"Reads all the values of the attribute in the entry in the result.";}
a:4:{i:0;s:9:"ldap_list";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:176:"resource ldap_list ( resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )";i:3;s:69:"Performs the search for a specified on the directory with the scope .";}
a:4:{i:0;s:12:"ldap_mod_add";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:73:"bool ldap_mod_add ( resource $link_identifier, string $dn, array $entry )";i:3;s:179:"Adds one or more attributes to the specified . It performs the modification at the attribute level as opposed to the object level. Object-level additions are done by the function.";}
a:4:{i:0;s:12:"ldap_mod_del";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:73:"bool ldap_mod_del ( resource $link_identifier, string $dn, array $entry )";i:3;s:184:"Removes one or more attributes from the specified . It performs the modification at the attribute level as opposed to the object level. Object-level deletions are done by the function.";}
a:4:{i:0;s:16:"ldap_mod_replace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:77:"bool ldap_mod_replace ( resource $link_identifier, string $dn, array $entry )";i:3;s:189:"Replaces one or more attributes from the specified . It performs the modification at the attribute level as opposed to the object level. Object-level modifications are done by the function.";}
a:4:{i:0;s:11:"ldap_modify";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:72:"bool ldap_modify ( resource $link_identifier, string $dn, array $entry )";i:3;s:93:"Modify the existing entries in the LDAP directory. The structure of the entry is same as in .";}
a:4:{i:0;s:19:"ldap_next_attribute";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"string ldap_next_attribute ( resource $link_identifier, resource $result_entry_identifier )";i:3;s:88:"Retrieves the attributes in an entry. The first call to is made with the returned from .";}
a:4:{i:0;s:15:"ldap_next_entry";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:89:"resource ldap_next_entry ( resource $link_identifier, resource $result_entry_identifier )";i:3;s:200:"Retrieve the entries stored in the result. Successive calls to the return entries one by one till there are no more entries. The first call to is made after the call to with the as returned from the .";}
a:4:{i:0;s:19:"ldap_next_reference";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:64:"resource ldap_next_reference ( resource $link, resource $entry )";i:3;s:0:"";}
a:4:{i:0;s:20:"ldap_parse_reference";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:80:"bool ldap_parse_reference ( resource $link, resource $entry, array &$referrals )";i:3;s:0:"";}
a:4:{i:0;s:17:"ldap_parse_result";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:140:"bool ldap_parse_result ( resource $link, resource $result, int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )";i:3;s:0:"";}
a:4:{i:0;s:9:"ldap_read";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:176:"resource ldap_read ( resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )";i:3;s:129:"Performs the search for a specified on the directory with the scope . So it is equivalent to reading an entry from the directory.";}
a:4:{i:0;s:11:"ldap_rename";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:113:"bool ldap_rename ( resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn )";i:3;s:40:"The entry specified by is renamed/moved.";}
a:4:{i:0;s:14:"ldap_sasl_bind";i:1;s:7:"(PHP 5)";i:2;s:243:"bool ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] )";i:3;s:0:"";}
a:4:{i:0;s:11:"ldap_search";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:178:"resource ldap_search ( resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )";i:3;s:133:"Performs the search for a specified filter on the directory with the scope of . This is equivalent to searching the entire directory.";}
a:4:{i:0;s:15:"ldap_set_option";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:78:"bool ldap_set_option ( resource $link_identifier, int $option, mixed $newval )";i:3;s:46:"Sets the value of the specified option to be .";}
a:4:{i:0;s:20:"ldap_set_rebind_proc";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:64:"bool ldap_set_rebind_proc ( resource $link, callable $callback )";i:3;s:0:"";}
a:4:{i:0;s:9:"ldap_sort";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:71:"bool ldap_sort ( resource $link, resource $result, string $sortfilter )";i:3;s:47:"Sort the result of a LDAP search, returned by .";}
a:4:{i:0;s:14:"ldap_start_tls";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:38:"bool ldap_start_tls ( resource $link )";i:3;s:0:"";}
a:4:{i:0;s:16:"ldap_t61_to_8859";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:41:"string ldap_t61_to_8859 ( string $value )";i:3;s:0:"";}
a:4:{i:0;s:11:"ldap_unbind";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"bool ldap_unbind ( resource $link_identifier )";i:3;s:32:"Unbinds from the LDAP directory.";}
a:4:{i:0;s:10:"notes_body";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:69:"array notes_body ( string $server, string $mailbox, int $msg_number )";i:3;s:0:"";}
a:4:{i:0;s:13:"notes_copy_db";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:75:"bool notes_copy_db ( string $from_database_name, string $to_database_name )";i:3;s:0:"";}
a:4:{i:0;s:15:"notes_create_db";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:46:"bool notes_create_db ( string $database_name )";i:3;s:0:"";}
a:4:{i:0;s:17:"notes_create_note";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:67:"bool notes_create_note ( string $database_name, string $form_name )";i:3;s:0:"";}
a:4:{i:0;s:13:"notes_drop_db";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:44:"bool notes_drop_db ( string $database_name )";i:3;s:0:"";}
a:4:{i:0;s:15:"notes_find_note";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:77:"int notes_find_note ( string $database_name, string $name [, string $type ] )";i:3;s:0:"";}
a:4:{i:0;s:17:"notes_header_info";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:77:"object notes_header_info ( string $server, string $mailbox, int $msg_number )";i:3;s:0:"";}
a:4:{i:0;s:15:"notes_list_msgs";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:35:"bool notes_list_msgs ( string $db )";i:3;s:0:"";}
a:4:{i:0;s:15:"notes_mark_read";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:82:"bool notes_mark_read ( string $database_name, string $user_name, string $note_id )";i:3;s:0:"";}
a:4:{i:0;s:17:"notes_mark_unread";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:84:"bool notes_mark_unread ( string $database_name, string $user_name, string $note_id )";i:3;s:0:"";}
a:4:{i:0;s:16:"notes_nav_create";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:61:"bool notes_nav_create ( string $database_name, string $name )";i:3;s:0:"";}
a:4:{i:0;s:12:"notes_search";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:62:"array notes_search ( string $database_name, string $keywords )";i:3;s:0:"";}
a:4:{i:0;s:12:"notes_unread";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:63:"array notes_unread ( string $database_name, string $user_name )";i:3;s:0:"";}
a:4:{i:0;s:13:"notes_version";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:45:"float notes_version ( string $database_name )";i:3;s:0:"";}
a:4:{i:0;s:13:"Memcache::add";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:77:"bool Memcache::add ( string $key, mixed $var [, int $flag [, int $expire ]] )";i:3;s:97:"stores variable with only if such key doesn't exist at the server yet. Also you can use function.";}
a:4:{i:0;s:19:"Memcache::addServer";i:1;s:24:"(PECL memcache >= 2.0.0)";i:2;s:209:"bool Memcache::addServer ( string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms ]]]]]]]] )";i:3;s:206:"adds a server to the connection pool. The connection, which was opened using will be automatically closed at the end of script execution, you can also close it manually with . You can also use the function.";}
a:4:{i:0;s:15:"Memcache::close";i:1;s:24:"(PECL memcache >= 0.4.0)";i:2;s:29:"bool Memcache::close ( void )";i:3;s:175:"closes connection to memcached server. This function doesn't close persistent connections, which are closed only during web-server shutdown/restart. Also you can use function.";}
a:4:{i:0;s:17:"Memcache::connect";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:71:"bool Memcache::connect ( string $host [, int $port [, int $timeout ]] )";i:3;s:205:"establishes a connection to the memcached server. The connection, which was opened using will be automatically closed at the end of script execution. Also you can close it with . Also you can use function.";}
a:4:{i:0;s:19:"Memcache::decrement";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:59:"int Memcache::decrement ( string $key [, int $value = 1 ] )";i:3;s:135:"decrements value of the item by . Similarly to, current value of the item is being converted to numerical and after that is subtracted.";}
a:4:{i:0;s:16:"Memcache::delete";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:59:"bool Memcache::delete ( string $key [, int $timeout = 0 ] )";i:3;s:26:"deletes an item with the .";}
a:4:{i:0;s:15:"Memcache::flush";i:1;s:24:"(PECL memcache >= 1.0.0)";i:2;s:29:"bool Memcache::flush ( void )";i:3;s:200:"immediately invalidates all existing items. doesn't actually free any resources, it only marks all the items as expired, so occupied memory will be overwritten by new items. Also you can use function.";}
a:4:{i:0;s:13:"Memcache::get";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:53:"string Memcache::get ( string $key [, int &$flags ] )";i:3;s:88:"returns previously stored data if an item with such exists on the server at this moment.";}
a:4:{i:0;s:26:"Memcache::getExtendedStats";i:1;s:24:"(PECL memcache >= 2.0.0)";i:2;s:89:"array Memcache::getExtendedStats ([ string $type [, int $slabid [, int $limit = 100 ]]] )";i:3;s:255:"returns a two-dimensional associative array with server statistics. Array keys correspond to host:port of server and values contain the individual server statistics. A failed server will have its corresponding entry set to . You can also use the function.";}
a:4:{i:0;s:25:"Memcache::getServerStatus";i:1;s:24:"(PECL memcache >= 2.1.0)";i:2;s:69:"int Memcache::getServerStatus ( string $host [, int $port = 11211 ] )";i:3;s:71:"returns a the servers online/offline status. You can also use function.";}
a:4:{i:0;s:18:"Memcache::getStats";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:81:"array Memcache::getStats ([ string $type [, int $slabid [, int $limit = 100 ]]] )";i:3;s:157:"returns an associative array with server's statistics. Array keys correspond to stats parameters and values to parameter's values. Also you can use function.";}
a:4:{i:0;s:20:"Memcache::getVersion";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:36:"string Memcache::getVersion ( void )";i:3;s:73:"returns a string with server's version number. Also you can use function.";}
a:4:{i:0;s:19:"Memcache::increment";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:59:"int Memcache::increment ( string $key [, int $value = 1 ] )";i:3;s:194:"increments value of an item by the specified . If item specified by was not numeric and cannot be converted to a number, it will change its value to . create an item if it doesn't already exist.";}
a:4:{i:0;s:18:"Memcache::pconnect";i:1;s:24:"(PECL memcache >= 0.4.0)";i:2;s:73:"mixed Memcache::pconnect ( string $host [, int $port [, int $timeout ]] )";i:3;s:192:"is similar to with the difference, that the connection it establishes is persistent. This connection is not closed after the end of script execution and by function. Also you can use function.";}
a:4:{i:0;s:17:"Memcache::replace";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:81:"bool Memcache::replace ( string $key, mixed $var [, int $flag [, int $expire ]] )";i:3;s:174:"should be used to replace value of existing item with . In case if item with such key doesn't exists, returns . For the rest behaves similarly to . Also you can use function.";}
a:4:{i:0;s:13:"Memcache::set";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:77:"bool Memcache::set ( string $key, mixed $var [, int $flag [, int $expire ]] )";i:3;s:348:"stores an item with on the memcached server. Parameter is expiration time in seconds. If it's 0, the item never expires (but memcached server doesn't guarantee this item to be stored all the time, it could be deleted from the cache to make place for other items). You can use constant as value if you want to use on-the-fly compression (uses zlib).";}
a:4:{i:0;s:30:"Memcache::setCompressThreshold";i:1;s:24:"(PECL memcache >= 2.0.0)";i:2;s:78:"bool Memcache::setCompressThreshold ( int $threshold [, float $min_savings ] )";i:3;s:77:"enables automatic compression of large values. You can also use the function.";}
a:4:{i:0;s:25:"Memcache::setServerParams";i:1;s:24:"(PECL memcache >= 2.1.0)";i:2;s:167:"bool Memcache::setServerParams ( string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = false [, bool $status [, callable $failure_callback ]]]]] )";i:3;s:68:"changes server parameters at runtime. You can also use the function.";}
a:4:{i:0;s:14:"memcache_debug";i:1;s:24:"(PECL memcache >= 0.2.0)";i:2;s:36:"bool memcache_debug ( bool $on_off )";i:3;s:70:"turns on debug output if parameter is equal to and turns off if it's .";}
a:4:{i:0;s:14:"Memcached::add";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:77:"public bool Memcached::add ( string $key, mixed $value [, int $expiration ] )";i:3;s:75:"is similar to, but the operation fails if the already exists on the server.";}
a:4:{i:0;s:19:"Memcached::addByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:102:"public bool Memcached::addByKey ( string $server_key, string $key, mixed $value [, int $expiration ] )";i:3;s:181:"is functionally equivalent to, except that the free-form can be used to map the to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.";}
a:4:{i:0;s:20:"Memcached::addServer";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:81:"public bool Memcached::addServer ( string $host, int $port [, int $weight = 0 ] )";i:3;s:332:"adds the specified server to the server pool. No connection is established to the server at this time, but if you are using consistent key distribution option (via or ), some of the internal data structures will have to be updated. Thus, if you need to add multiple servers, it is better to use as the update then happens only once.";}
a:4:{i:0;s:21:"Memcached::addServers";i:1;s:25:"(PECL memcached >= 0.1.1)";i:2;s:52:"public bool Memcached::addServers ( array $servers )";i:3;s:189:"adds to the server pool. Each entry in is supposed to be an array containing hostname, port, and, optionally, weight of the server. No connection is established to the servers at this time.";}
a:4:{i:0;s:17:"Memcached::append";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:60:"public bool Memcached::append ( string $key, string $value )";i:3;s:150:"appends the given string to the value of an existing item. The reason that is forced to be a string is that appending mixed types is not well-defined.";}
a:4:{i:0;s:22:"Memcached::appendByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:85:"public bool Memcached::appendByKey ( string $server_key, string $key, string $value )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:14:"Memcached::cas";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:95:"public bool Memcached::cas ( float $cas_token, string $key, mixed $value [, int $expiration ] )";i:3;s:418:"performs a "check and set" operation, so that the item will be stored only if no other client has updated it since it was last fetched by this client. The check is done via the parameter which is a unique 64-bit value assigned to the existing item by memcache. See the documentation for methods for how to obtain this token. Note that the token is represented as a double due to the limitations of PHP's integer space.";}
a:4:{i:0;s:19:"Memcached::casByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:120:"public bool Memcached::casByKey ( float $cas_token, string $server_key, string $key, mixed $value [, int $expiration ] )";i:3;s:181:"is functionally equivalent to, except that the free-form can be used to map the to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.";}
a:4:{i:0;s:22:"Memcached::__construct";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:60:"public Memcached::__construct() ([ string $persistent_id ] )";i:3;s:81:"Creates a Memcached instance representing the connection to the memcache servers.";}
a:4:{i:0;s:20:"Memcached::decrement";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:115:"public int Memcached::decrement ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )";i:3;s:247:"decrements a numeric item's value by the specified . If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. will set the item to the parameter if the key doesn't exist.";}
a:4:{i:0;s:25:"Memcached::decrementByKey";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:140:"public int Memcached::decrementByKey ( string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )";i:3;s:247:"decrements a numeric item's value by the specified . If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. will set the item to the parameter if the key doesn't exist.";}
a:4:{i:0;s:17:"Memcached::delete";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:64:"public bool Memcached::delete ( string $key [, int $time = 0 ] )";i:3;s:590:"deletes the from the server. The parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse and commands for this key. For this amount of time, the item is put into a delete queue, which means that it won't possible to retrieve it by the command, but and command with this key will also fail (the command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter defaults to 0 (which means that the item will be deleted immediately and further storage commands with this key will succeed).";}
a:4:{i:0;s:22:"Memcached::deleteByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:89:"public bool Memcached::deleteByKey ( string $server_key, string $key [, int $time = 0 ] )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:22:"Memcached::deleteMulti";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:69:"public bool Memcached::deleteMulti ( array $keys [, int $time = 0 ] )";i:3;s:608:"deletes the array of from the server. The parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse and commands for these keys. For this amount of time, the item is put into a delete queue, which means that it won't be possible to retrieve it by the command, but and command with these keys will also fail (the command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter defaults to 0 (which means that the item will be deleted immediately and further storage commands with these keys will succeed).";}
a:4:{i:0;s:27:"Memcached::deleteMultiByKey";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:94:"public bool Memcached::deleteMultiByKey ( string $server_key, array $keys [, int $time = 0 ] )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:16:"Memcached::fetch";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:38:"public array Memcached::fetch ( void )";i:3;s:48:"retrieves the next result from the last request.";}
a:4:{i:0;s:19:"Memcached::fetchAll";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:41:"public array Memcached::fetchAll ( void )";i:3;s:58:"retrieves all the remaining results from the last request.";}
a:4:{i:0;s:16:"Memcached::flush";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:50:"public bool Memcached::flush ([ int $delay = 0 ] )";i:3;s:385:"invalidates all existing cache items immediately (by default) or after the specified. After invalidation none of the items will be returned in response to a retrieval command (unless it's stored again under the same key after has invalidated the items). The flush does not actually free all the memory taken up by the existing items; that will happen gradually as new items are stored.";}
a:4:{i:0;s:14:"Memcached::get";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:89:"public mixed Memcached::get ( string $key [, callable $cache_cb [, float &$cas_token ]] )";i:3;s:215:"returns the item that was previously stored under the . If the item is found and variable is provided, it will contain the CAS token value for the item. See for how to use CAS tokens. may be specified via parameter.";}
a:4:{i:0;s:21:"Memcached::getAllKeys";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:43:"public array Memcached::getAllKeys ( void )";i:3;s:310:"queries each memcache server and retrieves an array of all keys stored on them at that point in time. This is not an atomic operation, so it isn't a truly consistent snapshot of the keys at point in time. As memcache doesn't guarantee to return all keys you also cannot assume that all keys have been returned.";}
a:4:{i:0;s:19:"Memcached::getByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:114:"public mixed Memcached::getByKey ( string $server_key, string $key [, callable $cache_cb [, float &$cas_token ]] )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:21:"Memcached::getDelayed";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:92:"public bool Memcached::getDelayed ( array $keys [, bool $with_cas [, callable $value_cb ]] )";i:3;s:270:"issues a request to memcache for multiple items the keys of which are specified in the array. The method does not wait for response and returns right away. When you are ready to collect the items, call either or . If is true, the CAS token values will also be requested.";}
a:4:{i:0;s:26:"Memcached::getDelayedByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:117:"public bool Memcached::getDelayedByKey ( string $server_key, array $keys [, bool $with_cas [, callable $value_cb ]] )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:19:"Memcached::getMulti";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:87:"public mixed Memcached::getMulti ( array $keys [, array &$cas_tokens [, int $flags ]] )";i:3;s:207:"is similar to, but instead of a single key item, it retrieves multiple items the keys of which are specified in the array. If variable is provided, it is filled with the CAS token values for the found items.";}
a:4:{i:0;s:24:"Memcached::getMultiByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:113:"public array Memcached::getMultiByKey ( string $server_key, array $keys [, string &$cas_tokens [, int $flags ]] )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:20:"Memcached::getOption";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:49:"public mixed Memcached::getOption ( int $option )";i:3;s:173:"This method returns the value of a Memcached . Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See for more information.";}
a:4:{i:0;s:24:"Memcached::getResultCode";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:44:"public int Memcached::getResultCode ( void )";i:3;s:86:"returns one of the constants that is the result of the last executed Memcached method.";}
a:4:{i:0;s:27:"Memcached::getResultMessage";i:1;s:25:"(PECL memcached >= 1.0.0)";i:2;s:50:"public string Memcached::getResultMessage ( void )";i:3;s:86:"returns a string that describes the result code of the last executed Memcached method.";}
a:4:{i:0;s:25:"Memcached::getServerByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:61:"public array Memcached::getServerByKey ( string $server_key )";i:3;s:80:"returns the server that would be selected by a particular in all the operations.";}
a:4:{i:0;s:24:"Memcached::getServerList";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:46:"public array Memcached::getServerList ( void )";i:3;s:60:"returns the list of all servers that are in its server pool.";}
a:4:{i:0;s:19:"Memcached::getStats";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:41:"public array Memcached::getStats ( void )";i:3;s:123:"returns an array containing the state of all available memcache servers. See specification for details on these statistics.";}
a:4:{i:0;s:21:"Memcached::getVersion";i:1;s:25:"(PECL memcached >= 0.1.5)";i:2;s:43:"public array Memcached::getVersion ( void )";i:3;s:80:"returns an array containing the version info for all available memcache servers.";}
a:4:{i:0;s:20:"Memcached::increment";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:115:"public int Memcached::increment ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )";i:3;s:171:"increments a numeric item's value by the specified . If the item's value is not numeric, an error will result. will set the item to the parameter if the key doesn't exist.";}
a:4:{i:0;s:25:"Memcached::incrementByKey";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:140:"public int Memcached::incrementByKey ( string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )";i:3;s:171:"increments a numeric item's value by the specified . If the item's value is not numeric, an error will result. will set the item to the parameter if the key doesn't exist.";}
a:4:{i:0;s:23:"Memcached::isPersistent";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:44:"public bool Memcached::isPersistent ( void )";i:3;s:77:"checks if the connections to the memcache servers are persistent connections.";}
a:4:{i:0;s:21:"Memcached::isPristine";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:42:"public bool Memcached::isPristine ( void )";i:3;s:53:"checks if the Memcache instance was recently created.";}
a:4:{i:0;s:18:"Memcached::prepend";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:61:"public bool Memcached::prepend ( string $key, string $value )";i:3;s:152:"prepends the given string to the value of an existing item. The reason that is forced to be a string is that prepending mixed types is not well-defined.";}
a:4:{i:0;s:23:"Memcached::prependByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:86:"public bool Memcached::prependByKey ( string $server_key, string $key, string $value )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:15:"Memcached::quit";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:36:"public bool Memcached::quit ( void )";i:3;s:52:"closes any open connections to the memcache servers.";}
a:4:{i:0;s:18:"Memcached::replace";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:81:"public bool Memcached::replace ( string $key, mixed $value [, int $expiration ] )";i:3;s:75:"is similar to, but the operation fails if the does not exist on the server.";}
a:4:{i:0;s:23:"Memcached::replaceByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:106:"public bool Memcached::replaceByKey ( string $server_key, string $key, mixed $value [, int $expiration ] )";i:3;s:181:"is functionally equivalent to, except that the free-form can be used to map the to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.";}
a:4:{i:0;s:26:"Memcached::resetServerList";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:47:"public bool Memcached::resetServerList ( void )";i:3;s:83:"removes all memcache servers from the known server list, reseting it back to empty.";}
a:4:{i:0;s:14:"Memcached::set";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:77:"public bool Memcached::set ( string $key, mixed $value [, int $expiration ] )";i:3;s:128:"stores the on a memcache server under the specified . The parameter can be used to control when the value is considered expired.";}
a:4:{i:0;s:19:"Memcached::setByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:102:"public bool Memcached::setByKey ( string $server_key, string $key, mixed $value [, int $expiration ] )";i:3;s:181:"is functionally equivalent to, except that the free-form can be used to map the to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.";}
a:4:{i:0;s:19:"Memcached::setMulti";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:69:"public bool Memcached::setMulti ( array $items [, int $expiration ] )";i:3;s:139:"is similar to, but instead of a single key/value item, it works on multiple items specified in . The time applies to all the items at once.";}
a:4:{i:0;s:24:"Memcached::setMultiByKey";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:94:"public bool Memcached::setMultiByKey ( string $server_key, array $items [, int $expiration ] )";i:3;s:191:"is functionally equivalent to, except that the free-form can be used to map the keys from to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.";}
a:4:{i:0;s:20:"Memcached::setOption";i:1;s:25:"(PECL memcached >= 0.1.0)";i:2;s:62:"public bool Memcached::setOption ( int $option, mixed $value )";i:3;s:170:"This method sets the value of a Memcached . Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See for more information.";}
a:4:{i:0;s:21:"Memcached::setOptions";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:52:"public bool Memcached::setOptions ( array $options )";i:3;s:63:"is a variation of the that takes an array of options to be set.";}
a:4:{i:0;s:26:"Memcached::setSaslAuthData";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:77:"public void Memcached::setSaslAuthData ( string $username, string $password )";i:3;s:101:"sets the username and password that should be used for SASL authentication with the memcache servers.";}
a:4:{i:0;s:16:"Memcached::touch";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:61:"public bool Memcached::touch ( string $key, int $expiration )";i:3;s:45:"sets a new expiration value on the given key.";}
a:4:{i:0;s:21:"Memcached::touchByKey";i:1;s:25:"(PECL memcached >= 2.0.0)";i:2;s:86:"public bool Memcached::touchByKey ( string $server_key, string $key, int $expiration )";i:3;s:101:"is functionally equivalent to, except that the free-form can be used to map the to a specific server.";}
a:4:{i:0;s:13:"mqseries_back";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:78:"void mqseries_back ( resource $hconn, resource &$compCode, resource &$reason )";i:3;s:275:"The (MQBACK) call indicates to the queue manager that all the message gets and puts that have occurred since the last syncpoint are to be backed out. Messages put as part of a unit of work are deleted; messages retrieved as part of a unit of work are reinstated on the queue.";}
a:4:{i:0;s:14:"mqseries_begin";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:100:"void mqseries_begin ( resource $hconn, array $beginOptions, resource &$compCode, resource &$reason )";i:3;s:131:"The (MQBEGIN) call begins a unit of work that is coordinated by the queue manager, and that may involve external resource managers.";}
a:4:{i:0;s:14:"mqseries_close";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:109:"void mqseries_close ( resource $hconn, resource $hobj, int $options, resource &$compCode, resource &$reason )";i:3;s:93:"The (MQCLOSE) call relinquishes access to an object, and is the inverse of the (MQOPEN) call.";}
a:4:{i:0;s:13:"mqseries_cmit";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:78:"void mqseries_cmit ( resource $hconn, resource &$compCode, resource &$reason )";i:3;s:345:"The (MQCMIT) call indicates to the queue manager that the application has reached a syncpoint, and that all of the message gets and puts that have occurred since the last syncpoint are to be made permanent. Messages put as part of a unit of work are made available to other applications; messages retrieved as part of a unit of work are deleted.";}
a:4:{i:0;s:13:"mqseries_conn";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:101:"void mqseries_conn ( string $qManagerName, resource &$hconn, resource &$compCode, resource &$reason )";i:3;s:186:"The (MQCONN) call connects an application program to a queue manager. It provides a queue manager connection handle, which is used by the application on subsequent message queuing calls.";}
a:4:{i:0;s:14:"mqseries_connx";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:123:"void mqseries_connx ( string $qManagerName, array &$connOptions, resource &$hconn, resource &$compCode, resource &$reason )";i:3;s:174:"The (MQCONNX) call connects an application program to a queue manager. It provides a queue manager connection handle, which is used by the application on subsequent MQ calls.";}
a:4:{i:0;s:13:"mqseries_disc";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:78:"void mqseries_disc ( resource $hconn, resource &$compCode, resource &$reason )";i:3;s:148:"The (MQDISC) call breaks the connection between the queue manager and the application program, and is the inverse of the (MQCONN) or (MQCONNX) call.";}
a:4:{i:0;s:12:"mqseries_get";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:171:"void mqseries_get ( resource $hConn, resource $hObj, array &$md, array &$gmo, int &$bufferLength, string &$msg, int &$data_length, resource &$compCode, resource &$reason )";i:3;s:100:"The (MQGET) call retrieves a message from a local queue that has been opened using the (MQOPEN) call";}
a:4:{i:0;s:12:"mqseries_inq";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:212:"void mqseries_inq ( resource $hconn, resource $hobj, int $selectorCount, array $selectors, int $intAttrCount, resource &$intAttr, int $charAttrLength, resource &$charAttr, resource &$compCode, resource &$reason )";i:3;s:116:"The (MQINQ) call returns an array of integers and a set of character strings containing the attributes of an object.";}
a:4:{i:0;s:13:"mqseries_open";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:125:"void mqseries_open ( resource $hconn, array &$objDesc, int $option, resource &$hobj, resource &$compCode, resource &$reason )";i:3;s:50:"The (MQOPEN) call establishes access to an object.";}
a:4:{i:0;s:13:"mqseries_put1";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:150:"void mqseries_put1 ( resource $hconn, resource &$objDesc, resource &$msgDesc, resource &$pmo, string $buffer, resource &$compCode, resource &$reason )";i:3;s:74:"The (MQPUT1) call puts one message on a queue. The queue need not be open.";}
a:4:{i:0;s:12:"mqseries_put";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:135:"void mqseries_put ( resource $hConn, resource $hObj, array &$md, array &$pmo, string $message, resource &$compCode, resource &$reason )";i:3;s:117:"The (MQPUT) call puts a message on a queue or distribution list. The queue or distribution list must already be open.";}
a:4:{i:0;s:12:"mqseries_set";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:206:"void mqseries_set ( resource $hconn, resource $hobj, int $selectorcount, array $selectors, int $intattrcount, array $intattrs, int $charattrlength, array $charattrs, resource &$compCode, resource &$reason )";i:3;s:115:"The (MQSET) call is used to change the attributes of an object represented by a handle. The object must be a queue.";}
a:4:{i:0;s:17:"mqseries_strerror";i:1;s:25:"(PECL mqseries >= 0.10.0)";i:2;s:40:"string mqseries_strerror ( int $reason )";i:3;s:62:"returns the message that correspond to the reason result code.";}
a:4:{i:0;s:10:"checkdnsrr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"bool checkdnsrr ( string $host [, string $type = "MX" ] )";i:3;s:51:"Searches DNS for records of type corresponding to .";}
a:4:{i:0;s:8:"closelog";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:22:"bool closelog ( void )";i:3;s:87:"closes the descriptor being used to write to the system logger. The use of is optional.";}
a:4:{i:0;s:23:"define_syslog_variables";i:1;s:22:"(PHP 4, PHP 5 < 5.4.0)";i:2;s:37:"void define_syslog_variables ( void )";i:3;s:55:"Initializes all variables used in the syslog functions.";}
a:4:{i:0;s:16:"dns_check_record";i:1;s:7:"(PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:10:"dns_get_mx";i:1;s:7:"(PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:14:"dns_get_record";i:1;s:7:"(PHP 5)";i:2;s:126:"array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool &$raw = false ]]]] )";i:3;s:54:"Fetch DNS Resource Records associated with the given .";}
a:4:{i:0;s:9:"fsockopen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:150:"resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )";i:3;s:60:"Initiates a socket connection to the resource specified by .";}
a:4:{i:0;s:13:"gethostbyaddr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"string gethostbyaddr ( string $ip_address )";i:3;s:57:"Returns the host name of the Internet host specified by .";}
a:4:{i:0;s:13:"gethostbyname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"string gethostbyname ( string $hostname )";i:3;s:60:"Returns the IPv4 address of the Internet host specified by .";}
a:4:{i:0;s:14:"gethostbynamel";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"array gethostbynamel ( string $hostname )";i:3;s:82:"Returns a list of IPv4 addresses to which the Internet host specified by resolves.";}
a:4:{i:0;s:11:"gethostname";i:1;s:14:"(PHP >= 5.3.0)";i:2;s:27:"string gethostname ( void )";i:3;s:50:"gets the standard host name for the local machine.";}
a:4:{i:0;s:7:"getmxrr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:70:"bool getmxrr ( string $hostname, array &$mxhosts [, array &$weight ] )";i:3;s:46:"Searches DNS for MX records corresponding to .";}
a:4:{i:0;s:14:"getprotobyname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"int getprotobyname ( string $name )";i:3;s:65:"returns the protocol number associated with the protocol as per .";}
a:4:{i:0;s:16:"getprotobynumber";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"string getprotobynumber ( int $number )";i:3;s:59:"returns the protocol name associated with protocol as per .";}
a:4:{i:0;s:13:"getservbyname";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"int getservbyname ( string $service, string $protocol )";i:3;s:73:"returns the Internet port which corresponds to for the specified as per .";}
a:4:{i:0;s:13:"getservbyport";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"string getservbyport ( int $port, string $protocol )";i:3;s:71:"returns the Internet service associated with for the specified as per .";}
a:4:{i:0;s:24:"header_register_callback";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:52:"bool header_register_callback ( callable $callback )";i:3;s:72:"Registers a function that will be called when PHP starts sending output.";}
a:4:{i:0;s:13:"header_remove";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:38:"void header_remove ([ string $name ] )";i:3;s:45:"Removes an HTTP header previously set using .";}
a:4:{i:0;s:6:"header";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"void header ( string $string [, bool $replace = true [, int $http_response_code ]] )";i:3;s:70:"is used to send a raw header. See the for more information on headers.";}
a:4:{i:0;s:12:"headers_list";i:1;s:7:"(PHP 5)";i:2;s:27:"array headers_list ( void )";i:3;s:133:"will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use .";}
a:4:{i:0;s:12:"headers_sent";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"bool headers_sent ([ string &$file [, int &$line ]] )";i:3;s:42:"Checks if or where headers have been sent.";}
a:4:{i:0;s:18:"http_response_code";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:48:"int http_response_code ([ int $response_code ] )";i:3;s:138:"If you pass no parameters then http_response_code will get the current status code. If you pass a parameter it will set the response code.";}
a:4:{i:0;s:9:"inet_ntop";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:36:"string inet_ntop ( string $in_addr )";i:3;s:162:"This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate string representation.";}
a:4:{i:0;s:9:"inet_pton";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:36:"string inet_pton ( string $address )";i:3;s:174:"This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.";}
a:4:{i:0;s:7:"ip2long";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"int ip2long ( string $ip_address )";i:3;s:121:"The function generates an IPv4 Internet network address from its Internet standard format (dotted string) representation.";}
a:4:{i:0;s:7:"long2ip";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"string long2ip ( string $proper_address )";i:3;s:123:"The function generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.";}
a:4:{i:0;s:7:"openlog";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"bool openlog ( string $ident, int $option, int $facility )";i:3;s:54:"opens a connection to the system logger for a program.";}
a:4:{i:0;s:10:"pfsockopen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:151:"resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )";i:3;s:147:"This function behaves exactly as with the difference that the connection is not closed after the script finishes. It is the persistent version of .";}
a:4:{i:0;s:9:"setcookie";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:158:"bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )";i:3;s:290:"defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including and tags as well as any whitespace.";}
a:4:{i:0;s:12:"setrawcookie";i:1;s:7:"(PHP 5)";i:2;s:161:"bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )";i:3;s:114:"is exactly the same as except that the cookie value will not be automatically urlencoded when sent to the browser.";}
a:4:{i:0;s:17:"socket_get_status";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:19:"socket_set_blocking";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:18:"socket_set_timeout";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:6:"syslog";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"bool syslog ( int $priority, string $message )";i:3;s:70:"generates a log message that will be distributed by the system logger.";}
a:4:{i:0;s:10:"rrd_create";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:52:"bool rrd_create ( string $filename, array $options )";i:3;s:30:"Creates the rdd database file.";}
a:4:{i:0;s:9:"rrd_error";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:25:"string rrd_error ( void )";i:3;s:40:"Returns latest global rrd error message.";}
a:4:{i:0;s:9:"rrd_fetch";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:52:"array rrd_fetch ( string $filename, array $options )";i:3;s:159:"Gets data for graph output from RRD database file as array. This function has same result as, but fetched data are returned as array, no image file is created.";}
a:4:{i:0;s:9:"rrd_first";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:53:"int rrd_first ( string $file [, int $raaindex = 0 ] )";i:3;s:69:"Returns the first data sample from the specified RRA of the RRD file.";}
a:4:{i:0;s:9:"rrd_graph";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:52:"array rrd_graph ( string $filename, array $options )";i:3;s:50:"Creates image for a particular data from RRD file.";}
a:4:{i:0;s:8:"rrd_info";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:35:"array rrd_info ( string $filename )";i:3;s:55:"Returns information about particular RRD database file.";}
a:4:{i:0;s:8:"rrd_last";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:33:"int rrd_last ( string $filename )";i:3;s:73:"Returns the UNIX timestamp of the most recent update of the RRD database.";}
a:4:{i:0;s:14:"rrd_lastupdate";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:41:"array rrd_lastupdate ( string $filename )";i:3;s:120:"Gets array of the UNIX timestamp and the values stored for each date in the most recent update of the RRD database file.";}
a:4:{i:0;s:11:"rrd_restore";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:75:"bool rrd_restore ( string $xml_file, string $rrd_file [, array $options ] )";i:3;s:40:"Restores the RRD file from the XML dump.";}
a:4:{i:0;s:8:"rrd_tune";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:50:"bool rrd_tune ( string $filename, array $options )";i:3;s:92:"Change some options in the RRD dabase header file. E.g. renames the source for the data etc.";}
a:4:{i:0;s:10:"rrd_update";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:52:"bool rrd_update ( string $filename, array $options )";i:3;s:120:"Updates the RRD database file. The input data is time interpolated according to the properties of the RRD database file.";}
a:4:{i:0;s:11:"rrd_version";i:1;s:19:"(PECL rrd >= 1.0.0)";i:2;s:27:"string rrd_version ( void )";i:3;s:53:"Returns information about underlying rrdtool library.";}
a:4:{i:0;s:9:"rrd_xport";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:34:"array rrd_xport ( array $options )";i:3;s:158:"Exports the information about RRD database file. This data can be converted to XML file via user space PHP script and then restored back as RRD database file.";}
a:4:{i:0;s:22:"RRDCreator::addArchive";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:58:"public void RRDCreator::addArchive ( string $description )";i:3;s:238:"Adds RRA definition by description of archive. Archive consists of a number of data values or statistics for each of the defined data-sources (DS). Data sources are defined by method . You need call this method for each requested archive.";}
a:4:{i:0;s:25:"RRDCreator::addDataSource";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:61:"public void RRDCreator::addDataSource ( string $description )";i:3;s:181:"RRD can accept input from several data sources (DS), e.g incomming and outgoing traffic. This method adds data source by description. You need call this method for each data source.";}
a:4:{i:0;s:23:"RRDCreator::__construct";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:88:"public RRDCreator::__construct ( string $path [, string $startTime [, int $step = 0 ]] )";i:3;s:32:"Creates new RRDCreator instance.";}
a:4:{i:0;s:16:"RRDCreator::save";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:37:"public bool RRDCreator::save ( void )";i:3;s:60:"Saves the RRD database into file, which name is defined by .";}
a:4:{i:0;s:21:"RRDGraph::__construct";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:45:"public RRDGraph::__construct ( string $path )";i:3;s:118:"Creates new RRDGraph instance. This instance is responsible for rendering the result of RRD database query into image.";}
a:4:{i:0;s:14:"RRDGraph::save";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:36:"public array RRDGraph::save ( void )";i:3;s:62:"Saves the result of RRD database query into image defined by .";}
a:4:{i:0;s:21:"RRDGraph::saveVerbose";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:43:"public array RRDGraph::saveVerbose ( void )";i:3;s:201:"Saves the RRD database query into image file defined by method and returns the verbose information about generated graph, if "-" is used as image filename, image data are also returned in result array.";}
a:4:{i:0;s:20:"RRDGraph::setOptions";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:51:"public void RRDGraph::setOptions ( array $options )";i:3;s:0:"";}
a:4:{i:0;s:23:"RRDUpdater::__construct";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:47:"public RRDUpdater::__construct ( string $path )";i:3;s:97:"Creates new RRDUpdater instance. This instance is responsible for updating the RRD database file.";}
a:4:{i:0;s:18:"RRDUpdater::update";i:1;s:19:"(PECL rrd >= 0.9.0)";i:2;s:75:"public bool RRDUpdater::update ( array $values [, string $time = time() ] )";i:3;s:78:"Updates the RRD file defined via . The file is updated with a specific values.";}
a:4:{i:0;s:21:"SAMConnection::commit";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:35:"bool SAMConnection::commit ( void )";i:3;s:140:"Calling the "commit" method on a Connection object commits (completes) all in-flight transactions that are part of the current unit of work.";}
a:4:{i:0;s:22:"SAMConnection::connect";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:71:"bool SAMConnection::connect ( string $protocol [, array $properties ] )";i:3;s:165:"Calling the "connect" method on a SAMConnection object connects the PHP script to a messaging server. No messages can be sent or received until a connection is made.";}
a:4:{i:0;s:26:"SAMConnection::__construct";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:37:"SAMConnection::__construct() ( void )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:25:"SAMConnection::disconnect";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:39:"bool SAMConnection::disconnect ( void )";i:3;s:187:"Calling the "disconnect" method on a SAMConnection object disconnects the PHP script from a messaging server. No messages can be sent or received after a connection has been disconnected.";}
a:4:{i:0;s:20:"SAMConnection::errno";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:26:"int $SAMConnection->errno;";i:3;s:157:"Contains the numeric error code of the last executed SAM operation on this connection. If the last operation completed successfully this property contains 0.";}
a:4:{i:0;s:20:"SAMConnection::error";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:29:"string $SAMConnection->error;";i:3;s:167:"Contains the text description of the last failed SAM operation on this connection. If the last operation completed successfully this property contains an empty string.";}
a:4:{i:0;s:26:"SAMConnection::isConnected";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:40:"bool SAMConnection::isConnected ( void )";i:3;s:227:"Calling the "isConnected" method on a Connection object will check whether the PHP script is connected to a messaging server. No messages can be sent or received unless a connection has been established with a Messaging server.";}
a:4:{i:0;s:19:"SAMConnection::peek";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:72:"SAMMessage SAMConnection::peek ( string $target [, array $properties ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"SAMConnection::peekAll";i:1;s:19:"(PECL sam >= 0.2.0)";i:2;s:70:"array SAMConnection::peekAll ( string $target [, array $properties ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"SAMConnection::receive";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:75:"SAMMessage SAMConnection::receive ( string $target [, array $properties ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"SAMConnection::remove";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:74:"SAMMessage SAMConnection::remove ( string $target [, array $properties ] )";i:3;s:31:"Removes a message from a queue.";}
a:4:{i:0;s:23:"SAMConnection::rollback";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:37:"bool SAMConnection::rollback ( void )";i:3;s:37:"Rolls back an in-flight unit of work.";}
a:4:{i:0;s:19:"SAMConnection::send";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:85:"string SAMConnection::send ( string $target, SAMMessage $msg [, array $properties ] )";i:3;s:230:"The "send" method is used to send a message to a specific queue or to publish to a specific topic. The method returns a correlation id that can be used as a selector to identify reply or response messages when these are requested.";}
a:4:{i:0;s:23:"SAMConnection::setDebug";i:1;s:19:"(PECL sam >= 1.1.0)";i:2;s:45:"void SAMConnection::setDebug ( bool $switch )";i:3;s:239:"The "setdebug" method is used to turn on or off additional debugging output. The SAM framework will provide method/function entry and exit trace data plus additional information. Protocol specific implementations also provide extra output.";}
a:4:{i:0;s:24:"SAMConnection::subscribe";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:55:"string SAMConnection::subscribe ( string $targetTopic )";i:3;s:81:"The "subscribe" method is used to create a new subscription to a specified topic.";}
a:4:{i:0;s:26:"SAMConnection::unsubscribe";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:83:"bool SAMConnection::unsubscribe ( string $subscriptionId [, string $targetTopic ] )";i:3;s:89:"The "unsubscribe" method is used to delete an existing subscription to a specified topic.";}
a:4:{i:0;s:16:"SAMMessage::body";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:25:"string $SAMMessage->body;";i:3;s:86:"The "body" property contains the actual body of the message. It may not always be set.";}
a:4:{i:0;s:23:"SAMMessage::__construct";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:44:"SAMMessage::__construct() ([ mixed $body ] )";i:3;s:58:"Creates a new object optionally specifying a message body.";}
a:4:{i:0;s:18:"SAMMessage::header";i:1;s:19:"(PECL sam >= 0.1.0)";i:2;s:27:"object $SAMMessage->header;";i:3;s:100:"The property is a container for any system or user properties that area associated with the message.";}
a:4:{i:0;s:20:"snmp_get_quick_print";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"bool snmp_get_quick_print ( void )";i:3;s:99:"Returns the current value stored in the UCD Library for quick_print. quick_print is off by default.";}
a:4:{i:0;s:23:"snmp_get_valueretrieval";i:1;s:23:"(PHP 4 >= 4.3.3, PHP 5)";i:2;s:36:"int snmp_get_valueretrieval ( void )";i:3;s:0:"";}
a:4:{i:0;s:13:"snmp_read_mib";i:1;s:7:"(PHP 5)";i:2;s:39:"bool snmp_read_mib ( string $filename )";i:3;s:168:"This function is used to load additional, e.g. vendor specific, MIBs so that human readable OIDs like VENDOR-MIB::foo.1 instead of error prone numeric OIDs can be used.";}
a:4:{i:0;s:19:"snmp_set_enum_print";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:44:"bool snmp_set_enum_print ( int $enum_print )";i:3;s:156:"This function toggles if snmpwalk/snmpget etc. should automatically lookup enum values in the MIB and return them together with their human readable string.";}
a:4:{i:0;s:26:"snmp_set_oid_numeric_print";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:51:"void snmp_set_oid_numeric_print ( int $oid_format )";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:26:"snmp_set_oid_output_format";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:76:"bool snmp_set_oid_output_format ( int $oid_format = SNMP_OID_OUTPUT_MODULE )";i:3;s:45:"sets the output format to be full or numeric.";}
a:4:{i:0;s:20:"snmp_set_quick_print";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:47:"bool snmp_set_quick_print ( bool $quick_print )";i:3;s:418:"Sets the value of within the UCD library. When this is set (1), the library will return 'quick printed' values. This means that just the value will be printed. When is not enabled (default) the UCD library prints extra information including the type of the value (i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less.";}
a:4:{i:0;s:23:"snmp_set_valueretrieval";i:1;s:23:"(PHP 4 >= 4.3.3, PHP 5)";i:2;s:65:"bool snmp_set_valueretrieval ( int $method = SNMP_VALUE_LIBRARY )";i:3;s:0:"";}
a:4:{i:0;s:9:"snmp2_get";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:126:"string snmp2_get ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:70:"The function is used to read the value of an object specified by the .";}
a:4:{i:0;s:13:"snmp2_getnext";i:1;s:14:"(PHP >= 5.2.0)";i:2;s:130:"string snmp2_getnext ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:81:"The function is used to read the value of the object that follows the specified .";}
a:4:{i:0;s:15:"snmp2_real_walk";i:1;s:14:"(PHP >= 5.2.0)";i:2;s:131:"array snmp2_real_walk ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:131:"The function is used to traverse over a number of objects starting from and return not only their values but also their object ids.";}
a:4:{i:0;s:9:"snmp2_set";i:1;s:14:"(PHP >= 5.2.0)";i:2;s:153:"bool snmp2_set ( string $host, string $community, string $object_id, string $type, string $value [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:56:"is used to set the value of an object specified by the .";}
a:4:{i:0;s:10:"snmp2_walk";i:1;s:14:"(PHP >= 5.2.0)";i:2;s:126:"array snmp2_walk ( string $host, string $community, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:72:"function is used to read all the values from an agent specified by the .";}
a:4:{i:0;s:9:"snmp3_get";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:240:"string snmp3_get ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:70:"The function is used to read the value of an object specified by the .";}
a:4:{i:0;s:13:"snmp3_getnext";i:1;s:7:"(PHP 5)";i:2;s:244:"string snmp3_getnext ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:81:"The function is used to read the value of the object that follows the specified .";}
a:4:{i:0;s:15:"snmp3_real_walk";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:245:"array snmp3_real_walk ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:131:"The function is used to traverse over a number of objects starting from and return not only their values but also their object ids.";}
a:4:{i:0;s:9:"snmp3_set";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:261:"bool snmp3_set ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:56:"is used to set the value of an object specified by the .";}
a:4:{i:0;s:10:"snmp3_walk";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:240:"array snmp3_walk ( string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )";i:3;s:72:"function is used to read all the values from an agent specified by the .";}
a:4:{i:0;s:7:"snmpget";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:122:"string snmpget ( string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:70:"The function is used to read the value of an object specified by the .";}
a:4:{i:0;s:11:"snmpgetnext";i:1;s:7:"(PHP 5)";i:2;s:122:"string snmpgetnext ( string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:81:"The function is used to read the value of the object that follows the specified .";}
a:4:{i:0;s:12:"snmprealwalk";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:122:"array snmprealwalk ( string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:131:"The function is used to traverse over a number of objects starting from and return not only their values but also their object ids.";}
a:4:{i:0;s:7:"snmpset";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:144:"bool snmpset ( string $host, string $community, string $object_id, string $type, mixed $value [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:56:"is used to set the value of an object specified by the .";}
a:4:{i:0;s:8:"snmpwalk";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:122:"array snmpwalk ( string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:72:"function is used to read all the values from an agent specified by the .";}
a:4:{i:0;s:11:"snmpwalkoid";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:125:"array snmpwalkoid ( string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:101:"function is used to read all object ids and their respective values from an SNMP agent specified by .";}
a:4:{i:0;s:11:"SNMP::close";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:32:"public bool SNMP::close ( void )";i:3;s:42:"Frees previously allocated session object.";}
a:4:{i:0;s:17:"SNMP::__construct";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:129:"public SNMP::__construct() ( int $version, string $hostname, string $community [, int $timeout = 1000000 [, int $retries = 5 ]] )";i:3;s:35:"The function description goes here.";}
a:4:{i:0;s:9:"SNMP::get";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:76:"public mixed SNMP::get ( mixed $object_id [, bool $preserve_keys = false ] )";i:3;s:45:"Fetch an object specified in using GET query.";}
a:4:{i:0;s:14:"SNMP::getErrno";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:34:"public int SNMP::getErrno ( void )";i:3;s:42:"Returns error code from last SNMP request.";}
a:4:{i:0;s:14:"SNMP::getError";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:37:"public string SNMP::getError ( void )";i:3;s:49:"Returns string with error from last SNMP request.";}
a:4:{i:0;s:13:"SNMP::getnext";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:47:"public mixed SNMP::getnext ( mixed $object_id )";i:3;s:40:"Fetch an object that follows specified .";}
a:4:{i:0;s:9:"SNMP::set";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:69:"public bool SNMP::set ( mixed $object_id, mixed $type, mixed $value )";i:3;s:86:"Requests remote agent setting the value of one or more SNMP objects specified by the .";}
a:4:{i:0;s:17:"SNMP::setSecurity";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:224:"public bool SNMP::setSecurity ( string $sec_level [, string $auth_protocol = [, string $auth_passphrase = [, string $priv_protocol = [, string $priv_passphrase = [, string $contextName = [, string $contextEngineID = ]]]]]] )";i:3;s:85:"setSecurity configures security-related session parameters used in protocol version 3";}
a:4:{i:0;s:10:"SNMP::walk";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:126:"public array SNMP::walk ( string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters ]]] )";i:3;s:45:"is used to read subtree rooted at specified .";}
a:4:{i:0;s:13:"socket_accept";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:43:"resource socket_accept ( resource $socket )";i:3;s:498:"After the socket has been created using, bound to a name with, and told to listen for connections with, this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, will block until a connection becomes present. If has been made non-blocking using or, will be returned.";}
a:4:{i:0;s:11:"socket_bind";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:73:"bool socket_bind ( resource $socket, string $address [, int $port = 0 ] )";i:3;s:121:"Binds the name given in to the socket described by . This has to be done before a connection is be established using or .";}
a:4:{i:0;s:18:"socket_clear_error";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:47:"void socket_clear_error ([ resource $socket ] )";i:3;s:114:"This function clears the error code on the given socket or the global last socket error if no socket is specified.";}
a:4:{i:0;s:12:"socket_close";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:38:"void socket_close ( resource $socket )";i:3;s:125:"closes the socket resource given by . This function is specific to sockets and cannot be used on any other type of resources.";}
a:4:{i:0;s:17:"socket_cmsg_space";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:47:"int socket_cmsg_space ( int $level, int $type )";i:3;s:92:"Calculates the size of the buffer that should be allocated for receiving the ancillary data.";}
a:4:{i:0;s:14:"socket_connect";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:76:"bool socket_connect ( resource $socket, string $address [, int $port = 0 ] )";i:3;s:104:"Initiate a connection to using the socket resource, which must be a valid socket resource created with .";}
a:4:{i:0;s:20:"socket_create_listen";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:67:"resource socket_create_listen ( int $port [, int $backlog = 128 ] )";i:3;s:114:"creates a new socket resource of type listening on local interfaces on the given port waiting for new connections.";}
a:4:{i:0;s:18:"socket_create_pair";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:77:"bool socket_create_pair ( int $domain, int $type, int $protocol, array &$fd )";i:3;s:141:"creates two connected and indistinguishable sockets, and stores them in . This function is commonly used in IPC (InterProcess Communication).";}
a:4:{i:0;s:13:"socket_create";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:64:"resource socket_create ( int $domain, int $type, int $protocol )";i:3;s:228:"Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server.";}
a:4:{i:0;s:17:"socket_get_option";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:70:"mixed socket_get_option ( resource $socket, int $level, int $optname )";i:3;s:94:"The function retrieves the value for the option specified by the parameter for the specified .";}
a:4:{i:0;s:18:"socket_getpeername";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:78:"bool socket_getpeername ( resource $socket, string &$address [, int &$port ] )";i:3;s:133:"Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.";}
a:4:{i:0;s:18:"socket_getsockname";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:75:"bool socket_getsockname ( resource $socket, string &$addr [, int &$port ] )";i:3;s:0:"";}
a:4:{i:0;s:20:"socket_import_stream";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:50:"resource socket_import_stream ( resource $stream )";i:3;s:77:"Imports a stream that encapsulates a socket into a socket extension resource.";}
a:4:{i:0;s:17:"socket_last_error";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:45:"int socket_last_error ([ resource $socket ] )";i:3;s:477:"If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned. The latter is particularly helpful for functions like which don't return a socket on failure and which can fail for reasons not directly tied to a particular socket. The error code is suitable to be fed to which returns a string describing the given error code.";}
a:4:{i:0;s:13:"socket_listen";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:61:"bool socket_listen ( resource $socket [, int $backlog = 0 ] )";i:3;s:120:"After the socket has been created using and bound to a name with, it may be told to listen for incoming connections on .";}
a:4:{i:0;s:11:"socket_read";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:85:"string socket_read ( resource $socket, int $length [, int $type = PHP_BINARY_READ ] )";i:3;s:72:"The function reads from the socket resource created by the or functions.";}
a:4:{i:0;s:11:"socket_recv";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:72:"int socket_recv ( resource $socket, string &$buf, int $len, int $flags )";i:3;s:186:"The function receives bytes of data in from . can be used to gather data from connected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.";}
a:4:{i:0;s:15:"socket_recvfrom";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:107:"int socket_recvfrom ( resource $socket, string &$buf, int $len, int $flags, string &$name [, int &$port ] )";i:3;s:253:"The function receives bytes of data in from on port (if the socket is not of type ) using . can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.";}
a:4:{i:0;s:14:"socket_recvmsg";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:72:"int socket_recvmsg ( resource $socket, string $message [, int $flags ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"socket_select";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:100:"int socket_select ( array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0 ] )";i:3;s:258:"accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.";}
a:4:{i:0;s:11:"socket_send";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:71:"int socket_send ( resource $socket, string $buf, int $len, int $flags )";i:3;s:45:"The function sends bytes to the socket from .";}
a:4:{i:0;s:14:"socket_sendmsg";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:67:"int socket_sendmsg ( resource $socket, array $message, int $flags )";i:3;s:0:"";}
a:4:{i:0;s:13:"socket_sendto";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:106:"int socket_sendto ( resource $socket, string $buf, int $len, int $flags, string $addr [, int $port = 0 ] )";i:3;s:72:"The function sends bytes from through the socket to the at the address .";}
a:4:{i:0;s:16:"socket_set_block";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:42:"bool socket_set_block ( resource $socket )";i:3;s:71:"The function removes the flag on the socket specified by the parameter.";}
a:4:{i:0;s:19:"socket_set_nonblock";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:45:"bool socket_set_nonblock ( resource $socket )";i:3;s:68:"The function sets the flag on the socket specified by the parameter.";}
a:4:{i:0;s:17:"socket_set_option";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:84:"bool socket_set_option ( resource $socket, int $level, int $optname, mixed $optval )";i:3;s:134:"The function sets the option specified by the parameter, at the specified protocol, to the value pointed to by the parameter for the .";}
a:4:{i:0;s:15:"socket_shutdown";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:59:"bool socket_shutdown ( resource $socket [, int $how = 2 ] )";i:3;s:104:"The function allows you to stop incoming, outgoing or all data (the default) from being sent through the";}
a:4:{i:0;s:15:"socket_strerror";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:37:"string socket_strerror ( int $errno )";i:3;s:105:"takes as its parameter a socket error code as returned by and returns the corresponding explanatory text.";}
a:4:{i:0;s:12:"socket_write";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:74:"int socket_write ( resource $socket, string $buffer [, int $length = 0 ] )";i:3;s:43:"The function writes to the from the given .";}
a:4:{i:0;s:15:"ssh2_auth_agent";i:1;s:19:"(PECL ssh2 >= 0.12)";i:2;s:60:"bool ssh2_auth_agent ( resource $session, string $username )";i:3;s:41:"Authenticate over SSH using the ssh agent";}
a:4:{i:0;s:24:"ssh2_auth_hostbased_file";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:179:"bool ssh2_auth_hostbased_file ( resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile [, string $passphrase [, string $local_username ]] )";i:3;s:53:"Authenticate using a public hostkey read from a file.";}
a:4:{i:0;s:14:"ssh2_auth_none";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:60:"mixed ssh2_auth_none ( resource $session, string $username )";i:3;s:162:"Attempt "none" authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods.";}
a:4:{i:0;s:18:"ssh2_auth_password";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:81:"bool ssh2_auth_password ( resource $session, string $username, string $password )";i:3;s:121:"Authenticate over SSH using a plain password. Since version 0.12 this function also supports keyboard_interactive method.";}
a:4:{i:0;s:21:"ssh2_auth_pubkey_file";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:131:"bool ssh2_auth_pubkey_file ( resource $session, string $username, string $pubkeyfile, string $privkeyfile [, string $passphrase ] )";i:3;s:49:"Authenticate using a public key read from a file.";}
a:4:{i:0;s:12:"ssh2_connect";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:98:"resource ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] )";i:3;s:46:"Establish a connection to a remote SSH server.";}
a:4:{i:0;s:9:"ssh2_exec";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:180:"resource ssh2_exec ( resource $session, string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )";i:3;s:66:"Execute a command at the remote end and allocate a channel for it.";}
a:4:{i:0;s:17:"ssh2_fetch_stream";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:63:"resource ssh2_fetch_stream ( resource $channel, int $streamid )";i:3;s:178:"Fetches an alternate substream associated with an SSH2 channel stream. The SSH2 protocol currently defines only one substream, STDERR, which has a substream ID of (defined as 1).";}
a:4:{i:0;s:16:"ssh2_fingerprint";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:107:"string ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] )";i:3;s:53:"Returns a server hostkey hash from an active session.";}
a:4:{i:0;s:23:"ssh2_methods_negotiated";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:51:"array ssh2_methods_negotiated ( resource $session )";i:3;s:35:"Returns list of negotiated methods.";}
a:4:{i:0;s:18:"ssh2_publickey_add";i:1;s:19:"(PECL ssh2 >= 0.10)";i:2;s:125:"bool ssh2_publickey_add ( resource $pkey, string $algoname, string $blob [, bool $overwrite = false [, array $attributes ]] )";i:3;s:0:"";}
a:4:{i:0;s:19:"ssh2_publickey_init";i:1;s:19:"(PECL ssh2 >= 0.10)";i:2;s:50:"resource ssh2_publickey_init ( resource $session )";i:3;s:70:"Request the Publickey subsystem from an already connected SSH2 server.";}
a:4:{i:0;s:19:"ssh2_publickey_list";i:1;s:19:"(PECL ssh2 >= 0.10)";i:2;s:44:"array ssh2_publickey_list ( resource $pkey )";i:3;s:37:"List currently authorized publickeys.";}
a:4:{i:0;s:21:"ssh2_publickey_remove";i:1;s:19:"(PECL ssh2 >= 0.10)";i:2;s:77:"bool ssh2_publickey_remove ( resource $pkey, string $algoname, string $blob )";i:3;s:32:"Removes an authorized publickey.";}
a:4:{i:0;s:13:"ssh2_scp_recv";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:81:"bool ssh2_scp_recv ( resource $session, string $remote_file, string $local_file )";i:3;s:82:"Copy a file from the remote server to the local filesystem using the SCP protocol.";}
a:4:{i:0;s:13:"ssh2_scp_send";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:110:"bool ssh2_scp_send ( resource $session, string $local_file, string $remote_file [, int $create_mode = 0644 ] )";i:3;s:82:"Copy a file from the local filesystem to the remote server using the SCP protocol.";}
a:4:{i:0;s:15:"ssh2_sftp_chmod";i:1;s:19:"(PECL ssh2 >= 0.12)";i:2;s:68:"bool ssh2_sftp_chmod ( resource $sftp, string $filename, int $mode )";i:3;s:68:"Attempts to change the mode of the specified file to that given in .";}
a:4:{i:0;s:15:"ssh2_sftp_lstat";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:54:"array ssh2_sftp_lstat ( resource $sftp, string $path )";i:3;s:66:"Stats a symbolic link on the remote filesystem following the link.";}
a:4:{i:0;s:15:"ssh2_sftp_mkdir";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:106:"bool ssh2_sftp_mkdir ( resource $sftp, string $dirname [, int $mode = 0777 [, bool $recursive = false ]] )";i:3;s:71:"Creates a directory on the remote file server with permissions set to .";}
a:4:{i:0;s:18:"ssh2_sftp_readlink";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:58:"string ssh2_sftp_readlink ( resource $sftp, string $link )";i:3;s:38:"Returns the target of a symbolic link.";}
a:4:{i:0;s:18:"ssh2_sftp_realpath";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:62:"string ssh2_sftp_realpath ( resource $sftp, string $filename )";i:3;s:65:"Translates into the effective real path on the remote filesystem.";}
a:4:{i:0;s:16:"ssh2_sftp_rename";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:66:"bool ssh2_sftp_rename ( resource $sftp, string $from, string $to )";i:3;s:40:"Renames a file on the remote filesystem.";}
a:4:{i:0;s:15:"ssh2_sftp_rmdir";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:56:"bool ssh2_sftp_rmdir ( resource $sftp, string $dirname )";i:3;s:48:"Removes a directory from the remote file server.";}
a:4:{i:0;s:14:"ssh2_sftp_stat";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:53:"array ssh2_sftp_stat ( resource $sftp, string $path )";i:3;s:67:"Stats a file on the remote filesystem following any symbolic links.";}
a:4:{i:0;s:17:"ssh2_sftp_symlink";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:71:"bool ssh2_sftp_symlink ( resource $sftp, string $target, string $link )";i:3;s:68:"Creates a symbolic link named on the remote filesystem pointing to .";}
a:4:{i:0;s:16:"ssh2_sftp_unlink";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:58:"bool ssh2_sftp_unlink ( resource $sftp, string $filename )";i:3;s:40:"Deletes a file on the remote filesystem.";}
a:4:{i:0;s:9:"ssh2_sftp";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:40:"resource ssh2_sftp ( resource $session )";i:3;s:65:"Request the SFTP subsystem from an already connected SSH2 server.";}
a:4:{i:0;s:10:"ssh2_shell";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:182:"resource ssh2_shell ( resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )";i:3;s:60:"Open a shell at the remote end and allocate a stream for it.";}
a:4:{i:0;s:11:"ssh2_tunnel";i:1;s:20:"(PECL ssh2 >= 0.9.0)";i:2;s:67:"resource ssh2_tunnel ( resource $session, string $host, int $port )";i:3;s:92:"Open a socket stream to an arbitrary host/port by way of the currently connected SSH server.";}
a:4:{i:0;s:19:"stomp_connect_error";i:1;s:21:"(PECL stomp >= 0.3.0)";i:2;s:35:"string stomp_connect_error ( void )";i:3;s:55:"Returns a string description of the last connect error.";}
a:4:{i:0;s:13:"stomp_version";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:29:"string stomp_version ( void )";i:3;s:71:"Returns a string containing the version of the current stomp extension.";}
a:4:{i:0;s:12:"Stomp::abort";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:71:"public bool Stomp::abort ( string $transaction_id [, array $headers ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:10:"Stomp::ack";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:57:"public bool Stomp::ack ( mixed $msg [, array $headers ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:12:"Stomp::begin";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:71:"public bool Stomp::begin ( string $transaction_id [, array $headers ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:13:"Stomp::commit";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:72:"public bool Stomp::commit ( string $transaction_id [, array $headers ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"Stomp::__construct";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:146:"public Stomp::__construct ([ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers ]]]] )";i:3;s:36:"Object oriented style (constructor):";}
a:4:{i:0;s:17:"Stomp::__destruct";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:38:"public bool Stomp::__destruct ( void )";i:3;s:35:"Object oriented style (destructor):";}
a:4:{i:0;s:12:"Stomp::error";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:35:"public string Stomp::error ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"Stomp::getReadTimeout";i:1;s:21:"(PECL stomp >= 0.3.0)";i:2;s:43:"public array Stomp::getReadTimeout ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:19:"Stomp::getSessionId";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:42:"public string Stomp::getSessionId ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:15:"Stomp::hasFrame";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:36:"public bool Stomp::hasFrame ( void )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:16:"Stomp::readFrame";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:75:"public stompframe Stomp::readFrame ([ string $class_name = "stompFrame" ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:11:"Stomp::send";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:79:"public bool Stomp::send ( string $destination, mixed $msg [, array $headers ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:21:"Stomp::setReadTimeout";i:1;s:21:"(PECL stomp >= 0.3.0)";i:2;s:73:"public void Stomp::setReadTimeout ( int $seconds [, int $microseconds ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:16:"Stomp::subscribe";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:72:"public bool Stomp::subscribe ( string $destination [, array $headers ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:18:"Stomp::unsubscribe";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:74:"public bool Stomp::unsubscribe ( string $destination [, array $headers ] )";i:3;s:31:"Object oriented style (method):";}
a:4:{i:0;s:23:"StompFrame::__construct";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:82:"StompFrame::__construct ([ string $command [, array $headers [, string $body ]]] )";i:3;s:12:"Constructor.";}
a:4:{i:0;s:26:"StompException::getDetails";i:1;s:21:"(PECL stomp >= 0.1.0)";i:2;s:49:"public string StompException::getDetails ( void )";i:3;s:22:"Get exception details.";}
a:4:{i:0;s:16:"SVM::__construct";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:32:"public SVM::__construct ( void )";i:3;s:58:"Constructs a new SVM object ready to accept training data.";}
a:4:{i:0;s:18:"SVM::crossvalidate";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:72:"public float svm::crossvalidate ( array $problem, int $number_of_folds )";i:3;s:457:"Crossvalidate can be used to test the effectiveness of the current parameter set on a subset of the training data. Given a problem set and a n "folds", it separates the problem set into n subsets, and the repeatedly trains on one subset and tests on another. While the accuracy will generally be lower than a SVM trained on the enter data set, the accuracy score returned should be relatively useful, so it can be used to test different training parameters.";}
a:4:{i:0;s:15:"SVM::getOptions";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:37:"public array SVM::getOptions ( void )";i:3;s:115:"Retrieve an array containing the training parameters. The parameters will be keyed on the predefined SVM constants.";}
a:4:{i:0;s:15:"SVM::setOptions";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:45:"public bool SVM::setOptions ( array $params )";i:3;s:36:"Set one or more training parameters.";}
a:4:{i:0;s:10:"SVM::train";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:65:"public SVMModel svm::train ( array $problem [, array $weights ] )";i:3;s:67:"Train a support vector machine based on the supplied training data.";}
a:4:{i:0;s:31:"SVMModel::checkProbabilityModel";i:1;s:19:"(PECL svm >= 0.1.5)";i:2;s:52:"public bool SVMModel::checkProbabilityModel ( void )";i:3;s:59:"Returns true if the model contains probability information.";}
a:4:{i:0;s:21:"SVMModel::__construct";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:52:"public SVMModel::__construct ([ string $filename ] )";i:3;s:130:"Build a new SVMModel. Models will usually be created from the SVM::train function, but then saved models may be restored directly.";}
a:4:{i:0;s:19:"SVMModel::getLabels";i:1;s:19:"(PECL svm >= 0.1.5)";i:2;s:41:"public array SVMModel::getLabels ( void )";i:3;s:120:"Return an array of labels that the model was trained on. For regression and one class models an empty array is returned.";}
a:4:{i:0;s:20:"SVMModel::getNrClass";i:1;s:19:"(PECL svm >= 0.1.5)";i:2;s:40:"public int SVMModel::getNrClass ( void )";i:3;s:108:"Returns the number of classes the model was trained with, will return 2 for one class and regression models.";}
a:4:{i:0;s:20:"SVMModel::getSvmType";i:1;s:19:"(PECL svm >= 0.1.5)";i:2;s:40:"public int SVMModel::getSvmType ( void )";i:3;s:85:"Returns an integer value representing the type of the SVM model used, e.g SVM::C_SVC.";}
a:4:{i:0;s:27:"SVMModel::getSvrProbability";i:1;s:19:"(PECL svm >= 0.1.5)";i:2;s:49:"public float SVMModel::getSvrProbability ( void )";i:3;s:124:"For regression models, returns a sigma value. If there is no probability information or the model is not SVR, 0 is returned.";}
a:4:{i:0;s:14:"SVMModel::load";i:1;s:24:"(PECL svm >= 0.1.00.1.0)";i:2;s:47:"public bool SVMModel::load ( string $filename )";i:3;s:57:"Load a model file ready for classification or regression.";}
a:4:{i:0;s:29:"SVMModel::predict_probability";i:1;s:19:"(PECL svm >= 0.1.4)";i:2;s:58:"public float SVMModel::predict_probability ( array $data )";i:3;s:387:"This function accepts an array of data and attempts to predict the class, as with the predict function. Additionally, however, this function returns an array of probabilities, one per class in the model, which represent the estimated chance of the data supplied being a member of that class. Requires that the model to be used has been trained with the probability parameter set to true.";}
a:4:{i:0;s:17:"SVMModel::predict";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:46:"public float SVMModel::predict ( array $data )";i:3;s:151:"This function accepts an array of data and attempts to predict the class or regression value based on the model extracted from previously trained data.";}
a:4:{i:0;s:14:"SVMModel::save";i:1;s:19:"(PECL svm >= 0.1.0)";i:2;s:47:"public bool SVMModel::save ( string $filename )";i:3;s:45:"Save the model data to a file, for later use.";}
a:4:{i:0;s:7:"svn_add";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:81:"bool svn_add ( string $path [, bool $recursive = true [, bool $force = false ]] )";i:3;s:155:"Adds the file, directory or symbolic link at to the working directory. The item will be added to the repository the next time you call on the working copy.";}
a:4:{i:0;s:22:"svn_auth_get_parameter";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:45:"string svn_auth_get_parameter ( string $key )";i:3;s:98:"Retrieves authentication parameter at . For a list of valid keys and their meanings, consult the .";}
a:4:{i:0;s:22:"svn_auth_set_parameter";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:58:"void svn_auth_set_parameter ( string $key, string $value )";i:3;s:96:"Sets authentication parameter at to . For a list of valid keys and their meanings, consult the .";}
a:4:{i:0;s:9:"svn_blame";i:1;s:19:"(PECL svn >= 0.3.0)";i:2;s:84:"array svn_blame ( string $repository_url [, int $revision_no = SVN_REVISION_HEAD ] )";i:3;s:50:"Get the SVN blame of a file from a repository URL.";}
a:4:{i:0;s:7:"svn_cat";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:58:"string svn_cat ( string $repos_url [, int $revision_no ] )";i:3;s:92:"Returns the contents of the URL to a file in the repository, optionally at revision number .";}
a:4:{i:0;s:12:"svn_checkout";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:93:"bool svn_checkout ( string $repos, string $targetpath [, int $revision [, int $flags = 0 ]] )";i:3;s:65:"Checks out a working copy from the repository at to at revision .";}
a:4:{i:0;s:11:"svn_cleanup";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:39:"bool svn_cleanup ( string $workingdir )";i:3;s:178:"Recursively cleanup working copy directory, finishing any incomplete operations and removing working copy locks. Use when a working copy is in limbo and needs to be usable again.";}
a:4:{i:0;s:18:"svn_client_version";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:34:"string svn_client_version ( void )";i:3;s:47:"Returns the version of the SVN client libraries";}
a:4:{i:0;s:10:"svn_commit";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:76:"array svn_commit ( string $log, array $targets [, bool $recursive = true ] )";i:3;s:192:"Commits changes made in the local working copy files enumerated in the array to the repository, with the log message . Directories in the array will be recursively committed unless is set to .";}
a:4:{i:0;s:10:"svn_delete";i:1;s:19:"(PECL svn >= 0.4.0)";i:2;s:57:"bool svn_delete ( string $path [, bool $force = false ] )";i:3;s:164:"Deletes the file, directory or symbolic link at from the working directory. The item will be deleted from the repository the next time you call on the working copy.";}
a:4:{i:0;s:8:"svn_diff";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:69:"array svn_diff ( string $path1, int $rev1, string $path2, int $rev2 )";i:3;s:34:"Recursively diffs two paths, and .";}
a:4:{i:0;s:10:"svn_export";i:1;s:19:"(PECL svn >= 0.3.0)";i:2;s:109:"bool svn_export ( string $frompath, string $topath [, bool $working_copy = true [, int $revision_no = -1 ]] )";i:3;s:84:"Export the contents of either a working copy or repository into a 'clean' directory.";}
a:4:{i:0;s:16:"svn_fs_abort_txn";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:39:"bool svn_fs_abort_txn ( resource $txn )";i:3;s:72:"Abort a transaction, returns true if everything is okay, false otherwise";}
a:4:{i:0;s:17:"svn_fs_apply_text";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:59:"resource svn_fs_apply_text ( resource $root, string $path )";i:3;s:57:"Creates and returns a stream that will be used to replace";}
a:4:{i:0;s:17:"svn_fs_begin_txn2";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:56:"resource svn_fs_begin_txn2 ( resource $repos, int $rev )";i:3;s:24:"Create a new transaction";}
a:4:{i:0;s:23:"svn_fs_change_node_prop";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:90:"bool svn_fs_change_node_prop ( resource $root, string $path, string $name, string $value )";i:3;s:48:"Return true if everything is ok, false otherwise";}
a:4:{i:0;s:17:"svn_fs_check_path";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:56:"int svn_fs_check_path ( resource $fsroot, string $path )";i:3;s:71:"Determines what kind of item lives at path in a given repository fsroot";}
a:4:{i:0;s:23:"svn_fs_contents_changed";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:95:"bool svn_fs_contents_changed ( resource $root1, string $path1, resource $root2, string $path2 )";i:3;s:52:"Return true if content is different, false otherwise";}
a:4:{i:0;s:11:"svn_fs_copy";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:95:"bool svn_fs_copy ( resource $from_root, string $from_path, resource $to_root, string $to_path )";i:3;s:72:"Copies a file or a directory, returns true if all is ok, false otherwise";}
a:4:{i:0;s:13:"svn_fs_delete";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:51:"bool svn_fs_delete ( resource $root, string $path )";i:3;s:72:"Deletes a file or a directory, return true if all is ok, false otherwise";}
a:4:{i:0;s:18:"svn_fs_dir_entries";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:59:"array svn_fs_dir_entries ( resource $fsroot, string $path )";i:3;s:85:"Enumerates the directory entries under path; returns a hash of dir names to file type";}
a:4:{i:0;s:20:"svn_fs_file_contents";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:64:"resource svn_fs_file_contents ( resource $fsroot, string $path )";i:3;s:80:"Returns a stream to access the contents of a file from a given version of the fs";}
a:4:{i:0;s:18:"svn_fs_file_length";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:57:"int svn_fs_file_length ( resource $fsroot, string $path )";i:3;s:59:"Returns the length of a file from a given version of the fs";}
a:4:{i:0;s:13:"svn_fs_is_dir";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:51:"bool svn_fs_is_dir ( resource $root, string $path )";i:3;s:62:"Return true if the path points to a directory, false otherwise";}
a:4:{i:0;s:14:"svn_fs_is_file";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:52:"bool svn_fs_is_file ( resource $root, string $path )";i:3;s:57:"Return true if the path points to a file, false otherwise";}
a:4:{i:0;s:15:"svn_fs_make_dir";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:53:"bool svn_fs_make_dir ( resource $root, string $path )";i:3;s:73:"Creates a new empty directory, returns true if all is ok, false otherwise";}
a:4:{i:0;s:16:"svn_fs_make_file";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:54:"bool svn_fs_make_file ( resource $root, string $path )";i:3;s:68:"Creates a new empty file, returns true if all is ok, false otherwise";}
a:4:{i:0;s:23:"svn_fs_node_created_rev";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:62:"int svn_fs_node_created_rev ( resource $fsroot, string $path )";i:3;s:59:"Returns the revision in which path under fsroot was created";}
a:4:{i:0;s:16:"svn_fs_node_prop";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:76:"string svn_fs_node_prop ( resource $fsroot, string $path, string $propname )";i:3;s:42:"Returns the value of a property for a node";}
a:4:{i:0;s:20:"svn_fs_props_changed";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:92:"bool svn_fs_props_changed ( resource $root1, string $path1, resource $root2, string $path2 )";i:3;s:51:"Return true if props are different, false otherwise";}
a:4:{i:0;s:20:"svn_fs_revision_prop";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:75:"string svn_fs_revision_prop ( resource $fs, int $revnum, string $propname )";i:3;s:37:"Fetches the value of a named property";}
a:4:{i:0;s:20:"svn_fs_revision_root";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:59:"resource svn_fs_revision_root ( resource $fs, int $revnum )";i:3;s:57:"Get a handle on a specific version of the repository root";}
a:4:{i:0;s:15:"svn_fs_txn_root";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:42:"resource svn_fs_txn_root ( resource $txn )";i:3;s:38:"Creates and returns a transaction root";}
a:4:{i:0;s:19:"svn_fs_youngest_rev";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:40:"int svn_fs_youngest_rev ( resource $fs )";i:3;s:61:"Returns the number of the youngest revision in the filesystem";}
a:4:{i:0;s:10:"svn_import";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:65:"bool svn_import ( string $path, string $url, bool $nonrecursive )";i:3;s:110:"Commits unversioned into repository at . If is a directory and is, the directory will be imported recursively.";}
a:4:{i:0;s:7:"svn_log";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:164:"array svn_log ( string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]] )";i:3;s:145:"returns the complete history of the item at the repository URL, or the history of a specific revision if is set. This function is equivalent to .";}
a:4:{i:0;s:6:"svn_ls";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:124:"array svn_ls ( string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = false [, bool $peg = false ]]] )";i:3;s:144:"This function queries the repository URL and returns a list of files and directories, optionally from a specific revision. This is equivalent to";}
a:4:{i:0;s:9:"svn_mkdir";i:1;s:19:"(PECL svn >= 0.4.0)";i:2;s:56:"bool svn_mkdir ( string $path [, string $log_message ] )";i:3;s:52:"Creates a directory in a working copy or repository.";}
a:4:{i:0;s:16:"svn_repos_create";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:81:"resource svn_repos_create ( string $path [, array $config [, array $fsconfig ]] )";i:3;s:42:"Create a new subversion repository at path";}
a:4:{i:0;s:33:"svn_repos_fs_begin_txn_for_commit";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:105:"resource svn_repos_fs_begin_txn_for_commit ( resource $repos, int $rev, string $author, string $log_msg )";i:3;s:24:"Create a new transaction";}
a:4:{i:0;s:23:"svn_repos_fs_commit_txn";i:1;s:19:"(PECL svn >= 0.2.0)";i:2;s:45:"int svn_repos_fs_commit_txn ( resource $txn )";i:3;s:50:"Commits a transaction and returns the new revision";}
a:4:{i:0;s:12:"svn_repos_fs";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:41:"resource svn_repos_fs ( resource $repos )";i:3;s:48:"Gets a handle on the filesystem for a repository";}
a:4:{i:0;s:17:"svn_repos_hotcopy";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:79:"bool svn_repos_hotcopy ( string $repospath, string $destpath, bool $cleanlogs )";i:3;s:62:"Make a hot-copy of the repos at repospath; copy it to destpath";}
a:4:{i:0;s:14:"svn_repos_open";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:40:"resource svn_repos_open ( string $path )";i:3;s:35:"Open a shared lock on a repository.";}
a:4:{i:0;s:17:"svn_repos_recover";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:39:"bool svn_repos_recover ( string $path )";i:3;s:58:"Run recovery procedures on the repository located at path.";}
a:4:{i:0;s:10:"svn_revert";i:1;s:19:"(PECL svn >= 0.3.0)";i:2;s:61:"bool svn_revert ( string $path [, bool $recursive = false ] )";i:3;s:55:"Revert any local changes to the path in a working copy.";}
a:4:{i:0;s:10:"svn_status";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:53:"array svn_status ( string $path [, int $flags = 0 ] )";i:3;s:148:"Returns the status of working copy files and directories, giving modifications, additions, deletions and other changes to items in the working copy.";}
a:4:{i:0;s:10:"svn_update";i:1;s:19:"(PECL svn >= 0.1.0)";i:2;s:92:"int svn_update ( string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = true ]] )";i:3;s:89:"Update working copy at to revision . If is true, directories will be recursively updated.";}
a:4:{i:0;s:13:"tcpwrap_check";i:1;s:23:"(PECL tcpwrap >= 0.1.0)";i:2;s:96:"bool tcpwrap_check ( string $daemon, string $address [, string $user [, bool $nodns = false ]] )";i:3;s:108:"This function consults the and files to check if access to service should be granted or denied for a client.";}
a:4:{i:0;s:18:"VarnishAdmin::auth";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:39:"public bool VarnishAdmin::auth ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"VarnishAdmin::ban";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:50:"public int VarnishAdmin::ban ( string $vcl_regex )";i:3;s:0:"";}
a:4:{i:0;s:20:"VarnishAdmin::banUrl";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:53:"public int VarnishAdmin::banUrl ( string $vcl_regex )";i:3;s:0:"";}
a:4:{i:0;s:24:"VarnishAdmin::clearPanic";i:1;s:21:"(PECL varnish >= 0.4)";i:2;s:44:"public int VarnishAdmin::clearPanic ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"VarnishAdmin::connect";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:42:"public bool VarnishAdmin::connect ( void )";i:3;s:0:"";}
a:4:{i:0;s:25:"VarnishAdmin::__construct";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:51:"public VarnishAdmin::__construct ([ array $args ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"VarnishAdmin::disconnect";i:1;s:23:"(PECL varnish >= 1.0.0)";i:2;s:45:"public bool VarnishAdmin::disconnect ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"VarnishAdmin::getPanic";i:1;s:21:"(PECL varnish >= 0.4)";i:2;s:45:"public string VarnishAdmin::getPanic ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"VarnishAdmin::getParams";i:1;s:21:"(PECL varnish >= 0.4)";i:2;s:45:"public array VarnishAdmin::getParams ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"VarnishAdmin::isRunning";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:44:"public bool VarnishAdmin::isRunning ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"VarnishAdmin::setCompat";i:1;s:23:"(PECL varnish >= 0.9.2)";i:2;s:51:"public void VarnishAdmin::setCompat ( int $compat )";i:3;s:0:"";}
a:4:{i:0;s:21:"VarnishAdmin::setHost";i:1;s:21:"(PECL varnish >= 0.8)";i:2;s:50:"public void VarnishAdmin::setHost ( string $host )";i:3;s:0:"";}
a:4:{i:0;s:22:"VarnishAdmin::setIdent";i:1;s:21:"(PECL varnish >= 0.8)";i:2;s:52:"public void VarnishAdmin::setIdent ( string $ident )";i:3;s:0:"";}
a:4:{i:0;s:22:"VarnishAdmin::setParam";i:1;s:21:"(PECL varnish >= 0.4)";i:2;s:73:"public int VarnishAdmin::setParam ( string $name, string|integer $value )";i:3;s:0:"";}
a:4:{i:0;s:21:"VarnishAdmin::setPort";i:1;s:21:"(PECL varnish >= 0.8)";i:2;s:47:"public void VarnishAdmin::setPort ( int $port )";i:3;s:0:"";}
a:4:{i:0;s:23:"VarnishAdmin::setSecret";i:1;s:21:"(PECL varnish >= 0.8)";i:2;s:54:"public void VarnishAdmin::setSecret ( string $secret )";i:3;s:0:"";}
a:4:{i:0;s:24:"VarnishAdmin::setTimeout";i:1;s:21:"(PECL varnish >= 0.8)";i:2;s:53:"public void VarnishAdmin::setTimeout ( int $timeout )";i:3;s:0:"";}
a:4:{i:0;s:19:"VarnishAdmin::start";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:39:"public int VarnishAdmin::start ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"VarnishAdmin::stop";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:38:"public int VarnishAdmin::stop ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"VarnishStat::__construct";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:50:"public VarnishStat::__construct ([ array $args ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"VarnishStat::getSnapshot";i:1;s:21:"(PECL varnish >= 0.3)";i:2;s:46:"public array VarnishStat::getSnapshot ( void )";i:3;s:0:"";}
a:4:{i:0;s:23:"VarnishLog::__construct";i:1;s:21:"(PECL varnish >= 0.6)";i:2;s:49:"public VarnishLog::__construct ([ array $args ] )";i:3;s:0:"";}
a:4:{i:0;s:19:"VarnishLog::getLine";i:1;s:21:"(PECL varnish >= 0.6)";i:2;s:41:"public array VarnishLog::getLine ( void )";i:3;s:0:"";}
a:4:{i:0;s:22:"VarnishLog::getTagName";i:1;s:21:"(PECL varnish >= 0.6)";i:2;s:58:"public static string VarnishLog::getTagName ( int $index )";i:3;s:0:"";}
a:4:{i:0;s:11:"yaz_addinfo";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:35:"string yaz_addinfo ( resource $id )";i:3;s:72:"Returns additional error information for the last request on the server.";}
a:4:{i:0;s:12:"yaz_ccl_conf";i:1;s:35:"(PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)";i:2;s:49:"void yaz_ccl_conf ( resource $id, array $config )";i:3;s:135:"This function configures the CCL query parser for a server with definitions of access points (CCL qualifiers) and their mapping to RPN.";}
a:4:{i:0;s:13:"yaz_ccl_parse";i:1;s:35:"(PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)";i:2;s:66:"bool yaz_ccl_parse ( resource $id, string $query, array &$result )";i:3;s:143:"This function invokes a CCL parser. It converts a given CCL FIND query to an RPN query which may be passed to the function to perform a search.";}
a:4:{i:0;s:9:"yaz_close";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:31:"bool yaz_close ( resource $id )";i:3;s:42:"Closes the connection given by parameter .";}
a:4:{i:0;s:11:"yaz_connect";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:54:"mixed yaz_connect ( string $zurl [, mixed $options ] )";i:3;s:72:"This function returns a connection resource on success, zero on failure.";}
a:4:{i:0;s:12:"yaz_database";i:1;s:35:"(PHP 4 >= 4.0.6, PECL yaz >= 0.9.0)";i:2;s:53:"bool yaz_database ( resource $id, string $databases )";i:3;s:181:"This function allows you to change databases within a session by specifying one or more databases to be used in search, retrieval, etc. - overriding databases specified in call to .";}
a:4:{i:0;s:11:"yaz_element";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:53:"bool yaz_element ( resource $id, string $elementset )";i:3;s:54:"This function sets the element set name for retrieval.";}
a:4:{i:0;s:9:"yaz_errno";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:30:"int yaz_errno ( resource $id )";i:3;s:69:"Returns an error number for the server (last request) identified by .";}
a:4:{i:0;s:9:"yaz_error";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:33:"string yaz_error ( resource $id )";i:3;s:87:"returns an English text message corresponding to the last error number as returned by .";}
a:4:{i:0;s:13:"yaz_es_result";i:1;s:35:"(PHP 4 >= 4.2.0, PECL yaz >= 0.9.0)";i:2;s:36:"array yaz_es_result ( resource $id )";i:3;s:127:"This function inspects the last returned Extended Service result from a server. An Extended Service is initiated by either or .";}
a:4:{i:0;s:6:"yaz_es";i:1;s:19:"(PECL yaz >= 0.9.0)";i:2;s:55:"void yaz_es ( resource $id, string $type, array $args )";i:3;s:177:"This function prepares for an Extended Service Request. Extended Services is family of various Z39.50 facilities, such as Record Update, Item Order, Database administration etc.";}
a:4:{i:0;s:14:"yaz_get_option";i:1;s:19:"(PECL yaz >= 0.9.0)";i:2;s:52:"string yaz_get_option ( resource $id, string $name )";i:3;s:48:"Returns the value of the option specified with .";}
a:4:{i:0;s:8:"yaz_hits";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:55:"int yaz_hits ( resource $id [, array &$searchresult ] )";i:3;s:47:"returns the number of hits for the last search.";}
a:4:{i:0;s:13:"yaz_itemorder";i:1;s:35:"(PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)";i:2;s:48:"void yaz_itemorder ( resource $id, array $args )";i:3;s:167:"This function prepares for an Extended Services request using the Profile for the Use of Z39.50 Item Order Extended Service to Transport ILL (Profile/1). See and the .";}
a:4:{i:0;s:11:"yaz_present";i:1;s:35:"(PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)";i:2;s:33:"bool yaz_present ( resource $id )";i:3;s:74:"This function prepares for retrieval of records after a successful search.";}
a:4:{i:0;s:9:"yaz_range";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:56:"void yaz_range ( resource $id, int $start, int $number )";i:3;s:41:"Specifies a range of records to retrieve.";}
a:4:{i:0;s:10:"yaz_record";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:58:"string yaz_record ( resource $id, int $pos, string $type )";i:3;s:97:"The function inspects a record in the current result set at the position specified by parameter .";}
a:4:{i:0;s:15:"yaz_scan_result";i:1;s:35:"(PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)";i:2;s:58:"array yaz_scan_result ( resource $id [, array &$result ] )";i:3;s:92:"returns terms and associated information as received from the server in the last performed .";}
a:4:{i:0;s:8:"yaz_scan";i:1;s:35:"(PHP 4 >= 4.0.5, PECL yaz >= 0.9.0)";i:2;s:81:"void yaz_scan ( resource $id, string $type, string $startterm [, array $flags ] )";i:3;s:77:"This function prepares for a Z39.50 Scan Request on the specified connection.";}
a:4:{i:0;s:10:"yaz_schema";i:1;s:35:"(PHP 4 >= 4.2.0, PECL yaz >= 0.9.0)";i:2;s:48:"void yaz_schema ( resource $id, string $schema )";i:3;s:35:"specifies the schema for retrieval.";}
a:4:{i:0;s:10:"yaz_search";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:61:"bool yaz_search ( resource $id, string $type, string $query )";i:3;s:46:"prepares for a search on the given connection.";}
a:4:{i:0;s:14:"yaz_set_option";i:1;s:19:"(PECL yaz >= 0.9.0)";i:2;s:65:"void yaz_set_option ( resource $id, string $name, string $value )";i:3;s:49:"Sets one or more options on the given connection.";}
a:4:{i:0;s:8:"yaz_sort";i:1;s:35:"(PHP 4 >= 4.0.7, PECL yaz >= 0.9.0)";i:2;s:48:"void yaz_sort ( resource $id, string $criteria )";i:3;s:60:"This function sets sorting criteria and enables Z39.50 Sort.";}
a:4:{i:0;s:10:"yaz_syntax";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:48:"void yaz_syntax ( resource $id, string $syntax )";i:3;s:51:"specifies the preferred record syntax for retrieval";}
a:4:{i:0;s:8:"yaz_wait";i:1;s:35:"(PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)";i:2;s:37:"mixed yaz_wait ([ array &$options ] )";i:3;s:131:"This function carries out networked (blocked) activity for outstanding requests which have been prepared by the functions, ,, and .";}
a:4:{i:0;s:6:"yp_all";i:1;s:32:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5)";i:2;s:61:"void yp_all ( string $domain, string $map, string $callback )";i:3;s:0:"";}
a:4:{i:0;s:6:"yp_cat";i:1;s:32:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5)";i:2;s:44:"array yp_cat ( string $domain, string $map )";i:3;s:24:"Returns all map entries.";}
a:4:{i:0;s:13:"yp_err_string";i:1;s:32:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5)";i:2;s:39:"string yp_err_string ( int $errorcode )";i:3;s:107:"Returns the error message associated with the given error code. Useful to indicate what exactly went wrong.";}
a:4:{i:0;s:8:"yp_errno";i:1;s:32:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5)";i:2;s:21:"int yp_errno ( void )";i:3;s:49:"Returns the error code of the previous operation.";}
a:4:{i:0;s:8:"yp_first";i:1;s:23:"(PHP 4, PHP 5 <= 5.0.5)";i:2;s:46:"array yp_first ( string $domain, string $map )";i:3;s:59:"Gets the first key-value pair from the named in the named .";}
a:4:{i:0;s:21:"yp_get_default_domain";i:1;s:23:"(PHP 4, PHP 5 <= 5.0.5)";i:2;s:37:"string yp_get_default_domain ( void )";i:3;s:101:"Returns the default domain of the node. Can be used as the domain parameter for successive NIS calls.";}
a:4:{i:0;s:9:"yp_master";i:1;s:23:"(PHP 4, PHP 5 <= 5.0.5)";i:2;s:48:"string yp_master ( string $domain, string $map )";i:3;s:57:"Returns the machine name of the master NIS server for a .";}
a:4:{i:0;s:8:"yp_match";i:1;s:23:"(PHP 4, PHP 5 <= 5.0.5)";i:2;s:60:"string yp_match ( string $domain, string $map, string $key )";i:3;s:67:"Returns the value associated with the passed out of the specified .";}
a:4:{i:0;s:7:"yp_next";i:1;s:23:"(PHP 4, PHP 5 <= 5.0.5)";i:2;s:58:"array yp_next ( string $domain, string $map, string $key )";i:3;s:66:"Returns the next key-value pair in the named after the specified .";}
a:4:{i:0;s:8:"yp_order";i:1;s:23:"(PHP 4, PHP 5 <= 5.0.5)";i:2;s:44:"int yp_order ( string $domain, string $map )";i:3;s:32:"Gets the order number for a map.";}
a:4:{i:0;s:20:"udm_add_search_limit";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:68:"bool udm_add_search_limit ( resource $agent, int $var, string $val )";i:3;s:25:"adds search restrictions.";}
a:4:{i:0;s:21:"udm_alloc_agent_array";i:1;s:59:"(PHP 4 >= 4.3.3, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:51:"resource udm_alloc_agent_array ( array $databases )";i:3;s:56:"will create an agent with multiple database connections.";}
a:4:{i:0;s:15:"udm_alloc_agent";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:63:"resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] )";i:3;s:31:"Allocate a mnoGoSearch session.";}
a:4:{i:0;s:15:"udm_api_version";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:28:"int udm_api_version ( void )";i:3;s:33:"Gets the mnoGoSearch API version.";}
a:4:{i:0;s:12:"udm_cat_list";i:1;s:59:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:56:"array udm_cat_list ( resource $agent, string $category )";i:3;s:63:"Gets all the categories on the same level with the current one.";}
a:4:{i:0;s:12:"udm_cat_path";i:1;s:59:"(PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:56:"array udm_cat_path ( resource $agent, string $category )";i:3;s:113:"Returns an array describing the path in the categories tree from the tree root to the current one, specified by .";}
a:4:{i:0;s:17:"udm_check_charset";i:1;s:59:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:59:"bool udm_check_charset ( resource $agent, string $charset )";i:3;s:0:"";}
a:4:{i:0;s:16:"udm_check_stored";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:67:"int udm_check_stored ( resource $agent, int $link, string $doc_id )";i:3;s:0:"";}
a:4:{i:0;s:23:"udm_clear_search_limits";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:48:"bool udm_clear_search_limits ( resource $agent )";i:3;s:34:"resets defined search limitations.";}
a:4:{i:0;s:16:"udm_close_stored";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:51:"int udm_close_stored ( resource $agent, int $link )";i:3;s:0:"";}
a:4:{i:0;s:9:"udm_crc32";i:1;s:59:"(PHP 4 >= 4.2.0, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:46:"int udm_crc32 ( resource $agent, string $str )";i:3;s:0:"";}
a:4:{i:0;s:9:"udm_errno";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:33:"int udm_errno ( resource $agent )";i:3;s:35:"Receiving numeric agent error code.";}
a:4:{i:0;s:9:"udm_error";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:36:"string udm_error ( resource $agent )";i:3;s:29:"Gets the agent error message.";}
a:4:{i:0;s:8:"udm_find";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:52:"resource udm_find ( resource $agent, string $query )";i:3;s:18:"Performs a search.";}
a:4:{i:0;s:14:"udm_free_agent";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:38:"int udm_free_agent ( resource $agent )";i:3;s:46:"Freeing up memory allocated for agent session.";}
a:4:{i:0;s:20:"udm_free_ispell_data";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:40:"bool udm_free_ispell_data ( int $agent )";i:3;s:43:"Frees the memory allocated for ispell data.";}
a:4:{i:0;s:12:"udm_free_res";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:35:"bool udm_free_res ( resource $res )";i:3;s:40:"Freeing up memory allocated for results.";}
a:4:{i:0;s:17:"udm_get_doc_count";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:41:"int udm_get_doc_count ( resource $agent )";i:3;s:48:"returns the number of documents in the database.";}
a:4:{i:0;s:17:"udm_get_res_field";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:64:"string udm_get_res_field ( resource $res, int $row, int $field )";i:3;s:33:"Fetch a mnoGoSearch result field.";}
a:4:{i:0;s:17:"udm_get_res_param";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:54:"string udm_get_res_param ( resource $res, int $param )";i:3;s:39:"Gets the mnoGoSearch result parameters.";}
a:4:{i:0;s:10:"udm_hash32";i:1;s:59:"(PHP 4 >= 4.3.3, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:47:"int udm_hash32 ( resource $agent, string $str )";i:3;s:72:"will take a string and return a quite unique 32-bit hash number from it.";}
a:4:{i:0;s:20:"udm_load_ispell_data";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:94:"bool udm_load_ispell_data ( resource $agent, int $var, string $val1, string $val2, int $flag )";i:3;s:18:"loads ispell data.";}
a:4:{i:0;s:15:"udm_open_stored";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:59:"int udm_open_stored ( resource $agent, string $storedaddr )";i:3;s:0:"";}
a:4:{i:0;s:19:"udm_set_agent_param";i:1;s:59:"(PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL
mnogosearch >= 1.0.0)";i:2;s:67:"bool udm_set_agent_param ( resource $agent, int $var, string $val )";i:3;s:39:"Defines mnoGoSearch session parameters.";}
a:4:{i:0;s:16:"solr_get_version";i:1;s:20:"(PECL solr >= 0.9.1)";i:2;s:32:"string solr_get_version ( void )";i:3;s:71:"This function returns the current version of the extension as a string.";}
a:4:{i:0;s:28:"SolrUtils::digestXmlResponse";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:102:"public static SolrObject SolrUtils::digestXmlResponse ( string $xmlresponse [, int $parse_mode = 0 ] )";i:3;s:137:"This method parses an response XML string from the Apache Solr server into a SolrObject. It throws a SolrException if there was an error.";}
a:4:{i:0;s:27:"SolrUtils::escapeQueryChars";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public static string SolrUtils::escapeQueryChars ( string $str )";i:3;s:78:"Lucene supports escaping special characters that are part of the query syntax.";}
a:4:{i:0;s:25:"SolrUtils::getSolrVersion";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public static string SolrUtils::getSolrVersion ( void )";i:3;s:33:"Returns the current Solr version.";}
a:4:{i:0;s:22:"SolrUtils::queryPhrase";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public static string SolrUtils::queryPhrase ( string $str )";i:3;s:50:"Prepares a phrase from an unescaped lucene string.";}
a:4:{i:0;s:27:"SolrInputDocument::addField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:115:"public bool SolrInputDocument::addField ( string $fieldName, string $fieldValue [, float $fieldBoostValue = 0.0 ] )";i:3;s:142:"For multi-value fields, if a valid boost value is specified, the specified value will be multiplied by the current boost value for this field.";}
a:4:{i:0;s:24:"SolrInputDocument::clear";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:45:"public bool SolrInputDocument::clear ( void )";i:3;s:85:"Resets the document by dropping all the fields and resets the document boost to zero.";}
a:4:{i:0;s:26:"SolrInputDocument::__clone";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public void SolrInputDocument::__clone ( void )";i:3;s:87:"Should not be called directly. It is used to create a deep copy of a SolrInputDocument.";}
a:4:{i:0;s:30:"SolrInputDocument::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:46:"public SolrInputDocument::__construct ( void )";i:3;s:12:"Constructor.";}
a:4:{i:0;s:30:"SolrInputDocument::deleteField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public bool SolrInputDocument::deleteField ( string $fieldName )";i:3;s:34:"Removes a field from the document.";}
a:4:{i:0;s:29:"SolrInputDocument::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public void SolrInputDocument::__destruct ( void )";i:3;s:10:"Destructor";}
a:4:{i:0;s:30:"SolrInputDocument::fieldExists";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public bool SolrInputDocument::fieldExists ( string $fieldName )";i:3;s:24:"Checks if a field exists";}
a:4:{i:0;s:27:"SolrInputDocument::getBoost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public float SolrInputDocument::getBoost ( void )";i:3;s:51:"Retrieves the current boost value for the document.";}
a:4:{i:0;s:27:"SolrInputDocument::getField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:74:"public SolrDocumentField SolrInputDocument::getField ( string $fieldName )";i:3;s:34:"Retrieves a field in the document.";}
a:4:{i:0;s:32:"SolrInputDocument::getFieldBoost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:67:"public float SolrInputDocument::getFieldBoost ( string $fieldName )";i:3;s:49:"Retrieves the boost value for a particular field.";}
a:4:{i:0;s:32:"SolrInputDocument::getFieldCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public int SolrInputDocument::getFieldCount ( void )";i:3;s:45:"Returns the number of fields in the document.";}
a:4:{i:0;s:32:"SolrInputDocument::getFieldNames";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:54:"public array SolrInputDocument::getFieldNames ( void )";i:3;s:59:"Returns an array containing all the fields in the document.";}
a:4:{i:0;s:24:"SolrInputDocument::merge";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:97:"public bool SolrInputDocument::merge ( SolrInputDocument $sourceDoc [, bool $overwrite = true ] )";i:3;s:39:"Merges one input document into another.";}
a:4:{i:0;s:24:"SolrInputDocument::reset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:45:"public bool SolrInputDocument::reset ( void )";i:3;s:44:"This is an alias of SolrInputDocument::clear";}
a:4:{i:0;s:27:"SolrInputDocument::setBoost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:69:"public bool SolrInputDocument::setBoost ( float $documentBoostValue )";i:3;s:39:"Sets the boost value for this document.";}
a:4:{i:0;s:32:"SolrInputDocument::setFieldBoost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:90:"public bool SolrInputDocument::setFieldBoost ( string $fieldName, float $fieldBoostValue )";i:3;s:98:"Sets the index-time boost value for a field. This replaces the current boost value for this field.";}
a:4:{i:0;s:23:"SolrInputDocument::sort";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:110:"public bool SolrInputDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC ] )";i:3;s:0:"";}
a:4:{i:0;s:26:"SolrInputDocument::toArray";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:48:"public array SolrInputDocument::toArray ( void )";i:3;s:54:"Returns an array representation of the input document.";}
a:4:{i:0;s:22:"SolrDocument::addField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:76:"public bool SolrDocument::addField ( string $fieldName, string $fieldValue )";i:3;s:54:"This method adds a field to the SolrDocument instance.";}
a:4:{i:0;s:19:"SolrDocument::clear";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public bool SolrDocument::clear ( void )";i:3;s:89:"Resets the current object. Discards all the fields and resets the document boost to zero.";}
a:4:{i:0;s:21:"SolrDocument::__clone";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:42:"public void SolrDocument::__clone ( void )";i:3;s:67:"Creates a copy of a SolrDocument object. Not to be called directly.";}
a:4:{i:0;s:25:"SolrDocument::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:41:"public SolrDocument::__construct ( void )";i:3;s:28:"Constructor for SolrDocument";}
a:4:{i:0;s:21:"SolrDocument::current";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public SolrDocumentField SolrDocument::current ( void )";i:3;s:27:"Retrieves the current field";}
a:4:{i:0;s:25:"SolrDocument::deleteField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public bool SolrDocument::deleteField ( string $fieldName )";i:3;s:34:"Removes a field from the document.";}
a:4:{i:0;s:24:"SolrDocument::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:45:"public void SolrDocument::__destruct ( void )";i:3;s:28:"Destructor for SolrDocument.";}
a:4:{i:0;s:25:"SolrDocument::fieldExists";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public bool SolrDocument::fieldExists ( string $fieldName )";i:3;s:67:"Checks if the requested field as a valid fieldname in the document.";}
a:4:{i:0;s:19:"SolrDocument::__get";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:66:"public SolrDocumentField SolrDocument::__get ( string $fieldName )";i:3;s:51:"Magic method for accessing the field as a property.";}
a:4:{i:0;s:22:"SolrDocument::getField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:69:"public SolrDocumentField SolrDocument::getField ( string $fieldName )";i:3;s:26:"Retrieves a field by name.";}
a:4:{i:0;s:27:"SolrDocument::getFieldCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public int SolrDocument::getFieldCount ( void )";i:3;s:88:"Returns the number of fields in this document. Multi-value fields are only counted once.";}
a:4:{i:0;s:27:"SolrDocument::getFieldNames";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public array SolrDocument::getFieldNames ( void )";i:3;s:49:"Returns an array of fields names in the document.";}
a:4:{i:0;s:30:"SolrDocument::getInputDocument";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public SolrInputDocument SolrDocument::getInputDocument ( void )";i:3;s:136:"Returns a SolrInputDocument equivalent of the object. This is useful if one wishes to resubmit/update a document retrieved from a query.";}
a:4:{i:0;s:21:"SolrDocument::__isset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public bool SolrDocument::__isset ( string $fieldName )";i:3;s:24:"Checks if a field exists";}
a:4:{i:0;s:17:"SolrDocument::key";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public string SolrDocument::key ( void )";i:3;s:26:"Retrieves the current key.";}
a:4:{i:0;s:19:"SolrDocument::merge";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:87:"public bool SolrDocument::merge ( SolrDocument $sourceDoc [, bool $overwrite = true ] )";i:3;s:42:"Merges source to the current SolrDocument.";}
a:4:{i:0;s:18:"SolrDocument::next";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:39:"public void SolrDocument::next ( void )";i:3;s:45:"Moves the internal pointer to the next field.";}
a:4:{i:0;s:26:"SolrDocument::offsetExists";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:60:"public bool SolrDocument::offsetExists ( string $fieldName )";i:3;s:89:"Checks if a particular field exists. This is used when the object is treated as an array.";}
a:4:{i:0;s:23:"SolrDocument::offsetGet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public SolrDocumentField SolrDocument::offsetGet ( string $fieldName )";i:3;s:74:"This is used to retrieve the field when the object is treated as an array.";}
a:4:{i:0;s:23:"SolrDocument::offsetSet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:77:"public void SolrDocument::offsetSet ( string $fieldName, string $fieldValue )";i:3;s:75:"Used when the object is treated as an array to add a field to the document.";}
a:4:{i:0;s:25:"SolrDocument::offsetUnset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public void SolrDocument::offsetUnset ( string $fieldName )";i:3;s:34:"Removes a field from the document.";}
a:4:{i:0;s:19:"SolrDocument::reset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public bool SolrDocument::reset ( void )";i:3;s:41:"This is an alias to SolrDocument::clear()";}
a:4:{i:0;s:20:"SolrDocument::rewind";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:41:"public void SolrDocument::rewind ( void )";i:3;s:45:"Resets the internal pointer to the beginning.";}
a:4:{i:0;s:23:"SolrDocument::serialize";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:46:"public string SolrDocument::serialize ( void )";i:3;s:30:"Used for custom serialization.";}
a:4:{i:0;s:19:"SolrDocument::__set";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:73:"public bool SolrDocument::__set ( string $fieldName, string $fieldValue )";i:3;s:77:"Adds another field to the document. Used to set the fields as new properties.";}
a:4:{i:0;s:18:"SolrDocument::sort";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:100:"public bool SolrDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"SolrDocument::toArray";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:43:"public array SolrDocument::toArray ( void )";i:3;s:48:"Returns an array representation of the document.";}
a:4:{i:0;s:25:"SolrDocument::unserialize";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:60:"public void SolrDocument::unserialize ( string $serialized )";i:3;s:44:"Custom serialization of SolrDocument objects";}
a:4:{i:0;s:21:"SolrDocument::__unset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public bool SolrDocument::__unset ( string $fieldName )";i:3;s:81:"Removes a field from the document when the field is access as an object property.";}
a:4:{i:0;s:19:"SolrDocument::valid";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public bool SolrDocument::valid ( void )";i:3;s:95:"Checks if the current position internally is still valid. It is used during foreach operations.";}
a:4:{i:0;s:30:"SolrDocumentField::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:46:"public SolrDocumentField::__construct ( void )";i:3;s:12:"Constructor.";}
a:4:{i:0;s:29:"SolrDocumentField::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public void SolrDocumentField::__destruct ( void )";i:3;s:11:"Destructor.";}
a:4:{i:0;s:23:"SolrObject::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:39:"public SolrObject::__construct ( void )";i:3;s:20:"Creates Solr object.";}
a:4:{i:0;s:22:"SolrObject::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:43:"public void SolrObject::__destruct ( void )";i:3;s:14:"The destructor";}
a:4:{i:0;s:28:"SolrObject::getPropertyNames";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public array SolrObject::getPropertyNames ( void )";i:3;s:51:"Returns an array of all the names of the properties";}
a:4:{i:0;s:24:"SolrObject::offsetExists";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:62:"public bool SolrObject::offsetExists ( string $property_name )";i:3;s:83:"Checks if the property exists. This is used when the object is treated as an array.";}
a:4:{i:0;s:21:"SolrObject::offsetGet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:60:"public mixed SolrObject::offsetGet ( string $property_name )";i:3;s:89:"Used to get the value of a property. This is used when the object is treated as an array.";}
a:4:{i:0;s:21:"SolrObject::offsetSet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:83:"public void SolrObject::offsetSet ( string $property_name, string $property_value )";i:3;s:141:"Sets the value for a property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.";}
a:4:{i:0;s:23:"SolrObject::offsetUnset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:61:"public void SolrObject::offsetUnset ( string $property_name )";i:3;s:143:"Sets the value for the property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.";}
a:4:{i:0;s:23:"SolrClient::addDocument";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:131:"public SolrUpdateResponse SolrClient::addDocument ( SolrInputDocument $doc [, bool $allowDups = false [, int $commitWithin = 0 ]] )";i:3;s:41:"This method adds a document to the index.";}
a:4:{i:0;s:24:"SolrClient::addDocuments";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:107:"public void SolrClient::addDocuments ( array $docs [, bool $allowDups = false [, int $commitWithin = 0 ]] )";i:3;s:44:"Adds a collection of documents to the index.";}
a:4:{i:0;s:18:"SolrClient::commit";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:131:"public SolrUpdateResponse SolrClient::commit ([ int $maxSegments = "1" [, bool $waitFlush = true [, bool $waitSearcher = true ]]] )";i:3;s:56:"This method finalizes all add/deletes made to the index.";}
a:4:{i:0;s:23:"SolrClient::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public SolrClient::__construct ( array $clientOptions )";i:3;s:37:"Constructor for the SolrClient object";}
a:4:{i:0;s:22:"SolrClient::deleteById";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:63:"public SolrUpdateResponse SolrClient::deleteById ( string $id )";i:3;s:111:"Deletes the document with the specified ID. Where ID is the value of the uniqueKey field declared in the schema";}
a:4:{i:0;s:23:"SolrClient::deleteByIds";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public SolrUpdateResponse SolrClient::deleteByIds ( array $ids )";i:3;s:64:"Deletes a collection of documents with the specified set of ids.";}
a:4:{i:0;s:27:"SolrClient::deleteByQueries";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:72:"public SolrUpdateResponse SolrClient::deleteByQueries ( array $queries )";i:3;s:49:"Removes all documents matching any of the queries";}
a:4:{i:0;s:25:"SolrClient::deleteByQuery";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:69:"public SolrUpdateResponse SolrClient::deleteByQuery ( string $query )";i:3;s:47:"Deletes all documents matching the given query.";}
a:4:{i:0;s:22:"SolrClient::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:43:"public void SolrClient::__destruct ( void )";i:3;s:10:"Destructor";}
a:4:{i:0;s:20:"SolrClient::getDebug";i:1;s:20:"(PECL solr >= 0.9.7)";i:2;s:43:"public string SolrClient::getDebug ( void )";i:3;s:54:"Returns the debug data for the last connection attempt";}
a:4:{i:0;s:22:"SolrClient::getOptions";i:1;s:20:"(PECL solr >= 0.9.6)";i:2;s:44:"public array SolrClient::getOptions ( void )";i:3;s:155:"Returns the client options set internally. Very useful for debugging. The values returned are readonly and can only be set when the object is instantiated.";}
a:4:{i:0;s:20:"SolrClient::optimize";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:133:"public SolrUpdateResponse SolrClient::optimize ([ int $maxSegments = "1" [, bool $waitFlush = true [, bool $waitSearcher = true ]]] )";i:3;s:52:"Defragments the index for faster search performance.";}
a:4:{i:0;s:16:"SolrClient::ping";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public SolrPingResponse SolrClient::ping ( void )";i:3;s:89:"Checks if the Solr server is still alive. Sends a HEAD request to the Apache Solr server.";}
a:4:{i:0;s:17:"SolrClient::query";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public SolrQueryResponse SolrClient::query ( SolrParams $query )";i:3;s:28:"Sends a query to the server.";}
a:4:{i:0;s:19:"SolrClient::request";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public void SolrClient::request ( string $raw_request )";i:3;s:44:"Sends a raw XML update request to the server";}
a:4:{i:0;s:20:"SolrClient::rollback";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public SolrUpdateResponse SolrClient::rollback ( void )";i:3;s:131:"Rollbacks all add/deletes made to the index since the last commit. It neither calls any event listeners nor creates a new searcher.";}
a:4:{i:0;s:29:"SolrClient::setResponseWriter";i:1;s:21:"(PECL solr >= 0.9.11)";i:2;s:68:"public void SolrClient::setResponseWriter ( string $responseWriter )";i:3;s:63:"Sets the response writer used to prepare the response from Solr";}
a:4:{i:0;s:22:"SolrClient::setServlet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:63:"public bool SolrClient::setServlet ( int $type, string $value )";i:3;s:49:"Changes the specified servlet type to a new value";}
a:4:{i:0;s:19:"SolrClient::threads";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public void SolrClient::threads ( void )";i:3;s:25:"Checks the threads status";}
a:4:{i:0;s:33:"SolrResponse::getDigestedResponse";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:56:"public string SolrResponse::getDigestedResponse ( void )";i:3;s:47:"Returns the XML response as serialized PHP data";}
a:4:{i:0;s:27:"SolrResponse::getHttpStatus";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public int SolrResponse::getHttpStatus ( void )";i:3;s:40:"Returns the HTTP status of the response.";}
a:4:{i:0;s:34:"SolrResponse::getHttpStatusMessage";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public string SolrResponse::getHttpStatusMessage ( void )";i:3;s:40:"Returns more details on the HTTP status.";}
a:4:{i:0;s:27:"SolrResponse::getRawRequest";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public string SolrResponse::getRawRequest ( void )";i:3;s:48:"Returns the raw request sent to the Solr server.";}
a:4:{i:0;s:34:"SolrResponse::getRawRequestHeaders";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public string SolrResponse::getRawRequestHeaders ( void )";i:3;s:56:"Returns the raw request headers sent to the Solr server.";}
a:4:{i:0;s:28:"SolrResponse::getRawResponse";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public string SolrResponse::getRawResponse ( void )";i:3;s:41:"Returns the raw response from the server.";}
a:4:{i:0;s:35:"SolrResponse::getRawResponseHeaders";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:58:"public string SolrResponse::getRawResponseHeaders ( void )";i:3;s:49:"Returns the raw response headers from the server.";}
a:4:{i:0;s:27:"SolrResponse::getRequestUrl";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public string SolrResponse::getRequestUrl ( void )";i:3;s:45:"Returns the full URL the request was sent to.";}
a:4:{i:0;s:25:"SolrResponse::getResponse";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public SolrObject SolrResponse::getResponse ( void )";i:3;s:67:"Returns a SolrObject representing the XML response from the server.";}
a:4:{i:0;s:26:"SolrResponse::setParseMode";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:66:"public bool SolrResponse::setParseMode ([ int $parser_mode = 0 ] )";i:3;s:20:"Sets the parse mode.";}
a:4:{i:0;s:21:"SolrResponse::success";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:42:"public bool SolrResponse::success ( void )";i:3;s:58:"Used to check if the request to the server was successful.";}
a:4:{i:0;s:30:"SolrQueryResponse::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:46:"public SolrQueryResponse::__construct ( void )";i:3;s:11:"Constructor";}
a:4:{i:0;s:29:"SolrQueryResponse::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public void SolrQueryResponse::__destruct ( void )";i:3;s:11:"Destructor.";}
a:4:{i:0;s:31:"SolrUpdateResponse::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public SolrUpdateResponse::__construct ( void )";i:3;s:11:"Constructor";}
a:4:{i:0;s:30:"SolrUpdateResponse::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public void SolrUpdateResponse::__destruct ( void )";i:3;s:10:"Destructor";}
a:4:{i:0;s:29:"SolrPingResponse::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:45:"public SolrPingResponse::__construct ( void )";i:3;s:11:"Constructor";}
a:4:{i:0;s:28:"SolrPingResponse::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public void SolrPingResponse::__destruct ( void )";i:3;s:10:"Destructor";}
a:4:{i:0;s:29:"SolrPingResponse::getResponse";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public string SolrPingResponse::getResponse ( void )";i:3;s:97:"Returns the response from the server. This should be empty because the request as a HEAD request.";}
a:4:{i:0;s:32:"SolrGenericResponse::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:48:"public SolrGenericResponse::__construct ( void )";i:3;s:11:"Constructor";}
a:4:{i:0;s:31:"SolrGenericResponse::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public void SolrGenericResponse::__destruct ( void )";i:3;s:11:"Destructor.";}
a:4:{i:0;s:15:"SolrParams::add";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:71:"final public SolrParams SolrParams::add ( string $name, string $value )";i:3;s:41:"This is an alias for SolrParams::addParam";}
a:4:{i:0;s:20:"SolrParams::addParam";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public SolrParams SolrParams::addParam ( string $name, string $value )";i:3;s:97:"Adds a parameter to the object. This is used for parameters that can be specified multiple times.";}
a:4:{i:0;s:15:"SolrParams::get";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"final public mixed SolrParams::get ( string $param_name )";i:3;s:41:"This is an alias for SolrParams::getParam";}
a:4:{i:0;s:20:"SolrParams::getParam";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:65:"final public mixed SolrParams::getParam ([ string $param_name ] )";i:3;s:40:"Returns a parameter with name param_name";}
a:4:{i:0;s:21:"SolrParams::getParams";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"final public array SolrParams::getParams ( void )";i:3;s:46:"Returns an array of non URL-encoded parameters";}
a:4:{i:0;s:29:"SolrParams::getPreparedParams";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"final public array SolrParams::getPreparedParams ( void )";i:3;s:42:"Returns an array on URL-encoded parameters";}
a:4:{i:0;s:21:"SolrParams::serialize";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"final public string SolrParams::serialize ( void )";i:3;s:29:"Used for custom serialization";}
a:4:{i:0;s:15:"SolrParams::set";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:65:"final public void SolrParams::set ( string $name, string $value )";i:3;s:32:"An alias of SolrParams::setParam";}
a:4:{i:0;s:20:"SolrParams::setParam";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public SolrParams SolrParams::setParam ( string $name, string $value )";i:3;s:188:"Sets the query parameter to the specified value. This is used for parameters that can only be specified once. Subsequent calls with the same parameter name will override the existing value";}
a:4:{i:0;s:20:"SolrParams::toString";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:72:"final public string SolrParams::toString ([ bool $url_encode = false ] )";i:3;s:56:"Returns all the name-value pair parameters in the object";}
a:4:{i:0;s:23:"SolrParams::unserialize";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"final public void SolrParams::unserialize ( string $serialized )";i:3;s:29:"Used for custom serialization";}
a:4:{i:0;s:33:"SolrModifiableParams::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public SolrModifiableParams::__construct ( void )";i:3;s:11:"Constructor";}
a:4:{i:0;s:32:"SolrModifiableParams::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:53:"public void SolrModifiableParams::__destruct ( void )";i:3;s:10:"Destructor";}
a:4:{i:0;s:28:"SolrQuery::addFacetDateField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:67:"public SolrQuery SolrQuery::addFacetDateField ( string $dateField )";i:3;s:77:"This method allows you to specify a field which should be treated as a facet.";}
a:4:{i:0;s:28:"SolrQuery::addFacetDateOther";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:91:"public SolrQuery SolrQuery::addFacetDateOther ( string $value [, string $field_override ] )";i:3;s:71:"Sets the facet.date.other parameter. Accepts an optional field override";}
a:4:{i:0;s:24:"SolrQuery::addFacetField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public SolrQuery SolrQuery::addFacetField ( string $field )";i:3;s:31:"Adds another field to the facet";}
a:4:{i:0;s:24:"SolrQuery::addFacetQuery";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public SolrQuery SolrQuery::addFacetQuery ( string $facetQuery )";i:3;s:18:"Adds a facet query";}
a:4:{i:0;s:19:"SolrQuery::addField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:54:"public SolrQuery SolrQuery::addField ( string $field )";i:3;s:130:"This method is used to used to specify a set of fields to return, thereby restricting the amount of data returned in the response.";}
a:4:{i:0;s:25:"SolrQuery::addFilterQuery";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public SolrQuery SolrQuery::addFilterQuery ( string $fq )";i:3;s:24:"Specifies a filter query";}
a:4:{i:0;s:28:"SolrQuery::addHighlightField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:63:"public SolrQuery SolrQuery::addHighlightField ( string $field )";i:3;s:107:"Maps to hl.fl. This is used to specify that highlighted snippets should be generated for a particular field";}
a:4:{i:0;s:22:"SolrQuery::addMltField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public SolrQuery SolrQuery::addMltField ( string $field )";i:3;s:72:"Maps to mlt.fl. It specifies that a field should be used for similarity.";}
a:4:{i:0;s:27:"SolrQuery::addMltQueryField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:76:"public SolrQuery SolrQuery::addMltQueryField ( string $field, float $boost )";i:3;s:67:"Maps to mlt.qf. It is used to specify query fields and their boosts";}
a:4:{i:0;s:23:"SolrQuery::addSortField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:98:"public SolrQuery SolrQuery::addSortField ( string $field [, int $order = SolrQuery::ORDER_DESC ] )";i:3;s:49:"Used to control how the results should be sorted.";}
a:4:{i:0;s:24:"SolrQuery::addStatsFacet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public SolrQuery SolrQuery::addStatsFacet ( string $field )";i:3;s:97:"Requests a return of sub results for values within the given facet. Maps to the stats.facet field";}
a:4:{i:0;s:24:"SolrQuery::addStatsField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public SolrQuery SolrQuery::addStatsField ( string $field )";i:3;s:78:"Maps to stats.field parameter This methods adds another stats.field parameter.";}
a:4:{i:0;s:22:"SolrQuery::__construct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:46:"public SolrQuery::__construct ([ string $q ] )";i:3;s:12:"Constructor.";}
a:4:{i:0;s:21:"SolrQuery::__destruct";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:42:"public void SolrQuery::__destruct ( void )";i:3;s:10:"Destructor";}
a:4:{i:0;s:19:"SolrQuery::getFacet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public bool SolrQuery::getFacet ( void )";i:3;s:41:"Returns the value of the facet parameter.";}
a:4:{i:0;s:26:"SolrQuery::getFacetDateEnd";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public string SolrQuery::getFacetDateEnd ([ string $field_override ] )";i:3;s:98:"Returns the value for the facet.date.end parameter. This method accepts an optional field override";}
a:4:{i:0;s:29:"SolrQuery::getFacetDateFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public array SolrQuery::getFacetDateFields ( void )";i:3;s:33:"Returns all the facet.date fields";}
a:4:{i:0;s:26:"SolrQuery::getFacetDateGap";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public string SolrQuery::getFacetDateGap ([ string $field_override ] )";i:3;s:88:"Returns the value of the facet.date.gap parameter. It accepts an optional field override";}
a:4:{i:0;s:30:"SolrQuery::getFacetDateHardEnd";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:74:"public string SolrQuery::getFacetDateHardEnd ([ string $field_override ] )";i:3;s:89:"Returns the value of the facet.date.hardend parameter. Accepts an optional field override";}
a:4:{i:0;s:28:"SolrQuery::getFacetDateOther";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:71:"public array SolrQuery::getFacetDateOther ([ string $field_override ] )";i:3;s:101:"Returns the value for the facet.date.other parameter. This method accepts an optional field override.";}
a:4:{i:0;s:28:"SolrQuery::getFacetDateStart";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:72:"public string SolrQuery::getFacetDateStart ([ string $field_override ] )";i:3;s:120:"Returns the lower bound for the first date range for all date faceting on this field. Accepts an optional field override";}
a:4:{i:0;s:25:"SolrQuery::getFacetFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public array SolrQuery::getFacetFields ( void )";i:3;s:28:"Returns all the facet fields";}
a:4:{i:0;s:24:"SolrQuery::getFacetLimit";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:65:"public int SolrQuery::getFacetLimit ([ string $field_override ] )";i:3;s:140:"Returns the maximum number of constraint counts that should be returned for the facet fields. This method accepts an optional field override";}
a:4:{i:0;s:25:"SolrQuery::getFacetMethod";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:69:"public string SolrQuery::getFacetMethod ([ string $field_override ] )";i:3;s:89:"Returns the value of the facet.method parameter. This accepts an optional field override.";}
a:4:{i:0;s:27:"SolrQuery::getFacetMinCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:68:"public int SolrQuery::getFacetMinCount ([ string $field_override ] )";i:3;s:117:"Returns the minimum counts for facet fields should be included in the response. It accepts an optional field override";}
a:4:{i:0;s:26:"SolrQuery::getFacetMissing";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:68:"public bool SolrQuery::getFacetMissing ([ string $field_override ] )";i:3;s:97:"Returns the current state of the facet.missing parameter. This accepts an optional field override";}
a:4:{i:0;s:25:"SolrQuery::getFacetOffset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:66:"public int SolrQuery::getFacetOffset ([ string $field_override ] )";i:3;s:108:"Returns an offset into the list of constraints to be used for pagination. Accepts an optional field override";}
a:4:{i:0;s:25:"SolrQuery::getFacetPrefix";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:69:"public string SolrQuery::getFacetPrefix ([ string $field_override ] )";i:3;s:24:"Returns the facet prefix";}
a:4:{i:0;s:26:"SolrQuery::getFacetQueries";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:48:"public array SolrQuery::getFacetQueries ( void )";i:3;s:29:"Returns all the facet queries";}
a:4:{i:0;s:23:"SolrQuery::getFacetSort";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public int SolrQuery::getFacetSort ([ string $field_override ] )";i:3;s:79:"Returns an integer (SolrQuery::FACET_SORT_INDEX or SolrQuery::FACET_SORT_COUNT)";}
a:4:{i:0;s:20:"SolrQuery::getFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:42:"public array SolrQuery::getFields ( void )";i:3;s:64:"Returns the list of fields that will be returned in the response";}
a:4:{i:0;s:27:"SolrQuery::getFilterQueries";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public array SolrQuery::getFilterQueries ( void )";i:3;s:157:"Returns an array of filter queries. These are queries that can be used to restrict the super set of documents that can be returned, without influencing score";}
a:4:{i:0;s:23:"SolrQuery::getHighlight";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:44:"public bool SolrQuery::getHighlight ( void )";i:3;s:113:"Returns a boolean indicating whether or not to enable highlighted snippets to be generated in the query response.";}
a:4:{i:0;s:37:"SolrQuery::getHighlightAlternateField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:81:"public string SolrQuery::getHighlightAlternateField ([ string $field_override ] )";i:3;s:89:"Returns the highlight field to use as backup or default. It accepts an optional override.";}
a:4:{i:0;s:29:"SolrQuery::getHighlightFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public array SolrQuery::getHighlightFields ( void )";i:3;s:73:"Returns all the fields that Solr should generate highlighted snippets for";}
a:4:{i:0;s:32:"SolrQuery::getHighlightFormatter";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:76:"public string SolrQuery::getHighlightFormatter ([ string $field_override ] )";i:3;s:48:"Returns the formatter for the highlighted output";}
a:4:{i:0;s:33:"SolrQuery::getHighlightFragmenter";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:77:"public string SolrQuery::getHighlightFragmenter ([ string $field_override ] )";i:3;s:92:"Returns the text snippet generator for highlighted text. Accepts an optional field override.";}
a:4:{i:0;s:31:"SolrQuery::getHighlightFragsize";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:72:"public int SolrQuery::getHighlightFragsize ([ string $field_override ] )";i:3;s:137:"Returns the number of characters of fragments to consider for highlighting. Zero implies no fragmenting. The entire field should be used.";}
a:4:{i:0;s:41:"SolrQuery::getHighlightHighlightMultiTerm";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:62:"public bool SolrQuery::getHighlightHighlightMultiTerm ( void )";i:3;s:85:"Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries";}
a:4:{i:0;s:47:"
SolrQuery::getHighlightMaxAlternateFieldLength";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:87:"public int SolrQuery::getHighlightMaxAlternateFieldLength ([ string $field_override ] )";i:3;s:63:"Returns the maximum number of characters of the field to return";}
a:4:{i:0;s:39:"SolrQuery::getHighlightMaxAnalyzedChars";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public int SolrQuery::getHighlightMaxAnalyzedChars ( void )";i:3;s:86:"Returns the maximum number of characters into a document to look for suitable snippets";}
a:4:{i:0;s:38:"SolrQuery::getHighlightMergeContiguous";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:80:"public bool SolrQuery::getHighlightMergeContiguous ([ string $field_override ] )";i:3;s:116:"Returns whether or not the collapse contiguous fragments into a single fragment. Accepts an optional field override.";}
a:4:{i:0;s:45:"
SolrQuery::getHighlightRegexMaxAnalyzedChars";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public int SolrQuery::getHighlightRegexMaxAnalyzedChars ( void )";i:3;s:85:"Returns the maximum number of characters from a field when using the regex fragmenter";}
a:4:{i:0;s:35:"SolrQuery::getHighlightRegexPattern";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:58:"public string SolrQuery::getHighlightRegexPattern ( void )";i:3;s:51:"Returns the regular expression used for fragmenting";}
a:4:{i:0;s:32:"SolrQuery::getHighlightRegexSlop";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:54:"public float SolrQuery::getHighlightRegexSlop ( void )";i:3;s:126:"Returns the factor by which the regex fragmenter can deviate from the ideal fragment size to accomodate the regular expression";}
a:4:{i:0;s:40:"SolrQuery::getHighlightRequireFieldMatch";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:61:"public bool SolrQuery::getHighlightRequireFieldMatch ( void )";i:3;s:90:"Returns if a field will only be highlighted if the query matched in this particular field.";}
a:4:{i:0;s:33:"SolrQuery::getHighlightSimplePost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:77:"public string SolrQuery::getHighlightSimplePost ([ string $field_override ] )";i:3;s:91:"Returns the text which appears after a highlighted term. Accepts an optional field override";}
a:4:{i:0;s:32:"SolrQuery::getHighlightSimplePre";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:76:"public string SolrQuery::getHighlightSimplePre ([ string $field_override ] )";i:3;s:92:"Returns the text which appears before a highlighted term. Accepts an optional field override";}
a:4:{i:0;s:31:"SolrQuery::getHighlightSnippets";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:72:"public int SolrQuery::getHighlightSnippets ([ string $field_override ] )";i:3;s:108:"Returns the maximum number of highlighted snippets to generate per field. Accepts an optional field override";}
a:4:{i:0;s:44:"
SolrQuery::getHighlightUsePhraseHighlighter";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:64:"public bool SolrQuery::getHighlightUsePhraseHighlighter ( void )";i:3;s:129:"Returns whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.";}
a:4:{i:0;s:17:"SolrQuery::getMlt";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:38:"public bool SolrQuery::getMlt ( void )";i:3;s:61:"Returns whether or not MoreLikeThis results should be enabled";}
a:4:{i:0;s:22:"SolrQuery::getMltBoost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:43:"public bool SolrQuery::getMltBoost ( void )";i:3;s:82:"Returns whether or not the query will be boosted by the interesting term relevance";}
a:4:{i:0;s:22:"SolrQuery::getMltCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:42:"public int SolrQuery::getMltCount ( void )";i:3;s:65:"Returns the number of similar documents to return for each result";}
a:4:{i:0;s:23:"SolrQuery::getMltFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:45:"public array SolrQuery::getMltFields ( void )";i:3;s:44:"Returns all the fields to use for similarity";}
a:4:{i:0;s:33:"SolrQuery::getMltMaxNumQueryTerms";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:53:"public int SolrQuery::getMltMaxNumQueryTerms ( void )";i:3;s:86:"Returns the maximum number of query terms that will be included in any generated query";}
a:4:{i:0;s:29:"SolrQuery::getMltMaxNumTokens";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public int SolrQuery::getMltMaxNumTokens ( void )";i:3;s:111:"Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support";}
a:4:{i:0;s:30:"SolrQuery::getMltMaxWordLength";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public int SolrQuery::getMltMaxWordLength ( void )";i:3;s:65:"Returns the maximum word length above which words will be ignored";}
a:4:{i:0;s:32:"SolrQuery::getMltMinDocFrequency";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public int SolrQuery::getMltMinDocFrequency ( void )";i:3;s:107:"Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs";}
a:4:{i:0;s:33:"SolrQuery::getMltMinTermFrequency";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:53:"public int SolrQuery::getMltMinTermFrequency ( void )";i:3;s:78:"Returns the frequency below which terms will be ignored in the source document";}
a:4:{i:0;s:30:"SolrQuery::getMltMinWordLength";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public int SolrQuery::getMltMinWordLength ( void )";i:3;s:65:"Returns the minimum word length below which words will be ignored";}
a:4:{i:0;s:28:"SolrQuery::getMltQueryFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:50:"public array SolrQuery::getMltQueryFields ( void )";i:3;s:41:"Returns the query fields and their boosts";}
a:4:{i:0;s:19:"SolrQuery::getQuery";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:42:"public string SolrQuery::getQuery ( void )";i:3;s:29:"Returns the main search query";}
a:4:{i:0;s:18:"SolrQuery::getRows";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:38:"public int SolrQuery::getRows ( void )";i:3;s:110:"Returns the maximum number of documents from the complete result set to return to the client for every request";}
a:4:{i:0;s:24:"SolrQuery::getSortFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:46:"public array SolrQuery::getSortFields ( void )";i:3;s:27:"Returns all the sort fields";}
a:4:{i:0;s:19:"SolrQuery::getStart";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:39:"public int SolrQuery::getStart ( void )";i:3;s:111:"Returns the offset in the complete result set for the queries where the set of returned documents should begin.";}
a:4:{i:0;s:19:"SolrQuery::getStats";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public bool SolrQuery::getStats ( void )";i:3;s:39:"Returns whether or not stats is enabled";}
a:4:{i:0;s:25:"SolrQuery::getStatsFacets";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public array SolrQuery::getStatsFacets ( void )";i:3;s:42:"Returns all the stats facets that were set";}
a:4:{i:0;s:25:"SolrQuery::getStatsFields";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public array SolrQuery::getStatsFields ( void )";i:3;s:33:"Returns all the statistics fields";}
a:4:{i:0;s:19:"SolrQuery::getTerms";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:40:"public bool SolrQuery::getTerms ( void )";i:3;s:52:"Returns whether or not the TermsComponent is enabled";}
a:4:{i:0;s:24:"SolrQuery::getTermsField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public string SolrQuery::getTermsField ( void )";i:3;s:52:"Returns the field from which the terms are retrieved";}
a:4:{i:0;s:36:"SolrQuery::getTermsIncludeLowerBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public bool SolrQuery::getTermsIncludeLowerBound ( void )";i:3;s:67:"Returns whether or not to include the lower bound in the result set";}
a:4:{i:0;s:36:"SolrQuery::getTermsIncludeUpperBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public bool SolrQuery::getTermsIncludeUpperBound ( void )";i:3;s:72:"Returns whether or not to include the upper bound term in the result set";}
a:4:{i:0;s:24:"SolrQuery::getTermsLimit";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:44:"public int SolrQuery::getTermsLimit ( void )";i:3;s:54:"Returns the maximum number of terms Solr should return";}
a:4:{i:0;s:29:"SolrQuery::getTermsLowerBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public string SolrQuery::getTermsLowerBound ( void )";i:3;s:28:"Returns the term to start at";}
a:4:{i:0;s:27:"SolrQuery::getTermsMaxCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public int SolrQuery::getTermsMaxCount ( void )";i:3;s:38:"Returns the maximum document frequency";}
a:4:{i:0;s:27:"SolrQuery::getTermsMinCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:47:"public int SolrQuery::getTermsMinCount ( void )";i:3;s:72:"Returns the minimum document frequency to return in order to be included";}
a:4:{i:0;s:25:"SolrQuery::getTermsPrefix";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:48:"public string SolrQuery::getTermsPrefix ( void )";i:3;s:130:"Returns the prefix to which matching terms must be restricted. This will restrict matches to only terms that start with the prefix";}
a:4:{i:0;s:28:"SolrQuery::getTermsReturnRaw";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public bool SolrQuery::getTermsReturnRaw ( void )";i:3;s:131:"Returns a boolean indicating whether or not to return the raw characters of the indexed term, regardless of if it is human readable";}
a:4:{i:0;s:23:"SolrQuery::getTermsSort";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:43:"public int SolrQuery::getTermsSort ( void )";i:3;s:183:"SolrQuery::TERMS_SORT_INDEX indicates that the terms are returned by index order. SolrQuery::TERMS_SORT_COUNT implies that the terms are sorted by term frequency (highest count first)";}
a:4:{i:0;s:29:"SolrQuery::getTermsUpperBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public string SolrQuery::getTermsUpperBound ( void )";i:3;s:27:"Returns the term to stop at";}
a:4:{i:0;s:25:"SolrQuery::getTimeAllowed";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:45:"public int SolrQuery::getTimeAllowed ( void )";i:3;s:65:"Returns the time in milliseconds allowed for the query to finish.";}
a:4:{i:0;s:31:"SolrQuery::removeFacetDateField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:66:"public SolrQuery SolrQuery::removeFacetDateField ( string $field )";i:3;s:21:"The name of the field";}
a:4:{i:0;s:31:"SolrQuery::removeFacetDateOther";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:94:"public SolrQuery SolrQuery::removeFacetDateOther ( string $value [, string $field_override ] )";i:3;s:46:"Removes one of the facet.date.other parameters";}
a:4:{i:0;s:27:"SolrQuery::removeFacetField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:62:"public SolrQuery SolrQuery::removeFacetField ( string $field )";i:3;s:40:"Removes one of the facet.date parameters";}
a:4:{i:0;s:27:"SolrQuery::removeFacetQuery";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:62:"public SolrQuery SolrQuery::removeFacetQuery ( string $value )";i:3;s:42:"Removes one of the facet.query parameters.";}
a:4:{i:0;s:22:"SolrQuery::removeField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public SolrQuery SolrQuery::removeField ( string $field )";i:3;s:39:"Removes a field from the list of fields";}
a:4:{i:0;s:28:"SolrQuery::removeFilterQuery";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:60:"public SolrQuery SolrQuery::removeFilterQuery ( string $fq )";i:3;s:23:"Removes a filter query.";}
a:4:{i:0;s:31:"SolrQuery::removeHighlightField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:66:"public SolrQuery SolrQuery::removeHighlightField ( string $field )";i:3;s:48:"Removes one of the fields used for highlighting.";}
a:4:{i:0;s:25:"SolrQuery::removeMltField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:60:"public SolrQuery SolrQuery::removeMltField ( string $field )";i:3;s:39:"Removes one of the moreLikeThis fields.";}
a:4:{i:0;s:30:"SolrQuery::removeMltQueryField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public SolrQuery SolrQuery::removeMltQueryField ( string $queryField )";i:3;s:45:"Removes one of the moreLikeThis query fields.";}
a:4:{i:0;s:26:"SolrQuery::removeSortField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:61:"public SolrQuery SolrQuery::removeSortField ( string $field )";i:3;s:30:"Removes one of the sort fields";}
a:4:{i:0;s:27:"SolrQuery::removeStatsFacet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:62:"public SolrQuery SolrQuery::removeStatsFacet ( string $value )";i:3;s:41:"Removes one of the stats.facet parameters";}
a:4:{i:0;s:27:"SolrQuery::removeStatsField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:62:"public SolrQuery SolrQuery::removeStatsField ( string $field )";i:3;s:41:"Removes one of the stats.field parameters";}
a:4:{i:0;s:25:"SolrQuery::setEchoHandler";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:57:"public SolrQuery SolrQuery::setEchoHandler ( bool $flag )";i:3;s:109:"If set to true, Solr places the name of the handle used in the response to the client for debugging purposes.";}
a:4:{i:0;s:24:"SolrQuery::setEchoParams";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:58:"public SolrQuery SolrQuery::setEchoParams ( string $type )";i:3;s:128:"Instructs Solr what kinds of Request parameters should be included in the response for debugging purposes, legal values include:";}
a:4:{i:0;s:26:"SolrQuery::setExplainOther";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:61:"public SolrQuery SolrQuery::setExplainOther ( string $query )";i:3;s:44:"Sets the explainOther common query parameter";}
a:4:{i:0;s:19:"SolrQuery::setFacet";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public SolrQuery SolrQuery::setFacet ( bool $flag )";i:3;s:29:"Enables or disables faceting.";}
a:4:{i:0;s:26:"SolrQuery::setFacetDateEnd";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:89:"public SolrQuery SolrQuery::setFacetDateEnd ( string $value [, string $field_override ] )";i:3;s:22:"Maps to facet.date.end";}
a:4:{i:0;s:26:"SolrQuery::setFacetDateGap";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:89:"public SolrQuery SolrQuery::setFacetDateGap ( string $value [, string $field_override ] )";i:3;s:22:"Maps to facet.date.gap";}
a:4:{i:0;s:30:"SolrQuery::setFacetDateHardEnd";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:91:"public SolrQuery SolrQuery::setFacetDateHardEnd ( bool $value [, string $field_override ] )";i:3;s:26:"Maps to facet.date.hardend";}
a:4:{i:0;s:28:"SolrQuery::setFacetDateStart";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:91:"public SolrQuery SolrQuery::setFacetDateStart ( string $value [, string $field_override ] )";i:3;s:24:"Maps to facet.date.start";}
a:4:{i:0;s:48:"
SolrQuery::setFacetEnumCacheMinDefaultFrequency";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:111:"public SolrQuery SolrQuery::setFacetEnumCacheMinDefaultFrequency ( int $frequency [, string $field_override ] )";i:3;s:67:"Sets the minimum document frequency used for determining term count";}
a:4:{i:0;s:24:"SolrQuery::setFacetLimit";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:84:"public SolrQuery SolrQuery::setFacetLimit ( int $limit [, string $field_override ] )";i:3;s:111:"Maps to facet.limit. Sets the maximum number of constraint counts that should be returned for the facet fields.";}
a:4:{i:0;s:25:"SolrQuery::setFacetMethod";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:89:"public SolrQuery SolrQuery::setFacetMethod ( string $method [, string $field_override ] )";i:3;s:106:"Specifies the type of algorithm to use when faceting a field. This method accepts optional field override.";}
a:4:{i:0;s:27:"SolrQuery::setFacetMinCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:90:"public SolrQuery SolrQuery::setFacetMinCount ( int $mincount [, string $field_override ] )";i:3;s:80:"Sets the minimum counts for facet fields that should be included in the response";}
a:4:{i:0;s:26:"SolrQuery::setFacetMissing";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:86:"public SolrQuery SolrQuery::setFacetMissing ( bool $flag [, string $field_override ] )";i:3;s:166:"Used to indicate that in addition to the Term-based constraints of a facet field, a count of all matching results which have no value for the field should be computed";}
a:4:{i:0;s:25:"SolrQuery::setFacetOffset";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:86:"public SolrQuery SolrQuery::setFacetOffset ( int $offset [, string $field_override ] )";i:3;s:69:"Sets the offset into the list of constraints to allow for pagination.";}
a:4:{i:0;s:25:"SolrQuery::setFacetPrefix";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:89:"public SolrQuery SolrQuery::setFacetPrefix ( string $prefix [, string $field_override ] )";i:3;s:75:"Specifies a string prefix with which to limits the terms on which to facet.";}
a:4:{i:0;s:23:"SolrQuery::setFacetSort";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:87:"public SolrQuery SolrQuery::setFacetSort ( int $facetSort [, string $field_override ] )";i:3;s:54:"Determines the ordering of the facet field constraints";}
a:4:{i:0;s:23:"SolrQuery::setHighlight";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:55:"public SolrQuery SolrQuery::setHighlight ( bool $flag )";i:3;s:81:"Setting it to enables highlighted snippets to be generated in the query response.";}
a:4:{i:0;s:37:"SolrQuery::setHighlightAlternateField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:100:"public SolrQuery SolrQuery::setHighlightAlternateField ( string $field [, string $field_override ] )";i:3;s:134:"If a snippet cannot be generated because there were no matching terms, one can specify a field to use as the backup or default summary";}
a:4:{i:0;s:32:"SolrQuery::setHighlightFormatter";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:99:"public SolrQuery SolrQuery::setHighlightFormatter ( string $formatter [, string $field_override ] )";i:3;s:45:"Specify a formatter for the highlight output.";}
a:4:{i:0;s:33:"SolrQuery::setHighlightFragmenter";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:101:"public SolrQuery SolrQuery::setHighlightFragmenter ( string $fragmenter [, string $field_override ] )";i:3;s:54:"Specify a text snippet generator for highlighted text.";}
a:4:{i:0;s:31:"SolrQuery::setHighlightFragsize";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:90:"public SolrQuery SolrQuery::setHighlightFragsize ( int $size [, string $field_override ] )";i:3;s:146:"Sets the size, in characters, of fragments to consider for highlighting. "0" indicates that the whole field value should be used (no fragmenting).";}
a:4:{i:0;s:41:"SolrQuery::setHighlightHighlightMultiTerm";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:73:"public SolrQuery SolrQuery::setHighlightHighlightMultiTerm ( bool $flag )";i:3;s:103:"Use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.";}
a:4:{i:0;s:47:"
SolrQuery::setHighlightMaxAlternateFieldLength";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:112:"public SolrQuery SolrQuery::setHighlightMaxAlternateFieldLength ( int $fieldLength [, string $field_override ] )";i:3;s:145:"If SolrQuery::setHighlightAlternateField() was passed the value, this parameter specifies the maximum number of characters of the field to return";}
a:4:{i:0;s:39:"SolrQuery::setHighlightMaxAnalyzedChars";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:71:"public SolrQuery SolrQuery::setHighlightMaxAnalyzedChars ( int $value )";i:3;s:80:"Specifies the number of characters into a document to look for suitable snippets";}
a:4:{i:0;s:38:"SolrQuery::setHighlightMergeContiguous";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:98:"public SolrQuery SolrQuery::setHighlightMergeContiguous ( bool $flag [, string $field_override ] )";i:3;s:70:"Whether or not to collapse contiguous fragments into a single fragment";}
a:4:{i:0;s:45:"
SolrQuery::setHighlightRegexMaxAnalyzedChars";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:87:"public SolrQuery SolrQuery::setHighlightRegexMaxAnalyzedChars ( int $maxAnalyzedChars )";i:3;s:96:"Specify the maximum number of characters to analyze from a field when using the regex fragmenter";}
a:4:{i:0;s:35:"SolrQuery::setHighlightRegexPattern";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public SolrQuery SolrQuery::setHighlightRegexPattern ( string $value )";i:3;s:89:"Specifies the regular expression for fragmenting. This could be used to extract sentences";}
a:4:{i:0;s:32:"SolrQuery::setHighlightRegexSlop";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:67:"public SolrQuery SolrQuery::setHighlightRegexSlop ( float $factor )";i:3;s:163:"The factor by which the regex fragmenter can stray from the ideal fragment size ( specfied by SolrQuery::setHighlightFragsize )to accomodate the regular expression";}
a:4:{i:0;s:40:"SolrQuery::setHighlightRequireFieldMatch";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:72:"public SolrQuery SolrQuery::setHighlightRequireFieldMatch ( bool $flag )";i:3;s:88:"If, then a field will only be highlighted if the query matched in this particular field.";}
a:4:{i:0;s:33:"SolrQuery::setHighlightSimplePost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:101:"public SolrQuery SolrQuery::setHighlightSimplePost ( string $simplePost [, string $field_override ] )";i:3;s:53:"Sets the text which appears before a highlighted term";}
a:4:{i:0;s:32:"SolrQuery::setHighlightSimplePre";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:99:"public SolrQuery SolrQuery::setHighlightSimplePre ( string $simplePre [, string $field_override ] )";i:3;s:53:"Sets the text which appears before a highlighted term";}
a:4:{i:0;s:31:"SolrQuery::setHighlightSnippets";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:91:"public SolrQuery SolrQuery::setHighlightSnippets ( int $value [, string $field_override ] )";i:3;s:69:"Sets the maximum number of highlighted snippets to generate per field";}
a:4:{i:0;s:44:"
SolrQuery::setHighlightUsePhraseHighlighter";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:75:"public SolrQuery SolrQuery::setHighlightUsePhraseHighlighter ( bool $flag )";i:3;s:125:"Sets whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document";}
a:4:{i:0;s:17:"SolrQuery::setMlt";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public SolrQuery SolrQuery::setMlt ( bool $flag )";i:3;s:32:"Enables or disables moreLikeThis";}
a:4:{i:0;s:22:"SolrQuery::setMltBoost";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:54:"public SolrQuery SolrQuery::setMltBoost ( bool $flag )";i:3;s:66:"Set if the query will be boosted by the interesting term relevance";}
a:4:{i:0;s:22:"SolrQuery::setMltCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:54:"public SolrQuery SolrQuery::setMltCount ( int $count )";i:3;s:61:"Set the number of similar documents to return for each result";}
a:4:{i:0;s:33:"SolrQuery::setMltMaxNumQueryTerms";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:65:"public SolrQuery SolrQuery::setMltMaxNumQueryTerms ( int $value )";i:3;s:84:"Sets the maximum number of query terms that will be included in any generated query.";}
a:4:{i:0;s:29:"SolrQuery::setMltMaxNumTokens";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:61:"public SolrQuery SolrQuery::setMltMaxNumTokens ( int $value )";i:3;s:117:"Specifies the maximum number of tokens to parse in each example doc field that is not stored with TermVector support.";}
a:4:{i:0;s:30:"SolrQuery::setMltMaxWordLength";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public SolrQuery SolrQuery::setMltMaxWordLength ( int $maxWordLength )";i:3;s:63:"Sets the maximum word length above which words will be ignored.";}
a:4:{i:0;s:32:"SolrQuery::setMltMinDocFrequency";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:74:"public SolrQuery SolrQuery::setMltMinDocFrequency ( int $minDocFrequency )";i:3;s:91:"The frequency at which words will be ignored which do not occur in at least this many docs.";}
a:4:{i:0;s:33:"SolrQuery::setMltMinTermFrequency";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:76:"public SolrQuery SolrQuery::setMltMinTermFrequency ( int $minTermFrequency )";i:3;s:71:"Sets the frequency below which terms will be ignored in the source docs";}
a:4:{i:0;s:30:"SolrQuery::setMltMinWordLength";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:70:"public SolrQuery SolrQuery::setMltMinWordLength ( int $minWordLength )";i:3;s:63:"Sets the minimum word length below which words will be ignored.";}
a:4:{i:0;s:24:"SolrQuery::setOmitHeader";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:56:"public SolrQuery SolrQuery::setOmitHeader ( bool $flag )";i:3;s:45:"Exclude the header from the returned results.";}
a:4:{i:0;s:19:"SolrQuery::setQuery";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:54:"public SolrQuery SolrQuery::setQuery ( string $query )";i:3;s:22:"Sets the search query.";}
a:4:{i:0;s:18:"SolrQuery::setRows";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:49:"public SolrQuery SolrQuery::setRows ( int $rows )";i:3;s:60:"Specifies the maximum number of rows to return in the result";}
a:4:{i:0;s:27:"SolrQuery::setShowDebugInfo";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:59:"public SolrQuery SolrQuery::setShowDebugInfo ( bool $flag )";i:3;s:26:"Whether to show debug info";}
a:4:{i:0;s:19:"SolrQuery::setStart";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public SolrQuery SolrQuery::setStart ( int $start )";i:3;s:70:"Specifies the number of rows to skip. Useful in pagination of results.";}
a:4:{i:0;s:19:"SolrQuery::setStats";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public SolrQuery SolrQuery::setStats ( bool $flag )";i:3;s:40:"Enables or disables the Stats component.";}
a:4:{i:0;s:19:"SolrQuery::setTerms";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:51:"public SolrQuery SolrQuery::setTerms ( bool $flag )";i:3;s:38:"Enables or disables the TermsComponent";}
a:4:{i:0;s:24:"SolrQuery::setTermsField";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:63:"public SolrQuery SolrQuery::setTermsField ( string $fieldname )";i:3;s:48:"Sets the name of the field to get the terms from";}
a:4:{i:0;s:36:"SolrQuery::setTermsIncludeLowerBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:68:"public SolrQuery SolrQuery::setTermsIncludeLowerBound ( bool $flag )";i:3;s:47:"Include the lower bound term in the result set.";}
a:4:{i:0;s:36:"SolrQuery::setTermsIncludeUpperBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:68:"public SolrQuery SolrQuery::setTermsIncludeUpperBound ( bool $flag )";i:3;s:47:"Include the upper bound term in the result set.";}
a:4:{i:0;s:24:"SolrQuery::setTermsLimit";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:56:"public SolrQuery SolrQuery::setTermsLimit ( int $limit )";i:3;s:42:"Sets the maximum number of terms to return";}
a:4:{i:0;s:29:"SolrQuery::setTermsLowerBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:69:"public SolrQuery SolrQuery::setTermsLowerBound ( string $lowerBound )";i:3;s:32:"Specifies the Term to start from";}
a:4:{i:0;s:27:"SolrQuery::setTermsMaxCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:63:"public SolrQuery SolrQuery::setTermsMaxCount ( int $frequency )";i:3;s:36:"Sets the maximum document frequency.";}
a:4:{i:0;s:27:"SolrQuery::setTermsMinCount";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:63:"public SolrQuery SolrQuery::setTermsMinCount ( int $frequency )";i:3;s:64:"Sets the minimum doc frequency to return in order to be included";}
a:4:{i:0;s:25:"SolrQuery::setTermsPrefix";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:61:"public SolrQuery SolrQuery::setTermsPrefix ( string $prefix )";i:3;s:52:"Restrict matches to terms that start with the prefix";}
a:4:{i:0;s:28:"SolrQuery::setTermsReturnRaw";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:60:"public SolrQuery SolrQuery::setTermsReturnRaw ( bool $flag )";i:3;s:93:"If true, return the raw characters of the indexed term, regardless of if it is human readable";}
a:4:{i:0;s:23:"SolrQuery::setTermsSort";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:58:"public SolrQuery SolrQuery::setTermsSort ( int $sortType )";i:3;s:157:"If SolrQuery::TERMS_SORT_COUNT, sorts the terms by the term frequency (highest count first). If SolrQuery::TERMS_SORT_INDEX, returns the terms in index order";}
a:4:{i:0;s:29:"SolrQuery::setTermsUpperBound";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:69:"public SolrQuery SolrQuery::setTermsUpperBound ( string $upperBound )";i:3;s:24:"Sets the term to stop at";}
a:4:{i:0;s:25:"SolrQuery::setTimeAllowed";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:63:"public SolrQuery SolrQuery::setTimeAllowed ( int $timeAllowed )";i:3;s:249:"The time allowed for a search to finish. This value only applies to the search and not to requests in general. Time is in milliseconds. Values less than or equal to zero implies no time restriction. Partial results may be returned, if there are any.";}
a:4:{i:0;s:30:"SolrException::getInternalInfo";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:52:"public array SolrException::getInternalInfo ( void )";i:3;s:60:"Returns internal information where the Exception was thrown.";}
a:4:{i:0;s:36:"SolrClientException::getInternalInfo";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:58:"public array SolrClientException::getInternalInfo ( void )";i:3;s:60:"Returns internal information where the Exception was thrown.";}
a:4:{i:0;s:46:"
SolrIllegalArgumentException::getInternalInfo";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:67:"public array SolrIllegalArgumentException::getInternalInfo ( void )";i:3;s:60:"Returns internal information where the Exception was thrown.";}
a:4:{i:0;s:47:"
SolrIllegalOperationException::getInternalInfo";i:1;s:20:"(PECL solr >= 0.9.2)";i:2;s:68:"public array SolrIllegalOperationException::getInternalInfo ( void )";i:3;s:60:"Returns internal information where the Exception was thrown.";}
a:4:{i:0;s:22:"SphinxClient::addQuery";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:101:"public int SphinxClient::addQuery ( string $query [, string $index = "*" [, string $comment = "" ]] )";i:3;s:150:"Adds query with the current settings to multi-query batch. This method doesn't affect current settings (sorting, filtering, grouping etc.) in any way.";}
a:4:{i:0;s:27:"SphinxClient::buildExcerpts";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:103:"public array SphinxClient::buildExcerpts ( array $docs, string $index, string $words [, array $opts ] )";i:3;s:115:"Connects to searchd, requests it to generate excerpts (snippets) from the given documents, and returns the results.";}
a:4:{i:0;s:27:"SphinxClient::buildKeywords";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:85:"public array SphinxClient::buildKeywords ( string $query, string $index, bool $hits )";i:3;s:113:"Extracts keywords from using tokenizer settings for the given, optionally with per-keyword occurrence statistics.";}
a:4:{i:0;s:19:"SphinxClient::close";i:1;s:22:"(PECL sphinx >= 1.0.3)";i:2;s:40:"public bool SphinxClient::close ( void )";i:3;s:47:"Closes previously opened persistent connection.";}
a:4:{i:0;s:25:"SphinxClient::__construct";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:41:"public SphinxClient::__construct ( void )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:26:"SphinxClient::escapeString";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:59:"public string SphinxClient::escapeString ( string $string )";i:3;s:86:"Escapes characters that are treated as special operators by the query language parser.";}
a:4:{i:0;s:26:"SphinxClient::getLastError";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:49:"public string SphinxClient::getLastError ( void )";i:3;s:209:"Returns string with the last error message. If there were no errors during the previous API call, empty string is returned. This method doesn't reset the error message, so you can safely call it several times.";}
a:4:{i:0;s:28:"SphinxClient::getLastWarning";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:51:"public string SphinxClient::getLastWarning ( void )";i:3;s:191:"Returns last warning message. If there were no warnings during the previous API call, empty string is returned. This method doesn't reset the warning, so you can safely call it several times.";}
a:4:{i:0;s:18:"SphinxClient::open";i:1;s:22:"(PECL sphinx >= 1.0.3)";i:2;s:39:"public bool SphinxClient::open ( void )";i:3;s:42:"Opens persistent connection to the server.";}
a:4:{i:0;s:19:"SphinxClient::query";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:100:"public array SphinxClient::query ( string $query [, string $index = "*" [, string $comment = "" ]] )";i:3;s:118:"Connects to searchd server, runs the given search query with the current settings, obtains and returns the result set.";}
a:4:{i:0;s:26:"SphinxClient::resetFilters";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:47:"public void SphinxClient::resetFilters ( void )";i:3;s:242:"Clears all currently set filters. This call is normally required when using multi-queries. You might want to set different filters for different queries in the batch. To do that, you should call and add new filters using the respective calls.";}
a:4:{i:0;s:26:"SphinxClient::resetGroupBy";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:47:"public void SphinxClient::resetGroupBy ( void )";i:3;s:124:"Clears all currently group-by settings, and disables group-by. This call is normally required only when using multi-queries.";}
a:4:{i:0;s:24:"SphinxClient::runQueries";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:46:"public array SphinxClient::runQueries ( void )";i:3;s:98:"Connects to searchd, runs a batch of all queries added using, obtains and returns the result sets.";}
a:4:{i:0;s:28:"SphinxClient::setArrayResult";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:71:"public bool SphinxClient::setArrayResult ( bool $array_result = false )";i:3;s:108:"Controls the format of search results set arrays (whether matches should be returned as an array or a hash).";}
a:4:{i:0;s:31:"SphinxClient::setConnectTimeout";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:62:"public bool SphinxClient::setConnectTimeout ( float $timeout )";i:3;s:60:"Sets connection timeout (in seconds) for searchd connection.";}
a:4:{i:0;s:29:"SphinxClient::setFieldWeights";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:60:"public bool SphinxClient::setFieldWeights ( array $weights )";i:3;s:32:"Binds per-field weights by name.";}
a:4:{i:0;s:23:"SphinxClient::setFilter";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:99:"public bool SphinxClient::setFilter ( string $attribute, array $values [, bool $exclude = false ] )";i:3;s:67:"Adds new integer values set filter to the existing list of filters.";}
a:4:{i:0;s:33:"SphinxClient::setFilterFloatRange";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:118:"public bool SphinxClient::setFilterFloatRange ( string $attribute, float $min, float $max [, bool $exclude = false ] )";i:3;s:218:"Adds new float range filter to the existing list of filters. Only those documents which have value stored in the index between and (including values that are exactly equal to or ) will be matched (or rejected, if is ).";}
a:4:{i:0;s:28:"SphinxClient::setFilterRange";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:109:"public bool SphinxClient::setFilterRange ( string $attribute, int $min, int $max [, bool $exclude = false ] )";i:3;s:220:"Adds new integer range filter to the existing list of filters. Only those documents which have value stored in the index between and (including values that are exactly equal to or ) will be matched (or rejected, if is ).";}
a:4:{i:0;s:26:"SphinxClient::setGeoAnchor";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:111:"public bool SphinxClient::setGeoAnchor ( string $attrlat, string $attrlong, float $latitude, float $longitude )";i:3;s:87:"Sets anchor point for a geosphere distance (geodistance) calculations and enables them.";}
a:4:{i:0;s:24:"SphinxClient::setGroupBy";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:108:"public bool SphinxClient::setGroupBy ( string $attribute, int $func [, string $groupsort = "@group desc" ] )";i:3;s:80:"Sets grouping attribute, function, and group sorting mode, and enables grouping.";}
a:4:{i:0;s:30:"SphinxClient::setGroupDistinct";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:64:"public bool SphinxClient::setGroupDistinct ( string $attribute )";i:3;s:292:"Sets attribute name for per-group distinct values count calculations. Only available for grouping queries. For each group, all values of will be stored, then the amount of distinct values will be calculated and returned to the client. This feature is similar to COUNT(DISTINCT) clause in SQL.";}
a:4:{i:0;s:24:"SphinxClient::setIDRange";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:59:"public bool SphinxClient::setIDRange ( int $min, int $max )";i:3;s:191:"Sets an accepted range of document IDs. Default range is from 0 to 0, i.e. no limit. Only those records that have document ID between and (including IDs exactly equal to or ) will be matched.";}
a:4:{i:0;s:29:"SphinxClient::setIndexWeights";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:60:"public bool SphinxClient::setIndexWeights ( array $weights )";i:3;s:94:"Sets per-index weights and enables weighted summing of match weights across different indexes.";}
a:4:{i:0;s:23:"SphinxClient::setLimits";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:109:"public bool SphinxClient::setLimits ( int $offset, int $limit [, int $max_matches = 0 [, int $cutoff = 0 ]] )";i:3;s:247:"Sets into server-side result set and amount of matches to return to client starting from that offset (). Can additionally control maximum server-side result set size for current query () and the threshold amount of matches to stop searching at ().";}
a:4:{i:0;s:26:"SphinxClient::setMatchMode";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:52:"public bool SphinxClient::setMatchMode ( int $mode )";i:3;s:73:"Sets full-text query matching mode. is one of the constants listed below.";}
a:4:{i:0;s:29:"SphinxClient::setMaxQueryTime";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:56:"public bool SphinxClient::setMaxQueryTime ( int $qtime )";i:3;s:31:"Sets maximum search query time.";}
a:4:{i:0;s:25:"SphinxClient::setOverride";i:1;s:22:"(PECL sphinx >= 1.0.3)";i:2;s:85:"public bool SphinxClient::setOverride ( string $attribute, int $type, array $values )";i:3;s:251:"Sets temporary (per-query) per-document attribute value overrides. Override feature lets you "temporary" update attribute values for some documents within a single query, leaving all other queries unaffected. This might be useful for personalized data";}
a:4:{i:0;s:28:"SphinxClient::setRankingMode";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:56:"public bool SphinxClient::setRankingMode ( int $ranker )";i:3;s:51:"Sets ranking mode. Only available in matching mode.";}
a:4:{i:0;s:24:"SphinxClient::setRetries";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:71:"public bool SphinxClient::setRetries ( int $count [, int $delay = 0 ] )";i:3;s:39:"Sets distributed retry count and delay.";}
a:4:{i:0;s:23:"SphinxClient::setSelect";i:1;s:22:"(PECL sphinx >= 1.0.1)";i:2;s:54:"public bool SphinxClient::setSelect ( string $clause )";i:3;s:99:"Sets the select clause, listing specific attributes to fetch, and expressions to compute and fetch.";}
a:4:{i:0;s:23:"SphinxClient::setServer";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:65:"public bool SphinxClient::setServer ( string $server, int $port )";i:3;s:163:"Sets searchd host name and TCP port. All subsequent requests will use the new host and port settings. Default host and port are 'localhost' and 3312, respectively.";}
a:4:{i:0;s:25:"SphinxClient::setSortMode";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:71:"public bool SphinxClient::setSortMode ( int $mode [, string $sortby ] )";i:3;s:53:"Sets matches sorting mode. See available modes below.";}
a:4:{i:0;s:20:"SphinxClient::status";i:1;s:22:"(PECL sphinx >= 1.0.3)";i:2;s:42:"public array SphinxClient::status ( void )";i:3;s:85:"Queries searchd status, and returns an array of status variable name and value pairs.";}
a:4:{i:0;s:30:"SphinxClient::updateAttributes";i:1;s:22:"(PECL sphinx >= 0.1.0)";i:2;s:116:"public int SphinxClient::updateAttributes ( string $index, array $attributes, array $values [, bool $mva = false ] )";i:3;s:60:"Instantly updates given attribute values in given documents.";}
a:4:{i:0;s:18:"Swish::__construct";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:47:"void Swish::__construct ( string $index_names )";i:3;s:0:"";}
a:4:{i:0;s:18:"Swish::getMetaList";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:47:"array Swish::getMetaList ( string $index_name )";i:3;s:0:"";}
a:4:{i:0;s:22:"Swish::getPropertyList";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:51:"array Swish::getPropertyList ( string $index_name )";i:3;s:0:"";}
a:4:{i:0;s:14:"Swish::prepare";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:42:"object Swish::prepare ([ string $query ] )";i:3;s:92:"Prepare and return a search object, which you can later use for unlimited number of queries.";}
a:4:{i:0;s:12:"Swish::query";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:37:"object Swish::query ( string $query )";i:3;s:59:"A quick method to execute a search with default parameters.";}
a:4:{i:0;s:24:"SwishResult::getMetaList";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:39:"array SwishResult::getMetaList ( void )";i:3;s:0:"";}
a:4:{i:0;s:17:"SwishResult::stem";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:40:"array SwishResult::stem ( string $word )";i:3;s:145:"Stems the word based on the fuzzy mode used during indexing. Each result object is linked with its index, so the results are based on this index.";}
a:4:{i:0;s:28:"SwishResults::getParsedWords";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:57:"array SwishResults::getParsedWords ( string $index_name )";i:3;s:0:"";}
a:4:{i:0;s:33:"SwishResults::getRemovedStopwords";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:62:"array SwishResults::getRemovedStopwords ( string $index_name )";i:3;s:0:"";}
a:4:{i:0;s:24:"SwishResults::nextResult";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:40:"object SwishResults::nextResult ( void )";i:3;s:0:"";}
a:4:{i:0;s:24:"SwishResults::seekResult";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:46:"int SwishResults::seekResult ( int $position )";i:3;s:0:"";}
a:4:{i:0;s:20:"SwishSearch::execute";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:48:"object SwishSearch::execute ([ string $query ] )";i:3;s:76:"Searches the index file(s) based on the parameters set in the search object.";}
a:4:{i:0;s:23:"SwishSearch::resetLimit";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:37:"void SwishSearch::resetLimit ( void )";i:3;s:41:"Reset the search limits previous set by .";}
a:4:{i:0;s:21:"SwishSearch::setLimit";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:74:"void SwishSearch::setLimit ( string $property, string $low, string $high )";i:3;s:0:"";}
a:4:{i:0;s:31:"SwishSearch::setPhraseDelimiter";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:58:"void SwishSearch::setPhraseDelimiter ( string $delimiter )";i:3;s:0:"";}
a:4:{i:0;s:20:"SwishSearch::setSort";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:42:"void SwishSearch::setSort ( string $sort )";i:3;s:0:"";}
a:4:{i:0;s:25:"SwishSearch::setStructure";i:1;s:21:"(PECL swish >= 0.1.0)";i:2;s:49:"void SwishSearch::setStructure ( int $structure )";i:3;s:0:"";}
a:4:{i:0;s:22:"apache_child_terminate";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:36:"bool apache_child_terminate ( void )";i:3;s:310:"will register the Apache process executing the current PHP request for termination once execution of PHP code is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.";}
a:4:{i:0;s:18:"apache_get_modules";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:33:"array apache_get_modules ( void )";i:3;s:36:"Get a list of loaded Apache modules.";}
a:4:{i:0;s:18:"apache_get_version";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:34:"string apache_get_version ( void )";i:3;s:25:"Fetch the Apache version.";}
a:4:{i:0;s:13:"apache_getenv";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:72:"string apache_getenv ( string $variable [, bool $walk_to_top = false ] )";i:3;s:54:"Retrieve an Apache environment variable specified by .";}
a:4:{i:0;s:17:"apache_lookup_uri";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"object apache_lookup_uri ( string $filename )";i:3;s:132:"This performs a partial request for a URI. It goes just far enough to obtain all the important information about the given resource.";}
a:4:{i:0;s:11:"apache_note";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"string apache_note ( string $note_name [, string $note_value = "" ] )";i:3;s:166:"This function is a wrapper for Apache's and . It edits the table of notes that exists during a request. The table's purpose is to allow Apache modules to communicate.";}
a:4:{i:0;s:22:"apache_request_headers";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:37:"array apache_request_headers ( void )";i:3;s:58:"Fetches all HTTP request headers from the current request.";}
a:4:{i:0;s:20:"apache_reset_timeout";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:34:"bool apache_reset_timeout ( void )";i:3;s:124:"resets the Apache write timer, which defaults to 300 seconds. With and periodic calls, Apache can theoretically run forever.";}
a:4:{i:0;s:23:"apache_response_headers";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:38:"array apache_response_headers ( void )";i:3;s:32:"Fetch all HTTP response headers.";}
a:4:{i:0;s:13:"apache_setenv";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:85:"bool apache_setenv ( string $variable, string $value [, bool $walk_to_top = false ] )";i:3;s:64:"sets the value of the Apache environment variable specified by .";}
a:4:{i:0;s:13:"getallheaders";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"array getallheaders ( void )";i:3;s:50:"Fetches all HTTP headers from the current request.";}
a:4:{i:0;s:7:"virtual";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"bool virtual ( string $filename )";i:3;s:318:"is an Apache-specific function which is similar to in . It performs an Apache sub-request. It is useful for including CGI scripts or files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a header.";}
a:4:{i:0;s:22:"fastcgi_finish_request";i:1;s:16:"(PHP 5 >= 5.3.3)";i:2;s:39:"boolean fastcgi_finish_request ( void )";i:3;s:183:"This function flushes all response data to the client and finishes the request. This allows for time consuming tasks to be performed without leaving the connection to the client open.";}
a:4:{i:0;s:14:"iis_add_server";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:133:"int iis_add_server ( string $path, string $comment, string $server_ip, int $port, string $host_name, int $rights, int $start_server )";i:3;s:0:"";}
a:4:{i:0;s:20:"iis_get_dir_security";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:71:"int iis_get_dir_security ( int $server_instance, string $virtual_path )";i:3;s:0:"";}
a:4:{i:0;s:18:"iis_get_script_map";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:98:"string iis_get_script_map ( int $server_instance, string $virtual_path, string $script_extension )";i:3;s:0:"";}
a:4:{i:0;s:25:"iis_get_server_by_comment";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:49:"int iis_get_server_by_comment ( string $comment )";i:3;s:0:"";}
a:4:{i:0;s:22:"iis_get_server_by_path";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:43:"int iis_get_server_by_path ( string $path )";i:3;s:135:"Each virtual server in IIS is associated with an instance number. finds the instance number from the actual path to the root directory.";}
a:4:{i:0;s:21:"iis_get_server_rights";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:72:"int iis_get_server_rights ( int $server_instance, string $virtual_path )";i:3;s:0:"";}
a:4:{i:0;s:21:"iis_get_service_state";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:48:"int iis_get_service_state ( string $service_id )";i:3;s:0:"";}
a:4:{i:0;s:17:"iis_remove_server";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:46:"int iis_remove_server ( int $server_instance )";i:3;s:0:"";}
a:4:{i:0;s:20:"iis_set_app_settings";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:98:"int iis_set_app_settings ( int $server_instance, string $virtual_path, string $application_scope )";i:3;s:0:"";}
a:4:{i:0;s:20:"iis_set_dir_security";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:93:"int iis_set_dir_security ( int $server_instance, string $virtual_path, int $directory_flags )";i:3;s:0:"";}
a:4:{i:0;s:18:"iis_set_script_map";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:138:"int iis_set_script_map ( int $server_instance, string $virtual_path, string $script_extension, string $engine_path, int $allow_scripting )";i:3;s:0:"";}
a:4:{i:0;s:21:"iis_set_server_rights";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:94:"int iis_set_server_rights ( int $server_instance, string $virtual_path, int $directory_flags )";i:3;s:0:"";}
a:4:{i:0;s:16:"iis_start_server";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:45:"int iis_start_server ( int $server_instance )";i:3;s:0:"";}
a:4:{i:0;s:17:"iis_start_service";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:44:"int iis_start_service ( string $service_id )";i:3;s:0:"";}
a:4:{i:0;s:15:"iis_stop_server";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:44:"int iis_stop_server ( int $server_instance )";i:3;s:0:"";}
a:4:{i:0;s:16:"iis_stop_service";i:1;s:18:"(PECL iisfunc SVN)";i:2;s:43:"int iis_stop_service ( string $service_id )";i:3;s:0:"";}
a:4:{i:0;s:21:"nsapi_request_headers";i:1;s:23:"(PHP 4 >= 4.3.3, PHP 5)";i:2;s:36:"array nsapi_request_headers ( void )";i:3;s:99:"gets all the HTTP headers in the current request. This is only supported when PHP runs as a module.";}
a:4:{i:0;s:22:"nsapi_response_headers";i:1;s:23:"(PHP 4 >= 4.3.3, PHP 5)";i:2;s:37:"array nsapi_response_headers ( void )";i:3;s:36:"Gets all the NSAPI response headers.";}
a:4:{i:0;s:13:"nsapi_virtual";i:1;s:23:"(PHP 4 >= 4.3.3, PHP 5)";i:2;s:34:"bool nsapi_virtual ( string $uri )";i:3;s:204:"is an NSAPI-specific function which is equivalent to in ( files). It does an NSAPI sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you'd parse through webserver.";}
a:4:{i:0;s:16:"msession_connect";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:52:"bool msession_connect ( string $host, string $port )";i:3;s:0:"";}
a:4:{i:0;s:14:"msession_count";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:27:"int msession_count ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"msession_create";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:80:"bool msession_create ( string $session [, string $classname [, string $data ]] )";i:3;s:0:"";}
a:4:{i:0;s:16:"msession_destroy";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:38:"bool msession_destroy ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:19:"msession_disconnect";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:33:"void msession_disconnect ( void )";i:3;s:0:"";}
a:4:{i:0;s:13:"msession_find";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:51:"array msession_find ( string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:18:"msession_get_array";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:44:"array msession_get_array ( string $session )";i:3;s:0:"";}
a:4:{i:0;s:17:"msession_get_data";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:44:"string msession_get_data ( string $session )";i:3;s:0:"";}
a:4:{i:0;s:12:"msession_get";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:68:"string msession_get ( string $session, string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:12:"msession_inc";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:53:"string msession_inc ( string $session, string $name )";i:3;s:0:"";}
a:4:{i:0;s:13:"msession_list";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:28:"array msession_list ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"msession_listvar";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:39:"array msession_listvar ( string $name )";i:3;s:51:"Used for searching sessions with common attributes.";}
a:4:{i:0;s:13:"msession_lock";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:34:"int msession_lock ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:15:"msession_plugin";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:74:"string msession_plugin ( string $session, string $val [, string $param ] )";i:3;s:0:"";}
a:4:{i:0;s:16:"msession_randstr";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:38:"string msession_randstr ( int $param )";i:3;s:0:"";}
a:4:{i:0;s:18:"msession_set_array";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:58:"void msession_set_array ( string $session, array $tuples )";i:3;s:0:"";}
a:4:{i:0;s:17:"msession_set_data";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:57:"bool msession_set_data ( string $session, string $value )";i:3;s:0:"";}
a:4:{i:0;s:12:"msession_set";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:66:"bool msession_set ( string $session, string $name, string $value )";i:3;s:0:"";}
a:4:{i:0;s:16:"msession_timeout";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:56:"int msession_timeout ( string $session [, int $param ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"msession_uniq";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:75:"string msession_uniq ( int $param [, string $classname [, string $data ]] )";i:3;s:0:"";}
a:4:{i:0;s:15:"msession_unlock";i:1;s:32:"(PHP 4 >= 4.2.0, PHP 5 <= 5.1.2)";i:2;s:49:"int msession_unlock ( string $session, int $key )";i:3;s:0:"";}
a:4:{i:0;s:20:"session_cache_expire";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:56:"int session_cache_expire ([ string $new_cache_expire ] )";i:3;s:32:"returns the current setting of .";}
a:4:{i:0;s:21:"session_cache_limiter";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:57:"string session_cache_limiter ([ string $cache_limiter ] )";i:3;s:46:"returns the name of the current cache limiter.";}
a:4:{i:0;s:14:"session_commit";i:1;s:23:"(PHP 4 >= 4.4.0, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:14:"session_decode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"bool session_decode ( string $data )";i:3;s:105:"decodes the serialized session data provided in, and populates the $_SESSION superglobal with the result.";}
a:4:{i:0;s:15:"session_destroy";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"bool session_destroy ( void )";i:3;s:219:"destroys all of the data associated with the current session. It does not unset any of the global variables associated with the session, or unset the session cookie. To use the session variables again, has to be called.";}
a:4:{i:0;s:14:"session_encode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"string session_encode ( void )";i:3;s:108:"returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal.";}
a:4:{i:0;s:25:"session_get_cookie_params";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"array session_get_cookie_params ( void )";i:3;s:35:"Gets the session cookie parameters.";}
a:4:{i:0;s:10:"session_id";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string session_id ([ string $id ] )";i:3;s:61:"is used to get or set the session id for the current session.";}
a:4:{i:0;s:21:"session_is_registered";i:1;s:22:"(PHP 4, PHP 5 < 5.4.0)";i:2;s:43:"bool session_is_registered ( string $name )";i:3;s:63:"Finds out whether a global variable is registered in a session.";}
a:4:{i:0;s:19:"session_module_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"string session_module_name ([ string $module ] )";i:3;s:44:"gets the name of the current session module.";}
a:4:{i:0;s:12:"session_name";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:39:"string session_name ([ string $name ] )";i:3;s:111:"returns the name of the current session. If is given, will update the session name and return the session name.";}
a:4:{i:0;s:21:"session_regenerate_id";i:1;s:23:"(PHP 4 >= 4.3.2, PHP 5)";i:2;s:66:"bool session_regenerate_id ([ bool $delete_old_session = false ] )";i:3;s:93:"will replace the current session id with a new one, and keep the current session information.";}
a:4:{i:0;s:25:"session_register_shutdown";i:1;s:13:"(PHP >=5.4.0)";i:2;s:39:"void session_register_shutdown ( void )";i:3;s:33:"Registers as a shutdown function.";}
a:4:{i:0;s:16:"session_register";i:1;s:22:"(PHP 4, PHP 5 < 5.4.0)";i:2;s:53:"bool session_register ( mixed $name [, mixed $... ] )";i:3;s:248:"accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, registers the global variable with that name in the current session.";}
a:4:{i:0;s:17:"session_save_path";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"string session_save_path ([ string $path ] )";i:3;s:68:"returns the path of the current directory used to save session data.";}
a:4:{i:0;s:25:"session_set_cookie_params";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:137:"void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )";i:3;s:176:"Set cookie parameters defined in the file. The effect of this function only lasts for the duration of the script. Thus, you need to call for every request and before is called.";}
a:4:{i:0;s:24:"session_set_save_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:131:"bool session_set_save_handler ( callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc )";i:3;s:65:"Since PHP 5.4 it is possible to register the following prototype:";}
a:4:{i:0;s:13:"session_start";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"bool session_start ( void )";i:3;s:132:"creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.";}
a:4:{i:0;s:14:"session_status";i:1;s:13:"(PHP >=5.4.0)";i:2;s:27:"int session_status ( void )";i:3;s:45:"is used to return the current session status.";}
a:4:{i:0;s:18:"session_unregister";i:1;s:22:"(PHP 4, PHP 5 < 5.4.0)";i:2;s:40:"bool session_unregister ( string $name )";i:3;s:63:"unregisters the global variable named from the current session.";}
a:4:{i:0;s:13:"session_unset";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"void session_unset ( void )";i:3;s:62:"The function frees all session variables currently registered.";}
a:4:{i:0;s:19:"session_write_close";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"void session_write_close ( void )";i:3;s:47:"End the current session and store session data.";}
a:4:{i:0;s:21:"SessionHandler::close";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:42:"public bool SessionHandler::close ( void )";i:3;s:153:"Closes the current session. This method is automatically executed internally by PHP when closing the session, or explicitly via (which first calls the ).";}
a:4:{i:0;s:23:"SessionHandler::destroy";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:58:"public bool SessionHandler::destroy ( string $session_id )";i:3;s:95:"Destroys a session. Called by internally by PHP with (assuming the is set to, by or when fails.";}
a:4:{i:0;s:18:"SessionHandler::gc";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:51:"public bool SessionHandler::gc ( int $maxlifetime )";i:3;s:178:"Cleans up expired sessions. Called randomly by PHP internally when a session starts or when is invoked. The frequency this is called is based on the and configuration directives.";}
a:4:{i:0;s:20:"SessionHandler::open";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:74:"public bool SessionHandler::open ( string $save_path, string $session_id )";i:3;s:142:"Create new session, or re-initialize existing session. Called internally by PHP when a session starts either automatically or when is invoked.";}
a:4:{i:0;s:20:"SessionHandler::read";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:57:"public string SessionHandler::read ( string $session_id )";i:3;s:263:"Reads the session data from the session storage, and returns the result back to PHP for internal processing. This method is called automatically by PHP when a session is started (either automatically or explicity with and is preceeded by an internal call to the .";}
a:4:{i:0;s:21:"SessionHandler::write";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:78:"public bool SessionHandler::write ( string $session_id, string $session_data )";i:3;s:150:"Writes the session data to the session storage. Called by normal PHP shutdown, by, or when fails. PHP will call immediately after this method returns.";}
a:4:{i:0;s:30:"SessionHandlerInterface::close";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:60:"abstract public bool SessionHandlerInterface::close ( void )";i:3;s:113:"Closes the current session. This function is automatically executed when closing the session, or explicitly via .";}
a:4:{i:0;s:32:"SessionHandlerInterface::destroy";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:76:"abstract public bool SessionHandlerInterface::destroy ( string $session_id )";i:3;s:65:"Destroys a session. Called by (with $destroy = ), and when fails.";}
a:4:{i:0;s:27:"SessionHandlerInterface::gc";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:72:"abstract public bool SessionHandlerInterface::gc ( string $maxlifetime )";i:3;s:62:"Cleans up expired sessions. Called by, based on, and settings.";}
a:4:{i:0;s:29:"SessionHandlerInterface::open";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:86:"abstract public bool SessionHandlerInterface::open ( string $save_path, string $name )";i:3;s:102:"Re-initialize existing session, or creates a new one. Called when a session starts or when is invoked.";}
a:4:{i:0;s:29:"SessionHandlerInterface::read";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:75:"abstract public string SessionHandlerInterface::read ( string $session_id )";i:3;s:188:"Reads the session data from the session storage, and returns the results. Called right after the session starts or when is called. Please note that before this method is called is invoked.";}
a:4:{i:0;s:30:"SessionHandlerInterface::write";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:96:"abstract public bool SessionHandlerInterface::write ( string $session_id, string $session_data )";i:3;s:148:"Writes the session data to the session storage. Called by, when fails, or during a normal shutdown. Note: is called immediately after this function.";}
a:4:{i:0;s:23:"session_pgsql_add_error";i:1;s:24:"(PECL session_pgsql SVN)";i:2;s:76:"bool session_pgsql_add_error ( int $error_level [, string $error_message ] )";i:3;s:0:"";}
a:4:{i:0;s:23:"session_pgsql_get_error";i:1;s:24:"(PECL session_pgsql SVN)";i:2;s:69:"array session_pgsql_get_error ([ bool $with_error_message = false ] )";i:3;s:57:"Get the number of errors and optional the error messages.";}
a:4:{i:0;s:23:"session_pgsql_get_field";i:1;s:24:"(PECL session_pgsql SVN)";i:2;s:39:"string session_pgsql_get_field ( void )";i:3;s:0:"";}
a:4:{i:0;s:19:"session_pgsql_reset";i:1;s:24:"(PECL session_pgsql SVN)";i:2;s:33:"bool session_pgsql_reset ( void )";i:3;s:53:"Reset the connection to the session database servers.";}
a:4:{i:0;s:23:"session_pgsql_set_field";i:1;s:24:"(PECL session_pgsql SVN)";i:2;s:46:"bool session_pgsql_set_field ( string $value )";i:3;s:0:"";}
a:4:{i:0;s:20:"session_pgsql_status";i:1;s:24:"(PECL session_pgsql SVN)";i:2;s:35:"array session_pgsql_status ( void )";i:3;s:0:"";}
a:4:{i:0;s:18:"bbcode_add_element";i:1;s:22:"(PECL bbcode >= 0.9.0)";i:2;s:90:"bool bbcode_add_element ( resource $bbcode_container, string $tag_name, array $tag_rules )";i:3;s:67:"Adds a tag to an existing BBCode_Container tag_set using tag_rules.";}
a:4:{i:0;s:17:"bbcode_add_smiley";i:1;s:23:"(PECL bbcode >= 0.10.2)";i:2;s:89:"bool bbcode_add_smiley ( resource $bbcode_container, string $smiley, string $replace_by )";i:3;s:27:"Adds a smiley to the parser";}
a:4:{i:0;s:13:"bbcode_create";i:1;s:22:"(PECL bbcode >= 0.9.0)";i:2;s:56:"resource bbcode_create ([ array $bbcode_initial_tags ] )";i:3;s:73:"This function returns a new BBCode Resource used to parse BBCode strings.";}
a:4:{i:0;s:14:"bbcode_destroy";i:1;s:22:"(PECL bbcode >= 0.9.0)";i:2;s:50:"bool bbcode_destroy ( resource $bbcode_container )";i:3;s:45:"This function closes the resource opened by .";}
a:4:{i:0;s:12:"bbcode_parse";i:1;s:22:"(PECL bbcode >= 0.9.0)";i:2;s:68:"string bbcode_parse ( resource $bbcode_container, string $to_parse )";i:3;s:94:"This function parse the string to_parse following the rules in the bbcode_container created by";}
a:4:{i:0;s:21:"bbcode_set_arg_parser";i:1;s:23:"(PECL bbcode >= 0.10.2)";i:2;s:86:"bool bbcode_set_arg_parser ( resource $bbcode_container, resource $bbcode_arg_parser )";i:3;s:184:"Attaches another parser to the bbcode_container. This parser is used only when arguments must be parsed. If this function is not used, the default argument parser is the parser itself.";}
a:4:{i:0;s:16:"bbcode_set_flags";i:1;s:23:"(PECL bbcode >= 0.10.2)";i:2;s:102:"bool bbcode_set_flags ( resource $bbcode_container, int $flags [, int $mode = BBCODE_SET_FLAGS_SET ] )";i:3;s:27:"Set or alter parser options";}
a:4:{i:0;s:11:"preg_filter";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:109:"mixed preg_filter ( mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count ]] )";i:3;s:166:"is identical to except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the documentation.";}
a:4:{i:0;s:9:"preg_grep";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"array preg_grep ( string $pattern, array $input [, int $flags = 0 ] )";i:3;s:80:"Returns the array consisting of the elements of the array that match the given .";}
a:4:{i:0;s:15:"preg_last_error";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:28:"int preg_last_error ( void )";i:3;s:56:"Returns the error code of the last PCRE regex execution.";}
a:4:{i:0;s:14:"preg_match_all";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:132:"int preg_match_all ( string $pattern, string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )";i:3;s:104:"Searches for all matches to the regular expression given in and puts them in in the order specified by .";}
a:4:{i:0;s:10:"preg_match";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:111:"int preg_match ( string $pattern, string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] )";i:3;s:57:"Searches for a match to the regular expression given in .";}
a:4:{i:0;s:10:"preg_quote";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"string preg_quote ( string $str [, string $delimiter = NULL ] )";i:3;s:235:"takes and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.";}
a:4:{i:0;s:21:"preg_replace_callback";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:119:"mixed preg_replace_callback ( mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int &$count ]] )";i:3;s:123:"The behavior of this function is almost identical to, except for the fact that instead of parameter, one should specify a .";}
a:4:{i:0;s:12:"preg_replace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:110:"mixed preg_replace ( mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count ]] )";i:3;s:48:"Searches for matches to and replaces them with .";}
a:4:{i:0;s:10:"preg_split";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:93:"array preg_split ( string $pattern, string $subject [, int $limit = -1 [, int $flags = 0 ]] )";i:3;s:47:"Split the given string by a regular expression.";}
a:4:{i:0;s:12:"ereg_replace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"string ereg_replace ( string $pattern, string $replacement, string $string )";i:3;s:73:"This function scans for matches to, then replaces the matched text with .";}
a:4:{i:0;s:4:"ereg";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"int ereg ( string $pattern, string $string [, array &$regs ] )";i:3;s:82:"Searches a for matches to the regular expression given in in a case-sensitive way.";}
a:4:{i:0;s:13:"eregi_replace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:77:"string eregi_replace ( string $pattern, string $replacement, string $string )";i:3;s:108:"This function is identical to except that this ignores case distinction when matching alphabetic characters.";}
a:4:{i:0;s:5:"eregi";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"int eregi ( string $pattern, string $string [, array &$regs ] )";i:3;s:106:"This function is identical to except that it ignores case distinction when matching alphabetic characters.";}
a:4:{i:0;s:5:"split";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:68:"array split ( string $pattern, string $string [, int $limit = -1 ] )";i:3;s:42:"Splits a into array by regular expression.";}
a:4:{i:0;s:6:"spliti";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:69:"array spliti ( string $pattern, string $string [, int $limit = -1 ] )";i:3;s:42:"Splits a into array by regular expression.";}
a:4:{i:0;s:11:"sql_regcase";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"string sql_regcase ( string $string )";i:3;s:58:"Creates a regular expression for a case insensitive match.";}
a:4:{i:0;s:20:"ssdeep_fuzzy_compare";i:1;s:22:"(PECL ssdeep >= 1.0.0)";i:2;s:67:"int ssdeep_fuzzy_compare ( string $signature1, string $signature2 )";i:3;s:74:"Calculates the match score between and using, and returns the match score.";}
a:4:{i:0;s:26:"ssdeep_fuzzy_hash_filename";i:1;s:22:"(PECL ssdeep >= 1.0.0)";i:2;s:55:"string ssdeep_fuzzy_hash_filename ( string $file_name )";i:3;s:74:"calculates the hash of the file specified by using, and returns that hash.";}
a:4:{i:0;s:17:"ssdeep_fuzzy_hash";i:1;s:22:"(PECL ssdeep >= 1.0.0)";i:2;s:44:"string ssdeep_fuzzy_hash ( string $to_hash )";i:3;s:52:"calculates the hash of using, and returns that hash.";}
a:4:{i:0;s:11:"addcslashes";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"string addcslashes ( string $str, string $charlist )";i:3;s:81:"Returns a string with backslashes before characters that are listed in parameter.";}
a:4:{i:0;s:10:"addslashes";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"string addslashes ( string $str )";i:3;s:163:"Returns a string with backslashes before characters that need to be quoted. These characters are single quote (), double quote (), backslash () and NUL (the byte).";}
a:4:{i:0;s:7:"bin2hex";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"string bin2hex ( string $str )";i:3;s:131:"Returns an ASCII string containing the hexadecimal representation of . The conversion is done byte-wise with the high-nibble first.";}
a:4:{i:0;s:4:"chop";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:3:"chr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"string chr ( int $ascii )";i:3;s:70:"Returns a one-character string containing the character specified by .";}
a:4:{i:0;s:11:"chunk_split";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"string chunk_split ( string $body [, int $chunklen = 76 [, string $end = "\r\n" ]] )";i:3;s:150:"Can be used to split a string into smaller chunks which is useful for e.g. converting output to match RFC 2045 semantics. It inserts every characters.";}
a:4:{i:0;s:18:"convert_cyr_string";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"string convert_cyr_string ( string $str, string $from, string $to )";i:3;s:52:"Converts from one Cyrillic character set to another.";}
a:4:{i:0;s:16:"convert_uudecode";i:1;s:7:"(PHP 5)";i:2;s:40:"string convert_uudecode ( string $data )";i:3;s:27:"decodes a uuencoded string.";}
a:4:{i:0;s:16:"convert_uuencode";i:1;s:7:"(PHP 5)";i:2;s:40:"string convert_uuencode ( string $data )";i:3;s:46:"encodes a string using the uuencode algorithm.";}
a:4:{i:0;s:11:"count_chars";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"mixed count_chars ( string $string [, int $mode = 0 ] )";i:3;s:96:"Counts the number of occurrences of every byte-value (0..255) in and returns it in various ways.";}
a:4:{i:0;s:5:"crc32";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:25:"int crc32 ( string $str )";i:3;s:152:"Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the . This is usually used to validate the integrity of data being transmitted.";}
a:4:{i:0;s:5:"crypt";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string crypt ( string $str [, string $salt ] )";i:3;s:131:"will return a hashed string using the standard Unix -based algorithm or alternative algorithms that may be available on the system.";}
a:4:{i:0;s:4:"echo";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"void echo ( string $arg1 [, string $... ] )";i:3;s:23:"Outputs all parameters.";}
a:4:{i:0;s:7:"explode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"array explode ( string $delimiter, string $string [, int $limit ] )";i:3;s:120:"Returns an array of strings, each of which is a substring of formed by splitting it on boundaries formed by the string .";}
a:4:{i:0;s:7:"fprintf";i:1;s:7:"(PHP 5)";i:2;s:80:"int fprintf ( resource $handle, string $format [, mixed $args [, mixed $... ]] )";i:3;s:74:"Write a string produced according to to the stream resource specified by .";}
a:4:{i:0;s:26:"get_html_translation_table";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:143:"array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]]] )";i:3;s:67:"will return the translation table that is used internally for and .";}
a:4:{i:0;s:6:"hebrev";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:70:"string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )";i:3;s:44:"Converts logical Hebrew text to visual text.";}
a:4:{i:0;s:7:"hebrevc";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )";i:3;s:87:"This function is similar to with the difference that it converts newlines (\n) to "\n".";}
a:4:{i:0;s:7:"hex2bin";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:31:"string hex2bin ( string $data )";i:3;s:46:"Decodes a hexadecimally encoded binary string.";}
a:4:{i:0;s:18:"html_entity_decode";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:118:"string html_entity_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]] )";i:3;s:95:"is the opposite of in that it converts all HTML entities in the to their applicable characters.";}
a:4:{i:0;s:12:"htmlentities";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:143:"string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )";i:3;s:151:"This function is identical to in all ways, except with, all characters which have HTML character entity equivalents are translated into these entities.";}
a:4:{i:0;s:23:"htmlspecialchars_decode";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:92:"string htmlspecialchars_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ] )";i:3;s:88:"This function is the opposite of . It converts special HTML entities back to characters.";}
a:4:{i:0;s:16:"htmlspecialchars";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:147:"string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )";i:3;s:299:"Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with these conversions made. If you require all input substrings that have associated named entities to be translated, use instead.";}
a:4:{i:0;s:7:"implode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string implode ( string $glue, array $pieces )";i:3;s:34:"Join array elements with a string.";}
a:4:{i:0;s:4:"join";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:7:"lcfirst";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:30:"string lcfirst ( string $str )";i:3;s:89:"Returns a string with the first character of, lowercased if that character is alphabetic.";}
a:4:{i:0;s:11:"levenshtein";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:46:"int levenshtein ( string $str1, string $str2 )";i:3;s:275:"The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform into . The complexity of the algorithm is, where and are the length of and (rather good when compared to, which is O(max(n,m)**3), but still expensive).";}
a:4:{i:0;s:10:"localeconv";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:25:"array localeconv ( void )";i:3;s:94:"Returns an associative array containing localized numeric and monetary formatting information.";}
a:4:{i:0;s:5:"ltrim";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"string ltrim ( string $str [, string $charlist ] )";i:3;s:70:"Strip whitespace (or other characters) from the beginning of a string.";}
a:4:{i:0;s:8:"md5_file";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:66:"string md5_file ( string $filename [, bool $raw_output = false ] )";i:3;s:143:"Calculates the MD5 hash of the file specified by the parameter using the, and returns that hash. The hash is a 32-character hexadecimal number.";}
a:4:{i:0;s:3:"md5";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:56:"string md5 ( string $str [, bool $raw_output = false ] )";i:3;s:60:"Calculates the MD5 hash of using the, and returns that hash.";}
a:4:{i:0;s:9:"metaphone";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"string metaphone ( string $str [, int $phonemes = 0 ] )";i:3;s:33:"Calculates the metaphone key of .";}
a:4:{i:0;s:12:"money_format";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:53:"string money_format ( string $format, float $number )";i:3;s:157:"returns a formatted version of . This function wraps the C library function, with the difference that this implementation converts only one number at a time.";}
a:4:{i:0;s:11:"nl_langinfo";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:32:"string nl_langinfo ( int $item )";i:3;s:149:"is used to access individual elements of the locale categories. Unlike, which returns all of the elements, allows you to select any specific element.";}
a:4:{i:0;s:5:"nl2br";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:58:"string nl2br ( string $string [, bool $is_xhtml = true ] )";i:3;s:61:"Returns with '' or '' inserted before all newlines (,, and ).";}
a:4:{i:0;s:13:"number_format";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"string number_format ( float $number [, int $decimals = 0 ] )";i:3;s:70:"This function accepts either one, two, or four parameters (not three):";}
a:4:{i:0;s:3:"ord";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int ord ( string $string )";i:3;s:51:"Returns the ASCII value of the first character of .";}
a:4:{i:0;s:9:"parse_str";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:47:"void parse_str ( string $str [, array &$arr ] )";i:3;s:95:"Parses as if it were the query string passed via a URL and sets variables in the current scope.";}
a:4:{i:0;s:5:"print";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"int print ( string $arg )";i:3;s:9:"Outputs .";}
a:4:{i:0;s:6:"printf";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"int printf ( string $format [, mixed $args [, mixed $... ]] )";i:3;s:30:"Produces output according to .";}
a:4:{i:0;s:23:"quoted_printable_decode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string quoted_printable_decode ( string $str )";i:3;s:213:"This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to, section 6.7, not, section 4.5.2, so additional periods are not stripped from the beginning of line).";}
a:4:{i:0;s:23:"quoted_printable_encode";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:46:"string quoted_printable_encode ( string $str )";i:3;s:68:"Returns a quoted printable string created according to, section 6.7.";}
a:4:{i:0;s:9:"quotemeta";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string quotemeta ( string $str )";i:3;s:98:"Returns a version of str with a backslash character () before every character that is among these:";}
a:4:{i:0;s:5:"rtrim";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"string rtrim ( string $str [, string $charlist ] )";i:3;s:73:"This function returns a string with whitespace stripped from the end of .";}
a:4:{i:0;s:9:"setlocale";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"string setlocale ( int $category, string $locale [, string $... ] )";i:3;s:24:"Sets locale information.";}
a:4:{i:0;s:9:"sha1_file";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:67:"string sha1_file ( string $filename [, bool $raw_output = false ] )";i:3;s:130:"Calculates the sha1 hash of the file specified by using the, and returns that hash. The hash is a 40-character hexadecimal number.";}
a:4:{i:0;s:4:"sha1";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:57:"string sha1 ( string $str [, bool $raw_output = false ] )";i:3;s:39:"Calculates the sha1 hash of using the .";}
a:4:{i:0;s:12:"similar_text";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:71:"int similar_text ( string $first, string $second [, float &$percent ] )";i:3;s:413:"This calculates the similarity between two strings as described in Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.";}
a:4:{i:0;s:7:"soundex";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"string soundex ( string $str )";i:3;s:31:"Calculates the soundex key of .";}
a:4:{i:0;s:7:"sprintf";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"string sprintf ( string $format [, mixed $args [, mixed $... ]] )";i:3;s:62:"Returns a string produced according to the formatting string .";}
a:4:{i:0;s:6:"sscanf";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:61:"mixed sscanf ( string $str, string $format [, mixed &$... ] )";i:3;s:151:"The function is the input analog of . reads from the string and interprets it according to the specified, which is described in the documentation for .";}
a:4:{i:0;s:10:"str_getcsv";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:117:"array str_getcsv ( string $input [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]] )";i:3;s:91:"Parses a string input for fields in format and returns an array containing the fields read.";}
a:4:{i:0;s:12:"str_ireplace";i:1;s:7:"(PHP 5)";i:2;s:85:"mixed str_ireplace ( mixed $search, mixed $replace, mixed $subject [, int &$count ] )";i:3;s:226:"This function returns a string or an array with all occurrences of in (ignoring case) replaced with the given value. If you don't need fancy replacing rules, you should generally use this function instead of with the modifier.";}
a:4:{i:0;s:7:"str_pad";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:113:"string str_pad ( string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT ]] )";i:3;s:241:"This functions returns the string padded on the left, the right, or both sides to the specified padding length. If the optional argument is not supplied, the is padded with spaces, otherwise it is padded with characters from up to the limit.";}
a:4:{i:0;s:10:"str_repeat";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"string str_repeat ( string $input, int $multiplier )";i:3;s:23:"Returns repeated times.";}
a:4:{i:0;s:11:"str_replace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:84:"mixed str_replace ( mixed $search, mixed $replace, mixed $subject [, int &$count ] )";i:3;s:100:"This function returns a string or an array with all occurrences of in replaced with the given value.";}
a:4:{i:0;s:9:"str_rot13";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:32:"string str_rot13 ( string $str )";i:3;s:77:"Performs the ROT13 encoding on the argument and returns the resulting string.";}
a:4:{i:0;s:11:"str_shuffle";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:34:"string str_shuffle ( string $str )";i:3;s:62:"shuffles a string. One permutation of all possible is created.";}
a:4:{i:0;s:9:"str_split";i:1;s:7:"(PHP 5)";i:2;s:61:"array str_split ( string $string [, int $split_length = 1 ] )";i:3;s:30:"Converts a string to an array.";}
a:4:{i:0;s:14:"str_word_count";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:81:"mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )";i:3;s:326:"Counts the number of words inside . If the optional is not specified, then the return value will be an integer representing the number of words found. In the event the is specified, the return value will be an array, content of which is dependent on the . The possible value for the and the resultant outputs are listed below.";}
a:4:{i:0;s:10:"strcasecmp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"int strcasecmp ( string $str1, string $str2 )";i:3;s:47:"Binary safe case-insensitive string comparison.";}
a:4:{i:0;s:6:"strchr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:6:"strcmp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"int strcmp ( string $str1, string $str2 )";i:3;s:44:"Note that this comparison is case sensitive.";}
a:4:{i:0;s:7:"strcoll";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:42:"int strcoll ( string $str1, string $str2 )";i:3;s:89:"Note that this comparison is case sensitive, and unlike this function is not binary safe.";}
a:4:{i:0;s:7:"strcspn";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"int strcspn ( string $str1, string $str2 [, int $start [, int $length ]] )";i:3;s:90:"Returns the length of the initial segment of which does contain any of the characters in .";}
a:4:{i:0;s:10:"strip_tags";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"string strip_tags ( string $str [, string $allowable_tags ] )";i:3;s:163:"This function tries to return a string with all NULL bytes, HTML and PHP tags stripped from a given . It uses the same tag stripping state machine as the function.";}
a:4:{i:0;s:13:"stripcslashes";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"string stripcslashes ( string $str )";i:3;s:109:"Returns a string with backslashes stripped off. Recognizes C-like, ..., octal and hexadecimal representation.";}
a:4:{i:0;s:7:"stripos";i:1;s:7:"(PHP 5)";i:2;s:69:"int stripos ( string $haystack, string $needle [, int $offset = 0 ] )";i:3;s:67:"Find the numeric position of the first occurrence of in the string.";}
a:4:{i:0;s:12:"stripslashes";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string stripslashes ( string $str )";i:3;s:26:"Un-quotes a quoted string.";}
a:4:{i:0;s:7:"stristr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"string stristr ( string $haystack, mixed $needle [, bool $before_needle = false ] )";i:3;s:78:"Returns all of starting from and including the first occurrence of to the end.";}
a:4:{i:0;s:6:"strlen";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"int strlen ( string $string )";i:3;s:33:"Returns the length of the given .";}
a:4:{i:0;s:13:"strnatcasecmp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"int strnatcasecmp ( string $str1, string $str2 )";i:3;s:254:"This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to, except that the comparison is not case sensitive. For more information see: Martin Pool's page.";}
a:4:{i:0;s:9:"strnatcmp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"int strnatcmp ( string $str1, string $str2 )";i:3;s:200:"This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a "natural ordering". Note that this comparison is case sensitive.";}
a:4:{i:0;s:11:"strncasecmp";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:56:"int strncasecmp ( string $str1, string $str2, int $len )";i:3;s:162:"This function is similar to, with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.";}
a:4:{i:0;s:7:"strncmp";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"int strncmp ( string $str1, string $str2, int $len )";i:3;s:162:"This function is similar to, with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.";}
a:4:{i:0;s:7:"strpbrk";i:1;s:7:"(PHP 5)";i:2;s:54:"string strpbrk ( string $haystack, string $char_list )";i:3;s:27:"searches the string for a .";}
a:4:{i:0;s:6:"strpos";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"mixed strpos ( string $haystack, mixed $needle [, int $offset = 0 ] )";i:3;s:67:"Find the numeric position of the first occurrence of in the string.";}
a:4:{i:0;s:7:"strrchr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"string strrchr ( string $haystack, mixed $needle )";i:3;s:103:"This function returns the portion of which starts at the last occurrence of and goes until the end of .";}
a:4:{i:0;s:6:"strrev";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:32:"string strrev ( string $string )";i:3;s:18:"Returns, reversed.";}
a:4:{i:0;s:8:"strripos";i:1;s:7:"(PHP 5)";i:2;s:70:"int strripos ( string $haystack, string $needle [, int $offset = 0 ] )";i:3;s:66:"Find the numeric position of the last occurrence of in the string.";}
a:4:{i:0;s:7:"strrpos";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"int strrpos ( string $haystack, string $needle [, int $offset = 0 ] )";i:3;s:66:"Find the numeric position of the last occurrence of in the string.";}
a:4:{i:0;s:6:"strspn";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"int strspn ( string $subject, string $mask [, int $start [, int $length ]] )";i:3;s:74:"Finds the length of the initial segment of that contains characters from .";}
a:4:{i:0;s:6:"strstr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:82:"string strstr ( string $haystack, mixed $needle [, bool $before_needle = false ] )";i:3;s:90:"Returns part of string starting from and including the first occurrence of to the end of .";}
a:4:{i:0;s:6:"strtok";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"string strtok ( string $str, string $token )";i:3;s:268:"splits a string () into smaller strings (tokens), with each token being delimited by any character from . That is, if you have a string like "This is an example string" you could tokenize this string into its individual words by using the space character as the token.";}
a:4:{i:0;s:10:"strtolower";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"string strtolower ( string $str )";i:3;s:62:"Returns with all alphabetic characters converted to lowercase.";}
a:4:{i:0;s:10:"strtoupper";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:36:"string strtoupper ( string $string )";i:3;s:62:"Returns with all alphabetic characters converted to uppercase.";}
a:4:{i:0;s:5:"strtr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:54:"string strtr ( string $str, string $from, string $to )";i:3;s:263:"If given three arguments, this function returns a copy of where all occurrences of each (single-byte) character in have been translated to the corresponding character in, i.e., every occurrence of has been replaced with, where is a valid offset in both arguments.";}
a:4:{i:0;s:14:"substr_compare";i:1;s:7:"(PHP 5)";i:2;s:119:"int substr_compare ( string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = false ]] )";i:3;s:45:"compares from position with up to characters.";}
a:4:{i:0;s:12:"substr_count";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:90:"int substr_count ( string $haystack, string $needle [, int $offset = 0 [, int $length ]] )";i:3;s:99:"returns the number of times the substring occurs in the string. Please note that is case sensitive.";}
a:4:{i:0;s:14:"substr_replace";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"mixed substr_replace ( mixed $string, mixed $replacement, mixed $start [, mixed $length ] )";i:3;s:90:"replaces a copy of delimited by the and (optionally) parameters with the string given in .";}
a:4:{i:0;s:6:"substr";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"string substr ( string $string, int $start [, int $length ] )";i:3;s:55:"Returns the portion of specified by the and parameters.";}
a:4:{i:0;s:4:"trim";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"string trim ( string $str [, string $charlist = " \t\n\r\0\x0B" ] )";i:3;s:146:"This function returns a string with whitespace stripped from the beginning and end of . Without the second parameter, will strip these characters:";}
a:4:{i:0;s:7:"ucfirst";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"string ucfirst ( string $str )";i:3;s:90:"Returns a string with the first character of capitalized, if that character is alphabetic.";}
a:4:{i:0;s:7:"ucwords";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"string ucwords ( string $str )";i:3;s:103:"Returns a string with the first character of each word in capitalized, if that character is alphabetic.";}
a:4:{i:0;s:8:"vfprintf";i:1;s:7:"(PHP 5)";i:2;s:62:"int vfprintf ( resource $handle, string $format, array $args )";i:3;s:74:"Write a string produced according to to the stream resource specified by .";}
a:4:{i:0;s:7:"vprintf";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:43:"int vprintf ( string $format, array $args )";i:3;s:103:"Display array values as a formatted string according to (which is described in the documentation for ).";}
a:4:{i:0;s:8:"vsprintf";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:47:"string vsprintf ( string $format, array $args )";i:3;s:90:"Operates as but accepts an array of arguments, rather than a variable number of arguments.";}
a:4:{i:0;s:8:"wordwrap";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:99:"string wordwrap ( string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = false ]]] )";i:3;s:78:"Wraps a string to a given number of characters using a string break character.";}
a:4:{i:0;s:21:"array_change_key_case";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:72:"array array_change_key_case ( array $input [, int $case = CASE_LOWER ] )";i:3;s:94:"Returns an array with all keys from lowercased or uppercased. Numbered indices are left as is.";}
a:4:{i:0;s:11:"array_chunk";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:78:"array array_chunk ( array $input, int $size [, bool $preserve_keys = false ] )";i:3;s:81:"Chunks an array into large chunks. The last chunk may contain less than elements.";}
a:4:{i:0;s:12:"array_column";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:76:"array array_column ( array $input, mixed $column_key [, mixed $index_key ] )";i:3;s:196:"returns the values from a single column of the array, identified by the . Optionally, you may provide an to index the values in the returned array by the values from the column in the input array.";}
a:4:{i:0;s:13:"array_combine";i:1;s:7:"(PHP 5)";i:2;s:50:"array array_combine ( array $keys, array $values )";i:3;s:112:"Creates an by using the values from the array as keys and the values from the array as the corresponding values.";}
a:4:{i:0;s:18:"array_count_values";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"array array_count_values ( array $input )";i:3;s:88:"returns an array using the values of the array as keys and their frequency in as values.";}
a:4:{i:0;s:16:"array_diff_assoc";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:71:"array array_diff_assoc ( array $array1, array $array2 [, array $... ] )";i:3;s:99:"Compares against and returns the difference. Unlike the array keys are also used in the comparison.";}
a:4:{i:0;s:14:"array_diff_key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:69:"array array_diff_key ( array $array1, array $array2 [, array $... ] )";i:3;s:159:"Compares the keys from against the keys from and returns the difference. This function is like except the comparison is done on the keys instead of the values.";}
a:4:{i:0;s:17:"array_diff_uassoc";i:1;s:7:"(PHP 5)";i:2;s:100:"array array_diff_uassoc ( array $array1, array $array2 [, array $... ], callable $key_compare_func )";i:3;s:94:"Compares against and returns the difference. Unlike the array keys are used in the comparison.";}
a:4:{i:0;s:15:"array_diff_ukey";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:99:"array array_diff_ukey ( array $array1, array $array2 [, array $ ... ], callable $key_compare_func )";i:3;s:159:"Compares the keys from against the keys from and returns the difference. This function is like except the comparison is done on the keys instead of the values.";}
a:4:{i:0;s:10:"array_diff";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:65:"array array_diff ( array $array1, array $array2 [, array $... ] )";i:3;s:44:"Compares against and returns the difference.";}
a:4:{i:0;s:15:"array_fill_keys";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:51:"array array_fill_keys ( array $keys, mixed $value )";i:3;s:86:"Fills an array with the value of the parameter, using the values of the array as keys.";}
a:4:{i:0;s:10:"array_fill";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:61:"array array_fill ( int $start_index, int $num, mixed $value )";i:3;s:90:"Fills an array with entries of the value of the parameter, keys starting at the parameter.";}
a:4:{i:0;s:12:"array_filter";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:64:"array array_filter ( array $input [, callable $callback = "" ] )";i:3;s:181:"Iterates over each value in the array passing them to the function. If the function returns true, the current value from is returned into the result array. Array keys are preserved.";}
a:4:{i:0;s:10:"array_flip";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"array array_flip ( array $trans )";i:3;s:83:"returns an in flip order, i.e. keys from become values and values from become keys.";}
a:4:{i:0;s:21:"array_intersect_assoc";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:77:"array array_intersect_assoc ( array $array1, array $array2 [, array $ ... ] )";i:3;s:142:"returns an array containing all the values of that are present in all the arguments. Note that the keys are used in the comparison unlike in .";}
a:4:{i:0;s:19:"array_intersect_key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:75:"array array_intersect_key ( array $array1, array $array2 [, array $ ... ] )";i:3;s:101:"returns an array containing all the entries of which have keys that are present in all the arguments.";}
a:4:{i:0;s:22:"array_intersect_uassoc";i:1;s:7:"(PHP 5)";i:2;s:106:"array array_intersect_uassoc ( array $array1, array $array2 [, array $ ... ], callable $key_compare_func )";i:3;s:142:"returns an array containing all the values of that are present in all the arguments. Note that the keys are used in the comparison unlike in .";}
a:4:{i:0;s:20:"array_intersect_ukey";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:103:"array array_intersect_ukey ( array $array1, array $array2 [, array $... ], callable $key_compare_func )";i:3;s:109:"returns an array containing all the values of which have matching keys that are present in all the arguments.";}
a:4:{i:0;s:15:"array_intersect";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:71:"array array_intersect ( array $array1, array $array2 [, array $ ... ] )";i:3;s:114:"returns an array containing all the values of that are present in all the arguments. Note that keys are preserved.";}
a:4:{i:0;s:16:"array_key_exists";i:1;s:23:"(PHP 4 >= 4.0.7, PHP 5)";i:2;s:51:"bool array_key_exists ( mixed $key, array $search )";i:3;s:87:"returns if the given is set in the array. can be any value possible for an array index.";}
a:4:{i:0;s:10:"array_keys";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:90:"array array_keys ( array $input [, mixed $search_value = NULL [, bool $strict = false ]] )";i:3;s:53:"returns the keys, numeric and string, from the array.";}
a:4:{i:0;s:9:"array_map";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:67:"array array_map ( callable $callback, array $arr1 [, array $... ] )";i:3;s:187:"returns an array containing all the elements of after applying the function to each one. The number of parameters that the function accepts should match the number of arrays passed to the";}
a:4:{i:0;s:21:"array_merge_recursive";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:61:"array array_merge_recursive ( array $array1 [, array $... ] )";i:3;s:153:"merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.";}
a:4:{i:0;s:11:"array_merge";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:51:"array array_merge ( array $array1 [, array $... ] )";i:3;s:153:"Merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.";}
a:4:{i:0;s:15:"array_multisort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:108:"bool array_multisort ( array &$arr [, mixed $arg = SORT_ASC [, mixed $arg = SORT_REGULAR [, mixed $... ]]] )";i:3;s:99:"can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions.";}
a:4:{i:0;s:9:"array_pad";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"array array_pad ( array $input, int $pad_size, mixed $pad_value )";i:3;s:306:"returns a copy of the padded to size specified by with value . If is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of is less than or equal to the length of the then no padding takes place. It is possible to add at most 1048576 elements at a time.";}
a:4:{i:0;s:9:"array_pop";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"mixed array_pop ( array &$array )";i:3;s:178:"pops and returns the last value of the, shortening the by one element. If is empty (or is not an array), will be returned. Will additionally produce a when called on a non-array.";}
a:4:{i:0;s:13:"array_product";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:37:"number array_product ( array $array )";i:3;s:42:"returns the product of values in an array.";}
a:4:{i:0;s:10:"array_push";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:60:"int array_push ( array &$array, mixed $var [, mixed $... ] )";i:3;s:151:"treats as a stack, and pushes the passed variables onto the end of . The length of increases by the number of variables pushed. Has the same effect as:";}
a:4:{i:0;s:10:"array_rand";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:55:"mixed array_rand ( array $input [, int $num_req = 1 ] )";i:3;s:102:"Picks one or more random entries out of an array, and returns the key (or keys) of the random entries.";}
a:4:{i:0;s:12:"array_reduce";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:82:"mixed array_reduce ( array $input, callable $function [, mixed $initial = NULL ] )";i:3;s:107:"applies iteratively the function to the elements of the array, so as to reduce the array to a single value.";}
a:4:{i:0;s:23:"array_replace_recursive";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:77:"array array_replace_recursive ( array $array, array $array1 [, array $... ] )";i:3;s:494:"replaces the values of the first with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.";}
a:4:{i:0;s:13:"array_replace";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:67:"array array_replace ( array $array, array $array1 [, array $... ] )";i:3;s:495:"replaces the values of the first with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values.";}
a:4:{i:0;s:13:"array_reverse";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:69:"array array_reverse ( array $array [, bool $preserve_keys = false ] )";i:3;s:79:"Takes an input and returns a new array with the order of the elements reversed.";}
a:4:{i:0;s:12:"array_search";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:79:"mixed array_search ( mixed $needle, array $haystack [, bool $strict = false ] )";i:3;s:14:"Searches for .";}
a:4:{i:0;s:11:"array_shift";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"mixed array_shift ( array &$array )";i:3;s:214:"shifts the first value of the off and returns it, shortening the by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.";}
a:4:{i:0;s:11:"array_slice";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:103:"array array_slice ( array $array, int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )";i:3;s:83:"returns the sequence of elements from the array as specified by the and parameters.";}
a:4:{i:0;s:12:"array_splice";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:93:"array array_splice ( array &$input, int $offset [, int $length = 0 [, mixed $replacement ]] )";i:3;s:117:"Removes the elements designated by and from the array, and replaces them with the elements of the array, if supplied.";}
a:4:{i:0;s:9:"array_sum";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"number array_sum ( array $array )";i:3;s:38:"returns the sum of values in an array.";}
a:4:{i:0;s:17:"array_udiff_assoc";i:1;s:7:"(PHP 5)";i:2;s:102:"array array_udiff_assoc ( array $array1, array $array2 [, array $ ... ], callable $data_compare_func )";i:3;s:100:"Computes the difference of arrays with additional index check, compares data by a callback function.";}
a:4:{i:0;s:18:"array_udiff_uassoc";i:1;s:7:"(PHP 5)";i:2;s:131:"array array_udiff_uassoc ( array $array1, array $array2 [, array $ ... ], callable $data_compare_func, callable $key_compare_func )";i:3;s:112:"Computes the difference of arrays with additional index check, compares data and indexes by a callback function.";}
a:4:{i:0;s:11:"array_udiff";i:1;s:7:"(PHP 5)";i:2;s:96:"array array_udiff ( array $array1, array $array2 [, array $ ... ], callable $data_compare_func )";i:3;s:154:"Computes the difference of arrays by using a callback function for data comparison. This is unlike which uses an internal function for comparing the data.";}
a:4:{i:0;s:22:"array_uintersect_assoc";i:1;s:7:"(PHP 5)";i:2;s:107:"array array_uintersect_assoc ( array $array1, array $array2 [, array $ ... ], callable $data_compare_func )";i:3;s:102:"Computes the intersection of arrays with additional index check, compares data by a callback function.";}
a:4:{i:0;s:23:"array_uintersect_uassoc";i:1;s:7:"(PHP 5)";i:2;s:136:"array array_uintersect_uassoc ( array $array1, array $array2 [, array $ ... ], callable $data_compare_func, callable $key_compare_func )";i:3;s:253:"Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions Note that the keys are used in the comparison unlike in . Both the data and the indexes are compared by using separate callback functions.";}
a:4:{i:0;s:16:"array_uintersect";i:1;s:7:"(PHP 5)";i:2;s:101:"array array_uintersect ( array $array1, array $array2 [, array $ ... ], callable $data_compare_func )";i:3;s:74:"Computes the intersection of arrays, compares data by a callback function.";}
a:4:{i:0;s:12:"array_unique";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:70:"array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )";i:3;s:64:"Takes an input and returns a new array without duplicate values.";}
a:4:{i:0;s:13:"array_unshift";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"int array_unshift ( array &$array, mixed $var [, mixed $... ] )";i:3;s:264:"prepends passed elements to the front of the . Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.";}
a:4:{i:0;s:12:"array_values";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"array array_values ( array $input )";i:3;s:72:"returns all the values from the array and indexes the array numerically.";}
a:4:{i:0;s:20:"array_walk_recursive";i:1;s:7:"(PHP 5)";i:2;s:91:"bool array_walk_recursive ( array &$input, callable $funcname [, mixed $userdata = NULL ] )";i:3;s:110:"Applies the user-defined function to each element of the array. This function will recurse into deeper arrays.";}
a:4:{i:0;s:10:"array_walk";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"bool array_walk ( array &$array, callable $funcname [, mixed $userdata = NULL ] )";i:3;s:63:"Applies the user-defined function to each element of the array.";}
a:4:{i:0;s:5:"array";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"array array ([ mixed $... ] )";i:3;s:83:"Creates an array. Read the section on the for more information on what an array is.";}
a:4:{i:0;s:6:"arsort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )";i:3;s:129:"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.";}
a:4:{i:0;s:5:"asort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )";i:3;s:228:"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.";}
a:4:{i:0;s:7:"compact";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:48:"array compact ( mixed $varname [, mixed $... ] )";i:3;s:55:"Creates an array containing variables and their values.";}
a:4:{i:0;s:5:"count";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:54:"int count ( mixed $var [, int $mode = COUNT_NORMAL ] )";i:3;s:59:"Counts all elements in an array, or something in an object.";}
a:4:{i:0;s:7:"current";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"mixed current ( array &$array )";i:3;s:128:"Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array.";}
a:4:{i:0;s:4:"each";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"array each ( array &$array )";i:3;s:81:"Return the current key and value pair from an array and advance the array cursor.";}
a:4:{i:0;s:3:"end";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"mixed end ( array &$array )";i:3;s:72:"advances 's internal pointer to the last element, and returns its value.";}
a:4:{i:0;s:7:"extract";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:99:"int extract ( array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL ]] )";i:3;s:61:"Import variables from an array into the current symbol table.";}
a:4:{i:0;s:8:"in_array";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"bool in_array ( mixed $needle, array $haystack [, bool $strict = FALSE ] )";i:3;s:50:"Searches for using loose comparison unless is set.";}
a:4:{i:0;s:10:"key_exists";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:3:"key";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"mixed key ( array &$array )";i:3;s:56:"returns the index element of the current array position.";}
a:4:{i:0;s:6:"krsort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:65:"bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )";i:3;s:123:"Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays.";}
a:4:{i:0;s:5:"ksort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )";i:3;s:106:"Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays.";}
a:4:{i:0;s:4:"list";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"array list ( mixed $varname [, mixed $... ] )";i:3;s:118:"Like, this is not really a function, but a language construct. is used to assign a list of variables in one operation.";}
a:4:{i:0;s:11:"natcasesort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:34:"bool natcasesort ( array &$array )";i:3;s:34:"is a case insensitive version of .";}
a:4:{i:0;s:7:"natsort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"bool natsort ( array &$array )";i:3;s:338:"This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in ) can be seen in the example below.";}
a:4:{i:0;s:4:"next";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"mixed next ( array &$array )";i:3;s:218:"behaves like, with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.";}
a:4:{i:0;s:3:"pos";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:4:"prev";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"mixed prev ( array &$array )";i:3;s:34:"Rewind the internal array pointer.";}
a:4:{i:0;s:5:"range";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"array range ( mixed $start, mixed $end [, number $step = 1 ] )";i:3;s:47:"Create an array containing a range of elements.";}
a:4:{i:0;s:5:"reset";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"mixed reset ( array &$array )";i:3;s:98:"rewinds 's internal pointer to the first element and returns the value of the first array element.";}
a:4:{i:0;s:5:"rsort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:64:"bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )";i:3;s:66:"This function sorts an array in reverse order (highest to lowest).";}
a:4:{i:0;s:7:"shuffle";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"bool shuffle ( array &$array )";i:3;s:74:"This function shuffles (randomizes the order of the elements in) an array.";}
a:4:{i:0;s:6:"sizeof";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:4:"sort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )";i:3;s:112:"This function sorts an array. Elements will be arranged from lowest to highest when this function has completed.";}
a:4:{i:0;s:6:"uasort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"bool uasort ( array &$array, callable $cmp_function )";i:3;s:171:"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function.";}
a:4:{i:0;s:6:"uksort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:53:"bool uksort ( array &$array, callable $cmp_function )";i:3;s:182:"will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.";}
a:4:{i:0;s:5:"usort";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"bool usort ( array &$array, callable $cmp_function )";i:3;s:198:"This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.";}
a:4:{i:0;s:10:"__autoload";i:1;s:7:"(PHP 5)";i:2;s:33:"void __autoload ( string $class )";i:3;s:40:"You can define this function to enable .";}
a:4:{i:0;s:22:"call_user_method_array";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:81:"mixed call_user_method_array ( string $method_name, object &$obj, array $params )";i:3;s:0:"";}
a:4:{i:0;s:16:"call_user_method";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:97:"mixed call_user_method ( string $method_name, object &$obj [, mixed $parameter [, mixed $... ]] )";i:3;s:0:"";}
a:4:{i:0;s:11:"class_alias";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:79:"bool class_alias ( string $original, string $alias [, bool $autoload = TRUE ] )";i:3;s:112:"Creates an alias named based on the defined class . The aliased class is exactly the same as the original class.";}
a:4:{i:0;s:12:"class_exists";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:67:"bool class_exists ( string $class_name [, bool $autoload = true ] )";i:3;s:69:"This function checks whether or not the given class has been defined.";}
a:4:{i:0;s:16:"get_called_class";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:32:"string get_called_class ( void )";i:3;s:58:"Gets the name of the class the static method is called in.";}
a:4:{i:0;s:17:"get_class_methods";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"array get_class_methods ( mixed $class_name )";i:3;s:29:"Gets the class methods names.";}
a:4:{i:0;s:14:"get_class_vars";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"array get_class_vars ( string $class_name )";i:3;s:46:"Get the default properties of the given class.";}
a:4:{i:0;s:9:"get_class";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"string get_class ([ object $object = NULL ] )";i:3;s:41:"Gets the name of the class of the given .";}
a:4:{i:0;s:20:"get_declared_classes";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"array get_declared_classes ( void )";i:3;s:26:"Gets the declared classes.";}
a:4:{i:0;s:23:"get_declared_interfaces";i:1;s:7:"(PHP 5)";i:2;s:38:"array get_declared_interfaces ( void )";i:3;s:29:"Gets the declared interfaces.";}
a:4:{i:0;s:19:"get_declared_traits";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:34:"array get_declared_traits ( void )";i:3;s:0:"";}
a:4:{i:0;s:15:"get_object_vars";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:40:"array get_object_vars ( object $object )";i:3;s:74:"Gets the accessible non-static properties of the given according to scope.";}
a:4:{i:0;s:16:"get_parent_class";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:44:"string get_parent_class ([ mixed $object ] )";i:3;s:52:"Retrieves the parent class name for object or class.";}
a:4:{i:0;s:16:"interface_exists";i:1;s:16:"(PHP 5 >= 5.0.2)";i:2;s:75:"bool interface_exists ( string $interface_name [, bool $autoload = true ] )";i:3;s:47:"Checks if the given interface has been defined.";}
a:4:{i:0;s:4:"is_a";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:80:"bool is_a ( object $object, string $class_name [, bool $allow_string = FALSE ] )";i:3;s:77:"Checks if the given is of this class or has this class as one of its parents.";}
a:4:{i:0;s:14:"is_subclass_of";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:88:"bool is_subclass_of ( mixed $object, string $class_name [, bool $allow_string = TRUE ] )";i:3;s:56:"Checks if the given has the class as one of its parents.";}
a:4:{i:0;s:13:"method_exists";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"bool method_exists ( mixed $object, string $method_name )";i:3;s:48:"Checks if the class method exists in the given .";}
a:4:{i:0;s:15:"property_exists";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:55:"bool property_exists ( mixed $class, string $property )";i:3;s:64:"This function checks if the given exists in the specified class.";}
a:4:{i:0;s:12:"trait_exists";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:59:"bool trait_exists ( string $traitname [, bool $autoload ] )";i:3;s:0:"";}
a:4:{i:0;s:15:"classkit_import";i:1;s:22:"(PECL classkit >= 0.3)";i:2;s:42:"array classkit_import ( string $filename )";i:3;s:0:"";}
a:4:{i:0;s:19:"classkit_method_add";i:1;s:22:"(PECL classkit >= 0.1)";i:2;s:132:"bool classkit_method_add ( string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )";i:3;s:0:"";}
a:4:{i:0;s:20:"classkit_method_copy";i:1;s:22:"(PECL classkit >= 0.2)";i:2;s:98:"bool classkit_method_copy ( string $dClass, string $dMethod, string $sClass [, string $sMethod ] )";i:3;s:0:"";}
a:4:{i:0;s:24:"classkit_method_redefine";i:1;s:22:"(PECL classkit >= 0.1)";i:2;s:137:"bool classkit_method_redefine ( string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )";i:3;s:0:"";}
a:4:{i:0;s:22:"classkit_method_remove";i:1;s:22:"(PECL classkit >= 0.1)";i:2;s:69:"bool classkit_method_remove ( string $classname, string $methodname )";i:3;s:0:"";}
a:4:{i:0;s:22:"classkit_method_rename";i:1;s:22:"(PECL classkit >= 0.1)";i:2;s:86:"bool classkit_method_rename ( string $classname, string $methodname, string $newname )";i:3;s:0:"";}
a:4:{i:0;s:11:"ctype_alnum";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_alnum ( string $text )";i:3;s:68:"Checks if all of the characters in the provided, , are alphanumeric.";}
a:4:{i:0;s:11:"ctype_alpha";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_alpha ( string $text )";i:3;s:247:"Checks if all of the characters in the provided, , are alphabetic. In the standard locale letters are just and is equivalent to if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.";}
a:4:{i:0;s:11:"ctype_cntrl";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_cntrl ( string $text )";i:3;s:126:"Checks if all of the characters in the provided, , are control characters. Control characters are e.g. line feed, tab, escape.";}
a:4:{i:0;s:11:"ctype_digit";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_digit ( string $text )";i:3;s:65:"Checks if all of the characters in the provided, , are numerical.";}
a:4:{i:0;s:11:"ctype_graph";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_graph ( string $text )";i:3;s:74:"Checks if all of the characters in the provided, , creates visible output.";}
a:4:{i:0;s:11:"ctype_lower";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_lower ( string $text )";i:3;s:73:"Checks if all of the characters in the provided, , are lowercase letters.";}
a:4:{i:0;s:11:"ctype_print";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_print ( string $text )";i:3;s:65:"Checks if all of the characters in the provided, , are printable.";}
a:4:{i:0;s:11:"ctype_punct";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_punct ( string $text )";i:3;s:77:"Checks if all of the characters in the provided, , are punctuation character.";}
a:4:{i:0;s:11:"ctype_space";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_space ( string $text )";i:3;s:70:"Checks if all of the characters in the provided, , creates whitespace.";}
a:4:{i:0;s:11:"ctype_upper";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:33:"bool ctype_upper ( string $text )";i:3;s:76:"Checks if all of the characters in the provided, , are uppercase characters.";}
a:4:{i:0;s:12:"ctype_xdigit";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:34:"bool ctype_xdigit ( string $text )";i:3;s:76:"Checks if all of the characters in the provided, , are hexadecimal 'digits'.";}
a:4:{i:0;s:14:"filter_has_var";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:56:"bool filter_has_var ( int $type, string $variable_name )";i:3;s:0:"";}
a:4:{i:0;s:9:"filter_id";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:36:"int filter_id ( string $filtername )";i:3;s:0:"";}
a:4:{i:0;s:18:"filter_input_array";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:88:"mixed filter_input_array ( int $type [, mixed $definition [, bool $add_empty = true ]] )";i:3;s:81:"This function is useful for retrieving many values without repetitively calling .";}
a:4:{i:0;s:12:"filter_input";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:108:"mixed filter_input ( int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )";i:3;s:0:"";}
a:4:{i:0;s:11:"filter_list";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:26:"array filter_list ( void )";i:3;s:0:"";}
a:4:{i:0;s:16:"filter_var_array";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:88:"mixed filter_var_array ( array $data [, mixed $definition [, bool $add_empty = true ]] )";i:3;s:81:"This function is useful for retrieving many values without repetitively calling .";}
a:4:{i:0;s:10:"filter_var";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:89:"mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )";i:3;s:0:"";}
a:4:{i:0;s:20:"call_user_func_array";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:67:"mixed call_user_func_array ( callable $callback, array $param_arr )";i:3;s:63:"Calls the given by the first parameter with the parameters in .";}
a:4:{i:0;s:14:"call_user_func";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:80:"mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )";i:3;s:88:"Calls the given by the first parameter and passes the remaining parameters as arguments.";}
a:4:{i:0;s:15:"create_function";i:1;s:23:"(PHP 4 >= 4.0.1, PHP 5)";i:2;s:53:"string create_function ( string $args, string $code )";i:3;s:91:"Creates an anonymous function from the parameters passed, and returns a unique name for it.";}
a:4:{i:0;s:25:"forward_static_call_array";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:73:"mixed forward_static_call_array ( callable $function, array $parameters )";i:3;s:257:"Calls a user defined function or method given by the parameter. This function must be called within a method context, it can't be used outside a class. It uses the . All arguments of the forwarded method are passed as values, and as an array, similarly to .";}
a:4:{i:0;s:19:"forward_static_call";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:85:"mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )";i:3;s:195:"Calls a user defined function or method given by the parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the .";}
a:4:{i:0;s:12:"func_get_arg";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"mixed func_get_arg ( int $arg_num )";i:3;s:73:"Gets the specified argument from a user-defined function's argument list.";}
a:4:{i:0;s:13:"func_get_args";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"array func_get_args ( void )";i:3;s:46:"Gets an array of the function's argument list.";}
a:4:{i:0;s:13:"func_num_args";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"int func_num_args ( void )";i:3;s:52:"Gets the number of arguments passed to the function.";}
a:4:{i:0;s:15:"function_exists";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"bool function_exists ( string $function_name )";i:3;s:86:"Checks the list of defined functions, both built-in (internal) and user-defined, for .";}
a:4:{i:0;s:21:"get_defined_functions";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:36:"array get_defined_functions ( void )";i:3;s:39:"Gets an array of all defined functions.";}
a:4:{i:0;s:26:"register_shutdown_function";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:91:"void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )";i:3;s:72:"Registers a to be executed after script execution finishes or is called.";}
a:4:{i:0;s:22:"register_tick_function";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:81:"bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )";i:3;s:52:"Registers the given to be executed when a is called.";}
a:4:{i:0;s:24:"unregister_tick_function";i:1;s:23:"(PHP 4 >= 4.0.3, PHP 5)";i:2;s:55:"void unregister_tick_function ( string $function_name )";i:3;s:80:"De-registers the function named by so it is no longer executed when a is called.";}
a:4:{i:0;s:14:"aggregate_info";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:39:"array aggregate_info ( object $object )";i:3;s:48:"Gets the aggregation information for the given .";}
a:4:{i:0;s:25:"aggregate_methods_by_list";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:117:"void aggregate_methods_by_list ( object $object, string $class_name, array $methods_list [, bool $exclude = false ] )";i:3;s:83:"Aggregates methods from a class to an existing object using a list of method names.";}
a:4:{i:0;s:27:"aggregate_methods_by_regexp";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:114:"void aggregate_methods_by_regexp ( object $object, string $class_name, string $regexp [, bool $exclude = false ] )";i:3;s:103:"Aggregates methods from a class to an existing object using a regular expression to match method names.";}
a:4:{i:0;s:17:"aggregate_methods";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:61:"void aggregate_methods ( object $object, string $class_name )";i:3;s:214:"Aggregates all methods defined in a class to an existing object, except for the class constructor, or methods whose names start with an underscore character (_) which are considered private to the aggregated class.";}
a:4:{i:0;s:28:"aggregate_properties_by_list";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:123:"void aggregate_properties_by_list ( object $object, string $class_name, array $properties_list [, bool $exclude = false ] )";i:3;s:88:"Aggregates properties from a class to an existing object using a list of property names.";}
a:4:{i:0;s:30:"aggregate_properties_by_regexp";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:117:"void aggregate_properties_by_regexp ( object $object, string $class_name, string $regexp [, bool $exclude = false ] )";i:3;s:105:"Aggregates properties from a class to an existing object using a regular expression to match their names.";}
a:4:{i:0;s:20:"aggregate_properties";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:64:"void aggregate_properties ( object $object, string $class_name )";i:3;s:194:"Aggregates all properties defined in a class to an existing object, except for properties whose names start with an underscore character (_) which are considered private to the aggregated class.";}
a:4:{i:0;s:9:"aggregate";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:53:"void aggregate ( object $object, string $class_name )";i:3;s:279:"Aggregates methods and properties defined in a class to an existing object. Methods and properties with names starting with an underscore character (_) are considered private to the aggregated class and are not used, constructors are also excluded from the aggregation procedure.";}
a:4:{i:0;s:16:"aggregation_info";i:1;s:28:"(PHP 4 >= 4.2.0 and < 4.3.0)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"deaggregate";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:59:"void deaggregate ( object $object [, string $class_name ] )";i:3;s:82:"Removes the methods and properties from classes that were aggregated to an object.";}
a:4:{i:0;s:20:"QuickHashIntSet::add";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:45:"public bool QuickHashIntSet::add ( int $key )";i:3;s:199:"This method adds a new entry to the set, and returns whether the entry was added. Entries are by default always added unless QuickHashIntSet::CHECK_FOR_DUPES has been passed when the set was created.";}
a:4:{i:0;s:28:"QuickHashIntSet::__construct";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:67:"public QuickHashIntSet::__construct ( int $size [, int $options ] )";i:3;s:186:"This constructor creates a new QuickHashIntSet. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.";}
a:4:{i:0;s:23:"QuickHashIntSet::delete";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:48:"public bool QuickHashIntSet::delete ( int $key )";i:3;s:193:"This method deletes an entry from the set, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the set itself is freed.";}
a:4:{i:0;s:23:"QuickHashIntSet::exists";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:48:"public bool QuickHashIntSet::exists ( int $key )";i:3;s:76:"This method checks whether an entry with the provided key exists in the set.";}
a:4:{i:0;s:24:"QuickHashIntSet::getSize";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:43:"publicint QuickHashIntSet::getSize ( void )";i:3;s:42:"Returns the number of elements in the set.";}
a:4:{i:0;s:29:"QuickHashIntSet::loadFromFile";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:112:"public static QuickHashIntSet QuickHashIntSet::loadFromFile ( string $filename [, int $size [, int $options ]] )";i:3;s:198:"This factory method creates a new set from a definition file on disk. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses.";}
a:4:{i:0;s:31:"QuickHashIntSet::loadFromString";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:114:"public static QuickHashIntSet QuickHashIntSet::loadFromString ( string $contents [, int $size [, int $options ]] )";i:3;s:197:"This factory method creates a new set from a definition in a string. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses.";}
a:4:{i:0;s:27:"QuickHashIntSet::saveToFile";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:60:"public void QuickHashIntSet::saveToFile ( string $filename )";i:3;s:102:"This method stores an existing set to a file on disk, in the same format that loadFromFile() can read.";}
a:4:{i:0;s:29:"QuickHashIntSet::saveToString";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:52:"public string QuickHashIntSet::saveToString ( void )";i:3;s:102:"This method returns a serialized version of the set in the same format that loadFromString() can read.";}
a:4:{i:0;s:21:"QuickHashIntHash::add";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:62:"public bool QuickHashIntHash::add ( int $key [, int $value ] )";i:3;s:202:"This method adds a new entry to the hash, and returns whether the entry was added. Entries are by default always added unless QuickHashIntHash::CHECK_FOR_DUPES has been passed when the hash was created.";}
a:4:{i:0;s:29:"QuickHashIntHash::__construct";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:68:"public QuickHashIntHash::__construct ( int $size [, int $options ] )";i:3;s:187:"This constructor creates a new QuickHashIntHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.";}
a:4:{i:0;s:24:"QuickHashIntHash::delete";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:49:"public bool QuickHashIntHash::delete ( int $key )";i:3;s:195:"This method deletes an entry from the hash, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the hash itself is freed.";}
a:4:{i:0;s:24:"QuickHashIntHash::exists";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:49:"public bool QuickHashIntHash::exists ( int $key )";i:3;s:77:"This method checks whether an entry with the provided key exists in the hash.";}
a:4:{i:0;s:21:"QuickHashIntHash::get";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:45:"public int QuickHashIntHash::get ( int $key )";i:3;s:55:"This method retrieves a value from the hash by its key.";}
a:4:{i:0;s:25:"QuickHashIntHash::getSize";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:45:"public int QuickHashIntHash::getSize ( void )";i:3;s:43:"Returns the number of elements in the hash.";}
a:4:{i:0;s:30:"QuickHashIntHash::loadFromFile";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:100:"public static QuickHashIntHash QuickHashIntHash::loadFromFile ( string $filename [, int $options ] )";i:3;s:484:"This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x11\0', the number of elements as a 32 bit signed integer in system Endianness, followed by 32 bit signed integers packed together in the Endianness that the system that the code runs on uses. For each hash element there are two 32 bit signed integers stored. The first of each element is the key, and the second is the value belonging to the key. An example could be:";}
a:4:{i:0;s:32:"QuickHashIntHash::loadFromString";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:102:"public static QuickHashIntHash QuickHashIntHash::loadFromString ( string $contents [, int $options ] )";i:3;s:348:"This factory method creates a new hash from a definition in a string. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses. For each element there are two 32 bit signed integers stored. The first of each element is the key, and the second is the value belonging to the key.";}
a:4:{i:0;s:28:"QuickHashIntHash::saveToFile";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:61:"public void QuickHashIntHash::saveToFile ( string $filename )";i:3;s:103:"This method stores an existing hash to a file on disk, in the same format that loadFromFile() can read.";}
a:4:{i:0;s:30:"QuickHashIntHash::saveToString";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:53:"public string QuickHashIntHash::saveToString ( void )";i:3;s:103:"This method returns a serialized version of the hash in the same format that loadFromString() can read.";}
a:4:{i:0;s:21:"QuickHashIntHash::set";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:58:"public bool QuickHashIntHash::set ( int $key, int $value )";i:3;s:373:"This method tries to update an entry with a new value. In case the entry did not yet exist, it will instead add a new entry. It returns whether the entry was added or update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.";}
a:4:{i:0;s:24:"QuickHashIntHash::update";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:61:"public bool QuickHashIntHash::update ( int $key, int $value )";i:3;s:287:"This method updates an entry with a new value, and returns whether the entry was update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.";}
a:4:{i:0;s:27:"QuickHashStringIntHash::add";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:67:"public bool QuickHashStringIntHash::add ( string $key, int $value )";i:3;s:208:"This method adds a new entry to the hash, and returns whether the entry was added. Entries are by default always added unless QuickHashStringIntHash::CHECK_FOR_DUPES has been passed when the hash was created.";}
a:4:{i:0;s:35:"QuickHashStringIntHash::__construct";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:78:"public QuickHashStringIntHash::__construct ( int $size [, int $options = 0 ] )";i:3;s:193:"This constructor creates a new QuickHashStringIntHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.";}
a:4:{i:0;s:30:"QuickHashStringIntHash::delete";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:58:"public bool QuickHashStringIntHash::delete ( string $key )";i:3;s:195:"This method deletes an entry from the hash, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the hash itself is freed.";}
a:4:{i:0;s:30:"QuickHashStringIntHash::exists";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:58:"public bool QuickHashStringIntHash::exists ( string $key )";i:3;s:77:"This method checks whether an entry with the provided key exists in the hash.";}
a:4:{i:0;s:27:"QuickHashStringIntHash::get";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:56:"public mixed QuickHashStringIntHash::get ( string $key )";i:3;s:55:"This method retrieves a value from the hash by its key.";}
a:4:{i:0;s:31:"QuickHashStringIntHash::getSize";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:51:"public int QuickHashStringIntHash::getSize ( void )";i:3;s:43:"Returns the number of elements in the hash.";}
a:4:{i:0;s:36:"QuickHashStringIntHash::loadFromFile";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:134:"public static QuickHashStringIntHash QuickHashStringIntHash::loadFromFile ( string $filename [, int $size = 0 [, int $options = 0 ]] )";i:3;s:902:"This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x21\0', the number of elements as a 32 bit signed integer in system Endianness, an unsigned 32 bit integer containing the number of element data to follow in characters. This element data contains all the strings. The follows another signed 32 bit integer containing the number of bucket lists. After the header and the strings, the elements follow. They are ordered by bucket list so that the keys don't have to be hashed in order to restore the hash. For each bucket list, the following information is stored (all as 32 bit integers): the bucket list index, the number of elements in that list, and then in pairs of two unsigned 32 bit integers the elements, where the first one is the index into the string list containing the keys, and the second one the value. An example could be:";}
a:4:{i:0;s:38:"QuickHashStringIntHash::loadFromString";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:136:"public static QuickHashStringIntHash QuickHashStringIntHash::loadFromString ( string $contents [, int $size = 0 [, int $options = 0 ]] )";i:3;s:127:"This factory method creates a new hash from a definition in a string. The format is the same as the one used in "loadFromFile".";}
a:4:{i:0;s:34:"QuickHashStringIntHash::saveToFile";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:67:"public void QuickHashStringIntHash::saveToFile ( string $filename )";i:3;s:103:"This method stores an existing hash to a file on disk, in the same format that loadFromFile() can read.";}
a:4:{i:0;s:36:"QuickHashStringIntHash::saveToString";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:59:"public string QuickHashStringIntHash::saveToString ( void )";i:3;s:103:"This method returns a serialized version of the hash in the same format that loadFromString() can read.";}
a:4:{i:0;s:27:"QuickHashStringIntHash::set";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:66:"public int QuickHashStringIntHash::set ( string $key, int $value )";i:3;s:379:"This method tries to update an entry with a new value. In case the entry did not yet exist, it will instead add a new entry. It returns whether the entry was added or update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashStringIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.";}
a:4:{i:0;s:30:"QuickHashStringIntHash::update";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:70:"public bool QuickHashStringIntHash::update ( string $key, int $value )";i:3;s:293:"This method updates an entry with a new value, and returns whether the entry was update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashStringIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.";}
a:4:{i:0;s:27:"QuickHashIntStringHash::add";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:67:"public bool QuickHashIntStringHash::add ( int $key, string $value )";i:3;s:208:"This method adds a new entry to the hash, and returns whether the entry was added. Entries are by default always added unless QuickHashIntStringHash::CHECK_FOR_DUPES has been passed when the hash was created.";}
a:4:{i:0;s:35:"QuickHashIntStringHash::__construct";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:78:"public QuickHashIntStringHash::__construct ( int $size [, int $options = 0 ] )";i:3;s:193:"This constructor creates a new QuickHashIntStringHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.";}
a:4:{i:0;s:30:"QuickHashIntStringHash::delete";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:55:"public bool QuickHashIntStringHash::delete ( int $key )";i:3;s:195:"This method deletes an entry from the hash, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the hash itself is freed.";}
a:4:{i:0;s:30:"QuickHashIntStringHash::exists";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:55:"public bool QuickHashIntStringHash::exists ( int $key )";i:3;s:77:"This method checks whether an entry with the provided key exists in the hash.";}
a:4:{i:0;s:27:"QuickHashIntStringHash::get";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:53:"public mixed QuickHashIntStringHash::get ( int $key )";i:3;s:55:"This method retrieves a value from the hash by its key.";}
a:4:{i:0;s:31:"QuickHashIntStringHash::getSize";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:51:"public int QuickHashIntStringHash::getSize ( void )";i:3;s:43:"Returns the number of elements in the hash.";}
a:4:{i:0;s:36:"QuickHashIntStringHash::loadFromFile";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:134:"public static QuickHashIntStringHash QuickHashIntStringHash::loadFromFile ( string $filename [, int $size = 0 [, int $options = 0 ]] )";i:3;s:538:"This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x12\0', the number of elements as a 32 bit signed integer in system Endianness, an unsigned 32 bit integer containing the number of element data to follow in characters. This element data contains all the strings. After the header and the strings, the elements follow in pairs of two unsigned 32 bit integers where the first one is the key, and the second one the index in the the element data string. An example could be:";}
a:4:{i:0;s:38:"QuickHashIntStringHash::loadFromString";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:136:"public static QuickHashIntStringHash QuickHashIntStringHash::loadFromString ( string $contents [, int $size = 0 [, int $options = 0 ]] )";i:3;s:127:"This factory method creates a new hash from a definition in a string. The format is the same as the one used in "loadFromFile".";}
a:4:{i:0;s:34:"QuickHashIntStringHash::saveToFile";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:67:"public void QuickHashIntStringHash::saveToFile ( string $filename )";i:3;s:103:"This method stores an existing hash to a file on disk, in the same format that loadFromFile() can read.";}
a:4:{i:0;s:36:"QuickHashIntStringHash::saveToString";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:59:"public string QuickHashIntStringHash::saveToString ( void )";i:3;s:103:"This method returns a serialized version of the hash in the same format that loadFromString() can read.";}
a:4:{i:0;s:27:"QuickHashIntStringHash::set";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:66:"public int QuickHashIntStringHash::set ( int $key, string $value )";i:3;s:379:"This method tries to update an entry with a new value. In case the entry did not yet exist, it will instead add a new entry. It returns whether the entry was added or update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntStringHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.";}
a:4:{i:0;s:30:"QuickHashIntStringHash::update";i:1;s:27:"(PECL quickhash >= Unknown)";i:2;s:70:"public bool QuickHashIntStringHash::update ( int $key, string $value )";i:3;s:293:"This method updates an entry with a new value, and returns whether the entry was update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntStringHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.";}
a:4:{i:0;s:18:"Reflection::export";i:1;s:7:"(PHP 5)";i:2;s:90:"public static string Reflection::export ( Reflector $reflector [, bool $return = false ] )";i:3;s:21:"Exports a reflection.";}
a:4:{i:0;s:28:"Reflection::getModifierNames";i:1;s:7:"(PHP 5)";i:2;s:67:"public static array Reflection::getModifierNames ( int $modifiers )";i:3;s:20:"Gets modifier names.";}
a:4:{i:0;s:28:"ReflectionClass::__construct";i:1;s:7:"(PHP 5)";i:2;s:55:"public ReflectionClass::__construct ( mixed $argument )";i:3;s:24:"Constructs a new object.";}
a:4:{i:0;s:23:"ReflectionClass::export";i:1;s:7:"(PHP 5)";i:2;s:90:"public static string ReflectionClass::export ( mixed $argument [, bool $return = false ] )";i:3;s:26:"Exports a reflected class.";}
a:4:{i:0;s:28:"ReflectionClass::getConstant";i:1;s:7:"(PHP 5)";i:2;s:58:"public mixed ReflectionClass::getConstant ( string $name )";i:3;s:26:"Gets the defined constant.";}
a:4:{i:0;s:29:"ReflectionClass::getConstants";i:1;s:7:"(PHP 5)";i:2;s:51:"public array ReflectionClass::getConstants ( void )";i:3;s:36:"Gets defined constants from a class.";}
a:4:{i:0;s:31:"ReflectionClass::getConstructor";i:1;s:7:"(PHP 5)";i:2;s:64:"public ReflectionMethod ReflectionClass::getConstructor ( void )";i:3;s:44:"Gets the constructor of the reflected class.";}
a:4:{i:0;s:37:"ReflectionClass::getDefaultProperties";i:1;s:7:"(PHP 5)";i:2;s:59:"public array ReflectionClass::getDefaultProperties ( void )";i:3;s:70:"Gets default properties from a class (including inherited properties).";}
a:4:{i:0;s:30:"ReflectionClass::getDocComment";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:53:"public string ReflectionClass::getDocComment ( void )";i:3;s:31:"Gets doc comments from a class.";}
a:4:{i:0;s:27:"ReflectionClass::getEndLine";i:1;s:7:"(PHP 5)";i:2;s:47:"public int ReflectionClass::getEndLine ( void )";i:3;s:58:"Gets end line number from a user-defined class definition.";}
a:4:{i:0;s:29:"ReflectionClass::getExtension";i:1;s:7:"(PHP 5)";i:2;s:65:"public ReflectionExtension ReflectionClass::getExtension ( void )";i:3;s:56:"Gets a object for the extension which defined the class.";}
a:4:{i:0;s:33:"ReflectionClass::getExtensionName";i:1;s:7:"(PHP 5)";i:2;s:56:"public string ReflectionClass::getExtensionName ( void )";i:3;s:55:"Gets the name of the extension which defined the class.";}
a:4:{i:0;s:28:"ReflectionClass::getFileName";i:1;s:7:"(PHP 5)";i:2;s:51:"public string ReflectionClass::getFileName ( void )";i:3;s:66:"Gets the filename of the file in which the class has been defined.";}
a:4:{i:0;s:34:"ReflectionClass::getInterfaceNames";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:56:"public array ReflectionClass::getInterfaceNames ( void )";i:3;s:24:"Get the interface names.";}
a:4:{i:0;s:30:"ReflectionClass::getInterfaces";i:1;s:7:"(PHP 5)";i:2;s:52:"public array ReflectionClass::getInterfaces ( void )";i:3;s:20:"Gets the interfaces.";}
a:4:{i:0;s:26:"ReflectionClass::getMethod";i:1;s:7:"(PHP 5)";i:2;s:67:"public ReflectionMethod ReflectionClass::getMethod ( string $name )";i:3;s:26:"Gets a for a class method.";}
a:4:{i:0;s:27:"ReflectionClass::getMethods";i:1;s:7:"(PHP 5)";i:2;s:59:"public array ReflectionClass::getMethods ([ int $filter ] )";i:3;s:39:"Gets an array of methods for the class.";}
a:4:{i:0;s:29:"ReflectionClass::getModifiers";i:1;s:7:"(PHP 5)";i:2;s:49:"public int ReflectionClass::getModifiers ( void )";i:3;s:58:"Returns a bitfield of the access modifiers for this class.";}
a:4:{i:0;s:24:"ReflectionClass::getName";i:1;s:7:"(PHP 5)";i:2;s:47:"public string ReflectionClass::getName ( void )";i:3;s:20:"Gets the class name.";}
a:4:{i:0;s:33:"ReflectionClass::getNamespaceName";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:56:"public string ReflectionClass::getNamespaceName ( void )";i:3;s:24:"Gets the namespace name.";}
a:4:{i:0;s:31:"ReflectionClass::getParentClass";i:1;s:7:"(PHP 5)";i:2;s:54:"public object ReflectionClass::getParentClass ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"ReflectionClass::getProperties";i:1;s:7:"(PHP 5)";i:2;s:62:"public array ReflectionClass::getProperties ([ int $filter ] )";i:3;s:31:"Retrieves reflected properties.";}
a:4:{i:0;s:28:"ReflectionClass::getProperty";i:1;s:7:"(PHP 5)";i:2;s:71:"public ReflectionProperty ReflectionClass::getProperty ( string $name )";i:3;s:30:"Gets a for a class's property.";}
a:4:{i:0;s:29:"ReflectionClass::getShortName";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:52:"public string ReflectionClass::getShortName ( void )";i:3;s:65:"Gets the short name of the class, the part without the namespace.";}
a:4:{i:0;s:29:"ReflectionClass::getStartLine";i:1;s:7:"(PHP 5)";i:2;s:49:"public int ReflectionClass::getStartLine ( void )";i:3;s:29:"Get the starting line number.";}
a:4:{i:0;s:36:"ReflectionClass::getStaticProperties";i:1;s:7:"(PHP 5)";i:2;s:58:"public array ReflectionClass::getStaticProperties ( void )";i:3;s:26:"Get the static properties.";}
a:4:{i:0;s:39:"ReflectionClass::getStaticPropertyValue";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:92:"public mixed ReflectionClass::getStaticPropertyValue ( string $name [, mixed &$def_value ] )";i:3;s:50:"Gets the value of a static property on this class.";}
a:4:{i:0;s:32:"ReflectionClass::getTraitAliases";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:54:"public array ReflectionClass::getTraitAliases ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"ReflectionClass::getTraitNames";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:52:"public array ReflectionClass::getTraitNames ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"ReflectionClass::getTraits";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:48:"public array ReflectionClass::getTraits ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"ReflectionClass::hasConstant";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public bool ReflectionClass::hasConstant ( string $name )";i:3;s:64:"Checks whether the class has a specific constant defined or not.";}
a:4:{i:0;s:26:"ReflectionClass::hasMethod";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:55:"public bool ReflectionClass::hasMethod ( string $name )";i:3;s:55:"Checks whether a specific method is defined in a class.";}
a:4:{i:0;s:28:"ReflectionClass::hasProperty";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public bool ReflectionClass::hasProperty ( string $name )";i:3;s:49:"Checks whether the specified property is defined.";}
a:4:{i:0;s:36:"ReflectionClass::implementsInterface";i:1;s:7:"(PHP 5)";i:2;s:70:"public bool ReflectionClass::implementsInterface ( string $interface )";i:3;s:42:"Checks whether it implements an interface.";}
a:4:{i:0;s:28:"ReflectionClass::inNamespace";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:49:"public bool ReflectionClass::inNamespace ( void )";i:3;s:47:"Checks if this class is defined in a namespace.";}
a:4:{i:0;s:27:"ReflectionClass::isAbstract";i:1;s:7:"(PHP 5)";i:2;s:48:"public bool ReflectionClass::isAbstract ( void )";i:3;s:32:"Checks if the class is abstract.";}
a:4:{i:0;s:28:"ReflectionClass::isCloneable";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:49:"public bool ReflectionClass::isCloneable ( void )";i:3;s:40:"Returns whether this class is cloneable.";}
a:4:{i:0;s:24:"ReflectionClass::isFinal";i:1;s:7:"(PHP 5)";i:2;s:45:"public bool ReflectionClass::isFinal ( void )";i:3;s:27:"Checks if a class is final.";}
a:4:{i:0;s:27:"ReflectionClass::isInstance";i:1;s:7:"(PHP 5)";i:2;s:58:"public bool ReflectionClass::isInstance ( object $object )";i:3;s:46:"Checks if an object is an instance of a class.";}
a:4:{i:0;s:31:"ReflectionClass::isInstantiable";i:1;s:7:"(PHP 5)";i:2;s:52:"public bool ReflectionClass::isInstantiable ( void )";i:3;s:36:"Checks if the class is instantiable.";}
a:4:{i:0;s:28:"ReflectionClass::isInterface";i:1;s:7:"(PHP 5)";i:2;s:49:"public bool ReflectionClass::isInterface ( void )";i:3;s:41:"Checks whether the class is an interface.";}
a:4:{i:0;s:27:"ReflectionClass::isInternal";i:1;s:7:"(PHP 5)";i:2;s:48:"public bool ReflectionClass::isInternal ( void )";i:3;s:99:"Checks if the class is defined internally by an extension, or the core, as opposed to user-defined.";}
a:4:{i:0;s:30:"ReflectionClass::isIterateable";i:1;s:7:"(PHP 5)";i:2;s:51:"public bool ReflectionClass::isIterateable ( void )";i:3;s:40:"Checks whether the class is iterateable.";}
a:4:{i:0;s:29:"ReflectionClass::isSubclassOf";i:1;s:7:"(PHP 5)";i:2;s:59:"public bool ReflectionClass::isSubclassOf ( string $class )";i:3;s:91:"Checks if the class is a subclass of a specified class or implements a specified interface.";}
a:4:{i:0;s:24:"ReflectionClass::isTrait";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:45:"public bool ReflectionClass::isTrait ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"ReflectionClass::isUserDefined";i:1;s:7:"(PHP 5)";i:2;s:51:"public bool ReflectionClass::isUserDefined ( void )";i:3;s:65:"Checks whether the class is user-defined, as opposed to internal.";}
a:4:{i:0;s:28:"ReflectionClass::newInstance";i:1;s:7:"(PHP 5)";i:2;s:74:"public object ReflectionClass::newInstance ( mixed $args [, mixed $... ] )";i:3;s:93:"Creates a new instance of the class. The given arguments are passed to the class constructor.";}
a:4:{i:0;s:32:"ReflectionClass::newInstanceArgs";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:65:"public object ReflectionClass::newInstanceArgs ([ array $args ] )";i:3;s:93:"Creates a new instance of the class, the given arguments are passed to the class constructor.";}
a:4:{i:0;s:47:"
ReflectionClass::newInstanceWithoutConstructor";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:69:"public object ReflectionClass::newInstanceWithoutConstructor ( void )";i:3;s:69:"Creates a new instance of the class without invoking the constructor.";}
a:4:{i:0;s:39:"ReflectionClass::setStaticPropertyValue";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:83:"public void ReflectionClass::setStaticPropertyValue ( string $name, string $value )";i:3;s:27:"Sets static property value.";}
a:4:{i:0;s:27:"ReflectionClass::__toString";i:1;s:7:"(PHP 5)";i:2;s:50:"public string ReflectionClass::__toString ( void )";i:3;s:64:"Returns the string representation of the ReflectionClass object.";}
a:4:{i:0;s:32:"ReflectionZendExtension::__clone";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:60:"final private void ReflectionZendExtension::__clone ( void )";i:3;s:0:"";}
a:4:{i:0;s:36:"ReflectionZendExtension::__construct";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:60:"public ReflectionZendExtension::__construct ( string $name )";i:3;s:0:"";}
a:4:{i:0;s:31:"ReflectionZendExtension::export";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:89:"public static string ReflectionZendExtension::export ( string $name [, string $return ] )";i:3;s:0:"";}
a:4:{i:0;s:34:"ReflectionZendExtension::getAuthor";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:57:"public string ReflectionZendExtension::getAuthor ( void )";i:3;s:0:"";}
a:4:{i:0;s:37:"ReflectionZendExtension::getCopyright";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:60:"public string ReflectionZendExtension::getCopyright ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"ReflectionZendExtension::getName";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:55:"public string ReflectionZendExtension::getName ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"ReflectionZendExtension::getURL";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:54:"public string ReflectionZendExtension::getURL ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"ReflectionZendExtension::getVersion";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:58:"public string ReflectionZendExtension::getVersion ( void )";i:3;s:0:"";}
a:4:{i:0;s:35:"ReflectionZendExtension::__toString";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:58:"public string ReflectionZendExtension::__toString ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"ReflectionExtension::__clone";i:1;s:7:"(PHP 5)";i:2;s:56:"final private void ReflectionExtension::__clone ( void )";i:3;s:91:"The clone method prevents an object from being cloned. Reflection objects cannot be cloned.";}
a:4:{i:0;s:32:"ReflectionExtension::__construct";i:1;s:7:"(PHP 5)";i:2;s:56:"public ReflectionExtension::__construct ( string $name )";i:3;s:13:"Construct a .";}
a:4:{i:0;s:27:"ReflectionExtension::export";i:1;s:7:"(PHP 5)";i:2;s:93:"public static string ReflectionExtension::export ( string $name [, string $return = false ] )";i:3;s:99:"Exports a reflected extension. The output format of this function is the same as the CLI argument .";}
a:4:{i:0;s:31:"ReflectionExtension::getClasses";i:1;s:7:"(PHP 5)";i:2;s:53:"public array ReflectionExtension::getClasses ( void )";i:3;s:41:"Gets a list of classes from an extension.";}
a:4:{i:0;s:34:"ReflectionExtension::getClassNames";i:1;s:7:"(PHP 5)";i:2;s:56:"public array ReflectionExtension::getClassNames ( void )";i:3;s:58:"Gets a listing of class names as defined in the extension.";}
a:4:{i:0;s:33:"ReflectionExtension::getConstants";i:1;s:7:"(PHP 5)";i:2;s:55:"public array ReflectionExtension::getConstants ( void )";i:3;s:40:"Get defined constants from an extension.";}
a:4:{i:0;s:36:"ReflectionExtension::getDependencies";i:1;s:7:"(PHP 5)";i:2;s:58:"public array ReflectionExtension::getDependencies ( void )";i:3;s:73:"Gets dependencies, by listing both required and conflicting dependencies.";}
a:4:{i:0;s:33:"ReflectionExtension::getFunctions";i:1;s:7:"(PHP 5)";i:2;s:55:"public array ReflectionExtension::getFunctions ( void )";i:3;s:40:"Get defined functions from an extension.";}
a:4:{i:0;s:34:"ReflectionExtension::getINIEntries";i:1;s:7:"(PHP 5)";i:2;s:56:"public array ReflectionExtension::getINIEntries ( void )";i:3;s:37:"Get the ini entries for an extension.";}
a:4:{i:0;s:28:"ReflectionExtension::getName";i:1;s:7:"(PHP 5)";i:2;s:51:"public string ReflectionExtension::getName ( void )";i:3;s:25:"Gets the extensions name.";}
a:4:{i:0;s:31:"ReflectionExtension::getVersion";i:1;s:7:"(PHP 5)";i:2;s:54:"public string ReflectionExtension::getVersion ( void )";i:3;s:34:"Gets the version of the extension.";}
a:4:{i:0;s:25:"ReflectionExtension::info";i:1;s:7:"(PHP 5)";i:2;s:46:"public void ReflectionExtension::info ( void )";i:3;s:51:"Prints out the " " snippet for the given extension.";}
a:4:{i:0;s:33:"ReflectionExtension::isPersistent";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:54:"public void ReflectionExtension::isPersistent ( void )";i:3;s:0:"";}
a:4:{i:0;s:32:"ReflectionExtension::isTemporary";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:53:"public void ReflectionExtension::isTemporary ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"ReflectionExtension::__toString";i:1;s:7:"(PHP 5)";i:2;s:54:"public string ReflectionExtension::__toString ( void )";i:3;s:93:"Exports a reflected extension and returns it as a . This is the same as the with the set to .";}
a:4:{i:0;s:31:"ReflectionFunction::__construct";i:1;s:7:"(PHP 5)";i:2;s:54:"public ReflectionFunction::__construct ( mixed $name )";i:3;s:20:"Constructs a object.";}
a:4:{i:0;s:26:"ReflectionFunction::export";i:1;s:7:"(PHP 5)";i:2;s:84:"public static string ReflectionFunction::export ( string $name [, string $return ] )";i:3;s:29:"Exports a Reflected function.";}
a:4:{i:0;s:30:"ReflectionFunction::getClosure";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:54:"public Closure ReflectionFunction::getClosure ( void )";i:3;s:0:"";}
a:4:{i:0;s:26:"ReflectionFunction::invoke";i:1;s:7:"(PHP 5)";i:2;s:78:"public mixed ReflectionFunction::invoke ([ mixed $parameter [, mixed $... ]] )";i:3;s:29:"Invokes a reflected function.";}
a:4:{i:0;s:30:"ReflectionFunction::invokeArgs";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:59:"public mixed ReflectionFunction::invokeArgs ( array $args )";i:3;s:53:"Invokes the function and pass its arguments as array.";}
a:4:{i:0;s:30:"ReflectionFunction::isDisabled";i:1;s:7:"(PHP 5)";i:2;s:51:"public bool ReflectionFunction::isDisabled ( void )";i:3;s:54:"Checks if the function is disabled, via the directive.";}
a:4:{i:0;s:30:"ReflectionFunction::__toString";i:1;s:7:"(PHP 5)";i:2;s:53:"public string ReflectionFunction::__toString ( void )";i:3;s:10:"To string.";}
a:4:{i:0;s:35:"ReflectionFunctionAbstract::__clone";i:1;s:7:"(PHP 5)";i:2;s:63:"final private void ReflectionFunctionAbstract::__clone ( void )";i:3;s:18:"Clones a function.";}
a:4:{i:0;s:49:"
ReflectionFunctionAbstract::getClosureScopeClass";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:80:"public ReflectionClass ReflectionFunctionAbstract::getClosureScopeClass ( void )";i:3;s:0:"";}
a:4:{i:0;s:42:"ReflectionFunctionAbstract::getClosureThis";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:65:"public object ReflectionFunctionAbstract::getClosureThis ( void )";i:3;s:0:"";}
a:4:{i:0;s:41:"ReflectionFunctionAbstract::getDocComment";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:64:"public string ReflectionFunctionAbstract::getDocComment ( void )";i:3;s:34:"Get a Doc comment from a function.";}
a:4:{i:0;s:38:"ReflectionFunctionAbstract::getEndLine";i:1;s:7:"(PHP 5)";i:2;s:58:"public int ReflectionFunctionAbstract::getEndLine ( void )";i:3;s:27:"Get the ending line number.";}
a:4:{i:0;s:40:"ReflectionFunctionAbstract::getExtension";i:1;s:7:"(PHP 5)";i:2;s:76:"public ReflectionExtension ReflectionFunctionAbstract::getExtension ( void )";i:3;s:44:"Get the extension information of a function.";}
a:4:{i:0;s:45:"
ReflectionFunctionAbstract::getExtensionName";i:1;s:7:"(PHP 5)";i:2;s:67:"public string ReflectionFunctionAbstract::getExtensionName ( void )";i:3;s:24:"Get the extensions name.";}
a:4:{i:0;s:39:"ReflectionFunctionAbstract::getFileName";i:1;s:7:"(PHP 5)";i:2;s:62:"public string ReflectionFunctionAbstract::getFileName ( void )";i:3;s:48:"Gets the file name from a user-defined function.";}
a:4:{i:0;s:35:"ReflectionFunctionAbstract::getName";i:1;s:7:"(PHP 5)";i:2;s:58:"public string ReflectionFunctionAbstract::getName ( void )";i:3;s:29:"Get the name of the function.";}
a:4:{i:0;s:45:"
ReflectionFunctionAbstract::getNamespaceName";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:67:"public string ReflectionFunctionAbstract::getNamespaceName ( void )";i:3;s:50:"Get the namespace name where the class is defined.";}
a:4:{i:0;s:50:"
ReflectionFunctionAbstract::getNumberOfParameters";i:1;s:16:"(PHP 5 >= 5.0.3)";i:2;s:69:"public int ReflectionFunctionAbstract::getNumberOfParameters ( void )";i:3;s:81:"Get the number of parameters that a function defines, both optional and required.";}
a:4:{i:0;s:58:"
ReflectionFunctionAbstract::getNumberOfRequiredParameters";i:1;s:16:"(PHP 5 >= 5.0.3)";i:2;s:77:"public int ReflectionFunctionAbstract::getNumberOfRequiredParameters ( void )";i:3;s:62:"Get the number of required parameters that a function defines.";}
a:4:{i:0;s:41:"ReflectionFunctionAbstract::getParameters";i:1;s:7:"(PHP 5)";i:2;s:63:"public array ReflectionFunctionAbstract::getParameters ( void )";i:3;s:35:"Get the parameters as an array of .";}
a:4:{i:0;s:40:"ReflectionFunctionAbstract::getShortName";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:63:"public string ReflectionFunctionAbstract::getShortName ( void )";i:3;s:64:"Get the short name of the function (without the namespace part).";}
a:4:{i:0;s:40:"ReflectionFunctionAbstract::getStartLine";i:1;s:7:"(PHP 5)";i:2;s:60:"public int ReflectionFunctionAbstract::getStartLine ( void )";i:3;s:46:"Gets the starting line number of the function.";}
a:4:{i:0;s:47:"
ReflectionFunctionAbstract::getStaticVariables";i:1;s:7:"(PHP 5)";i:2;s:68:"public array ReflectionFunctionAbstract::getStaticVariables ( void )";i:3;s:25:"Get the static variables.";}
a:4:{i:0;s:39:"ReflectionFunctionAbstract::inNamespace";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:60:"public bool ReflectionFunctionAbstract::inNamespace ( void )";i:3;s:52:"Checks whether a function is defined in a namespace.";}
a:4:{i:0;s:37:"ReflectionFunctionAbstract::isClosure";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:58:"public bool ReflectionFunctionAbstract::isClosure ( void )";i:3;s:30:"Checks whether it's a closure.";}
a:4:{i:0;s:40:"ReflectionFunctionAbstract::isDeprecated";i:1;s:7:"(PHP 5)";i:2;s:61:"public bool ReflectionFunctionAbstract::isDeprecated ( void )";i:3;s:42:"Checks whether the function is deprecated.";}
a:4:{i:0;s:39:"ReflectionFunctionAbstract::isGenerator";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:60:"public bool ReflectionFunctionAbstract::isGenerator ( void )";i:3;s:0:"";}
a:4:{i:0;s:38:"ReflectionFunctionAbstract::isInternal";i:1;s:7:"(PHP 5)";i:2;s:59:"public bool ReflectionFunctionAbstract::isInternal ( void )";i:3;s:68:"Checks whether the function is internal, as opposed to user-defined.";}
a:4:{i:0;s:41:"ReflectionFunctionAbstract::isUserDefined";i:1;s:7:"(PHP 5)";i:2;s:62:"public bool ReflectionFunctionAbstract::isUserDefined ( void )";i:3;s:68:"Checks whether the function is user-defined, as opposed to internal.";}
a:4:{i:0;s:45:"
ReflectionFunctionAbstract::returnsReference";i:1;s:7:"(PHP 5)";i:2;s:65:"public bool ReflectionFunctionAbstract::returnsReference ( void )";i:3;s:48:"Checks whether the function returns a reference.";}
a:4:{i:0;s:38:"ReflectionFunctionAbstract::__toString";i:1;s:7:"(PHP 5)";i:2;s:68:"abstract public void ReflectionFunctionAbstract::__toString ( void )";i:3;s:10:"To string.";}
a:4:{i:0;s:29:"ReflectionMethod::__construct";i:1;s:7:"(PHP 5)";i:2;s:67:"public ReflectionMethod::__construct ( mixed $class, string $name )";i:3;s:18:"Constructs a new .";}
a:4:{i:0;s:24:"ReflectionMethod::export";i:1;s:7:"(PHP 5)";i:2;s:103:"public static string ReflectionMethod::export ( string $class, string $name [, bool $return = false ] )";i:3;s:27:"Exports a ReflectionMethod.";}
a:4:{i:0;s:28:"ReflectionMethod::getClosure";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:62:"public Closure ReflectionMethod::getClosure ( string $object )";i:3;s:0:"";}
a:4:{i:0;s:35:"ReflectionMethod::getDeclaringClass";i:1;s:7:"(PHP 5)";i:2;s:67:"public ReflectionClass ReflectionMethod::getDeclaringClass ( void )";i:3;s:50:"Gets the declaring class for the reflected method.";}
a:4:{i:0;s:30:"ReflectionMethod::getModifiers";i:1;s:7:"(PHP 5)";i:2;s:50:"public int ReflectionMethod::getModifiers ( void )";i:3;s:59:"Returns a bitfield of the access modifiers for this method.";}
a:4:{i:0;s:30:"ReflectionMethod::getPrototype";i:1;s:7:"(PHP 5)";i:2;s:63:"public ReflectionMethod ReflectionMethod::getPrototype ( void )";i:3;s:30:"Returns the methods prototype.";}
a:4:{i:0;s:24:"ReflectionMethod::invoke";i:1;s:7:"(PHP 5)";i:2;s:93:"public mixed ReflectionMethod::invoke ( object $object [, mixed $parameter [, mixed $... ]] )";i:3;s:27:"Invokes a reflected method.";}
a:4:{i:0;s:28:"ReflectionMethod::invokeArgs";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:73:"public mixed ReflectionMethod::invokeArgs ( object $object, array $args )";i:3;s:61:"Invokes the reflected method and pass its arguments as array.";}
a:4:{i:0;s:28:"ReflectionMethod::isAbstract";i:1;s:7:"(PHP 5)";i:2;s:49:"public bool ReflectionMethod::isAbstract ( void )";i:3;s:33:"Checks if the method is abstract.";}
a:4:{i:0;s:31:"ReflectionMethod::isConstructor";i:1;s:7:"(PHP 5)";i:2;s:52:"public bool ReflectionMethod::isConstructor ( void )";i:3;s:38:"Checks if the method is a constructor.";}
a:4:{i:0;s:30:"ReflectionMethod::isDestructor";i:1;s:7:"(PHP 5)";i:2;s:51:"public bool ReflectionMethod::isDestructor ( void )";i:3;s:37:"Checks if the method is a destructor.";}
a:4:{i:0;s:25:"ReflectionMethod::isFinal";i:1;s:7:"(PHP 5)";i:2;s:46:"public bool ReflectionMethod::isFinal ( void )";i:3;s:30:"Checks if the method is final.";}
a:4:{i:0;s:27:"ReflectionMethod::isPrivate";i:1;s:7:"(PHP 5)";i:2;s:48:"public bool ReflectionMethod::isPrivate ( void )";i:3;s:32:"Checks if the method is private.";}
a:4:{i:0;s:29:"ReflectionMethod::isProtected";i:1;s:7:"(PHP 5)";i:2;s:50:"public bool ReflectionMethod::isProtected ( void )";i:3;s:34:"Checks if the method is protected.";}
a:4:{i:0;s:26:"ReflectionMethod::isPublic";i:1;s:7:"(PHP 5)";i:2;s:47:"public bool ReflectionMethod::isPublic ( void )";i:3;s:31:"Checks if the method is public.";}
a:4:{i:0;s:26:"ReflectionMethod::isStatic";i:1;s:7:"(PHP 5)";i:2;s:47:"public bool ReflectionMethod::isStatic ( void )";i:3;s:31:"Checks if the method is static.";}
a:4:{i:0;s:31:"ReflectionMethod::setAccessible";i:1;s:16:"(PHP 5 >= 5.3.2)";i:2;s:64:"public void ReflectionMethod::setAccessible ( bool $accessible )";i:3;s:102:"Sets a method to be accessible. For example, it may allow protected and private methods to be invoked.";}
a:4:{i:0;s:28:"ReflectionMethod::__toString";i:1;s:7:"(PHP 5)";i:2;s:51:"public string ReflectionMethod::__toString ( void )";i:3;s:66:"Returns the string representation of the Reflection method object.";}
a:4:{i:0;s:29:"ReflectionObject::__construct";i:1;s:7:"(PHP 5)";i:2;s:57:"public ReflectionObject::__construct ( object $argument )";i:3;s:14:"Constructs a .";}
a:4:{i:0;s:24:"ReflectionObject::export";i:1;s:7:"(PHP 5)";i:2;s:84:"public static string ReflectionObject::export ( string $argument [, bool $return ] )";i:3;s:21:"Exports a reflection.";}
a:4:{i:0;s:31:"ReflectionParameter::allowsNull";i:1;s:7:"(PHP 5)";i:2;s:52:"public bool ReflectionParameter::allowsNull ( void )";i:3;s:37:"Checks whether the parameter allows .";}
a:4:{i:0;s:39:"ReflectionParameter::canBePassedByValue";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:60:"public bool ReflectionParameter::canBePassedByValue ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"ReflectionParameter::__clone";i:1;s:7:"(PHP 5)";i:2;s:56:"final private void ReflectionParameter::__clone ( void )";i:3;s:7:"Clones.";}
a:4:{i:0;s:32:"ReflectionParameter::__construct";i:1;s:7:"(PHP 5)";i:2;s:79:"public ReflectionParameter::__construct ( string $function, string $parameter )";i:3;s:19:"Constructs a class.";}
a:4:{i:0;s:27:"ReflectionParameter::export";i:1;s:7:"(PHP 5)";i:2;s:106:"public static string ReflectionParameter::export ( string $function, string $parameter [, bool $return ] )";i:3;s:8:"Exports.";}
a:4:{i:0;s:29:"ReflectionParameter::getClass";i:1;s:7:"(PHP 5)";i:2;s:61:"public ReflectionClass ReflectionParameter::getClass ( void )";i:3;s:13:"Gets a class.";}
a:4:{i:0;s:38:"ReflectionParameter::getDeclaringClass";i:1;s:7:"(PHP 5)";i:2;s:70:"public ReflectionClass ReflectionParameter::getDeclaringClass ( void )";i:3;s:25:"Gets the declaring class.";}
a:4:{i:0;s:41:"ReflectionParameter::getDeclaringFunction";i:1;s:16:"(PHP 5 >= 5.2.3)";i:2;s:76:"public ReflectionFunction ReflectionParameter::getDeclaringFunction ( void )";i:3;s:28:"Gets the declaring function.";}
a:4:{i:0;s:36:"ReflectionParameter::getDefaultValue";i:1;s:16:"(PHP 5 >= 5.0.3)";i:2;s:58:"public mixed ReflectionParameter::getDefaultValue ( void )";i:3;s:129:"Gets the default value of the parameter for a user-defined function or method. If the parameter is not optional a will be thrown.";}
a:4:{i:0;s:49:"
ReflectionParameter::getDefaultValueConstantName";i:1;s:16:"(PHP 5 >= 5.4.6)";i:2;s:71:"public string ReflectionParameter::getDefaultValueConstantName ( void )";i:3;s:0:"";}
a:4:{i:0;s:28:"ReflectionParameter::getName";i:1;s:7:"(PHP 5)";i:2;s:51:"public string ReflectionParameter::getName ( void )";i:3;s:31:"Gets the name of the parameter.";}
a:4:{i:0;s:32:"ReflectionParameter::getPosition";i:1;s:16:"(PHP 5 >= 5.2.3)";i:2;s:52:"public int ReflectionParameter::getPosition ( void )";i:3;s:35:"Gets the position of the parameter.";}
a:4:{i:0;s:28:"ReflectionParameter::isArray";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:49:"public bool ReflectionParameter::isArray ( void )";i:3;s:41:"Checks if the parameter expects an array.";}
a:4:{i:0;s:31:"ReflectionParameter::isCallable";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:52:"public bool ReflectionParameter::isCallable ( void )";i:3;s:0:"";}
a:4:{i:0;s:45:"
ReflectionParameter::isDefaultValueAvailable";i:1;s:16:"(PHP 5 >= 5.0.3)";i:2;s:65:"public bool ReflectionParameter::isDefaultValueAvailable ( void )";i:3;s:57:"Checks if a default value for the parameter is available.";}
a:4:{i:0;s:44:"
ReflectionParameter::isDefaultValueConstant";i:1;s:16:"(PHP 5 >= 5.4.6)";i:2;s:64:"public bool ReflectionParameter::isDefaultValueConstant ( void )";i:3;s:0:"";}
a:4:{i:0;s:31:"ReflectionParameter::isOptional";i:1;s:16:"(PHP 5 >= 5.0.3)";i:2;s:52:"public bool ReflectionParameter::isOptional ( void )";i:3;s:36:"Checks if the parameter is optional.";}
a:4:{i:0;s:40:"ReflectionParameter::isPassedByReference";i:1;s:7:"(PHP 5)";i:2;s:61:"public bool ReflectionParameter::isPassedByReference ( void )";i:3;s:50:"Checks if the parameter is passed in by reference.";}
a:4:{i:0;s:31:"ReflectionParameter::__toString";i:1;s:7:"(PHP 5)";i:2;s:54:"public string ReflectionParameter::__toString ( void )";i:3;s:10:"To string.";}
a:4:{i:0;s:27:"ReflectionProperty::__clone";i:1;s:7:"(PHP 5)";i:2;s:55:"final private void ReflectionProperty::__clone ( void )";i:3;s:7:"Clones.";}
a:4:{i:0;s:31:"ReflectionProperty::__construct";i:1;s:7:"(PHP 5)";i:2;s:69:"public ReflectionProperty::__construct ( mixed $class, string $name )";i:3;s:0:"";}
a:4:{i:0;s:26:"ReflectionProperty::export";i:1;s:7:"(PHP 5)";i:2;s:96:"public static string ReflectionProperty::export ( mixed $class, string $name [, bool $return ] )";i:3;s:21:"Exports a reflection.";}
a:4:{i:0;s:37:"ReflectionProperty::getDeclaringClass";i:1;s:7:"(PHP 5)";i:2;s:69:"public ReflectionClass ReflectionProperty::getDeclaringClass ( void )";i:3;s:25:"Gets the declaring class.";}
a:4:{i:0;s:33:"ReflectionProperty::getDocComment";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:56:"public string ReflectionProperty::getDocComment ( void )";i:3;s:21:"Gets the doc comment.";}
a:4:{i:0;s:32:"ReflectionProperty::getModifiers";i:1;s:7:"(PHP 5)";i:2;s:52:"public int ReflectionProperty::getModifiers ( void )";i:3;s:19:"Gets the modifiers.";}
a:4:{i:0;s:27:"ReflectionProperty::getName";i:1;s:7:"(PHP 5)";i:2;s:50:"public string ReflectionProperty::getName ( void )";i:3;s:25:"Gets the properties name.";}
a:4:{i:0;s:28:"ReflectionProperty::getValue";i:1;s:7:"(PHP 5)";i:2;s:60:"public mixed ReflectionProperty::getValue ( object $object )";i:3;s:26:"Gets the properties value.";}
a:4:{i:0;s:29:"ReflectionProperty::isDefault";i:1;s:7:"(PHP 5)";i:2;s:50:"public bool ReflectionProperty::isDefault ( void )";i:3;s:43:"Checks whether the property is the default.";}
a:4:{i:0;s:29:"ReflectionProperty::isPrivate";i:1;s:7:"(PHP 5)";i:2;s:50:"public bool ReflectionProperty::isPrivate ( void )";i:3;s:39:"Checks whether the property is private.";}
a:4:{i:0;s:31:"ReflectionProperty::isProtected";i:1;s:7:"(PHP 5)";i:2;s:52:"public bool ReflectionProperty::isProtected ( void )";i:3;s:41:"Checks whether the property is protected.";}
a:4:{i:0;s:28:"ReflectionProperty::isPublic";i:1;s:7:"(PHP 5)";i:2;s:49:"public bool ReflectionProperty::isPublic ( void )";i:3;s:38:"Checks whether the property is public.";}
a:4:{i:0;s:28:"ReflectionProperty::isStatic";i:1;s:7:"(PHP 5)";i:2;s:49:"public bool ReflectionProperty::isStatic ( void )";i:3;s:38:"Checks whether the property is static.";}
a:4:{i:0;s:33:"ReflectionProperty::setAccessible";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:66:"public void ReflectionProperty::setAccessible ( bool $accessible )";i:3;s:108:"Sets a property to be accessible. For example, it may allow protected and private properties to be accessed.";}
a:4:{i:0;s:28:"ReflectionProperty::setValue";i:1;s:7:"(PHP 5)";i:2;s:73:"public void ReflectionProperty::setValue ( object $object, mixed $value )";i:3;s:36:"Sets (changes) the property's value.";}
a:4:{i:0;s:30:"ReflectionProperty::__toString";i:1;s:7:"(PHP 5)";i:2;s:53:"public string ReflectionProperty::__toString ( void )";i:3;s:10:"To string.";}
a:4:{i:0;s:17:"Reflector::export";i:1;s:7:"(PHP 5)";i:2;s:56:"abstract public static string Reflector::export ( void )";i:3;s:8:"Exports.";}
a:4:{i:0;s:21:"Reflector::__toString";i:1;s:7:"(PHP 5)";i:2;s:53:"abstract public string Reflector::__toString ( void )";i:3;s:10:"To string.";}
a:4:{i:0;s:7:"boolval";i:1;s:16:"(PHP 5 >= 5.5.0)";i:2;s:30:"boolean boolval ( mixed $var )";i:3;s:22:"Returns the value of .";}
a:4:{i:0;s:15:"debug_zval_dump";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:56:"void debug_zval_dump ( mixed $variable [, mixed $... ] )";i:3;s:66:"Dumps a string representation of an internal zend value to output.";}
a:4:{i:0;s:9:"doubleval";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:5:"empty";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:25:"bool empty ( mixed $var )";i:3;s:192:"Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its value equals . does not generate a warning if the variable does not exist.";}
a:4:{i:0;s:8:"floatval";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:29:"float floatval ( mixed $var )";i:3;s:19:"Gets the value of .";}
a:4:{i:0;s:16:"get_defined_vars";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:31:"array get_defined_vars ( void )";i:3;s:178:"This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that is called.";}
a:4:{i:0;s:17:"get_resource_type";i:1;s:23:"(PHP 4 >= 4.0.2, PHP 5)";i:2;s:45:"string get_resource_type ( resource $handle )";i:3;s:50:"This function gets the type of the given resource.";}
a:4:{i:0;s:7:"gettype";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"string gettype ( mixed $var )";i:3;s:72:"Returns the type of the PHP variable . For type checking, use functions.";}
a:4:{i:0;s:24:"import_request_variables";i:1;s:31:"(PHP 4 >= 4.1.0, PHP 5 < 5.4.0)";i:2;s:67:"bool import_request_variables ( string $types [, string $prefix ] )";i:3;s:144:"Imports GET/POST/Cookie variables into the global scope. It is useful if you disabled, but would like to see some variables in the global scope.";}
a:4:{i:0;s:6:"intval";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:45:"int intval ( mixed $var [, int $base = 10 ] )";i:3;s:168:"Returns the value of, using the specified for the conversion (the default is base 10). should not be used on objects, as doing so will emit an level error and return 1.";}
a:4:{i:0;s:8:"is_array";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"bool is_array ( mixed $var )";i:3;s:45:"Finds whether the given variable is an array.";}
a:4:{i:0;s:7:"is_bool";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:27:"bool is_bool ( mixed $var )";i:3;s:46:"Finds whether the given variable is a boolean.";}
a:4:{i:0;s:11:"is_callable";i:1;s:23:"(PHP 4 >= 4.0.6, PHP 5)";i:2;s:93:"bool is_callable ( callable $name [, bool $syntax_only = false [, string &$callable_name ]] )";i:3;s:215:"Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.";}
a:4:{i:0;s:9:"is_double";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:8:"is_float";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"bool is_float ( mixed $var )";i:3;s:54:"Finds whether the type of the given variable is float.";}
a:4:{i:0;s:6:"is_int";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:26:"bool is_int ( mixed $var )";i:3;s:56:"Finds whether the type of the given variable is integer.";}
a:4:{i:0;s:10:"is_integer";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:7:"is_long";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:7:"is_null";i:1;s:23:"(PHP 4 >= 4.0.4, PHP 5)";i:2;s:27:"bool is_null ( mixed $var )";i:3;s:37:"Finds whether the given variable is .";}
a:4:{i:0;s:10:"is_numeric";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:30:"bool is_numeric ( mixed $var )";i:3;s:320:"Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus is a valid numeric value. Hexadecimal (e.g. ), Binary (e.g. ), Octal (e.g. ) notation is allowed too but only without sign, decimal and exponential part.";}
a:4:{i:0;s:9:"is_object";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"bool is_object ( mixed $var )";i:3;s:46:"Finds whether the given variable is an object.";}
a:4:{i:0;s:7:"is_real";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"is_resource";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:31:"bool is_resource ( mixed $var )";i:3;s:47:"Finds whether the given variable is a resource.";}
a:4:{i:0;s:9:"is_scalar";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:29:"bool is_scalar ( mixed $var )";i:3;s:45:"Finds whether the given variable is a scalar.";}
a:4:{i:0;s:9:"is_string";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:29:"bool is_string ( mixed $var )";i:3;s:48:"Finds whether the type given variable is string.";}
a:4:{i:0;s:5:"isset";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"bool isset ( mixed $var [, mixed $... ] )";i:3;s:43:"Determine if a variable is set and is not .";}
a:4:{i:0;s:7:"print_r";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"mixed print_r ( mixed $expression [, bool $return = false ] )";i:3;s:73:"displays information about a variable in a way that's readable by humans.";}
a:4:{i:0;s:9:"serialize";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"string serialize ( mixed $value )";i:3;s:47:"Generates a storable representation of a value.";}
a:4:{i:0;s:7:"settype";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:42:"bool settype ( mixed &$var, string $type )";i:3;s:29:"Set the type of variable to .";}
a:4:{i:0;s:6:"strval";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:28:"string strval ( mixed $var )";i:3;s:106:"Get the string value of a variable. See the documentation on for more information on converting to string.";}
a:4:{i:0;s:11:"unserialize";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:33:"mixed unserialize ( string $str )";i:3;s:73:"takes a single serialized variable and converts it back into a PHP value.";}
a:4:{i:0;s:5:"unset";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"void unset ( mixed $var [, mixed $... ] )";i:3;s:33:"destroys the specified variables.";}
a:4:{i:0;s:8:"var_dump";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:51:"void var_dump ( mixed $expression [, mixed $... ] )";i:3;s:193:"This function displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure.";}
a:4:{i:0;s:10:"var_export";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:64:"mixed var_export ( mixed $expression [, bool $return = false ] )";i:3;s:137:"gets structured information about the given variable. It is similar to with one exception: the returned representation is valid PHP code.";}
a:4:{i:0;s:13:"oauth_get_sbs";i:1;s:21:"(PECL OAuth >=0.99.7)";i:2;s:88:"string oauth_get_sbs ( string $http_method, string $uri [, array $request_parameters ] )";i:3;s:58:"Generates a Signature Base String according to pecl/oauth.";}
a:4:{i:0;s:15:"oauth_urlencode";i:1;s:21:"(PECL OAuth >=0.99.2)";i:2;s:38:"string oauth_urlencode ( string $uri )";i:3;s:18:"Encodes a URI to .";}
a:4:{i:0;s:18:"OAuth::__construct";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:156:"public OAuth::__construct ( string $consumer_key, string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )";i:3;s:26:"Creates a new OAuth object";}
a:4:{i:0;s:17:"OAuth::__destruct";i:1;s:22:"(PECL OAuth >= 0.99.9)";i:2;s:38:"public void OAuth::__destruct ( void )";i:3;s:15:"The destructor.";}
a:4:{i:0;s:19:"OAuth::disableDebug";i:1;s:22:"(PECL OAuth >= 0.99.3)";i:2;s:40:"public bool OAuth::disableDebug ( void )";i:3;s:124:"Turns off verbose request information (off by default). Alternatively, the property can be set to a value to turn debug off.";}
a:4:{i:0;s:23:"OAuth::disableRedirects";i:1;s:22:"(PECL OAuth >= 0.99.9)";i:2;s:44:"public bool OAuth::disableRedirects ( void )";i:3;s:105:"Disable redirects from being followed automatically, thus allowing the request to be manually redirected.";}
a:4:{i:0;s:23:"OAuth::disableSSLChecks";i:1;s:22:"(PECL OAuth >= 0.99.5)";i:2;s:44:"public bool OAuth::disableSSLChecks ( void )";i:3;s:162:"Turns off the usual SSL peer certificate and host checks, this is not for production environments. Alternatively, the member can be set to to turn SSL checks off.";}
a:4:{i:0;s:18:"OAuth::enableDebug";i:1;s:22:"(PECL OAuth >= 0.99.3)";i:2;s:39:"public bool OAuth::enableDebug ( void )";i:3;s:176:"Turns on verbose request information useful for debugging, the debug information is stored in the member. Alternatively, the member can be set to a non- value to turn debug on.";}
a:4:{i:0;s:22:"OAuth::enableRedirects";i:1;s:22:"(PECL OAuth >= 0.99.9)";i:2;s:43:"public bool OAuth::enableRedirects ( void )";i:3;s:69:"Follow and sign redirects automatically, which is enabled by default.";}
a:4:{i:0;s:22:"OAuth::enableSSLChecks";i:1;s:22:"(PECL OAuth >= 0.99.5)";i:2;s:43:"public bool OAuth::enableSSLChecks ( void )";i:3;s:154:"Turns on the usual SSL peer certificate and host checks (enabled by default). Alternatively, the member can be set to a non- value to turn SSL checks off.";}
a:4:{i:0;s:12:"OAuth::fetch";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:137:"public mixed OAuth::fetch ( string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers ]]] )";i:3;s:17:"Fetch a resource.";}
a:4:{i:0;s:24:"OAuth::generateSignature";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:104:"public string OAuth::generateSignature ( string $http_method, string $url [, mixed $extra_parameters ] )";i:3;s:90:"Generate a signature based on the final HTTP method, URL and a string/array of parameters.";}
a:4:{i:0;s:21:"OAuth::getAccessToken";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:123:"public array OAuth::getAccessToken ( string $access_token_url [, string $auth_session_handle [, string $verifier_token ]] )";i:3;s:95:"Fetch an access token, secret and any additional response parameters from the service provider.";}
a:4:{i:0;s:16:"OAuth::getCAPath";i:1;s:22:"(PECL OAuth >= 0.99.8)";i:2;s:38:"public array OAuth::getCAPath ( void )";i:3;s:91:"Gets the Certificate Authority information, which includes the ca_path and ca_info set by .";}
a:4:{i:0;s:22:"OAuth::getLastResponse";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:45:"public string OAuth::getLastResponse ( void )";i:3;s:48:"Get the raw response of the most recent request.";}
a:4:{i:0;s:29:"OAuth::getLastResponseHeaders";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:52:"public string OAuth::getLastResponseHeaders ( void )";i:3;s:30:"Get headers for last response.";}
a:4:{i:0;s:26:"OAuth::getLastResponseInfo";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:48:"public array OAuth::getLastResponseInfo ( void )";i:3;s:45:"Get HTTP information about the last response.";}
a:4:{i:0;s:23:"OAuth::getRequestHeader";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:103:"public string OAuth::getRequestHeader ( string $http_method, string $url [, mixed $extra_parameters ] )";i:3;s:107:"Generate OAuth header string signature based on the final HTTP method, URL and a string/array of parameters";}
a:4:{i:0;s:22:"OAuth::getRequestToken";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:91:"public array OAuth::getRequestToken ( string $request_token_url [, string $callback_url ] )";i:3;s:95:"Fetch a request token, secret and any additional response parameters from the service provider.";}
a:4:{i:0;s:18:"OAuth::setAuthType";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:50:"public mixed OAuth::setAuthType ( int $auth_type )";i:3;s:48:"Set where the OAuth parameters should be passed.";}
a:4:{i:0;s:16:"OAuth::setCAPath";i:1;s:22:"(PECL OAuth >= 0.99.8)";i:2;s:72:"public mixed OAuth::setCAPath ([ string $ca_path [, string $ca_info ]] )";i:3;s:58:"Sets the Certificate Authority (), both for path and info.";}
a:4:{i:0;s:15:"OAuth::setNonce";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:46:"public mixed OAuth::setNonce ( string $nonce )";i:3;s:43:"Sets the nonce for all subsequent requests.";}
a:4:{i:0;s:23:"OAuth::setRequestEngine";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:54:"public void OAuth::setRequestEngine ( int $reqengine )";i:3;s:64:"Sets the Request Engine, that will be sending the HTTP requests.";}
a:4:{i:0;s:24:"OAuth::setRSACertificate";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:54:"public mixed OAuth::setRSACertificate ( string $cert )";i:3;s:21:"Sets the certificate.";}
a:4:{i:0;s:19:"OAuth::setSSLChecks";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:49:"public bool OAuth::setSSLChecks ( int $sslcheck )";i:3;s:39:"Tweak specific SSL checks for requests.";}
a:4:{i:0;s:19:"OAuth::setTimestamp";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:54:"public mixed OAuth::setTimestamp ( string $timestamp )";i:3;s:49:"Sets the OAuth timestamp for subsequent requests.";}
a:4:{i:0;s:15:"OAuth::setToken";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:67:"public bool OAuth::setToken ( string $token, string $token_secret )";i:3;s:49:"Set the token and secret for subsequent requests.";}
a:4:{i:0;s:17:"OAuth::setVersion";i:1;s:22:"(PECL OAuth >= 0.99.1)";i:2;s:49:"public bool OAuth::setVersion ( string $version )";i:3;s:46:"Sets the OAuth version for subsequent requests";}
a:4:{i:0;s:35:"OAuthProvider::addRequiredParameter";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:76:"final public bool OAuthProvider::addRequiredParameter ( string $req_params )";i:3;s:39:"Add required oauth provider parameters.";}
a:4:{i:0;s:34:"OAuthProvider::callconsumerHandler";i:1;s:56:"(No version information available, might only be
in SVN)";i:2;s:55:"public void OAuthProvider::callconsumerHandler ( void )";i:3;s:76:"Calls the registered consumer handler callback function, which is set with .";}
a:4:{i:0;s:40:"OAuthProvider::callTimestampNonceHandler";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:61:"public void OAuthProvider::callTimestampNonceHandler ( void )";i:3;s:77:"Calls the registered timestamp handler callback function, which is set with .";}
a:4:{i:0;s:31:"OAuthProvider::calltokenHandler";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:52:"public void OAuthProvider::calltokenHandler ( void )";i:3;s:73:"Calls the registered token handler callback function, which is set with .";}
a:4:{i:0;s:32:"OAuthProvider::checkOAuthRequest";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:82:"public void OAuthProvider::checkOAuthRequest ([ string $uri [, string $method ]] )";i:3;s:24:"Checks an OAuth request.";}
a:4:{i:0;s:26:"OAuthProvider::__construct";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:60:"public OAuthProvider::__construct ([ array $params_array ] )";i:3;s:17:"Initiates a new .";}
a:4:{i:0;s:30:"OAuthProvider::consumerHandler";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:74:"public void OAuthProvider::consumerHandler ( callable $callback_function )";i:3;s:69:"Sets the consumer handler callback, which will later be called with .";}
a:4:{i:0;s:28:"OAuthProvider::generateToken";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:95:"final public static string OAuthProvider::generateToken ( int $size [, bool $strong = false ] )";i:3;s:35:"Generates a of pseudo-random bytes.";}
a:4:{i:0;s:32:"OAuthProvider::is2LeggedEndpoint";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:68:"public void OAuthProvider::is2LeggedEndpoint ( mixed $params_array )";i:3;s:67:"The 2-legged flow, or request signing. It does not require a token.";}
a:4:{i:0;s:37:"OAuthProvider::isRequestTokenEndpoint";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:84:"public void OAuthProvider::isRequestTokenEndpoint ( bool $will_issue_request_token )";i:3;s:0:"";}
a:4:{i:0;s:38:"OAuthProvider::removeRequiredParameter";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:79:"final public bool OAuthProvider::removeRequiredParameter ( string $req_params )";i:3;s:29:"Removes a required parameter.";}
a:4:{i:0;s:28:"OAuthProvider::reportProblem";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:113:"final public static string OAuthProvider::reportProblem ( string $oauthexception [, bool $send_headers = true ] )";i:3;s:70:"Pass in a problem as an, with possible problems listed in the section.";}
a:4:{i:0;s:23:"OAuthProvider::setParam";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:85:"final public bool OAuthProvider::setParam ( string $param_key [, mixed $param_val ] )";i:3;s:17:"Sets a parameter.";}
a:4:{i:0;s:34:"OAuthProvider::setRequestTokenPath";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:69:"final public bool OAuthProvider::setRequestTokenPath ( string $path )";i:3;s:29:"Sets the request tokens path.";}
a:4:{i:0;s:36:"OAuthProvider::timestampNonceHandler";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:80:"public void OAuthProvider::timestampNonceHandler ( callable $callback_function )";i:3;s:139:"Sets the timestamp nonce handler callback, which will later be called with . Errors related to timestamp/nonce are thrown to this callback.";}
a:4:{i:0;s:27:"OAuthProvider::tokenHandler";i:1;s:21:"(PECL OAuth >= 1.0.0)";i:2;s:71:"public void OAuthProvider::tokenHandler ( callable $callback_function )";i:3;s:66:"Sets the token handler callback, which will later be called with .";}
a:4:{i:0;s:21:"SCA::createDataObject";i:1;s:19:"(PECL SDO >= 0.5.0)";i:2;s:86:"SDO_DataObject SCA::createDataObject ( string $type_namespace_uri, string $type_name )";i:3;s:281:"This method is used inside an SCA component that needs to create an SDO to return. The parameters are the desired SDO's namespace URI and type name. The namespace and type must be defined in one of the schema files which are specified on the @types annotation within the component.";}
a:4:{i:0;s:15:"SCA::getService";i:1;s:19:"(PECL SDO >= 0.5.0)";i:2;s:79:"mixed SCA::getService ( string $target [, string $binding [, array $config ]] )";i:3;s:244:"Examine the target and initialize and return a proxy of the appropriate sort. If the target is for a local PHP component the returned proxy will be an SCA_LocalProxy. If the target is for a WSDL file, the returned proxy will be a SCA_SoapProxy.";}
a:4:{i:0;s:32:"SCA_LocalProxy::createDataObject";i:1;s:19:"(PECL SDO >= 0.5.0)";i:2;s:97:"SDO_DataObject SCA_LocalProxy::createDataObject ( string $type_namespace_uri, string $type_name )";i:3;s:476:"This method is used inside either an ordinary PHP script or an SCA component that needs to create an SDO to pass to a local service. The parameters are the desired SDO's namespace URI and type name. The namespace and type must be defined in the interface of the component that is to be called, so the namespace and type must be defined in one of the schema files which are specified on the @types annotation within the component for which the SCA_LocalProxy object is a proxy.";}
a:4:{i:0;s:31:"SCA_SoapProxy::createDataObject";i:1;s:19:"(PECL SDO >= 0.5.0)";i:2;s:96:"SDO_DataObject SCA_SoapProxy::createDataObject ( string $type_namespace_uri, string $type_name )";i:3;s:596:"This method is used inside either an ordinary PHP script or an SCA component that needs to create an SDO to pass to a web service. The parameters are the desired SDO's namespace URI and type name. The namespace and type must be defined in the interface of the component that is to be called, so the namespace and type must be defined within the WSDL for the web service. If the web service is also an SCA component then the types will have been defined within one of the schema files which are specified on the @types annotation within the component for which the SCA_SoapProxy object is a proxy.";}
a:4:{i:0;s:13:"is_soap_fault";i:1;s:9:"(Unknown)";i:2;s:36:"bool is_soap_fault ( mixed $object )";i:3;s:298:"This function is useful to check if the SOAP call failed, but without using exceptions. To use it, create a object with the option set to zero or . In this case, the SOAP method will return a special object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails).";}
a:4:{i:0;s:22:"use_soap_error_handler";i:1;s:9:"(Unknown)";i:2;s:55:"bool use_soap_error_handler ([ bool $handler = true ] )";i:3;s:314:"This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value. If set to, details of errors in a application will be sent to the client as a SOAP fault message. If, the standard PHP error handler is used. The default is to use the standard PHP error handler.";}
a:4:{i:0;s:18:"SoapClient::__call";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:76:"public mixed SoapClient::__call ( string $function_name, string $arguments )";i:3;s:188:"Calling this method directly is deprecated. Usually, SOAP functions can be called as methods of the object; in situations where this is not possible or additional options are needed, use .";}
a:4:{i:0;s:23:"SoapClient::__construct";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:65:"public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:23:"SoapClient::__doRequest";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:127:"public string SoapClient::__doRequest ( string $request, string $location, string $action, int $version [, int $one_way = 0 ] )";i:3;s:32:"Performs SOAP request over HTTP.";}
a:4:{i:0;s:26:"SoapClient::__getFunctions";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:48:"public array SoapClient::__getFunctions ( void )";i:3;s:72:"Returns an array of functions described in the WSDL for the Web service.";}
a:4:{i:0;s:28:"SoapClient::__getLastRequest";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:51:"public string SoapClient::__getLastRequest ( void )";i:3;s:46:"Returns the XML sent in the last SOAP request.";}
a:4:{i:0;s:35:"SoapClient::__getLastRequestHeaders";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:58:"public string SoapClient::__getLastRequestHeaders ( void )";i:3;s:47:"Returns the SOAP headers from the last request.";}
a:4:{i:0;s:29:"SoapClient::__getLastResponse";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:52:"public string SoapClient::__getLastResponse ( void )";i:3;s:51:"Returns the XML received in the last SOAP response.";}
a:4:{i:0;s:36:"SoapClient::__getLastResponseHeaders";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:59:"public string SoapClient::__getLastResponseHeaders ( void )";i:3;s:48:"Returns the SOAP headers from the last response.";}
a:4:{i:0;s:22:"SoapClient::__getTypes";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:44:"public array SoapClient::__getTypes ( void )";i:3;s:68:"Returns an array of types described in the WSDL for the Web service.";}
a:4:{i:0;s:23:"SoapClient::__setCookie";i:1;s:16:"(PHP 5 >= 5.0.4)";i:2;s:71:"public void SoapClient::__setCookie ( string $name [, string $value ] )";i:3;s:57:"Defines a cookie to be sent along with the SOAP requests.";}
a:4:{i:0;s:25:"SoapClient::__setLocation";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:67:"public string SoapClient::__setLocation ([ string $new_location ] )";i:3;s:148:"Sets the endpoint URL that will be touched by following SOAP requests. This is equivalent to specifying the option when constructing the SoapClient.";}
a:4:{i:0;s:28:"SoapClient::__setSoapHeaders";i:1;s:16:"(PHP 5 >= 5.0.5)";i:2;s:66:"public bool SoapClient::__setSoapHeaders ([ mixed $soapheaders ] )";i:3;s:56:"Defines headers to be sent along with the SOAP requests.";}
a:4:{i:0;s:22:"SoapClient::__soapCall";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:151:"public mixed SoapClient::__soapCall ( string $function_name, array $arguments [, array $options [, mixed $input_headers [, array &$output_headers ]]] )";i:3;s:272:"This is a low level API function that is used to make a SOAP call. Usually, in WSDL mode, SOAP functions can be called as methods of the object. This method is useful in non-WSDL mode when is unknown, differs from the default or when sending and/or receiving SOAP Headers.";}
a:4:{i:0;s:22:"SoapClient::SoapClient";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:65:"public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )";i:3;s:44:"This constructor creates objects in or mode.";}
a:4:{i:0;s:23:"SoapServer::addFunction";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:56:"public void SoapServer::addFunction ( mixed $functions )";i:3;s:48:"Exports one or more functions for remote clients";}
a:4:{i:0;s:25:"SoapServer::addSoapHeader";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:60:"public void SoapServer::addSoapHeader ( SoapHeader $object )";i:3;s:75:"Adds a SOAP header to be returned with the response to the current request.";}
a:4:{i:0;s:23:"SoapServer::__construct";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:66:"public SoapServer::__construct ( mixed $wsdl [, array $options ] )";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:17:"SoapServer::fault";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:118:"public void SoapServer::fault ( string $code, string $string [, string $actor [, string $details [, string $name ]]] )";i:3;s:74:"Sends a response to the client of the current request indicating an error.";}
a:4:{i:0;s:24:"SoapServer::getFunctions";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:46:"public array SoapServer::getFunctions ( void )";i:3;s:125:"Returns a list of the defined functions in the SoapServer object. This method returns the list of all functions added by or .";}
a:4:{i:0;s:18:"SoapServer::handle";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:58:"public void SoapServer::handle ([ string $soap_request ] )";i:3;s:79:"Processes a SOAP request, calls necessary functions, and sends a response back.";}
a:4:{i:0;s:20:"SoapServer::setClass";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:87:"public void SoapServer::setClass ( string $class_name [, mixed $args [, mixed $... ]] )";i:3;s:41:"Exports all methods from specified class.";}
a:4:{i:0;s:21:"SoapServer::setObject";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:52:"public void SoapServer::setObject ( object $object )";i:3;s:94:"This sets a specific object as the handler for SOAP requests, rather than just a class as in .";}
a:4:{i:0;s:26:"SoapServer::setPersistence";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:52:"public void SoapServer::setPersistence ( int $mode )";i:3;s:257:"This function allows changing the persistence state of a SoapServer object between requests. This function allows saving data between requests utilizing PHP sessions. This method only has an affect on a SoapServer after it has exported functions utilizing .";}
a:4:{i:0;s:22:"SoapServer::SoapServer";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:65:"public SoapServer::SoapServer ( mixed $wsdl [, array $options ] )";i:3;s:73:"This constructor allows the creation of objects in WSDL or non-WSDL mode.";}
a:4:{i:0;s:22:"SoapFault::__construct";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:154:"SoapFault::__construct ( string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:20:"SoapFault::SoapFault";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:152:"SoapFault::SoapFault ( string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )";i:3;s:115:"This class is used to send SOAP fault responses from the PHP handler., , and are standard elements of a SOAP Fault.";}
a:4:{i:0;s:21:"SoapFault::__toString";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:44:"public string SoapFault::__toString ( void )";i:3;s:49:"Returns a string representation of the SoapFault.";}
a:4:{i:0;s:23:"SoapHeader::__construct";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:119:"SoapHeader::__construct ( string $namespace, string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:22:"SoapHeader::SoapHeader";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:126:"SoapHeader::SoapHeader ( string $namespace, string $name [, mixed $data [, bool $mustunderstand = false [, string $actor ]]] )";i:3;s:35:"Constructs a new SoapHeader object.";}
a:4:{i:0;s:22:"SoapParam::__construct";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:52:"SoapParam::__construct ( mixed $data, string $name )";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:20:"SoapParam::SoapParam";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:50:"SoapParam::SoapParam ( mixed $data, string $name )";i:3;s:24:"Constructs a new object.";}
a:4:{i:0;s:20:"SoapVar::__construct";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:154:"SoapVar::__construct ( string $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )";i:3;s:29:"This function is an alias of:";}
a:4:{i:0;s:16:"SoapVar::SoapVar";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:149:"SoapVar::SoapVar ( mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )";i:3;s:24:"Constructs a new object.";}
a:4:{i:0;s:21:"xmlrpc_decode_request";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:82:"mixed xmlrpc_decode_request ( string $xml, string &$method [, string $encoding ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"xmlrpc_decode";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:72:"mixed xmlrpc_decode ( string $xml [, string $encoding = "iso-8859-1" ] )";i:3;s:0:"";}
a:4:{i:0;s:21:"xmlrpc_encode_request";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:89:"string xmlrpc_encode_request ( string $method, mixed $params [, array $output_options ] )";i:3;s:0:"";}
a:4:{i:0;s:13:"xmlrpc_encode";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:37:"string xmlrpc_encode ( mixed $value )";i:3;s:0:"";}
a:4:{i:0;s:15:"xmlrpc_get_type";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:39:"string xmlrpc_get_type ( mixed $value )";i:3;s:67:"This function is especially useful for base64 and datetime strings.";}
a:4:{i:0;s:15:"xmlrpc_is_fault";i:1;s:23:"(PHP 4 >= 4.3.0, PHP 5)";i:2;s:35:"bool xmlrpc_is_fault ( array $arg )";i:3;s:0:"";}
a:4:{i:0;s:32:"xmlrpc_parse_method_descriptions";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:54:"array xmlrpc_parse_method_descriptions ( string $xml )";i:3;s:0:"";}
a:4:{i:0;s:36:"xmlrpc_server_add_introspection_data";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:74:"int xmlrpc_server_add_introspection_data ( resource $server, array $desc )";i:3;s:0:"";}
a:4:{i:0;s:25:"xmlrpc_server_call_method";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:111:"string xmlrpc_server_call_method ( resource $server, string $xml, mixed $user_data [, array $output_options ] )";i:3;s:0:"";}
a:4:{i:0;s:20:"xmlrpc_server_create";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:38:"resource xmlrpc_server_create ( void )";i:3;s:0:"";}
a:4:{i:0;s:21:"xmlrpc_server_destroy";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:46:"int xmlrpc_server_destroy ( resource $server )";i:3;s:0:"";}
a:4:{i:0;s:46:"
xmlrpc_server_register_introspection_callback";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:89:"bool xmlrpc_server_register_introspection_callback ( resource $server, string $function )";i:3;s:0:"";}
a:4:{i:0;s:29:"xmlrpc_server_register_method";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:94:"bool xmlrpc_server_register_method ( resource $server, string $method_name, string $function )";i:3;s:0:"";}
a:4:{i:0;s:15:"xmlrpc_set_type";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:53:"bool xmlrpc_set_type ( string &$value, string $type )";i:3;s:61:"Sets xmlrpc type, base64 or datetime, for a PHP string value.";}
a:4:{i:0;s:11:"dotnet_load";i:1;s:7:"(PHP 4)";i:2;s:86:"int dotnet_load ( string $assembly_name [, string $datatype_name [, int $codepage ]] )";i:3;s:0:"";}
a:4:{i:0;s:10:"com_addref";i:1;s:16:"(PHP 4 >= 4.1.0)";i:2;s:24:"void com_addref ( void )";i:3;s:43:"Increases the components reference counter.";}
a:4:{i:0;s:15:"com_create_guid";i:1;s:7:"(PHP 5)";i:2;s:31:"string com_create_guid ( void )";i:3;s:46:"Generates a Globally Unique Identifier (GUID).";}
a:4:{i:0;s:14:"com_event_sink";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:88:"bool com_event_sink ( variant $comobject, object $sinkobject [, mixed $sinkinterface ] )";i:3;s:63:"Instructs COM to sink events generated by into the PHP object .";}
a:4:{i:0;s:21:"com_get_active_object";i:1;s:7:"(PHP 5)";i:2;s:68:"variant com_get_active_object ( string $progid [, int $code_page ] )";i:3;s:351:"is similar to creating a new instance of a object, except that it will only return an object to your script if the object is already running. OLE applications use something known as the "" to allow well-known applications to be launched only once; this function exposes the COM library function GetActiveObject() to get a handle on a running instance.";}
a:4:{i:0;s:7:"com_get";i:1;s:7:"(PHP 4)";i:2;s:124:"Example #1 OO syntax <?php//Â doÂ this $varÂ =Â $obj->property;//Â insteadÂ ofÂ this:$varÂ =Â com_get($obj,Â 'property'); ?>";i:3;s:38:"Deprecated, use the OO syntax instead.";}
a:4:{i:0;s:10:"com_invoke";i:1;s:7:"(PHP 4)";i:2;s:96:"mixed com_invoke ( resource $com_object, string $function_name [, mixed $function_parameters ] )";i:3;s:171:"invokes the method named of the COM component referenced by . returns on error, returns the 's return value on success. All the extra parameters are passed to the method .";}
a:4:{i:0;s:10:"com_isenum";i:1;s:16:"(PHP 4 >= 4.1.0)";i:2;s:39:"bool com_isenum ( variant $com_module )";i:3;s:115:"Checks to see if a COM object can be enumerated using the method hack. See class for more details on these methods.";}
a:4:{i:0;s:16:"com_load_typelib";i:1;s:23:"(PHP 4 >= 4.1.0, PHP 5)";i:2;s:81:"bool com_load_typelib ( string $typelib_name [, bool $case_insensitive = true ] )";i:3;s:99:"Loads a type-library and registers its constants in the engine, as though they were defined using .";}
a:4:{i:0;s:8:"com_load";i:1;s:7:"(PHP 4)";i:2;s:118:"Example #1 OO syntax <?php//Â doÂ this $objÂ =Â newÂ COM($module);//Â insteadÂ ofÂ this:$objÂ =Â com_load($module); ?>";i:3;s:38:"Deprecated, use the OO syntax instead.";}
a:4:{i:0;s:16:"com_message_pump";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:47:"bool com_message_pump ([ int $timeoutms = 0 ] )";i:3;s:89:"This function will sleep for up to milliseconds, or until a message arrives in the queue.";}
a:4:{i:0;s:18:"com_print_typeinfo";i:1;s:23:"(PHP 4 >= 4.2.0, PHP 5)";i:2;s:99:"bool com_print_typeinfo ( object $comobject [, string $dispinterface [, bool $wantsink = false ]] )";i:3;s:280:"The purpose of this function is to help generate a skeleton class for use as an event sink. You may also use it to generate a dump of any COM object, provided that it supports enough of the introspection interfaces, and that you know the name of the interface you want to display.";}
a:4:{i:0;s:11:"com_propget";i:1;s:7:"(PHP 4)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"com_propput";i:1;s:7:"(PHP 4)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"com_propset";i:1;s:7:"(PHP 4)";i:2;s:0:"";i:3;s:31:"This function is an alias of: .";}
a:4:{i:0;s:11:"com_release";i:1;s:16:"(PHP 4 >= 4.1.0)";i:2;s:25:"void com_release ( void )";i:3;s:43:"Decreases the components reference counter.";}
a:4:{i:0;s:7:"com_set";i:1;s:7:"(PHP 4)";i:2;s:126:"Example #1 OO syntax <?php//Â doÂ this $obj->propertyÂ =Â $value;//Â insteadÂ ofÂ this:com_set($obj,Â 'property',Â $value); ?>";i:3;s:38:"Deprecated, use the OO syntax instead.";}
a:4:{i:0;s:11:"variant_abs";i:1;s:7:"(PHP 5)";i:2;s:32:"mixed variant_abs ( mixed $val )";i:3;s:40:"Returns the absolute value of a variant.";}
a:4:{i:0;s:11:"variant_add";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_add ( mixed $left, mixed $right )";i:3;s:107:"Adds to using the following rules (taken from the MSDN library), which correspond to those of Visual Basic:";}
a:4:{i:0;s:11:"variant_and";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_and ( mixed $left, mixed $right )";i:3;s:100:"Performs a bitwise AND operation. Note that this is slightly different from a regular AND operation.";}
a:4:{i:0;s:12:"variant_cast";i:1;s:7:"(PHP 5)";i:2;s:52:"variant variant_cast ( variant $variant, int $type )";i:3;s:118:"This function makes a copy of and then performs a variant cast operation to force the copy to have the type given by .";}
a:4:{i:0;s:11:"variant_cat";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_cat ( mixed $left, mixed $right )";i:3;s:41:"Concatenates with and returns the result.";}
a:4:{i:0;s:11:"variant_cmp";i:1;s:7:"(PHP 5)";i:2;s:75:"int variant_cmp ( mixed $left, mixed $right [, int $lcid [, int $flags ]] )";i:3;s:15:"Compares with .";}
a:4:{i:0;s:27:"variant_date_from_timestamp";i:1;s:7:"(PHP 5)";i:2;s:54:"variant variant_date_from_timestamp ( int $timestamp )";i:3;s:138:"Converts from a unix timestamp value into a variant of type . This allows easier interopability between the unix-ish parts of PHP and COM.";}
a:4:{i:0;s:25:"variant_date_to_timestamp";i:1;s:7:"(PHP 5)";i:2;s:50:"int variant_date_to_timestamp ( variant $variant )";i:3;s:134:"Converts from a (or similar) value into a Unix timestamp. This allows easier interopability between the Unix-ish parts of PHP and COM.";}
a:4:{i:0;s:11:"variant_div";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_div ( mixed $left, mixed $right )";i:3;s:34:"Divides by and returns the result.";}
a:4:{i:0;s:11:"variant_eqv";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_eqv ( mixed $left, mixed $right )";i:3;s:47:"Performs a bitwise equivalence on two variants.";}
a:4:{i:0;s:11:"variant_fix";i:1;s:7:"(PHP 5)";i:2;s:36:"mixed variant_fix ( mixed $variant )";i:3;s:38:"Gets the integer portion of a variant.";}
a:4:{i:0;s:16:"variant_get_type";i:1;s:7:"(PHP 5)";i:2;s:41:"int variant_get_type ( variant $variant )";i:3;s:37:"Returns the type of a variant object.";}
a:4:{i:0;s:12:"variant_idiv";i:1;s:7:"(PHP 5)";i:2;s:48:"mixed variant_idiv ( mixed $left, mixed $right )";i:3;s:67:"Converts and to integer values, and then performs integer division.";}
a:4:{i:0;s:11:"variant_imp";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_imp ( mixed $left, mixed $right )";i:3;s:41:"Performs a bitwise implication operation.";}
a:4:{i:0;s:11:"variant_int";i:1;s:7:"(PHP 5)";i:2;s:36:"mixed variant_int ( mixed $variant )";i:3;s:38:"Gets the integer portion of a variant.";}
a:4:{i:0;s:11:"variant_mod";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_mod ( mixed $left, mixed $right )";i:3;s:37:"Divides by and returns the remainder.";}
a:4:{i:0;s:11:"variant_mul";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_mul ( mixed $left, mixed $right )";i:3;s:15:"Multiplies by .";}
a:4:{i:0;s:11:"variant_neg";i:1;s:7:"(PHP 5)";i:2;s:36:"mixed variant_neg ( mixed $variant )";i:3;s:30:"Performs logical negation of .";}
a:4:{i:0;s:11:"variant_not";i:1;s:7:"(PHP 5)";i:2;s:36:"mixed variant_not ( mixed $variant )";i:3;s:56:"Performs bitwise not negation on and returns the result.";}
a:4:{i:0;s:10:"variant_or";i:1;s:7:"(PHP 5)";i:2;s:46:"mixed variant_or ( mixed $left, mixed $right )";i:3;s:98:"Performs a bitwise OR operation. Note that this is slightly different from a regular OR operation.";}
a:4:{i:0;s:11:"variant_pow";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_pow ( mixed $left, mixed $right )";i:3;s:39:"Returns the result of to the power of .";}
a:4:{i:0;s:13:"variant_round";i:1;s:7:"(PHP 5)";i:2;s:53:"mixed variant_round ( mixed $variant, int $decimals )";i:3;s:47:"Returns the value of rounded to decimal places.";}
a:4:{i:0;s:16:"variant_set_type";i:1;s:7:"(PHP 5)";i:2;s:53:"void variant_set_type ( variant $variant, int $type )";i:3;s:172:"This function is similar to except that the variant is modified "in-place"; no new variant is created. The parameters for this function have identical meaning to those of .";}
a:4:{i:0;s:11:"variant_set";i:1;s:7:"(PHP 5)";i:2;s:51:"void variant_set ( variant $variant, mixed $value )";i:3;s:125:"Converts to a variant and assigns it to the object; no new variant object is created, and the old value of is freed/released.";}
a:4:{i:0;s:11:"variant_sub";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_sub ( mixed $left, mixed $right )";i:3;s:16:"Subtracts from .";}
a:4:{i:0;s:11:"variant_xor";i:1;s:7:"(PHP 5)";i:2;s:47:"mixed variant_xor ( mixed $left, mixed $right )";i:3;s:29:"Performs a logical exclusion.";}
a:4:{i:0;s:13:"printer_abort";i:1;s:18:"(PECL printer SVN)";i:2;s:47:"void printer_abort ( resource $printer_handle )";i:3;s:46:"This function deletes the printers spool file.";}
a:4:{i:0;s:13:"printer_close";i:1;s:18:"(PECL printer SVN)";i:2;s:47:"void printer_close ( resource $printer_handle )";i:3;s:83:"This function closes the printer connection. also closes the active device context.";}
a:4:{i:0;s:20:"printer_create_brush";i:1;s:18:"(PECL printer SVN)";i:2;s:59:"resource printer_create_brush ( int $style, string $color )";i:3;s:113:"The function creates a new brush and returns a handle to it. A brush is used to fill shapes. For an example see .";}
a:4:{i:0;s:17:"printer_create_dc";i:1;s:18:"(PECL printer SVN)";i:2;s:51:"void printer_create_dc ( resource $printer_handle )";i:3;s:117:"The function creates a new device context. A device context is used to customize the graphic objects of the document.";}
a:4:{i:0;s:19:"printer_create_font";i:1;s:18:"(PECL printer SVN)";i:2;s:154:"resource printer_create_font ( string $face, int $height, int $width, int $font_weight, bool $italic, bool $underline, bool $strikeout, int $orientation )";i:3;s:109:"The function creates a new font and returns a handle to it. A font is used to draw text. For an example see .";}
a:4:{i:0;s:18:"printer_create_pen";i:1;s:18:"(PECL printer SVN)";i:2;s:69:"resource printer_create_pen ( int $style, int $width, string $color )";i:3;s:119:"The function creates a new pen and returns a handle to it. A pen is used to draw lines and curves. For an example see .";}
a:4:{i:0;s:20:"printer_delete_brush";i:1;s:18:"(PECL printer SVN)";i:2;s:52:"void printer_delete_brush ( resource $brush_handle )";i:3;s:61:"The function deletes the selected brush. For an example see .";}
a:4:{i:0;s:17:"printer_delete_dc";i:1;s:18:"(PECL printer SVN)";i:2;s:51:"bool printer_delete_dc ( resource $printer_handle )";i:3;s:61:"The function deletes the device context. For an example see .";}
a:4:{i:0;s:19:"printer_delete_font";i:1;s:18:"(PECL printer SVN)";i:2;s:50:"void printer_delete_font ( resource $font_handle )";i:3;s:60:"The function deletes the selected font. For an example see .";}
a:4:{i:0;s:18:"printer_delete_pen";i:1;s:18:"(PECL printer SVN)";i:2;s:48:"void printer_delete_pen ( resource $pen_handle )";i:3;s:59:"The function deletes the selected pen. For an example see .";}
a:4:{i:0;s:16:"printer_draw_bmp";i:1;s:18:"(PECL printer SVN)";i:2;s:113:"bool printer_draw_bmp ( resource $printer_handle, string $filename, int $x, int $y [, int $width ], int $height )";i:3;s:26:"The function draws an bmp.";}
a:4:{i:0;s:18:"printer_draw_chord";i:1;s:18:"(PECL printer SVN)";i:2;s:152:"void printer_draw_chord ( resource $printer_handle, int $rec_x, int $rec_y, int $rec_x1, int $rec_y1, int $rad_x, int $rad_y, int $rad_x1, int $rad_y1 )";i:3;s:35:"The function simply draws an chord.";}
a:4:{i:0;s:19:"printer_draw_elipse";i:1;s:18:"(PECL printer SVN)";i:2;s:97:"void printer_draw_elipse ( resource $printer_handle, int $ul_x, int $ul_y, int $lr_x, int $lr_y )";i:3;s:30:"The function draws an ellipse.";}
a:4:{i:0;s:17:"printer_draw_line";i:1;s:18:"(PECL printer SVN)";i:2;s:99:"void printer_draw_line ( resource $printer_handle, int $from_x, int $from_y, int $to_x, int $to_y )";i:3;s:49:"The function draws a line using the selected pen.";}
a:4:{i:0;s:16:"printer_draw_pie";i:1;s:18:"(PECL printer SVN)";i:2;s:152:"void printer_draw_pie ( resource $printer_handle, int $rec_x, int $rec_y, int $rec_x1, int $rec_y1, int $rad1_x, int $rad1_y, int $rad2_x, int $rad2_y )";i:3;s:26:"The function draws an pie.";}
a:4:{i:0;s:22:"printer_draw_rectangle";i:1;s:18:"(PECL printer SVN)";i:2;s:100:"void printer_draw_rectangle ( resource $printer_handle, int $ul_x, int $ul_y, int $lr_x, int $lr_y )";i:3;s:31:"The function draws a rectangle.";}
a:4:{i:0;s:22:"printer_draw_roundrect";i:1;s:18:"(PECL printer SVN)";i:2;s:125:"void printer_draw_roundrect ( resource $printer_handle, int $ul_x, int $ul_y, int $lr_x, int $lr_y, int $width, int $height )";i:3;s:52:"The function draws a rectangle with rounded corners.";}
a:4:{i:0;s:17:"printer_draw_text";i:1;s:18:"(PECL printer SVN)";i:2;s:81:"void printer_draw_text ( resource $printer_handle, string $text, int $x, int $y )";i:3;s:56:"The function draws at position, using the selected font.";}
a:4:{i:0;s:15:"printer_end_doc";i:1;s:18:"(PECL printer SVN)";i:2;s:49:"bool printer_end_doc ( resource $printer_handle )";i:3;s:106:"Closes a new document in the printer spooler. The document is now ready for printing. For an example see .";}
a:4:{i:0;s:16:"printer_end_page";i:1;s:18:"(PECL printer SVN)";i:2;s:50:"bool printer_end_page ( resource $printer_handle )";i:3;s:80:"The function closes the active page in the active document. For an example see .";}
a:4:{i:0;s:18:"printer_get_option";i:1;s:18:"(PECL printer SVN)";i:2;s:69:"mixed printer_get_option ( resource $printer_handle, string $option )";i:3;s:53:"The function retrieves the configuration setting of .";}
a:4:{i:0;s:12:"printer_list";i:1;s:18:"(PECL printer SVN)";i:2;s:69:"array printer_list ( int $enumtype [, string $name [, int $level ]] )";i:3;s:66:"The function enumerates available printers and their capabilities.";}
a:4:{i:0;s:26:"printer_logical_fontheight";i:1;s:18:"(PECL printer SVN)";i:2;s:72:"int printer_logical_fontheight ( resource $printer_handle, int $height )";i:3;s:52:"The function calculates the logical font height of .";}
a:4:{i:0;s:12:"printer_open";i:1;s:18:"(PECL printer SVN)";i:2;s:48:"resource printer_open ([ string $printername ] )";i:3;s:62:"This function tries to open a connection to the given printer.";}
a:4:{i:0;s:20:"printer_select_brush";i:1;s:18:"(PECL printer SVN)";i:2;s:78:"void printer_select_brush ( resource $printer_handle, resource $brush_handle )";i:3;s:224:"The function selects a brush as the active drawing object of the actual device context. A brush is used to fill shapes. If you draw an rectangle the brush is used to draw the shapes, while the pen is used to draw the border.";}
a:4:{i:0;s:19:"printer_select_font";i:1;s:18:"(PECL printer SVN)";i:2;s:76:"void printer_select_font ( resource $printer_handle, resource $font_handle )";i:3;s:41:"The function selects a font to draw text.";}
a:4:{i:0;s:18:"printer_select_pen";i:1;s:18:"(PECL printer SVN)";i:2;s:74:"void printer_select_pen ( resource $printer_handle, resource $pen_handle )";i:3;s:360:"The function selects a pen as the active drawing object of the actual device context. A pen is used to draw lines and curves. I.e. if you draw a single line the pen is used. If you draw an rectangle the pen is used to draw the borders, while the brush is used to fill the shape. If you haven't selected a pen before drawing shapes, the shape won't be outlined.";}
a:4:{i:0;s:18:"printer_set_option";i:1;s:18:"(PECL printer SVN)";i:2;s:79:"bool printer_set_option ( resource $printer_handle, int $option, mixed $value )";i:3;s:53:"The function sets options for the current connection.";}
a:4:{i:0;s:17:"printer_start_doc";i:1;s:18:"(PECL printer SVN)";i:2;s:73:"bool printer_start_doc ( resource $printer_handle [, string $document ] )";i:3;s:150:"The function creates a new document in the printer spooler. A document can contain multiple pages, it's used to schedule the print job in the spooler.";}
a:4:{i:0;s:18:"printer_start_page";i:1;s:18:"(PECL printer SVN)";i:2;s:52:"bool printer_start_page ( resource $printer_handle )";i:3;s:76:"The function creates a new page in the active document. For an example see .";}
a:4:{i:0;s:13:"printer_write";i:1;s:18:"(PECL printer SVN)";i:2;s:64:"bool printer_write ( resource $printer_handle, string $content )";i:3;s:31:"Writes directly to the printer.";}
a:4:{i:0;s:14:"w32api_deftype";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:117:"bool w32api_deftype ( string $typename, string $member1_type, string $member1_name [, string $... [, string $... ]] )";i:3;s:84:"You need to call this function if you would like to define a type for a w32api call.";}
a:4:{i:0;s:17:"w32api_init_dtype";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:77:"resource w32api_init_dtype ( string $typename, mixed $value [, mixed $... ] )";i:3;s:97:"This function creates an instance of the data type named, filling in the values of the data type.";}
a:4:{i:0;s:22:"w32api_invoke_function";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:82:"mixed w32api_invoke_function ( string $funcname, mixed $argument [, mixed $... ] )";i:3;s:86:"tries to find the previously registered function, passing the parameters you provided.";}
a:4:{i:0;s:24:"w32api_register_function";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:93:"bool w32api_register_function ( string $library, string $function_name, string $return_type )";i:3;s:77:"This function tries to find the function in, and tries to import it into PHP.";}
a:4:{i:0;s:22:"w32api_set_call_method";i:1;s:16:"(PHP 4 >= 4.2.0)";i:2;s:43:"void w32api_set_call_method ( int $method )";i:3;s:40:"This function sets the method call type.";}
a:4:{i:0;s:19:"win32_ps_list_procs";i:1;s:23:"(PECL win32ps >= 1.0.1)";i:2;s:34:"array win32_ps_list_procs ( void )";i:3;s:49:"Retrieves statistics about all running processes.";}
a:4:{i:0;s:17:"win32_ps_stat_mem";i:1;s:23:"(PECL win32ps >= 1.0.1)";i:2;s:32:"array win32_ps_stat_mem ( void )";i:3;s:57:"Retrieves statistics about the global memory utilization.";}
a:4:{i:0;s:18:"win32_ps_stat_proc";i:1;s:23:"(PECL win32ps >= 1.0.1)";i:2;s:44:"array win32_ps_stat_proc ([ int $pid = 0 ] )";i:3;s:60:"Retrieves statistics about the process with the process id .";}
a:4:{i:0;s:22:"win32_continue_service";i:1;s:23:"(PECL win32service SVN)";i:2;s:71:"int win32_continue_service ( string $servicename [, string $machine ] )";i:3;s:68:"Resumes a paused, named service. Requires administrative privileges.";}
a:4:{i:0;s:20:"win32_create_service";i:1;s:23:"(PECL win32service SVN)";i:2;s:66:"mixed win32_create_service ( array $details [, string $machine ] )";i:3;s:0:"";}
a:4:{i:0;s:20:"win32_delete_service";i:1;s:23:"(PECL win32service SVN)";i:2;s:71:"mixed win32_delete_service ( string $servicename [, string $machine ] )";i:3;s:111:"Attempts to delete a service from the SCM database. Administrative privileges are required for this to succeed.";}
a:4:{i:0;s:30:"win32_get_last_control_message";i:1;s:23:"(PECL win32service SVN)";i:2;s:43:"int win32_get_last_control_message ( void )";i:3;s:181:"Returns the control code that was last sent to this service process. When running as a service you should periodically check this to determine if your service needs to stop running.";}
a:4:{i:0;s:19:"win32_pause_service";i:1;s:23:"(PECL win32service SVN)";i:2;s:68:"int win32_pause_service ( string $servicename [, string $machine ] )";i:3;s:59:"Pauses a named service. Requires administrative privileges.";}
a:4:{i:0;s:26:"win32_query_service_status";i:1;s:23:"(PECL win32service SVN)";i:2;s:77:"mixed win32_query_service_status ( string $servicename [, string $machine ] )";i:3;s:76:"Queries the current status for a service, returning an array of information.";}
a:4:{i:0;s:24:"win32_set_service_status";i:1;s:23:"(PECL win32service SVN)";i:2;s:70:"bool win32_set_service_status ( int $status [, int $checkpoint = 0 ] )";i:3;s:114:"Informs the SCM of the current status of a running service. This call is only valid for a running service process.";}
a:4:{i:0;s:35:"win32_start_service_ctrl_dispatcher";i:1;s:23:"(PECL win32service SVN)";i:2;s:58:"mixed win32_start_service_ctrl_dispatcher ( string $name )";i:3;s:291:"When launched via the Service Control Manager, a service process is required to "check-in" with it to establish service monitoring and communication facilities. This function performs the check-in by spawning a thread to handle the lower-level communication with the service control manager.";}
a:4:{i:0;s:19:"win32_start_service";i:1;s:23:"(PECL win32service SVN)";i:2;s:68:"int win32_start_service ( string $servicename [, string $machine ] )";i:3;s:80:"Attempts to start the named service. Usually requires administrative privileges.";}
a:4:{i:0;s:18:"win32_stop_service";i:1;s:23:"(PECL win32service SVN)";i:2;s:67:"int win32_stop_service ( string $servicename [, string $machine ] )";i:3;s:58:"Stops a named service. Requires administrative privileges.";}
a:4:{i:0;s:20:"DOMAttr::__construct";i:1;s:7:"(PHP 5)";i:2;s:63:"public DOMAttr::__construct ( string $name [, string $value ] )";i:3;s:222:"Creates a new DOMAttr object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writable node, use .";}
a:4:{i:0;s:13:"DOMAttr::isId";i:1;s:7:"(PHP 5)";i:2;s:34:"public bool DOMAttr::isId ( void )";i:3;s:54:"This function checks if the attribute is a defined ID.";}
a:4:{i:0;s:28:"DOMCdataSection::__construct";i:1;s:7:"(PHP 5)";i:2;s:55:"public DOMCdataSection::__construct() ( string $value )";i:3;s:55:"Constructs a new CDATA node. This works like the class.";}
a:4:{i:0;s:28:"DOMCharacterData::appendData";i:1;s:7:"(PHP 5)";i:2;s:50:"void DOMCharacterData::appendData ( string $data )";i:3;s:63:"Append the string to the end of the character data of the node.";}
a:4:{i:0;s:28:"DOMCharacterData::deleteData";i:1;s:7:"(PHP 5)";i:2;s:61:"void DOMCharacterData::deleteData ( int $offset, int $count )";i:3;s:43:"Deletes characters starting from position .";}
a:4:{i:0;s:28:"DOMCharacterData::insertData";i:1;s:7:"(PHP 5)";i:2;s:63:"void DOMCharacterData::insertData ( int $offset, string $data )";i:3;s:28:"Inserts string at position .";}
a:4:{i:0;s:29:"DOMCharacterData::replaceData";i:1;s:7:"(PHP 5)";i:2;s:76:"void DOMCharacterData::replaceData ( int $offset, int $count, string $data )";i:3;s:48:"Replace characters starting from position with .";}
a:4:{i:0;s:31:"DOMCharacterData::substringData";i:1;s:7:"(PHP 5)";i:2;s:66:"string DOMCharacterData::substringData ( int $offset, int $count )";i:3;s:32:"Returns the specified substring.";}
a:4:{i:0;s:23:"DOMComment::__construct";i:1;s:7:"(PHP 5)";i:2;s:51:"public DOMComment::__construct ([ string $value ] )";i:3;s:215:"Creates a new object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use .";}
a:4:{i:0;s:24:"DOMDocument::__construct";i:1;s:7:"(PHP 5)";i:2;s:75:"public DOMDocument::__construct ([ string $version [, string $encoding ]] )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:28:"DOMDocument::createAttribute";i:1;s:7:"(PHP 5)";i:2;s:60:"public DOMAttr DOMDocument::createAttribute ( string $name )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:30:"DOMDocument::createAttributeNS";i:1;s:7:"(PHP 5)";i:2;s:93:"public DOMAttr DOMDocument::createAttributeNS ( string $namespaceURI, string $qualifiedName )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:31:"DOMDocument::createCDATASection";i:1;s:7:"(PHP 5)";i:2;s:71:"public DOMCDATASection DOMDocument::createCDATASection ( string $data )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:26:"DOMDocument::createComment";i:1;s:7:"(PHP 5)";i:2;s:61:"public DOMComment DOMDocument::createComment ( string $data )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:35:"DOMDocument::createDocumentFragment";i:1;s:7:"(PHP 5)";i:2;s:71:"public DOMDocumentFragment DOMDocument::createDocumentFragment ( void )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:26:"DOMDocument::createElement";i:1;s:7:"(PHP 5)";i:2;s:80:"public DOMElement DOMDocument::createElement ( string $name [, string $value ] )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:28:"DOMDocument::createElementNS";i:1;s:7:"(PHP 5)";i:2;s:113:"public DOMElement DOMDocument::createElementNS ( string $namespaceURI, string $qualifiedName [, string $value ] )";i:3;s:149:"This function creates a new element node with an associated namespace. This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:34:"DOMDocument::createEntityReference";i:1;s:7:"(PHP 5)";i:2;s:77:"public DOMEntityReference DOMDocument::createEntityReference ( string $name )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:40:"DOMDocument::createProcessingInstruction";i:1;s:7:"(PHP 5)";i:2;s:109:"public DOMProcessingInstruction DOMDocument::createProcessingInstruction ( string $target [, string $data ] )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:27:"DOMDocument::createTextNode";i:1;s:7:"(PHP 5)";i:2;s:62:"public DOMText DOMDocument::createTextNode ( string $content )";i:3;s:126:"This function creates a new instance of class . This node will not show up in the document unless it is inserted with (e.g.) .";}
a:4:{i:0;s:27:"DOMDocument::getElementById";i:1;s:7:"(PHP 5)";i:2;s:67:"public DOMElement DOMDocument::getElementById ( string $elementId )";i:3;s:72:"This function is similar to but searches for an element with a given id.";}
a:4:{i:0;s:33:"DOMDocument::getElementsByTagName";i:1;s:7:"(PHP 5)";i:2;s:69:"public DOMNodeList DOMDocument::getElementsByTagName ( string $name )";i:3;s:102:"This function returns a new instance of class containing all the elements with a given local tag name.";}
a:4:{i:0;s:35:"DOMDocument::getElementsByTagNameNS";i:1;s:7:"(PHP 5)";i:2;s:98:"public DOMNodeList DOMDocument::getElementsByTagNameNS ( string $namespaceURI, string $localName )";i:3;s:70:"Returns a of all elements with a given local name and a namespace URI.";}
a:4:{i:0;s:23:"DOMDocument::importNode";i:1;s:7:"(PHP 5)";i:2;s:80:"public DOMNode DOMDocument::importNode ( DOMNode $importedNode [, bool $deep ] )";i:3;s:95:"This function returns a copy of the node to import and associates it with the current document.";}
a:4:{i:0;s:17:"DOMDocument::load";i:1;s:7:"(PHP 5)";i:2;s:73:"public mixed DOMDocument::load ( string $filename [, int $options = 0 ] )";i:3;s:34:"Loads an XML document from a file.";}
a:4:{i:0;s:21:"DOMDocument::loadHTML";i:1;s:7:"(PHP 5)";i:2;s:74:"public bool DOMDocument::loadHTML ( string $source [, int $options = 0 ] )";i:3;s:279:"The function parses the HTML contained in the string . Unlike loading XML, HTML does not have to be well-formed to load. This function may also be called statically to load and create a object. The static invocation may be used when no properties need to be set prior to loading.";}
a:4:{i:0;s:25:"DOMDocument::loadHTMLFile";i:1;s:7:"(PHP 5)";i:2;s:80:"public bool DOMDocument::loadHTMLFile ( string $filename [, int $options = 0 ] )";i:3;s:123:"The function parses the HTML document in the file named . Unlike loading XML, HTML does not have to be well-formed to load.";}
a:4:{i:0;s:20:"DOMDocument::loadXML";i:1;s:7:"(PHP 5)";i:2;s:74:"public mixed DOMDocument::loadXML ( string $source [, int $options = 0 ] )";i:3;s:36:"Loads an XML document from a string.";}
a:4:{i:0;s:30:"DOMDocument::normalizeDocument";i:1;s:7:"(PHP 5)";i:2;s:51:"public void DOMDocument::normalizeDocument ( void )";i:3;s:103:"This method acts as if you saved and then loaded the document, putting the document in a "normal" form.";}
a:4:{i:0;s:30:"DOMDocument::registerNodeClass";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:87:"public bool DOMDocument::registerNodeClass ( string $baseclass, string $extendedclass )";i:3;s:109:"This method allows you to register your own extended DOM class to be used afterward by the PHP DOM extension.";}
a:4:{i:0;s:28:"DOMDocument::relaxNGValidate";i:1;s:7:"(PHP 5)";i:2;s:61:"public bool DOMDocument::relaxNGValidate ( string $filename )";i:3;s:66:"Performs validation on the document based on the given RNG schema.";}
a:4:{i:0;s:34:"DOMDocument::relaxNGValidateSource";i:1;s:7:"(PHP 5)";i:2;s:65:"public bool DOMDocument::relaxNGValidateSource ( string $source )";i:3;s:66:"Performs validation on the document based on the given RNG source.";}
a:4:{i:0;s:17:"DOMDocument::save";i:1;s:7:"(PHP 5)";i:2;s:67:"public int DOMDocument::save ( string $filename [, int $options ] )";i:3;s:156:"Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.";}
a:4:{i:0;s:21:"DOMDocument::saveHTML";i:1;s:7:"(PHP 5)";i:2;s:63:"public string DOMDocument::saveHTML ([ DOMNode $node = NULL ] )";i:3;s:157:"Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.";}
a:4:{i:0;s:25:"DOMDocument::saveHTMLFile";i:1;s:7:"(PHP 5)";i:2;s:57:"public int DOMDocument::saveHTMLFile ( string $filename )";i:3;s:157:"Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.";}
a:4:{i:0;s:20:"DOMDocument::saveXML";i:1;s:7:"(PHP 5)";i:2;s:72:"public string DOMDocument::saveXML ([ DOMNode $node [, int $options ]] )";i:3;s:156:"Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.";}
a:4:{i:0;s:27:"DOMDocument::schemaValidate";i:1;s:7:"(PHP 5)";i:2;s:76:"public bool DOMDocument::schemaValidate ( string $filename [, int $flags ] )";i:3;s:52:"Validates a document based on the given schema file.";}
a:4:{i:0;s:33:"DOMDocument::schemaValidateSource";i:1;s:7:"(PHP 5)";i:2;s:80:"public bool DOMDocument::schemaValidateSource ( string $source [, int $flags ] )";i:3;s:67:"Validates a document based on a schema defined in the given string.";}
a:4:{i:0;s:21:"DOMDocument::validate";i:1;s:7:"(PHP 5)";i:2;s:42:"public bool DOMDocument::validate ( void )";i:3;s:40:"Validates the document based on its DTD.";}
a:4:{i:0;s:21:"DOMDocument::xinclude";i:1;s:7:"(PHP 5)";i:2;s:52:"public int DOMDocument::xinclude ([ int $options ] )";i:3;s:48:"This method substitutes in a DOMDocument object.";}
a:4:{i:0;s:30:"DOMDocumentFragment::appendXML";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:59:"public bool DOMDocumentFragment::appendXML ( string $data )";i:3;s:46:"Appends raw XML data to a DOMDocumentFragment.";}
a:4:{i:0;s:23:"DOMElement::__construct";i:1;s:7:"(PHP 5)";i:2;s:91:"public DOMElement::__construct ( string $name [, string $value [, string $namespaceURI ]] )";i:3;s:218:"Creates a new object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use or .";}
a:4:{i:0;s:24:"DOMElement::getAttribute";i:1;s:7:"(PHP 5)";i:2;s:55:"public string DOMElement::getAttribute ( string $name )";i:3;s:63:"Gets the value of the attribute with name for the current node.";}
a:4:{i:0;s:28:"DOMElement::getAttributeNode";i:1;s:7:"(PHP 5)";i:2;s:60:"public DOMAttr DOMElement::getAttributeNode ( string $name )";i:3;s:61:"Returns the attribute node with name for the current element.";}
a:4:{i:0;s:30:"DOMElement::getAttributeNodeNS";i:1;s:7:"(PHP 5)";i:2;s:89:"public DOMAttr DOMElement::getAttributeNodeNS ( string $namespaceURI, string $localName )";i:3;s:77:"Returns the attribute node in namespace with local name for the current node.";}
a:4:{i:0;s:26:"DOMElement::getAttributeNS";i:1;s:7:"(PHP 5)";i:2;s:84:"public string DOMElement::getAttributeNS ( string $namespaceURI, string $localName )";i:3;s:82:"Gets the value of the attribute in namespace with local name for the current node.";}
a:4:{i:0;s:32:"DOMElement::getElementsByTagName";i:1;s:7:"(PHP 5)";i:2;s:68:"public DOMNodeList DOMElement::getElementsByTagName ( string $name )";i:3;s:183:"This function returns a new instance of the class of all descendant elements with a given tag, in the order in which they are encountered in a preorder traversal of this element tree.";}
a:4:{i:0;s:34:"DOMElement::getElementsByTagNameNS";i:1;s:7:"(PHP 5)";i:2;s:97:"public DOMNodeList DOMElement::getElementsByTagNameNS ( string $namespaceURI, string $localName )";i:3;s:66:"This function fetch all the descendant elements with a given and .";}
a:4:{i:0;s:24:"DOMElement::hasAttribute";i:1;s:7:"(PHP 5)";i:2;s:53:"public bool DOMElement::hasAttribute ( string $name )";i:3;s:68:"Indicates whether attribute named exists as a member of the element.";}
a:4:{i:0;s:26:"DOMElement::hasAttributeNS";i:1;s:7:"(PHP 5)";i:2;s:82:"public bool DOMElement::hasAttributeNS ( string $namespaceURI, string $localName )";i:3;s:81:"Indicates whether attribute in namespace named exists as a member of the element.";}
a:4:{i:0;s:27:"DOMElement::removeAttribute";i:1;s:7:"(PHP 5)";i:2;s:56:"public bool DOMElement::removeAttribute ( string $name )";i:3;s:41:"Removes attribute named from the element.";}
a:4:{i:0;s:31:"DOMElement::removeAttributeNode";i:1;s:7:"(PHP 5)";i:2;s:64:"public bool DOMElement::removeAttributeNode ( DOMAttr $oldnode )";i:3;s:35:"Removes attribute from the element.";}
a:4:{i:0;s:29:"DOMElement::removeAttributeNS";i:1;s:7:"(PHP 5)";i:2;s:85:"public bool DOMElement::removeAttributeNS ( string $namespaceURI, string $localName )";i:3;s:54:"Removes attribute is namespace named from the element.";}
a:4:{i:0;s:24:"DOMElement::setAttribute";i:1;s:7:"(PHP 5)";i:2;s:71:"public DOMAttr DOMElement::setAttribute ( string $name, string $value )";i:3;s:100:"Sets an attribute with name to the given value. If the attribute does not exist, it will be created.";}
a:4:{i:0;s:28:"DOMElement::setAttributeNode";i:1;s:7:"(PHP 5)";i:2;s:61:"public DOMAttr DOMElement::setAttributeNode ( DOMAttr $attr )";i:3;s:35:"Adds new attribute node to element.";}
a:4:{i:0;s:30:"DOMElement::setAttributeNodeNS";i:1;s:7:"(PHP 5)";i:2;s:63:"public DOMAttr DOMElement::setAttributeNodeNS ( DOMAttr $attr )";i:3;s:35:"Adds new attribute node to element.";}
a:4:{i:0;s:26:"DOMElement::setAttributeNS";i:1;s:7:"(PHP 5)";i:2;s:101:"public void DOMElement::setAttributeNS ( string $namespaceURI, string $qualifiedName, string $value )";i:3;s:114:"Sets an attribute with namespace and name to the given value. If the attribute does not exist, it will be created.";}
a:4:{i:0;s:26:"DOMElement::setIdAttribute";i:1;s:7:"(PHP 5)";i:2;s:67:"public void DOMElement::setIdAttribute ( string $name, bool $isId )";i:3;s:40:"Declares the attribute to be of type ID.";}
a:4:{i:0;s:30:"DOMElement::setIdAttributeNode";i:1;s:7:"(PHP 5)";i:2;s:72:"public void DOMElement::setIdAttributeNode ( DOMAttr $attr, bool $isId )";i:3;s:53:"Declares the attribute specified by to be of type ID.";}
a:4:{i:0;s:28:"DOMElement::setIdAttributeNS";i:1;s:7:"(PHP 5)";i:2;s:96:"public void DOMElement::setIdAttributeNS ( string $namespaceURI, string $localName, bool $isId )";i:3;s:57:"Declares the attribute specified by and to be of type ID.";}
a:4:{i:0;s:31:"DOMEntityReference::__construct";i:1;s:7:"(PHP 5)";i:2;s:55:"public DOMEntityReference::__construct ( string $name )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:30:"DOMImplementation::__construct";i:1;s:7:"(PHP 5)";i:2;s:39:"DOMImplementation::__construct ( void )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:33:"DOMImplementation::createDocument";i:1;s:7:"(PHP 5)";i:2;s:156:"public DOMDocument DOMImplementation::createDocument ([ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL ]]] )";i:3;s:65:"Creates a object of the specified type with its document element.";}
a:4:{i:0;s:37:"DOMImplementation::createDocumentType";i:1;s:7:"(PHP 5)";i:2;s:152:"public DOMDocumentType DOMImplementation::createDocumentType ([ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL ]]] )";i:3;s:156:"Creates an empty object. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur.";}
a:4:{i:0;s:29:"DOMImplementation::hasFeature";i:1;s:7:"(PHP 5)";i:2;s:78:"public bool DOMImplementation::hasFeature ( string $feature, string $version )";i:3;s:54:"Test if the DOM implementation implements a specific .";}
a:4:{i:0;s:29:"DOMNamedNodeMap::getNamedItem";i:1;s:7:"(PHP 5)";i:2;s:54:"DOMNode DOMNamedNodeMap::getNamedItem ( string $name )";i:3;s:35:"Retrieves a node specified by its .";}
a:4:{i:0;s:31:"DOMNamedNodeMap::getNamedItemNS";i:1;s:7:"(PHP 5)";i:2;s:83:"DOMNode DOMNamedNodeMap::getNamedItemNS ( string $namespaceURI, string $localName )";i:3;s:35:"Retrieves a node specified by and .";}
a:4:{i:0;s:21:"DOMNamedNodeMap::item";i:1;s:7:"(PHP 5)";i:2;s:44:"DOMNode DOMNamedNodeMap::item ( int $index )";i:3;s:48:"Retrieves a node specified by within the object.";}
a:4:{i:0;s:20:"DOMNode::appendChild";i:1;s:7:"(PHP 5)";i:2;s:56:"public DOMNode DOMNode::appendChild ( DOMNode $newnode )";i:3;s:172:"This function appends a child to an existing list of children or creates a new list of children. The child can be created with e.g., etc. or simply by using any other node.";}
a:4:{i:0;s:13:"DOMNode::C14N";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:114:"public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] )";i:3;s:30:"Canonicalize nodes to a string";}
a:4:{i:0;s:17:"DOMNode::C14NFile";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:129:"public int DOMNode::C14NFile ( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] )";i:3;s:29:"Canonicalize nodes to a file.";}
a:4:{i:0;s:18:"DOMNode::cloneNode";i:1;s:7:"(PHP 5)";i:2;s:51:"public DOMNode DOMNode::cloneNode ([ bool $deep ] )";i:3;s:27:"Creates a copy of the node.";}
a:4:{i:0;s:18:"DOMNode::getLineNo";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:38:"public int DOMNode::getLineNo ( void )";i:3;s:47:"Gets line number for where the node is defined.";}
a:4:{i:0;s:20:"DOMNode::getNodePath";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:43:"public string DOMNode::getNodePath ( void )";i:3;s:41:"Gets an XPath location path for the node.";}
a:4:{i:0;s:22:"DOMNode::hasAttributes";i:1;s:7:"(PHP 5)";i:2;s:43:"public bool DOMNode::hasAttributes ( void )";i:3;s:77:"This method checks if the node has attributes. The tested node has to be an .";}
a:4:{i:0;s:22:"DOMNode::hasChildNodes";i:1;s:7:"(PHP 5)";i:2;s:43:"public bool DOMNode::hasChildNodes ( void )";i:3;s:46:"This function checks if the node has children.";}
a:4:{i:0;s:21:"DOMNode::insertBefore";i:1;s:7:"(PHP 5)";i:2;s:79:"public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] )";i:3;s:159:"This function inserts a new node right before the reference node. If you plan to do further modifications on the appended child you must use the returned node.";}
a:4:{i:0;s:27:"DOMNode::isDefaultNamespace";i:1;s:7:"(PHP 5)";i:2;s:64:"public bool DOMNode::isDefaultNamespace ( string $namespaceURI )";i:3;s:39:"Tells whether is the default namespace.";}
a:4:{i:0;s:19:"DOMNode::isSameNode";i:1;s:7:"(PHP 5)";i:2;s:49:"public bool DOMNode::isSameNode ( DOMNode $node )";i:3;s:90:"This function indicates if two nodes are the same node. The comparison is based on content";}
a:4:{i:0;s:20:"DOMNode::isSupported";i:1;s:7:"(PHP 5)";i:2;s:69:"public bool DOMNode::isSupported ( string $feature, string $version )";i:3;s:52:"Checks if the asked is supported for the specified .";}
a:4:{i:0;s:27:"DOMNode::lookupNamespaceURI";i:1;s:7:"(PHP 5)";i:2;s:60:"public string DOMNode::lookupNamespaceURI ( string $prefix )";i:3;s:49:"Gets the namespace URI of the node based on the .";}
a:4:{i:0;s:21:"DOMNode::lookupPrefix";i:1;s:7:"(PHP 5)";i:2;s:60:"public string DOMNode::lookupPrefix ( string $namespaceURI )";i:3;s:65:"Gets the namespace prefix of the node based on the namespace URI.";}
a:4:{i:0;s:18:"DOMNode::normalize";i:1;s:7:"(PHP 5)";i:2;s:39:"public void DOMNode::normalize ( void )";i:3;s:20:"Normalizes the node.";}
a:4:{i:0;s:20:"DOMNode::removeChild";i:1;s:7:"(PHP 5)";i:2;s:56:"public DOMNode DOMNode::removeChild ( DOMNode $oldnode )";i:3;s:55:"This functions removes a child from a list of children.";}
a:4:{i:0;s:21:"DOMNode::replaceChild";i:1;s:7:"(PHP 5)";i:2;s:75:"public DOMNode DOMNode::replaceChild ( DOMNode $newnode, DOMNode $oldnode )";i:3;s:183:"This function replaces the child with the passed new node. If the new node is already a child it will not be added a second time. If the replacement succeeds the old node is returned.";}
a:4:{i:0;s:17:"DOMNodelist::item";i:1;s:7:"(PHP 5)";i:2;s:40:"DOMNode DOMNodelist::item ( int $index )";i:3;s:48:"Retrieves a node specified by within the object.";}
a:4:{i:0;s:37:"DOMProcessingInstruction::__construct";i:1;s:7:"(PHP 5)";i:2;s:80:"public DOMProcessingInstruction::__construct ( string $name [, string $value ] )";i:3;s:215:"Creates a new object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use .";}
a:4:{i:0;s:20:"DOMText::__construct";i:1;s:7:"(PHP 5)";i:2;s:50:"public DOMText::__construct() ([ string $value ] )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:37:"DOMText::isWhitespaceInElementContent";i:1;s:7:"(PHP 5)";i:2;s:58:"public bool DOMText::isWhitespaceInElementContent ( void )";i:3;s:155:"Indicates whether this text node contains whitespace. The text node is determined to contain whitespace in element content during the load of the document.";}
a:4:{i:0;s:18:"DOMText::splitText";i:1;s:7:"(PHP 5)";i:2;s:49:"public DOMText DOMText::splitText ( int $offset )";i:3;s:87:"Breaks this node into two nodes at the specified, keeping both in the tree as siblings.";}
a:4:{i:0;s:21:"DOMXPath::__construct";i:1;s:7:"(PHP 5)";i:2;s:49:"public DOMXPath::__construct ( DOMDocument $doc )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:18:"DOMXPath::evaluate";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:112:"public mixed DOMXPath::evaluate ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]] )";i:3;s:64:"Executes the given XPath and returns a typed result if possible.";}
a:4:{i:0;s:15:"DOMXPath::query";i:1;s:7:"(PHP 5)";i:2;s:115:"public DOMNodeList DOMXPath::query ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = true ]] )";i:3;s:26:"Executes the given XPath .";}
a:4:{i:0;s:27:"DOMXPath::registerNamespace";i:1;s:7:"(PHP 5)";i:2;s:80:"public bool DOMXPath::registerNamespace ( string $prefix, string $namespaceURI )";i:3;s:43:"Registers the and with the DOMXPath object.";}
a:4:{i:0;s:30:"DOMXPath::registerPhpFunctions";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:65:"public void DOMXPath::registerPhpFunctions ([ mixed $restrict ] )";i:3;s:78:"This method enables the ability to use PHP functions within XPath expressions.";}
a:4:{i:0;s:20:"dom_import_simplexml";i:1;s:7:"(PHP 5)";i:2;s:58:"DOMElement dom_import_simplexml ( SimpleXMLElement $node )";i:3;s:114:"This function takes the node of class and makes it into a node. This new object can then be used as a native node.";}
a:4:{i:0;s:19:"libxml_clear_errors";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:33:"void libxml_clear_errors ( void )";i:3;s:31:"clears the libxml error buffer.";}
a:4:{i:0;s:28:"libxml_disable_entity_loader";i:1;s:17:"(PHP 5 >= 5.2.11)";i:2;s:61:"bool libxml_disable_entity_loader ([ bool $disable = true ] )";i:3;s:53:"Disable/enable the ability to load external entities.";}
a:4:{i:0;s:17:"libxml_get_errors";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:32:"array libxml_get_errors ( void )";i:3;s:25:"Retrieve array of errors.";}
a:4:{i:0;s:21:"libxml_get_last_error";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:42:"LibXMLError libxml_get_last_error ( void )";i:3;s:32:"Retrieve last error from libxml.";}
a:4:{i:0;s:33:"libxml_set_external_entity_loader";i:1;s:16:"(PHP 5 >= 5.4.0)";i:2;s:70:"void libxml_set_external_entity_loader ( callable $resolver_function )";i:3;s:43:"Changes the default external entity loader.";}
a:4:{i:0;s:26:"libxml_set_streams_context";i:1;s:7:"(PHP 5)";i:2;s:61:"void libxml_set_streams_context ( resource $streams_context )";i:3;s:68:"Sets the streams context for the next libxml document load or write.";}
a:4:{i:0;s:26:"libxml_use_internal_errors";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:63:"bool libxml_use_internal_errors ([ bool $use_errors = false ] )";i:3;s:76:"allows you to disable standard libxml errors and enable user error handling.";}
a:4:{i:0;s:10:"qdom_error";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:26:"string qdom_error ( void )";i:3;s:0:"";}
a:4:{i:0;s:9:"qdom_tree";i:1;s:16:"(PHP 4 >= 4.0.4)";i:2;s:38:"QDomDocument qdom_tree ( string $doc )";i:3;s:0:"";}
a:4:{i:0;s:35:"SDO_DAS_ChangeSummary::beginLogging";i:1;s:3:"(^)";i:2;s:49:"void SDO_DAS_ChangeSummary::beginLogging ( void )";i:3;s:49:"Begin logging changes made to the SDO_DataObject.";}
a:4:{i:0;s:33:"SDO_DAS_ChangeSummary::endLogging";i:1;s:3:"(^)";i:2;s:47:"void SDO_DAS_ChangeSummary::endLogging ( void )";i:3;s:46:"End logging changes made to an SDO_DataObject.";}
a:4:{i:0;s:36:"SDO_DAS_ChangeSummary::getChangeType";i:1;s:3:"(^)";i:2;s:71:"int SDO_DAS_ChangeSummary::getChangeType ( SDO_DataObject $dataObject )";i:3;s:74:"Get the type of change which has been made to the supplied SDO_DataObject.";}
a:4:{i:0;s:45:"
SDO_DAS_ChangeSummary::getChangedDataObjects";i:1;s:3:"(^)";i:2;s:62:"SDO_List SDO_DAS_ChangeSummary::getChangedDataObjects ( void )";i:3;s:172:"Get an SDO_List of the SDO_DataObjects which have been changed. These data objects can then be used to identify the types of change made to each, along with the old values.";}
a:4:{i:0;s:38:"SDO_DAS_ChangeSummary::getOldContainer";i:1;s:3:"(^)";i:2;s:85:"SDO_DataObject SDO_DAS_ChangeSummary::getOldContainer ( SDO_DataObject $data_object )";i:3;s:68:"Get the old container (SDO_DataObject) for a deleted SDO_DataObject.";}
a:4:{i:0;s:35:"SDO_DAS_ChangeSummary::getOldValues";i:1;s:3:"(^)";i:2;s:76:"SDO_List SDO_DAS_ChangeSummary::getOldValues ( SDO_DataObject $data_object )";i:3;s:175:"Get a list of the old values for a given changed SDO_DataObject. Returns a list of SDO_DAS_Settings describing the old values for the changed properties of the SDO_DataObject.";}
a:4:{i:0;s:32:"SDO_DAS_ChangeSummary::isLogging";i:1;s:3:"(^)";i:2;s:46:"bool SDO_DAS_ChangeSummary::isLogging ( void )";i:3;s:50:"Test to see whether change logging is switched on.";}
a:4:{i:0;s:38:"SDO_DAS_DataFactory::addPropertyToType";i:1;s:3:"(^)";i:2;s:197:"void SDO_DAS_DataFactory::addPropertyToType ( string $parent_type_namespace_uri, string $parent_type_name, string $property_name, string $type_namespace_uri, string $type_name [, array $options ] )";i:3;s:246:"Adds a property to a type. The type must already be known to the SDO_DAS_DataFactory (i.e. have been added using addType()). The property becomes a property of the type. This is how the graph model for the structure of an SDO_DataObject is built.";}
a:4:{i:0;s:28:"SDO_DAS_DataFactory::addType";i:1;s:3:"(^)";i:2;s:103:"void SDO_DAS_DataFactory::addType ( string $type_namespace_uri, string $type_name [, array $options ] )";i:3;s:167:"Add a new type to the SDO_DAS_DataFactory, defined by its namespace and type name. The type becomes part of the model of data objects that the data factory can create.";}
a:4:{i:0;s:35:"SDO_DAS_DataFactory::getDataFactory";i:1;s:3:"(^)";i:2;s:64:"SDO_DAS_DataFactory SDO_DAS_DataFactory::getDataFactory ( void )";i:3;s:431:"Static method to get an instance of an SDO_DAS_DataFactory. This instance is initially only configured with the basic SDO types. A Data Access Service is responsible for populating the data factory model and then allowing PHP applications to create SDOs based on the model through the SDO_DataFactory interface. PHP applications should always obtain a data factory from a configured Data Access Service, not through this interface.";}
a:4:{i:0;s:36:"SDO_DAS_DataObject::getChangeSummary";i:1;s:3:"(^)";i:2;s:67:"SDO_DAS_ChangeSummary SDO_DAS_DataObject::getChangeSummary ( void )";i:3;s:89:"Get the SDO_DAS_ChangeSummary for an SDO_DAS_DataObject, or NULL if it does not have one.";}
a:4:{i:0;s:29:"SDO_DAS_Setting::getListIndex";i:1;s:3:"(^)";i:2;s:42:"int SDO_DAS_Setting::getListIndex ( void )";i:3;s:332:"Get the list index for a modification made to an element of a many-valued property. For example, if we modified the third element of a many-valued property we could obtain an SDO_DAS_Setting from the change summary corresponding to that modification. A call to on that setting would return the value 2 (lists are indexed from zero).";}
a:4:{i:0;s:33:"SDO_DAS_Setting::getPropertyIndex";i:1;s:3:"(^)";i:2;s:46:"int SDO_DAS_Setting::getPropertyIndex ( void )";i:3;s:122:"Returns the property index for the changed property. This index identifies the property which was modified in data object.";}
a:4:{i:0;s:32:"SDO_DAS_Setting::getPropertyName";i:1;s:3:"(^)";i:2;s:48:"string SDO_DAS_Setting::getPropertyName ( void )";i:3;s:120:"Returns the property name for the changed property. This name identifies the property which was modified in data object.";}
a:4:{i:0;s:25:"SDO_DAS_Setting::getValue";i:1;s:3:"(^)";i:2;s:40:"mixed SDO_DAS_Setting::getValue ( void )";i:3;s:426:"Returns the old value for the changed property. This can be used by a Data Access Service when writing updates to a data source. The DAS uses the old value to detect conflicts by comparing it with the current value in the data source. If they do not match, then the data source has been updated since the data object was originally populated, and therefore writing any new updates risks compromising the integrity of the data.";}
a:4:{i:0;s:22:"SDO_DAS_Setting::isSet";i:1;s:3:"(^)";i:2;s:36:"bool SDO_DAS_Setting::isSet ( void )";i:3;s:152:"Test whether a property was set prior to being modified. If it was set prior to being modified then the SDO_DAS_Setting will also contain the old value.";}
a:4:{i:0;s:23:"SDO_DataFactory::create";i:1;s:3:"(^)";i:2;s:78:"void SDO_DataFactory::create ( string $type_namespace_uri, string $type_name )";i:3;s:80:"Create a new SDO_DataObject given the data object's namespace URI and type name.";}
a:4:{i:0;s:21:"SDO_DataObject::clear";i:1;s:3:"(^)";i:2;s:35:"void SDO_DataObject::clear ( void )";i:3;s:136:"Clear an SDO_DataObject's properties. Read-only properties are unaffected. Subsequent calls to isset() for the data object will return .";}
a:4:{i:0;s:32:"SDO_DataObject::createDataObject";i:1;s:3:"(^)";i:2;s:69:"SDO_DataObject SDO_DataObject::createDataObject ( mixed $identifier )";i:3;s:169:"Create a child SDO_DataObject of the default type for the property identified. The data object is automatically inserted into the tree and a reference to it is returned.";}
a:4:{i:0;s:28:"SDO_DataObject::getContainer";i:1;s:3:"(^)";i:2;s:52:"SDO_DataObject SDO_DataObject::getContainer ( void )";i:3;s:52:"Get the data object which contains this data object.";}
a:4:{i:0;s:27:"SDO_DataObject::getSequence";i:1;s:3:"(^)";i:2;s:49:"SDO_Sequence SDO_DataObject::getSequence ( void )";i:3;s:201:"Return the SDO_Sequence for this SDO_DataObject. Accessing the SDO_DataObject through the SDO_Sequence interface acts on the same SDO_DataObject instance data, but preserves ordering across properties.";}
a:4:{i:0;s:27:"SDO_DataObject::getTypeName";i:1;s:3:"(^)";i:2;s:43:"string SDO_DataObject::getTypeName ( void )";i:3;s:137:"Return the name of the type for a data object. A convenience method corresponding to SDO_Model_ReflectionDataObject::getType().getName().";}
a:4:{i:0;s:35:"SDO_DataObject::getTypeNamespaceURI";i:1;s:3:"(^)";i:2;s:51:"string SDO_DataObject::getTypeNamespaceURI ( void )";i:3;s:154:"Return the namespace URI of the type for a data object. A convenience method corresponding to SDO_Model_ReflectionDataObject::getType().getNamespaceURI().";}
a:4:{i:0;s:23:"SDO_Exception::getCause";i:1;s:3:"(^)";i:2;s:38:"mixed SDO_Exception::getCause ( void )";i:3;s:202:"Returns the cause of this exception or NULL if the cause is nonexistent or unknown. Typically the cause will be an SDO_CPPException object, which may be used to obtain additional diagnostic information.";}
a:4:{i:0;s:16:"SDO_List::insert";i:1;s:3:"(^)";i:2;s:54:"void SDO_List::insert ( mixed $value [, int $index ] )";i:3;s:97:"Insert a new element at a specified position in the list. All subsequent list items are moved up.";}
a:4:{i:0;s:37:"SDO_Model_Property::getContainingType";i:1;s:3:"(^)";i:2;s:61:"SDO_Model_Type SDO_Model_Property::getContainingType ( void )";i:3;s:56:"Returns the SDO_Model_Type which contains this property.";}
a:4:{i:0;s:30:"SDO_Model_Property::getDefault";i:1;s:3:"(^)";i:2;s:45:"mixed SDO_Model_Property::getDefault ( void )";i:3;s:104:"Returns the default value for the property. Only primitive data type properties can have default values.";}
a:4:{i:0;s:27:"SDO_Model_Property::getName";i:1;s:3:"(^)";i:2;s:43:"string SDO_Model_Property::getName ( void )";i:3;s:43:"Returns the name of the SDO_Model_Property.";}
a:4:{i:0;s:27:"SDO_Model_Property::getType";i:1;s:3:"(^)";i:2;s:51:"SDO_Model_Type SDO_Model_Property::getType ( void )";i:3;s:193:"Get the SDO_Model_Type of the property. The SDO_Model_Type describes the type information for the property, such as its type name, namespace URI, whether it is a primitive data type, and so on.";}
a:4:{i:0;s:33:"SDO_Model_Property::isContainment";i:1;s:3:"(^)";i:2;s:47:"bool SDO_Model_Property::isContainment ( void )";i:3;s:153:"Test to see if the property corresponds to a containment relationship. Returns if the property defines a containment relationship, or if it is reference.";}
a:4:{i:0;s:26:"SDO_Model_Property::isMany";i:1;s:3:"(^)";i:2;s:40:"bool SDO_Model_Property::isMany ( void )";i:3;s:106:"Test to see if the property is many-valued. Returns if this is a many-valued property, otherwise returns .";}
a:4:{i:0;s:44:"
SDO_Model_ReflectionDataObject::__construct";i:1;s:3:"(^)";i:2;s:75:"SDO_Model_ReflectionDataObject::__construct ( SDO_DataObject $data_object )";i:3;s:457:"Construct an SDO_Model_ReflectionDataObject to reflect on an SDO_DataObject. Reflecting on an SDO_DataObject gives access to information about its model. The model contains information such as the data object's type, and whether that type is sequenced (preserves ordering across properties) or open (each instance can have its model extended). The model also holds information about the data object's properties, any default values they may have, and so on.";}
a:4:{i:0;s:38:"SDO_Model_ReflectionDataObject::export";i:1;s:3:"(^)";i:2;s:102:"mixed SDO_Model_ReflectionDataObject::export ( SDO_Model_ReflectionDataObject $rdo [, bool $return ] )";i:3;s:149:"Get a string describing the SDO_DataObject. The default behaviour is to print the output, but if is specified for return, it is returned as a string.";}
a:4:{i:0;s:55:"
SDO_Model_ReflectionDataObject::getContainmentProperty";i:1;s:3:"(^)";i:2;s:82:"SDO_Model_Property SDO_Model_ReflectionDataObject::getContainmentProperty ( void )";i:3;s:182:"Get the SDO_Model_Property that contains the SDO_DataObject. This method is used to navigate up to the parent's property which contains the data object which has been reflected upon.";}
a:4:{i:0;s:54:"
SDO_Model_ReflectionDataObject::getInstanceProperties";i:1;s:3:"(^)";i:2;s:68:"array SDO_Model_ReflectionDataObject::getInstanceProperties ( void )";i:3;s:225:"Get the instance properties for the SDO_DataObject. The instance properties consist of all the properties defined on the data object's type, plus any instance properties from open content (if the data object is an open type).";}
a:4:{i:0;s:39:"SDO_Model_ReflectionDataObject::getType";i:1;s:3:"(^)";i:2;s:63:"SDO_Model_Type SDO_Model_ReflectionDataObject::getType ( void )";i:3;s:207:"Returns the SDO_Model_Type for the SDO_DataObject. The SDO_Model_Type holds all the information about the data object's type, such as namespace URI, type name, whether it is a primitive data type, and so on.";}
a:4:{i:0;s:27:"SDO_Model_Type::getBaseType";i:1;s:3:"(^)";i:2;s:51:"SDO_Model_Type SDO_Model_Type::getBaseType ( void )";i:3;s:242:"Get the base type for this type. Returns the SDO_Model_Type for the base type if this type inherits from another, otherwise returns . An example of when base types occur is when a type defined in XML schema inherits from another type by using";}
a:4:{i:0;s:23:"SDO_Model_Type::getName";i:1;s:3:"(^)";i:2;s:39:"string SDO_Model_Type::getName ( void )";i:3;s:115:"Returns the name of the type. The combination of type name and namespace URI is used to uniquely identify the type.";}
a:4:{i:0;s:31:"SDO_Model_Type::getNamespaceURI";i:1;s:3:"(^)";i:2;s:47:"string SDO_Model_Type::getNamespaceURI ( void )";i:3;s:124:"Returns the namespace URI of the type. The combination of namespace URI and type name is used to uniquely identify the type.";}
a:4:{i:0;s:29:"SDO_Model_Type::getProperties";i:1;s:3:"(^)";i:2;s:44:"array SDO_Model_Type::getProperties ( void )";i:3;s:195:"Get an array of SDO_Model_Property objects describing the properties defined for the SDO_Model_Type. Each SDO_Model_Property holds information such as the property name, default value, and so on.";}
a:4:{i:0;s:27:"SDO_Model_Type::getProperty";i:1;s:3:"(^)";i:2;s:68:"SDO_Model_Property SDO_Model_Type::getProperty ( mixed $identifier )";i:3;s:89:"Get an SDO_Model_Property of the type, identified by its property index or property name.";}
a:4:{i:0;s:30:"SDO_Model_Type::isAbstractType";i:1;s:3:"(^)";i:2;s:44:"bool SDO_Model_Type::isAbstractType ( void )";i:3;s:195:"Test to see if this SDO_Model_Type is an abstract data type. Returns if this type is abstract, that is, no SDO_DataObject of this type can be instantiated, though other types may inherit from it.";}
a:4:{i:0;s:26:"SDO_Model_Type::isDataType";i:1;s:3:"(^)";i:2;s:40:"bool SDO_Model_Type::isDataType ( void )";i:3;s:127:"Test to see if this SDO_Model_Type is a primitive data type. Returns if this type is a primitive data type, otherwise returns .";}
a:4:{i:0;s:26:"SDO_Model_Type::isInstance";i:1;s:3:"(^)";i:2;s:63:"bool SDO_Model_Type::isInstance ( SDO_DataObject $data_object )";i:3;s:185:"Test for an SDO_DataObject being an instance of this SDO_Model_Type. Returns if the SDO_DataObject provided is an instance of this SDO_Model_Type, or a derived type, otherwise returns .";}
a:4:{i:0;s:26:"SDO_Model_Type::isOpenType";i:1;s:3:"(^)";i:2;s:40:"bool SDO_Model_Type::isOpenType ( void )";i:3;s:315:"Test to see if this type is open. Returns if this type is open, otherwise returns . An SDO_DataObject whose type is open can have properties added to them which are not described by the type. This capability is used to support working with XML documents whose schema support open content, such as that defined by an";}
a:4:{i:0;s:31:"SDO_Model_Type::isSequencedType";i:1;s:3:"(^)";i:2;s:45:"bool SDO_Model_Type::isSequencedType ( void )";i:3;s:256:"Test to see if this is a sequenced type. Returns if this type is sequence, otherwise returns . Sequenced types can have the ordering across properties preserved and can contain unstructured text. For more information on sequenced types see the section on .";}
a:4:{i:0;s:25:"SDO_Sequence::getProperty";i:1;s:3:"(^)";i:2;s:68:"SDO_Model_Property SDO_Sequence::getProperty ( int $sequence_index )";i:3;s:53:"Return the property for the specified sequence index.";}
a:4:{i:0;s:20:"SDO_Sequence::insert";i:1;s:3:"(^)";i:2;s:96:"void SDO_Sequence::insert ( mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier ]] )";i:3;s:105:"Insert a new element at a specified position in the sequence. All subsequent sequence items are moved up.";}
a:4:{i:0;s:18:"SDO_Sequence::move";i:1;s:3:"(^)";i:2;s:56:"void SDO_Sequence::move ( int $toIndex, int $fromIndex )";i:3;s:114:"Modify the position of the item in the sequence, without altering the value of the property in the SDO_DataObject.";}
a:4:{i:0;s:32:"SDO_DAS_Relational::applyChanges";i:1;s:3:"(^)";i:2;s:95:"void SDO_DAS_Relational::applyChanges ( PDO $database_handle, SDODataObject $root_data_object )";i:3;s:295:"Given a PDO database handle and the special root object of a data graph, examine the change summary in the datagraph and applies the changes to the database. The changes that it can apply can be creations of data objects, deletes of data objects, and modifications to properties of data objects.";}
a:4:{i:0;s:31:"SDO_DAS_Relational::__construct";i:1;s:3:"(^)";i:2;s:142:"SDO_DAS_Relational::__construct ( array $database_metadata [, string $application_root_type [, array $SDO_containment_references_metadata ]] )";i:3;s:84:"Constructs an instance of a Relational Data Access Service from the passed metadata.";}
a:4:{i:0;s:40:"SDO_DAS_Relational::createRootDataObject";i:1;s:3:"(^)";i:2;s:63:"SDODataObject SDO_DAS_Relational::createRootDataObject ( void )";i:3;s:204:"Returns the special root object at the top of an otherwise empty data graph. This call is used when the application wants to create a data graph from scratch, without having called to create a data graph.";}
a:4:{i:0;s:40:"SDO_DAS_Relational::executePreparedQuery";i:1;s:3:"(^)";i:2;s:161:"SDODataObject SDO_DAS_Relational::executePreparedQuery ( PDO $database_handle, PDOStatement $prepared_statement, array $value_list [, array $column_specifier ] )";i:3;s:1070:"Executes a given query against the relational database, using the supplied PDO database handle. Differs from the simpler in that it takes a prepared statement and a list of values. This is the appropriate call to use either when the statement is to executed a number of times with different arguments, and there is therefore a performance benefit to be had from preparing the statement only once, or when the SQL statement is to contain varying values taken from a source that cannot be completely trusted. In this latter case it may be unsafe to construct the SQL statement by simply concatenating the parts of the statement together, since the values may contain pieces of SQL. To guard against this, a so-called SQL injection attack, it is safer to prepare the SQL statement with placeholders (also known as parameter markers, denoted by '?') and supply a list of the values to be substituted as a separate argument. Otherwise this function is the same as in that it uses the model that it built from the metadata to interpret the result set and returns a data graph.";}
a:4:{i:0;s:32:"SDO_DAS_Relational::executeQuery";i:1;s:3:"(^)";i:2;s:123:"SDODataObject SDO_DAS_Relational::executeQuery ( PDO $database_handle, string $SQL_statement [, array $column_specifier ] )";i:3;s:193:"Executes a given query against the relational database, using the supplied PDO database handle. Uses the model that it built from the metadata to interpret the result set. Returns a data graph.";}
a:4:{i:0;s:21:"SDO_DAS_XML::addTypes";i:1;s:3:"(^)";i:2;s:47:"void SDO_DAS_XML::addTypes ( string $xsd_file )";i:3;s:334:"Load a second or subsequent schema file to an XML DAS that has already been created with the static method . Although the file may be any valid schema file, a likely reason for using this method is to add a schema file containing definitions of extra complex types, hence the name. See Example 4 of the parent document for an example.";}
a:4:{i:0;s:19:"SDO_DAS_XML::create";i:1;s:3:"(^)";i:2;s:70:"SDO_DAS_XML SDO_DAS_XML::create ([ mixed $xsd_file [, string $key ]] )";i:3;s:92:"This is the only static method of SDO_DAS_XML class. Used to instantiate SDO_DAS_XML object.";}
a:4:{i:0;s:29:"SDO_DAS_XML::createDataObject";i:1;s:3:"(^)";i:2;s:89:"SDO_DataObject SDO_DAS_XML::createDataObject ( string $namespace_uri, string $type_name )";i:3;s:166:"Creates SDO_DataObject for a given namespace URI and type name. The type should be defined in the underlying model otherwise SDO_TypeNotFoundException will be thrown.";}
a:4:{i:0;s:27:"SDO_DAS_XML::createDocument";i:1;s:3:"(^)";i:2;s:85:"SDO_DAS_XML_Document SDO_DAS_XML::createDocument ([ string $document_element_name ] )";i:3;s:447:"Creates an XML Document object. This will contain just one empty root element on which none of the properties will have been set. The purpose of this call is to allow an application to create an XML document from scratch without the need to load a document from a file or string. The document that is created will be as if a document had been loaded that contained just a single empty document element with no attributes set or elements within it.";}
a:4:{i:0;s:21:"SDO_DAS_XML::loadFile";i:1;s:3:"(^)";i:2;s:58:"SDO_XMLDocument SDO_DAS_XML::loadFile ( string $xml_file )";i:3;s:200:"Constructs the tree of SDO_DataObjects from the given address to xml instance document. Returns SDO_DAS_XML_Document Object. Use SDO_DAS_XML_Document::getRootDataObject method to get root data object.";}
a:4:{i:0;s:23:"SDO_DAS_XML::loadString";i:1;s:3:"(^)";i:2;s:67:"SDO_DAS_XML_Document SDO_DAS_XML::loadString ( string $xml_string )";i:3;s:187:"Constructs the tree of SDO_DataObjects from the given xml instance string. Returns SDO_DAS_XML_Document Object. Use SDO_DAS_XML_Document::getRootDataObject method to get root data object.";}
a:4:{i:0;s:21:"SDO_DAS_XML::saveFile";i:1;s:3:"(^)";i:2;s:87:"void SDO_DAS_XML::saveFile ( SDO_XMLDocument $xdoc, string $xml_file [, int $indent ] )";i:3;s:48:"Saves the SDO_DAS_XML_Document object to a file.";}
a:4:{i:0;s:23:"SDO_DAS_XML::saveString";i:1;s:3:"(^)";i:2;s:73:"string SDO_DAS_XML::saveString ( SDO_XMLDocument $xdoc [, int $indent ] )";i:3;s:48:"Saves the SDO_DAS_XML_Document object to string.";}
a:4:{i:0;s:39:"SDO_DAS_XML_Document::getRootDataObject";i:1;s:3:"(^)";i:2;s:63:"SDO_DataObject SDO_DAS_XML_Document::getRootDataObject ( void )";i:3;s:32:"Returns the root SDO_DataObject.";}
a:4:{i:0;s:40:"SDO_DAS_XML_Document::getRootElementName";i:1;s:3:"(^)";i:2;s:56:"string SDO_DAS_XML_Document::getRootElementName ( void )";i:3;s:28:"Returns root element's name.";}
a:4:{i:0;s:39:"SDO_DAS_XML_Document::getRootElementURI";i:1;s:3:"(^)";i:2;s:55:"string SDO_DAS_XML_Document::getRootElementURI ( void )";i:3;s:34:"Returns root element's URI string.";}
a:4:{i:0;s:33:"SDO_DAS_XML_Document::setEncoding";i:1;s:3:"(^)";i:2;s:59:"void SDO_DAS_XML_Document::setEncoding ( string $encoding )";i:3;s:34:"Sets the given string as encoding.";}
a:4:{i:0;s:39:"SDO_DAS_XML_Document::setXMLDeclaration";i:1;s:3:"(^)";i:2;s:69:"void SDO_DAS_XML_Document::setXMLDeclaration ( bool $xmlDeclatation )";i:3;s:146:"Controls whether an XML declaration will be generated at the start of the XML document. Set to to generate the XML declaration, or to suppress it.";}
a:4:{i:0;s:35:"SDO_DAS_XML_Document::setXMLVersion";i:1;s:3:"(^)";i:2;s:63:"void SDO_DAS_XML_Document::setXMLVersion ( string $xmlVersion )";i:3;s:37:"Sets the given string as xml version.";}
a:4:{i:0;s:30:"SimpleXMLElement::addAttribute";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:100:"public void SimpleXMLElement::addAttribute ( string $name [, string $value [, string $namespace ]] )";i:3;s:43:"Adds an attribute to the SimpleXML element.";}
a:4:{i:0;s:26:"SimpleXMLElement::addChild";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:108:"public SimpleXMLElement SimpleXMLElement::addChild ( string $name [, string $value [, string $namespace ]] )";i:3;s:77:"Adds a child element to the node and returns a SimpleXMLElement of the child.";}
a:4:{i:0;s:23:"SimpleXMLElement::asXML";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:60:"public mixed SimpleXMLElement::asXML ([ string $filename ] )";i:3;s:63:"The method formats the parent object's data in XML version 1.0.";}
a:4:{i:0;s:28:"SimpleXMLElement::attributes";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:105:"public SimpleXMLElement SimpleXMLElement::attributes ([ string $ns = NULL [, bool $is_prefix = false ]] )";i:3;s:75:"This function provides the attributes and values defined within an xml tag.";}
a:4:{i:0;s:26:"SimpleXMLElement::children";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:96:"public SimpleXMLElement SimpleXMLElement::children ([ string $ns [, bool $is_prefix = false ]] )";i:3;s:88:"This method finds the children of an element. The result follows normal iteration rules.";}
a:4:{i:0;s:29:"SimpleXMLElement::__construct";i:1;s:16:"(PHP 5 >= 5.0.1)";i:2;s:161:"final public SimpleXMLElement::__construct() ( string $data [, int $options = 0 [, bool $data_is_url = false [, string $ns = "" [, bool $is_prefix = false ]]]] )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:23:"SimpleXMLElement::count";i:1;s:16:"(PHP 5 >= 5.3.0)";i:2;s:43:"public int SimpleXMLElement::count ( void )";i:3;s:56:"This method counts the number of children of an element.";}
a:4:{i:0;s:34:"SimpleXMLElement::getDocNamespaces";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:105:"public array SimpleXMLElement::getDocNamespaces ([ bool $recursive = false [, bool $from_root = true ]] )";i:3;s:39:"Returns namespaces declared in document";}
a:4:{i:0;s:25:"SimpleXMLElement::getName";i:1;s:16:"(PHP 5 >= 5.1.3)";i:2;s:48:"public string SimpleXMLElement::getName ( void )";i:3;s:33:"Gets the name of the XML element.";}
a:4:{i:0;s:31:"SimpleXMLElement::getNamespaces";i:1;s:16:"(PHP 5 >= 5.1.2)";i:2;s:75:"public array SimpleXMLElement::getNamespaces ([ bool $recursive = false ] )";i:3;s:35:"Returns namespaces used in document";}
a:4:{i:0;s:40:"SimpleXMLElement::registerXPathNamespace";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:83:"public bool SimpleXMLElement::registerXPathNamespace ( string $prefix, string $ns )";i:3;s:343:"Creates a prefix/ns context for the next XPath query. In particular, this is helpful if the provider of the given XML document alters the namespace prefixes. will create a prefix for the associated namespace, allowing one to access nodes in that namespace without the need to change code to allow for the new prefixes dictated by the provider.";}
a:4:{i:0;s:25:"SimpleXMLElement::saveXML";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:0:"";i:3;s:27:"This method is an alias of:";}
a:4:{i:0;s:23:"SimpleXMLElement::xpath";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:53:"public array SimpleXMLElement::xpath ( string $path )";i:3;s:66:"The method searches the SimpleXML node for children matching the .";}
a:4:{i:0;s:26:"SimpleXMLIterator::current";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:48:"public mixed SimpleXMLIterator::current ( void )";i:3;s:56:"This method returns the current element as a object or .";}
a:4:{i:0;s:30:"SimpleXMLIterator::getChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:64:"public SimpleXMLIterator SimpleXMLIterator::getChildren ( void )";i:3;s:76:"This method returns a object containing sub-elements of the current element.";}
a:4:{i:0;s:30:"SimpleXMLIterator::hasChildren";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:51:"public bool SimpleXMLIterator::hasChildren ( void )";i:3;s:64:"This method checks whether the current element has sub-elements.";}
a:4:{i:0;s:22:"SimpleXMLIterator::key";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public mixed SimpleXMLIterator::key ( void )";i:3;s:57:"This method gets the XML tag name of the current element.";}
a:4:{i:0;s:23:"SimpleXMLIterator::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:44:"public void SimpleXMLIterator::next ( void )";i:3;s:42:"This method moves the to the next element.";}
a:4:{i:0;s:25:"SimpleXMLIterator::rewind";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:46:"public void SimpleXMLIterator::rewind ( void )";i:3;s:45:"This method rewinds the to the first element.";}
a:4:{i:0;s:24:"SimpleXMLIterator::valid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public bool SimpleXMLIterator::valid ( void )";i:3;s:70:"This method checks if the current element is valid after calls to or .";}
a:4:{i:0;s:20:"simplexml_import_dom";i:1;s:7:"(PHP 5)";i:2;s:100:"SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] )";i:3;s:140:"This function takes a node of a document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element.";}
a:4:{i:0;s:19:"simplexml_load_file";i:1;s:7:"(PHP 5)";i:2;s:171:"SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false ]]]] )";i:3;s:68:"Convert the well-formed XML document in the given file to an object.";}
a:4:{i:0;s:21:"simplexml_load_string";i:1;s:7:"(PHP 5)";i:2;s:169:"SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false ]]]] )";i:3;s:59:"Takes a well-formed XML string and returns it as an object.";}
a:4:{i:0;s:13:"wddx_add_vars";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:75:"bool wddx_add_vars ( resource $packet_id, mixed $var_name [, mixed $... ] )";i:3;s:71:"Serializes the passed variables and add the result to the given packet.";}
a:4:{i:0;s:16:"wddx_deserialize";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"mixed wddx_deserialize ( string $packet )";i:3;s:21:"Unserializes a WDDX .";}
a:4:{i:0;s:15:"wddx_packet_end";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:46:"string wddx_packet_end ( resource $packet_id )";i:3;s:39:"Ends and returns the given WDDX packet.";}
a:4:{i:0;s:17:"wddx_packet_start";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:49:"resource wddx_packet_start ([ string $comment ] )";i:3;s:154:"Start a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables.";}
a:4:{i:0;s:20:"wddx_serialize_value";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:63:"string wddx_serialize_value ( mixed $var [, string $comment ] )";i:3;s:48:"Creates a WDDX packet from a single given value.";}
a:4:{i:0;s:19:"wddx_serialize_vars";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:62:"string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )";i:3;s:107:"Creates a WDDX packet with a structure that contains the serialized representation of the passed variables.";}
a:4:{i:0;s:11:"utf8_decode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string utf8_decode ( string $data )";i:3;s:50:"This function decodes, assumed to be encoded, to .";}
a:4:{i:0;s:11:"utf8_encode";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:35:"string utf8_encode ( string $data )";i:3;s:425:"This function encodes the string to, and returns the encoded version. is a standard mechanism used by for encoding values into a byte stream. is transparent to plain characters, is self-synchronized (meaning it is possible for a program to figure out where in the bytestream characters start) and can be used with normal string comparison functions for sorting and such. PHP encodes characters in up to four bytes, like this:";}
a:4:{i:0;s:16:"xml_error_string";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:37:"string xml_error_string ( int $code )";i:3;s:60:"Gets the XML parser error string associated with the given .";}
a:4:{i:0;s:26:"xml_get_current_byte_index";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:51:"int xml_get_current_byte_index ( resource $parser )";i:3;s:52:"Gets the current byte index of the given XML parser.";}
a:4:{i:0;s:29:"xml_get_current_column_number";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:54:"int xml_get_current_column_number ( resource $parser )";i:3;s:55:"Gets the current column number of the given XML parser.";}
a:4:{i:0;s:27:"xml_get_current_line_number";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:52:"int xml_get_current_line_number ( resource $parser )";i:3;s:54:"Gets the current line number for the given XML parser.";}
a:4:{i:0;s:18:"xml_get_error_code";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:43:"int xml_get_error_code ( resource $parser )";i:3;s:31:"Gets the XML parser error code.";}
a:4:{i:0;s:21:"xml_parse_into_struct";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:95:"int xml_parse_into_struct ( resource $parser, string $data, array &$values [, array &$index ] )";i:3;s:206:"This function parses an XML string into 2 parallel array structures, one () containing pointers to the location of the appropriate values in the array. These last two parameters must be passed by reference.";}
a:4:{i:0;s:9:"xml_parse";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:76:"int xml_parse ( resource $parser, string $data [, bool $is_final = false ] )";i:3;s:101:"parses an XML document. The handlers for the configured events are called as many times as necessary.";}
a:4:{i:0;s:20:"xml_parser_create_ns";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:81:"resource xml_parser_create_ns ([ string $encoding [, string $separator = ':' ]] )";i:3;s:135:"creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.";}
a:4:{i:0;s:17:"xml_parser_create";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:50:"resource xml_parser_create ([ string $encoding ] )";i:3;s:108:"creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.";}
a:4:{i:0;s:15:"xml_parser_free";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:41:"bool xml_parser_free ( resource $parser )";i:3;s:21:"Frees the given XML .";}
a:4:{i:0;s:21:"xml_parser_get_option";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:61:"mixed xml_parser_get_option ( resource $parser, int $option )";i:3;s:40:"Gets an option value from an XML parser.";}
a:4:{i:0;s:21:"xml_parser_set_option";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"bool xml_parser_set_option ( resource $parser, int $option, mixed $value )";i:3;s:32:"Sets an option in an XML parser.";}
a:4:{i:0;s:30:"xml_set_character_data_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:75:"bool xml_set_character_data_handler ( resource $parser, callable $handler )";i:3;s:61:"Sets the character data handler function for the XML parser .";}
a:4:{i:0;s:23:"xml_set_default_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:68:"bool xml_set_default_handler ( resource $parser, callable $handler )";i:3;s:54:"Sets the default handler function for the XML parser .";}
a:4:{i:0;s:23:"xml_set_element_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:113:"bool xml_set_element_handler ( resource $parser, callable $start_element_handler, callable $end_element_handler )";i:3;s:135:"Sets the element handler functions for the XML . and are strings containing the names of functions that must exist when is called for .";}
a:4:{i:0;s:34:"xml_set_end_namespace_decl_handler";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:79:"bool xml_set_end_namespace_decl_handler ( resource $parser, callable $handler )";i:3;s:216:"Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.";}
a:4:{i:0;s:35:"xml_set_external_entity_ref_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:80:"bool xml_set_external_entity_ref_handler ( resource $parser, callable $handler )";i:3;s:72:"Sets the external entity reference handler function for the XML parser .";}
a:4:{i:0;s:29:"xml_set_notation_decl_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:74:"bool xml_set_notation_decl_handler ( resource $parser, callable $handler )";i:3;s:67:"Sets the notation declaration handler function for the XML parser .";}
a:4:{i:0;s:14:"xml_set_object";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:57:"bool xml_set_object ( resource $parser, object &$object )";i:3;s:112:"This function allows to use inside . All callback functions could be set with etc and assumed to be methods of .";}
a:4:{i:0;s:38:"xml_set_processing_instruction_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:83:"bool xml_set_processing_instruction_handler ( resource $parser, callable $handler )";i:3;s:74:"Sets the processing instruction (PI) handler function for the XML parser .";}
a:4:{i:0;s:36:"xml_set_start_namespace_decl_handler";i:1;s:23:"(PHP 4 >= 4.0.5, PHP 5)";i:2;s:81:"bool xml_set_start_namespace_decl_handler ( resource $parser, callable $handler )";i:3;s:234:"Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag.";}
a:4:{i:0;s:36:"xml_set_unparsed_entity_decl_handler";i:1;s:14:"(PHP 4, PHP 5)";i:2;s:81:"bool xml_set_unparsed_entity_decl_handler ( resource $parser, callable $handler )";i:3;s:74:"Sets the unparsed entity declaration handler function for the XML parser .";}
a:4:{i:0;s:16:"XMLReader::close";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:37:"public bool XMLReader::close ( void )";i:3;s:59:"Closes the input the XMLReader object is currently parsing.";}
a:4:{i:0;s:17:"XMLReader::expand";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public DOMNode XMLReader::expand ([ DOMNode $basenode ] )";i:3;s:75:"This method copies the current node and returns the appropriate DOM object.";}
a:4:{i:0;s:23:"XMLReader::getAttribute";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:54:"public string XMLReader::getAttribute ( string $name )";i:3;s:111:"Returns the value of a named attribute or if the attribute does not exist or not positioned on an element node.";}
a:4:{i:0;s:25:"XMLReader::getAttributeNo";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:54:"public string XMLReader::getAttributeNo ( int $index )";i:3;s:140:"Returns the value of an attribute based on its position or an empty string if attribute does not exist or not positioned on an element node.";}
a:4:{i:0;s:25:"XMLReader::getAttributeNs";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:83:"public string XMLReader::getAttributeNs ( string $localName, string $namespaceURI )";i:3;s:144:"Returns the value of an attribute by name and namespace URI or an empty string if attribute does not exist or not positioned on an element node.";}
a:4:{i:0;s:28:"XMLReader::getParserProperty";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:58:"public bool XMLReader::getParserProperty ( int $property )";i:3;s:45:"Indicates if specified property has been set.";}
a:4:{i:0;s:18:"XMLReader::isValid";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:39:"public bool XMLReader::isValid ( void )";i:3;s:77:"Returns a boolean indicating if the document being parsed is currently valid.";}
a:4:{i:0;s:26:"XMLReader::lookupNamespace";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:57:"public bool XMLReader::lookupNamespace ( string $prefix )";i:3;s:45:"Lookup in scope namespace for a given prefix.";}
a:4:{i:0;s:26:"XMLReader::moveToAttribute";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:55:"public bool XMLReader::moveToAttribute ( string $name )";i:3;s:40:"Positions cursor on the named attribute.";}
a:4:{i:0;s:28:"XMLReader::moveToAttributeNo";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:55:"public bool XMLReader::moveToAttributeNo ( int $index )";i:3;s:52:"Positions cursor on attribute based on its position.";}
a:4:{i:0;s:28:"XMLReader::moveToAttributeNs";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:84:"public bool XMLReader::moveToAttributeNs ( string $localName, string $namespaceURI )";i:3;s:63:"Positions cursor on the named attribute in specified namespace.";}
a:4:{i:0;s:24:"XMLReader::moveToElement";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:45:"public bool XMLReader::moveToElement ( void )";i:3;s:56:"Moves cursor to the parent Element of current Attribute.";}
a:4:{i:0;s:31:"XMLReader::moveToFirstAttribute";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:52:"public bool XMLReader::moveToFirstAttribute ( void )";i:3;s:36:"Moves cursor to the first Attribute.";}
a:4:{i:0;s:30:"XMLReader::moveToNextAttribute";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:51:"public bool XMLReader::moveToNextAttribute ( void )";i:3;s:121:"Moves cursor to the next Attribute if positioned on an Attribute or moves to first attribute if positioned on an Element.";}
a:4:{i:0;s:15:"XMLReader::next";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:52:"public bool XMLReader::next ([ string $localname ] )";i:3;s:56:"Positions cursor on the next node skipping all subtrees.";}
a:4:{i:0;s:15:"XMLReader::open";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:86:"public bool XMLReader::open ( string $URI [, string $encoding [, int $options = 0 ]] )";i:3;s:53:"Set the URI containing the XML document to be parsed.";}
a:4:{i:0;s:15:"XMLReader::read";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:36:"public bool XMLReader::read ( void )";i:3;s:46:"Moves cursor to the next node in the document.";}
a:4:{i:0;s:23:"XMLReader::readInnerXML";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:46:"public string XMLReader::readInnerXML ( void )";i:3;s:73:"Reads the contents of the current node, including child nodes and markup.";}
a:4:{i:0;s:23:"XMLReader::readOuterXML";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:46:"public string XMLReader::readOuterXML ( void )";i:3;s:66:"Reads the contents of the current node, including the node itself.";}
a:4:{i:0;s:21:"XMLReader::readString";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:44:"public string XMLReader::readString ( void )";i:3;s:51:"Reads the contents of the current node as a string.";}
a:4:{i:0;s:28:"XMLReader::setParserProperty";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:71:"public bool XMLReader::setParserProperty ( int $property, bool $value )";i:3;s:90:"Set parser options. The options must be set after or are called and before the first call.";}
a:4:{i:0;s:27:"XMLReader::setRelaxNGSchema";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:60:"public bool XMLReader::setRelaxNGSchema ( string $filename )";i:3;s:69:"Set the filename or URI for the RelaxNG Schema to use for validation.";}
a:4:{i:0;s:33:"XMLReader::setRelaxNGSchemaSource";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:64:"public bool XMLReader::setRelaxNGSchemaSource ( string $source )";i:3;s:63:"Set the data containing a RelaxNG Schema to use for validation.";}
a:4:{i:0;s:20:"XMLReader::setSchema";i:1;s:16:"(PHP 5 >= 5.2.0)";i:2;s:53:"public bool XMLReader::setSchema ( string $filename )";i:3;s:116:"Use W3C XSD schema to validate the document as it is processed. Activation is only possible before the first Read().";}
a:4:{i:0;s:14:"XMLReader::XML";i:1;s:16:"(PHP 5 >= 5.1.0)";i:2;s:88:"public bool XMLReader::xml ( string $source [, string $encoding [, int $options = 0 ]] )";i:3;s:41:"Set the data containing the XML to parse.";}
a:4:{i:0;s:23:"XMLWriter::endAttribute";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:37:"bool XMLWriter::endAttribute ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"XMLWriter::endCData";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:33:"bool XMLWriter::endCData ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"XMLWriter::endComment";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
1.0.0)";i:2;s:35:"bool XMLWriter::endComment ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:22:"XMLWriter::endDocument";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:36:"bool XMLWriter::endDocument ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"XMLWriter::endDTDAttlist";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:38:"bool XMLWriter::endDTDAttlist ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"XMLWriter::endDTDElement";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:38:"bool XMLWriter::endDTDElement ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"XMLWriter::endDTDEntity";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:37:"bool XMLWriter::endDTDEntity ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:17:"XMLWriter::endDTD";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:31:"bool XMLWriter::endDTD ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"XMLWriter::endElement";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:35:"bool XMLWriter::endElement ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:16:"XMLWriter::endPI";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:30:"bool XMLWriter::endPI ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:16:"XMLWriter::flush";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
1.0.0)";i:2;s:48:"mixed XMLWriter::flush ([ bool $empty = true ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"XMLWriter::fullEndElement";i:1;s:41:"(PHP 5 >= 5.2.0, PECL xmlwriter >=
2.0.4)";i:2;s:39:"bool XMLWriter::fullEndElement ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"XMLWriter::openMemory";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:35:"bool XMLWriter::openMemory ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"XMLWriter::openURI";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:39:"bool XMLWriter::openURI ( string $uri )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"XMLWriter::outputMemory";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:56:"string XMLWriter::outputMemory ([ bool $flush = true ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"XMLWriter::setIndentString";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:56:"bool XMLWriter::setIndentString ( string $indentString )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:20:"XMLWriter::setIndent";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:42:"bool XMLWriter::setIndent ( bool $indent )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"XMLWriter::startAttributeNS";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:78:"bool XMLWriter::startAttributeNS ( string $prefix, string $name, string $uri )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"XMLWriter::startAttribute";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:47:"bool XMLWriter::startAttribute ( string $name )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"XMLWriter::startCData";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:35:"bool XMLWriter::startCData ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"XMLWriter::startComment";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
1.0.0)";i:2;s:37:"bool XMLWriter::startComment ( void )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:24:"XMLWriter::startDocument";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:109:"bool XMLWriter::startDocument ([ string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"XMLWriter::startDTDAttlist";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:48:"bool XMLWriter::startDTDAttlist ( string $name )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"XMLWriter::startDTDElement";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:57:"bool XMLWriter::startDTDElement ( string $qualifiedName )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"XMLWriter::startDTDEntity";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:62:"bool XMLWriter::startDTDEntity ( string $name, bool $isparam )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"XMLWriter::startDTD";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:93:"bool XMLWriter::startDTD ( string $qualifiedName [, string $publicId [, string $systemId ]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"XMLWriter::startElementNS";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:76:"bool XMLWriter::startElementNS ( string $prefix, string $name, string $uri )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"XMLWriter::startElement";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:45:"bool XMLWriter::startElement ( string $name )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"XMLWriter::startPI";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:42:"bool XMLWriter::startPI ( string $target )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:15:"XMLWriter::text";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:40:"bool XMLWriter::text ( string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:27:"XMLWriter::writeAttributeNS";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:95:"bool XMLWriter::writeAttributeNS ( string $prefix, string $name, string $uri, string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"XMLWriter::writeAttribute";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:62:"bool XMLWriter::writeAttribute ( string $name, string $value )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:21:"XMLWriter::writeCData";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:46:"bool XMLWriter::writeCData ( string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"XMLWriter::writeComment";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:48:"bool XMLWriter::writeComment ( string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"XMLWriter::writeDTDAttlist";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:65:"bool XMLWriter::writeDTDAttlist ( string $name, string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"XMLWriter::writeDTDElement";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:65:"bool XMLWriter::writeDTDElement ( string $name, string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"XMLWriter::writeDTDEntity";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:121:"bool XMLWriter::writeDTDEntity ( string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"XMLWriter::writeDTD";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:103:"bool XMLWriter::writeDTD ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:25:"XMLWriter::writeElementNS";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:97:"bool XMLWriter::writeElementNS ( string $prefix, string $name, string $uri [, string $content ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:23:"XMLWriter::writeElement";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:66:"bool XMLWriter::writeElement ( string $name [, string $content ] )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:18:"XMLWriter::writePI";i:1;s:41:"(PHP 5 >= 5.1.2, PECL xmlwriter >=
0.1.0)";i:2;s:59:"bool XMLWriter::writePI ( string $target, string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:19:"XMLWriter::writeRaw";i:1;s:41:"(PHP 5 >= 5.2.0, PECL xmlwriter >=
2.0.4)";i:2;s:44:"bool XMLWriter::writeRaw ( string $content )";i:3;s:21:"Object oriented style";}
a:4:{i:0;s:26:"XSLTProcessor::__construct";i:1;s:7:"(PHP 5)";i:2;s:37:"XSLTProcessor::__construct() ( void )";i:3;s:21:"Creates a new object.";}
a:4:{i:0;s:27:"XSLTProcessor::getParameter";i:1;s:7:"(PHP 5)";i:2;s:78:"string XSLTProcessor::getParameter ( string $namespaceURI, string $localName )";i:3;s:39:"Gets a parameter if previously set by .";}
a:4:{i:0;s:31:"XsltProcessor::getSecurityPrefs";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:51:"public int XsltProcessor::getSecurityPrefs ( void )";i:3;s:0:"";}
a:4:{i:0;s:30:"XSLTProcessor::hasExsltSupport";i:1;s:16:"(PHP 5 >= 5.0.4)";i:2;s:44:"bool XSLTProcessor::hasExsltSupport ( void )";i:3;s:50:"This method determines if PHP was built with the .";}
a:4:{i:0;s:31:"XSLTProcessor::importStylesheet";i:1;s:7:"(PHP 5)";i:2;s:59:"void XSLTProcessor::importStylesheet ( object $stylesheet )";i:3;s:64:"This method imports the stylesheet into the for transformations.";}
a:4:{i:0;s:35:"XSLTProcessor::registerPHPFunctions";i:1;s:16:"(PHP 5 >= 5.0.4)";i:2;s:63:"void XSLTProcessor::registerPHPFunctions ([ mixed $restrict ] )";i:3;s:94:"This method enables the ability to use PHP functions as XSLT functions within XSL stylesheets.";}
a:4:{i:0;s:30:"XSLTProcessor::removeParameter";i:1;s:7:"(PHP 5)";i:2;s:79:"bool XSLTProcessor::removeParameter ( string $namespaceURI, string $localName )";i:3;s:129:"Removes a parameter, if set. This will make the processor use the default value for the parameter as specified in the stylesheet.";}
a:4:{i:0;s:27:"XSLTProcessor::setParameter";i:1;s:7:"(PHP 5)";i:2;s:83:"bool XSLTProcessor::setParameter ( string $namespace, string $name, string $value )";i:3;s:157:"Sets the value of one or more parameters to be used in subsequent transformations with . If the parameter doesn't exist in the stylesheet it will be ignored.";}
a:4:{i:0;s:27:"XSLTProcessor::setProfiling";i:1;s:14:"(PHP >= 5.3.0)";i:2;s:53:"bool XSLTProcessor::setProfiling ( string $filename )";i:3;s:75:"Sets the file to output profiling information when processing a stylesheet.";}
a:4:{i:0;s:31:"XsltProcessor::setSecurityPrefs";i:1;s:14:"(PHP >= 5.4.0)";i:2;s:65:"public int XsltProcessor::setSecurityPrefs ( int $securityPrefs )";i:3;s:0:"";}
a:4:{i:0;s:29:"XSLTProcessor::transformToDoc";i:1;s:7:"(PHP 5)";i:2;s:58:"DOMDocument XSLTProcessor::transformToDoc ( DOMNode $doc )";i:3;s:76:"Transforms the source node to a applying the stylesheet given by the method.";}
a:4:{i:0;s:29:"XSLTProcessor::transformToUri";i:1;s:7:"(PHP 5)";i:2;s:67:"int XSLTProcessor::transformToURI ( DOMDocument $doc, string $uri )";i:3;s:81:"Transforms the source node to an URI applying the stylesheet given by the method.";}
a:4:{i:0;s:29:"XSLTProcessor::transformToXML";i:1;s:7:"(PHP 5)";i:2;s:57:"string XSLTProcessor::transformToXML ( DOMDocument $doc )";i:3;s:83:"Transforms the source node to a string applying the stylesheet given by the method.";}
a:4:{i:0;s:17:"xslt_backend_info";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:33:"string xslt_backend_info ( void )";i:3;s:63:"gets information about the compilation settings of the backend.";}
a:4:{i:0;s:17:"xslt_backend_name";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:33:"string xslt_backend_name ( void )";i:3;s:29:"gets the name of the backend.";}
a:4:{i:0;s:20:"xslt_backend_version";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:36:"string xslt_backend_version ( void )";i:3;s:28:"gets the version number of .";}
a:4:{i:0;s:11:"xslt_create";i:1;s:16:"(PHP 4 >= 4.0.3)";i:2;s:29:"resource xslt_create ( void )";i:3;s:93:"Create and return a new XSLT processor resource for manipulation by the other XSLT functions.";}
a:4:{i:0;s:10:"xslt_errno";i:1;s:16:"(PHP 4 >= 4.0.3)";i:2;s:31:"int xslt_errno ( resource $xh )";i:3;s:86:"Returns an error code describing the last error that occurred on the passed processor.";}
a:4:{i:0;s:10:"xslt_error";i:1;s:16:"(PHP 4 >= 4.0.3)";i:2;s:34:"string xslt_error ( resource $xh )";i:3;s:86:"Returns a string describing the last error that occurred on the passed XSLT processor.";}
a:4:{i:0;s:9:"xslt_free";i:1;s:16:"(PHP 4 >= 4.0.3)";i:2;s:31:"void xslt_free ( resource $xh )";i:3;s:55:"Free the XSLT processor identified by the given handle.";}
a:4:{i:0;s:11:"xslt_getopt";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:39:"int xslt_getopt ( resource $processor )";i:3;s:34:"returns the options on the given .";}
a:4:{i:0;s:12:"xslt_process";i:1;s:16:"(PHP 4 >= 4.0.3)";i:2;s:151:"mixed xslt_process ( resource $xh, string $xmlcontainer, string $xslcontainer [, string $resultcontainer [, array $arguments [, array $parameters ]]] )";i:3;s:378:"The function is the crux of the extension. It allows you to perform an transformation using almost any type of input source - the containers. This is accomplished through the use of argument buffers -- a concept taken from the processor (currently the only processor this extension supports). The input containers default to a filename 'containing' the document to be processed.";}
a:4:{i:0;s:13:"xslt_set_base";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:48:"void xslt_set_base ( resource $xh, string $uri )";i:3;s:215:"Sets the base URI for all transformations, the base URI is used with Xpath instructions to resolve document() and other commands which access external resources. It is also used to resolve URIs for the and elements.";}
a:4:{i:0;s:17:"xslt_set_encoding";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:57:"void xslt_set_encoding ( resource $xh, string $encoding )";i:3;s:142:"Set the output encoding for the transformations. When using the backend, this option is only available when you compile with encoding support.";}
a:4:{i:0;s:22:"xslt_set_error_handler";i:1;s:16:"(PHP 4 >= 4.0.4)";i:2;s:60:"void xslt_set_error_handler ( resource $xh, mixed $handler )";i:3;s:177:"Set an error handler function for the processor given by, this function will be called whenever an error occurs in the transformation (this function is also called for notices).";}
a:4:{i:0;s:12:"xslt_set_log";i:1;s:16:"(PHP 4 >= 4.0.6)";i:2;s:50:"void xslt_set_log ( resource $xh [, mixed $log ] )";i:3;s:293:"This function allows you to set the file in which you want log messages to, log messages are different than error messages, in that log messages are not actually error messages but rather messages related to the state of the processor. They are useful for debugging, when something goes wrong.";}
a:4:{i:0;s:15:"xslt_set_object";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:58:"bool xslt_set_object ( resource $processor, object &$obj )";i:3;s:86:"This function allows to use the inside an and to resolve all callback functions in it.";}
a:4:{i:0;s:20:"xslt_set_sax_handler";i:1;s:16:"(PHP 4 >= 4.0.3)";i:2;s:59:"void xslt_set_sax_handler ( resource $xh, array $handlers )";i:3;s:50:"Set SAX handlers on the resource handle given by .";}
a:4:{i:0;s:21:"xslt_set_sax_handlers";i:1;s:16:"(PHP 4 >= 4.0.6)";i:2;s:67:"void xslt_set_sax_handlers ( resource $processor, array $handlers )";i:3;s:58:"registers the SAX for the document, given a XSLT resource.";}
a:4:{i:0;s:23:"xslt_set_scheme_handler";i:1;s:16:"(PHP 4 >= 4.0.5)";i:2;s:62:"void xslt_set_scheme_handler ( resource $xh, array $handlers )";i:3;s:53:"Set Scheme handlers on the resource handle given by .";}
a:4:{i:0;s:24:"xslt_set_scheme_handlers";i:1;s:16:"(PHP 4 >= 4.0.6)";i:2;s:63:"void xslt_set_scheme_handlers ( resource $xh, array $handlers )";i:3;s:64:"Registers the scheme handlers (XPath handlers) for the document.";}
a:4:{i:0;s:11:"xslt_setopt";i:1;s:16:"(PHP 4 >= 4.3.0)";i:2;s:55:"mixed xslt_setopt ( resource $processor, int $newmask )";i:3;s:44:"sets the options specified by on the given .";}
a:4:{i:0;s:20:"Counter::__construct";i:1;s:5:" â€” ";i:2;s:86:"Counter::__construct() ( string $name [, integer $initial_value [, integer $flags ]] )";i:3;s:72:"Creates an instance of a Counter which maintains a single numeric value.";}
a:4:{i:0;s:17:"Counter::getValue";i:1;s:5:" â€” ";i:2;s:34:"integer Counter::getValue ( void )";i:3;s:39:"returns the current value of a counter.";}
a:4:{i:0;s:18:"Counter::bumpValue";i:1;s:5:" â€” ";i:2;s:38:"Counter::bumpValue ( integer $offset )";i:3;s:39:"updates the current value of a counter.";}
a:4:{i:0;s:19:"Counter::resetValue";i:1;s:5:" â€” ";i:2;s:33:"void Counter::resetValue ( void )";i:3;s:68:"resets the current value of a counter to its original initial value.";}
a:4:{i:0;s:16:"Counter::getMeta";i:1;s:5:"
â€” ";i:2;s:45:"mixed Counter::getMeta ( integer $attribute )";i:3;s:40:"returns metainformation about a counter.";}
a:4:{i:0;s:17:"Counter::getNamed";i:1;s:5:" â€” ";i:2;s:49:"static Counter Counter::getNamed ( string $name )";i:3;s:97:"returns an existing counter by name if that name exists, or otherwise. This is a static function.";}
a:4:{i:0;s:24:"Counter::setCounterClass";i:1;s:5:" â€” ";i:2;s:53:"static void Counter::setCounterClass ( string $name )";i:3;s:210:"changes the class of objects returned by . The class being set must not have a public constructor and must be a subclass of . If these conditions are not met, a fatal error is raised. This is a static function.";}
a:4:{i:0;s:11:"counter_get";i:1;s:5:"
â€” ";i:2;s:28:"integer counter_get ( void )";i:3;s:59:"returns the current value of the basic interface's counter.";}
a:4:{i:0;s:12:"counter_bump";i:1;s:5:"
â€” ";i:2;s:37:"void counter_bump ( integer $offset )";i:3;s:59:"updates the current value of the basic interface's counter.";}
a:4:{i:0;s:13:"counter_reset";i:1;s:5:"
â€” ";i:2;s:27:"void counter_reset ( void )";i:3;s:88:"resets the current value of the basic interface's counter to its original initial value.";}
a:4:{i:0;s:14:"counter_create";i:1;s:5:"
â€” ";i:2;s:87:"resource counter_create ( string $name [, integer $initial_value [, integer $flags ]] )";i:3;s:57:"Creates a counter which maintains a single numeric value.";}
a:4:{i:0;s:17:"counter_get_value";i:1;s:5:" â€” ";i:2;s:47:"integer counter_get_value ( resource $counter )";i:3;s:48:"returns the current value of a counter resource.";}
a:4:{i:0;s:18:"counter_bump_value";i:1;s:5:" â€” ";i:2;s:62:"void counter_bump_value ( resource $counter, integer $offset )";i:3;s:48:"updates the current value of a counter resource.";}
a:4:{i:0;s:19:"counter_reset_value";i:1;s:5:" â€” ";i:2;s:46:"void counter_reset_value ( resource $counter )";i:3;s:77:"resets the current value of a counter resource to its original initial value.";}
a:4:{i:0;s:16:"counter_get_meta";i:1;s:5:"
â€” ";i:2;s:64:"mixed counter_get_meta ( resource $counter, integer $attribute )";i:3;s:49:"returns metainformation about a counter resource.";}
a:4:{i:0;s:17:"counter_get_named";i:1;s:5:" â€” ";i:2;s:43:"resource Counter::getNamed ( string $name )";i:3;s:70:"returns an existing counter by name if that name exists, or otherwise.";}
